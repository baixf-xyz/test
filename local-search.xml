<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JDBC学习</title>
    <link href="/2021/02/07/Java/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/02/07/Java/JDBC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL学习笔记（狂神说Java）"><a href="#MySQL学习笔记（狂神说Java）" class="headerlink" title="MySQL学习笔记（狂神说Java）"></a>MySQL学习笔记（狂神说Java）</h2><p>狂神说B站视频：<a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1">https://www.bilibili.com/video/BV1NJ411J79W?p=1</a></p><p>MySQL官网：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p><p>MySQL教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p><h3 id="一、数据库驱动"><a href="#一、数据库驱动" class="headerlink" title="一、数据库驱动"></a>一、数据库驱动</h3><p>驱动：声卡、显卡、数据库</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/u=2063724437,2103985919&amp;fm=26&amp;gp=0.jpg" alt="img"></p><p>我们的程序会通过数据库驱动和数据库打交道！</p><h3 id="二、JDBC"><a href="#二、JDBC" class="headerlink" title="二、JDBC"></a>二、JDBC</h3><p><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">Maven下载链接</a></p><p><a href="https://downloads.mysql.com/archives/c-j/">MySQL官网下载JDBC</a></p><h3 id="三、第一个JDBC程序"><a href="#三、第一个JDBC程序" class="headerlink" title="三、第一个JDBC程序"></a>三、第一个JDBC程序</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/process.jpg" alt="process"></p><h4 id="1-创建测试数据库"><a href="#1-创建测试数据库" class="headerlink" title="1.创建测试数据库"></a>1.创建测试数据库</h4><pre><code class="hljs mysql">-- JDBCCREATE DATABASE jdbcStudy CHARACTER SET utf8 COLLATE utf8_general_ci;USE jdbcStudy;CREATE TABLE &#96;users&#96;(id INT PRIMARY KEY,NAME VARCHAR(40),PASSWORD VARCHAR(40),email VARCHAR(60),birthday DATE);INSERT INTO &#96;users&#96;(id,NAME,PASSWORD,email,birthday)VALUES(1,&#39;zhansan&#39;,&#39;123456&#39;,&#39;zs@sina.com&#39;,&#39;1980-12-04&#39;),(2,&#39;lisi&#39;,&#39;123456&#39;,&#39;lisi@sina.com&#39;,&#39;1981-12-04&#39;),(3,&#39;wangwu&#39;,&#39;123456&#39;,&#39;wangwu@sina.com&#39;,&#39;1979-12-04&#39;)</code></pre><h4 id="2-导入数据库驱动"><a href="#2-导入数据库驱动" class="headerlink" title="2.导入数据库驱动"></a>2.导入数据库驱动</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207104736184.png" alt="image-20210207104736184"></p><h4 id="3-编写测试代码"><a href="#3-编写测试代码" class="headerlink" title="3.编写测试代码"></a>3.编写测试代码</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDBC;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class="hljs-comment">// 1 加载驱动</span>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="hljs-comment">//固定写法</span>        <span class="hljs-comment">// 2 url 和 用户信息</span>        <span class="hljs-comment">// useUnicode=true :使用Unicode编码 支持中文</span>        <span class="hljs-comment">// characterEncoding=utf8 :设定中文字符集为 UTF-8</span>        <span class="hljs-comment">// useSSL=true :使用安全的连接</span>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost|:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;        String username = <span class="hljs-string">&quot;root&quot;</span>;        String password = <span class="hljs-string">&quot;123456&quot;</span>;        <span class="hljs-comment">// 3 建立连接 connection代表数据库对象</span>        Connection connection = DriverManager.getConnection(url, username, password);        <span class="hljs-comment">// 4 新建 SQL操作对象</span>        Statement statement = connection.createStatement();        <span class="hljs-comment">// 5 执行 SQL操作对象</span>        String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;        ResultSet resultSet = statement.executeQuery(sql);<span class="hljs-comment">//链表类型，返回的结果集,结果集中封装了全部的查询对象</span>        <span class="hljs-keyword">while</span> (resultSet.next())&#123;            System.out.println(resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));            System.out.println(resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));            System.out.println(resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));            System.out.println(resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));            System.out.println(resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));            System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);        &#125;        <span class="hljs-comment">// 6 释放连接 后创建的先释放</span>        statement.close();        connection.close();        connection.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207104822012.png" alt="image-20210207104822012"></p><p><strong>步骤总结</strong>：  加载驱动 - 连接数据库(DriverManager) - 获取执行对象(Statement) - 获得返回结果集 - 释放连接</p><h4 id="4-常用对象分析"><a href="#4-常用对象分析" class="headerlink" title="4.常用对象分析"></a>4.常用对象分析</h4><h5 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h5><pre><code class="hljs java"><span class="hljs-comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="hljs-comment">//固定写法</span><span class="hljs-comment">//connection代表数据库对象</span>Connection connection = DriverManager.getConnection(url, username, password);connection.commit(); <span class="hljs-comment">//事务提交</span>connection.rollback();<span class="hljs-comment">//数据库回滚</span>connection.setAutoCommit();<span class="hljs-comment">//数据库设置自动提交</span></code></pre><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><pre><code class="hljs java">String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;<span class="hljs-comment">// useUnicode=true :使用Unicode编码 支持中文</span><span class="hljs-comment">// characterEncoding=utf8 :设定中文字符集为 UTF-8</span><span class="hljs-comment">// useSSL=true :使用安全的连接</span>jdbc:mysql<span class="hljs-comment">//主机地址:3306/数据库名?参数1&amp;参数2&amp;参数3</span>    <span class="hljs-comment">//musql - 3306 </span><span class="hljs-comment">//oralce - 1521</span><span class="hljs-comment">//jdbc:oralce:thin:@localhost:1521:sid</span></code></pre><h5 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h5><pre><code class="hljs java">PreparedStatement  <span class="hljs-comment">//同为执行SQL的对象</span><span class="hljs-comment">//新建 SQL对象</span>Statement statement = connection.createStatement();String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;<span class="hljs-comment">//编写SQL</span>statement.executeQuery(); <span class="hljs-comment">//查询操作，返回ResultSet数据集</span>statement.executeUpdate(); <span class="hljs-comment">//更新、插入、删除，返回受影响的行数</span>statement.execute(); <span class="hljs-comment">//执行任何SQL</span>statement.clearBatch(); <span class="hljs-comment">//执行SQL的批处理</span></code></pre><h5 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h5><pre><code class="hljs java"><span class="hljs-comment">//查询的结果集 封装了所有查询结果</span></code></pre><p><strong>获得指定数据类型</strong></p><pre><code class="hljs java"><span class="hljs-comment">//在不知道类类型的情况下使用，如果知道就用指定类型</span>resultSet.getObject(); resultSet.getDouble();resultSet.getString();resultSet.getFloat();resultSet.getInt();.....</code></pre><p><strong>遍历(指针)</strong></p><pre><code class="hljs java">resultSet.beforeFirst(); <span class="hljs-comment">//移动到最前面</span>resultSet.afterLast(); <span class="hljs-comment">//移动到最后面</span>resultSet.next(); <span class="hljs-comment">//移动到下一个数据</span>resultSet.previous(); <span class="hljs-comment">//移动到前一行</span>resultSet.absolute(row); <span class="hljs-comment">//移动到指定行</span></code></pre><p><strong>释放资源</strong></p><pre><code class="hljs java">statement.close();connection.close();connection.close();</code></pre><h3 id="四、statement对象"><a href="#四、statement对象" class="headerlink" title="四、statement对象"></a>四、statement对象</h3><p>JDBC中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化)。</p><p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p><h4 id="1-db-properties"><a href="#1-db-properties" class="headerlink" title="1.db.properties"></a>1.db.properties</h4><pre><code class="hljs java">driver=com.mysql.jdbc.Driverurl=jdbc:mysql:<span class="hljs-comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span>username=rootpassword=<span class="hljs-number">123456</span></code></pre><h4 id="2-jdbcUtils"><a href="#2-jdbcUtils" class="headerlink" title="2.jdbcUtils"></a>2.jdbcUtils</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.utils;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jdbcUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//返回一个输入流</span>            InputStream resourceAsStream = jdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);            Properties properties = <span class="hljs-keyword">new</span> Properties();            properties.load(resourceAsStream);            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);            <span class="hljs-comment">// 1 驱动只需要加载一次</span>            Class.forName(driver);        &#125;<span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">// 2 获取连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);    &#125;    <span class="hljs-comment">// 3 释放连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                resultSet.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (statement!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                statement.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (connection!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                connection.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h4 id="3-CRUD操作"><a href="#3-CRUD操作" class="headerlink" title="3.CRUD操作"></a>3.CRUD操作</h4><h5 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h5><blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作:</p></blockquote><pre><code class="hljs java">statement st = conn.createstatement(;string sq1 = <span class="hljs-string">&quot;insert into user(... . ) values .... . ) &quot;</span>;<span class="hljs-keyword">int</span> num = st.executeupdate(sq1);<span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;system.out.println(<span class="hljs-string">&quot;插入成功!!! &quot;</span>);&#125;</code></pre><h5 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h5><blockquote><p>使用executeQuery(String sql)方法完成数据查询操作，示例操作:</p></blockquote><pre><code class="hljs java">statement st = conn.createstatement(;string sql = <span class="hljs-string">&quot;select t from user where id=1&quot;</span>;Resu7tset rs = st.executeupdate(sq1);<span class="hljs-keyword">while</span>(rs.next(&#123;<span class="hljs-comment">//根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span>&#125;</code></pre><h5 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h5><blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作，示例操作:</p></blockquote><pre><code class="hljs java">statement st = conn. createstatementO;string sql = <span class="hljs-string">&quot;update user set name=&#x27;&quot;</span> where name=<span class="hljs-string">&#x27;&quot; &quot;;int num = st.executeupdate(sq1);</span><span class="hljs-string">if(num&gt;0)&#123;</span><span class="hljs-string">system.out.print1n(“修改成功!!! &quot;);</span><span class="hljs-string">&#125;</span></code></pre><h5 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h5><blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作，示例操作:</p></blockquote><pre><code class="hljs java">statement st = conn.createstatementO;string sql = <span class="hljs-string">&quot;delete from user where id=1&quot;</span>;<span class="hljs-keyword">int</span> num = st.executeupdate(sq1);<span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;system.out. println(“删除成功!!! <span class="hljs-string">&quot;);</span><span class="hljs-string">&#125;</span></code></pre><h4 id="4-编写增删改查操作"><a href="#4-编写增删改查操作" class="headerlink" title="4.编写增删改查操作"></a>4.编写增删改查操作</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><pre><code class="hljs java"><span class="hljs-comment">//插入数据</span><span class="hljs-keyword">package</span> com.baixf.lesson02;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.sql.Statement;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException ,NullPointerException</span>&#123;        Connection connection=<span class="hljs-keyword">null</span>;        Statement statement=<span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            connection = jdbcUtils.getConnection();<span class="hljs-comment">//获取数据库连接</span>            statement = connection.createStatement();<span class="hljs-comment">//获得SQL的执行对象</span>            String sql = <span class="hljs-string">&quot;INSERT INTO `users`(id,NAME,PASSWORD,email,birthday)&quot;</span> +                    <span class="hljs-string">&quot;VALUES(6,&#x27;wangwu&#x27;,&#x27;password&#x27;,&#x27;1813252727@qq.com&#x27;,&#x27;2020-12-25&#x27;)&quot;</span> ;            <span class="hljs-keyword">int</span> i = statement.executeUpdate(sql);            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);            &#125;        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">assert</span> statement != <span class="hljs-keyword">null</span>;            jdbcUtils.release(connection,statement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="C:%5CUsers%5CBai%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210207145206396.png" alt="image-20210207145206396"></p><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson02;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.sql.Statement;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection=<span class="hljs-keyword">null</span>;        Statement statement=<span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//创建数据库连接</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//获得 SQL对象</span>            statement = connection.createStatement();            <span class="hljs-comment">//编写 SQL语句</span>            String str = <span class="hljs-string">&quot;DELETE FROM users WHERE `ID`=6;&quot;</span>;            <span class="hljs-keyword">int</span> i = statement.executeUpdate(str);            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,statement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207145530714.png" alt="image-20210207145530714"></p><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson02;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.sql.Statement;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection=<span class="hljs-keyword">null</span>;        Statement statement=<span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//创建数据库连接</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//获得 SQL对象</span>            statement = connection.createStatement();            <span class="hljs-comment">//编写 SQL语句</span>            String str = <span class="hljs-string">&quot;UPDATE users SET `NAME`=&#x27;yanghongli&#x27;,`email`=&#x27;707401057@qq.com&#x27; WHERE `id`=5&quot;</span>;            <span class="hljs-keyword">int</span> i = statement.executeUpdate(str);            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,statement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207150416765.png" alt="image-20210207150416765"></p><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson02;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.sql.Statement;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection=<span class="hljs-keyword">null</span>;        Statement statement=<span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 建立连接</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">// 创建SQL对象</span>            statement = connection.createStatement();            <span class="hljs-comment">// 执行sql语句</span>            String str = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span>;            <span class="hljs-comment">// resultset接收数据集</span>            resultSet = statement.executeQuery(str);            <span class="hljs-keyword">while</span> (resultSet.next())&#123;                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));                System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,statement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207151759111.png" alt="image-20210207151759111"></p><h5 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h5><blockquote><p>SQL存在漏洞，会被攻击导致数据泄露，SQL会被拼接。</p><p>SQL注入是比较常见的网络攻击方式之一，它不是利用操作系统的BUG来实现攻击，而是针对程序员编写时的疏忽，通过SQL语句，实现无账号登录，甚至篡改数据库。</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson02;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.sql.Statement;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-comment">// SQL 注入</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        login(<span class="hljs-string">&quot;baixf&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);        <span class="hljs-comment">//login(&quot;baixf&quot;,&quot;&quot;);</span>        login(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);        login(<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        Statement statement = <span class="hljs-keyword">null</span>;        ResultSet resultSet = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 建立连接</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">// 创建SQL对象</span>            statement = connection.createStatement();            <span class="hljs-comment">// 执行sql语句</span>            String str = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE `NAME`=&#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27; &amp;&amp; `PASSWORD`=&#x27;&quot;</span> + password + <span class="hljs-string">&quot;&#x27;&quot;</span>;            resultSet = statement.executeQuery(str);                <span class="hljs-keyword">while</span> (resultSet.next()) &#123;                    System.out.println(resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));                    System.out.println(resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));                    System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);                &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection, statement, resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207154908770.png" alt="image-20210207154908770"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207154655015.png" alt="image-20210207154655015"></p><h3 id="五、PreparedStatement-对象"><a href="#五、PreparedStatement-对象" class="headerlink" title="五、PreparedStatement 对象"></a>五、PreparedStatement 对象</h3><blockquote><p>PreparedStatement 对象可以防止SQL注入，而且效率更快。</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207161653948.png" alt="image-20210207161653948"></p><h4 id="1-db-properties-1"><a href="#1-db-properties-1" class="headerlink" title="1.db.properties"></a>1.db.properties</h4><pre><code class="hljs java">driver=com.mysql.jdbc.Driverurl=jdbc:mysql:<span class="hljs-comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span>username=rootpassword=<span class="hljs-number">123456</span></code></pre><h4 id="2-jdbcUtils-1"><a href="#2-jdbcUtils-1" class="headerlink" title="2.jdbcUtils"></a>2.jdbcUtils</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.utils;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jdbcUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//返回一个输入流</span>            InputStream resourceAsStream = jdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);            Properties properties = <span class="hljs-keyword">new</span> Properties();            properties.load(resourceAsStream);            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);            <span class="hljs-comment">// 1 驱动只需要加载一次</span>            Class.forName(driver);        &#125;<span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">// 2 获取连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);    &#125;    <span class="hljs-comment">// 3 释放连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                resultSet.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (statement!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                statement.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (connection!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                connection.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h4 id="3-CRUD操作-1"><a href="#3-CRUD操作-1" class="headerlink" title="3.CRUD操作"></a>3.CRUD操作</h4><h5 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson03;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//区别 ： 使用 ? 占位符</span>            String str = <span class="hljs-string">&quot;INSERT INTO `users`(id,NAME,PASSWORD,email,birthday) VALUES(?,?,?,?,?)&quot;</span>;            <span class="hljs-comment">//预编译 SQL ，先写 SQL 然后赋值</span>            preparedStatement = connection.prepareStatement(str);            preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>);            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王冰冰&quot;</span>);            preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;bxfwlg&quot;</span>);            preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;1813252727@qq.com&quot;</span>);            preparedStatement.setDate(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2000</span>));            <span class="hljs-comment">//执行</span>            <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,<span class="hljs-keyword">null</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207161607387.png" alt="image-20210207161607387"></p><h5 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson03;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.Date;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//区别 ： 使用 ? 占位符</span>            String str = <span class="hljs-string">&quot;delete from users where name = ?&quot;</span>;            <span class="hljs-comment">//预编译 SQL ，先写 SQL 然后赋值</span>            preparedStatement = connection.prepareStatement(str);            <span class="hljs-comment">//赋值</span>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;baixf&quot;</span>);            <span class="hljs-comment">//执行</span>            <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,<span class="hljs-keyword">null</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207162244233.png" alt="image-20210207162244233"></p><h5 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson03;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//区别 ： 使用 ? 占位符</span>            String str = <span class="hljs-string">&quot;update users set birthday = ?  where name = ?&quot;</span>;            <span class="hljs-comment">//预编译 SQL ，先写 SQL 然后赋值</span>            preparedStatement = connection.prepareStatement(str);            <span class="hljs-comment">//赋值</span>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2020-12-25&quot;</span>);            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王冰冰&quot;</span>);            <span class="hljs-comment">//执行</span>            <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(<span class="hljs-string">&quot;更新成功！&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,<span class="hljs-keyword">null</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207162852807.png" alt="image-20210207162852807"></p><h5 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson03;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        ResultSet resultSet = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//区别 ： 使用 ? 占位符</span>            String str = <span class="hljs-string">&quot;select * from users where name = ?&quot;</span>;            <span class="hljs-comment">//预编译 SQL ，先写 SQL 然后赋值</span>            preparedStatement = connection.prepareStatement(str);            <span class="hljs-comment">//赋值</span>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;王冰冰&quot;</span>);            <span class="hljs-comment">//执行并使用数据集接收数据</span>            resultSet = preparedStatement.executeQuery();            <span class="hljs-keyword">while</span> (resultSet.next())&#123;                System.out.println(<span class="hljs-string">&quot;查询成功！&quot;</span>);                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));                System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,<span class="hljs-keyword">null</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207163555593.png" alt="image-20210207163555593"></p><h5 id="防止注入问题"><a href="#防止注入问题" class="headerlink" title="防止注入问题"></a>防止注入问题</h5><blockquote><p>PreparedStatement 对象防止SQL注入的本质：把传递的参数当作字符</p><p>假设存在转义字符，将直接被忽略 ，例如 ‘ (引号)</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson03;<span class="hljs-keyword">import</span> com.baixf.lesson02.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07</span> </span>&#123;    <span class="hljs-comment">// 防止 SQL 注入</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-comment">//login(&quot;baixf&quot;,&quot;password&quot;);</span>        login(<span class="hljs-string">&quot;zhansan&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);        <span class="hljs-comment">//login(&quot;&quot;,&quot;password&quot;);</span>        login(<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>,<span class="hljs-string">&quot;&#x27;or &#x27;1=1&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        ResultSet resultSet = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 建立连接</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">// 预编译 sql语句</span>            String str = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE `NAME`=? &amp;&amp; `PASSWORD`=?&quot;</span>; <span class="hljs-comment">//Mybatis</span>            preparedStatement = connection.prepareStatement(str);            <span class="hljs-comment">//赋值</span>            preparedStatement.setString(<span class="hljs-number">1</span>,username);            preparedStatement.setString(<span class="hljs-number">2</span>,password);            <span class="hljs-comment">//执行 SQL</span>            resultSet = preparedStatement.executeQuery();            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));                System.out.println(resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));                System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection, preparedStatement, resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207164726143.png" alt="image-20210207164726143"></p><h3 id="六、使用IDEA连接数据库"><a href="#六、使用IDEA连接数据库" class="headerlink" title="六、使用IDEA连接数据库"></a>六、使用IDEA连接数据库</h3><p>1.建立连接</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207165459982.png" alt="image-20210207165459982"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207170240272.png" alt="image-20210207170240272"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207171513022.png" alt="image-20210207171513022"></p><p>2.连接成功后选择数据库</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207171551215.png" alt="image-20210207171551215"></p><p>3.查看数据库中的内容</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207171653980.png" alt="image-20210207171653980"></p><p>4.CRU操作</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207172906572.png" alt="image-20210207172906572"></p><p>5.其他操作</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207173116722.png" alt="image-20210207173116722"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207174100024.png" alt="image-20210207174100024"></p><h3 id="七、事务"><a href="#七、事务" class="headerlink" title="七、事务"></a>七、事务</h3><blockquote><p>要么都成功，要么都失败！</p></blockquote><h4 id="1-ACID原则"><a href="#1-ACID原则" class="headerlink" title="1.ACID原则"></a>1.ACID原则</h4><ul><li>原子性：要么全部完成，要么不完成</li><li>一致性：总数不变</li><li>隔离性：多个进程互不干扰</li><li>持久性：一旦提交不可逆</li></ul><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><p>1.开启事务。</p><p>2.一组业务执行完毕，提交事务。</p><p>3.可以在catch语句中显示的定义 回滚语句，但默认失败就会回滚。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson04;<span class="hljs-keyword">import</span> com.baixf.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transaction</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//关闭数据库自动提交</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//关闭数据库自动提交，自动开启事务</span>            connection.setAutoCommit(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//开启事务</span>            String sql1 = <span class="hljs-string">&quot;UPDATE ACCOUNT SET `money` = `money` - 100 WHERE NAME=&#x27;A&#x27;&quot;</span>;            preparedStatement = connection.prepareStatement(sql1);            preparedStatement.executeUpdate();            String sql2 = <span class="hljs-string">&quot;UPDATE ACCOUNT SET `money` = `money` + 100 WHERE NAME=&#x27;B&#x27;&quot;</span>;            preparedStatement = connection.prepareStatement(sql2);            preparedStatement.executeUpdate();            <span class="hljs-comment">//业务完毕，提交事务</span>            connection.commit();            System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            connection.rollback();<span class="hljs-comment">//如果失败则回滚</span>            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207175955037.png" alt="image-20210207175955037"></p><p><strong>失败案例</strong></p><blockquote><p>回滚！</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.lesson04;<span class="hljs-keyword">import</span> com.baixf.utils.jdbcUtils;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.PreparedStatement;<span class="hljs-keyword">import</span> java.sql.ResultSet;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;        ResultSet resultSet=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//关闭数据库自动提交</span>            connection = jdbcUtils.getConnection();            <span class="hljs-comment">//关闭数据库自动提交，自动开启事务</span>            connection.setAutoCommit(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//开启事务</span>            String sql1 = <span class="hljs-string">&quot;UPDATE ACCOUNT SET `money` = `money` - 100 WHERE NAME=&#x27;A&#x27;&quot;</span>;            preparedStatement = connection.prepareStatement(sql1);            preparedStatement.executeUpdate();            <span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>/<span class="hljs-number">0</span>;            String sql2 = <span class="hljs-string">&quot;UPDATE ACCOUNT SET `money` = `money` + 100 WHERE NAME=&#x27;B&#x27;&quot;</span>;            preparedStatement = connection.prepareStatement(sql2);            preparedStatement.executeUpdate();            <span class="hljs-comment">//业务完毕，提交事务</span>            connection.commit();            System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            connection.rollback();<span class="hljs-comment">//如果失败则回滚</span>            throwables.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            jdbcUtils.release(connection,preparedStatement,resultSet);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210207180147051.png" alt="image-20210207180147051"></p><h3 id="八、数据库连接池"><a href="#八、数据库连接池" class="headerlink" title="八、数据库连接池"></a>八、数据库连接池</h3><p>数据库连接—执行完毕—释放 </p><p>连接 —-》释放十分浪费资源</p><p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p><p>常用连接数：10</p><p>最小连接数：10</p><p>最大连接数：100</p><p>编写连接池，实现一个接口：Datasource</p><h4 id="1-开源数据源实现"><a href="#1-开源数据源实现" class="headerlink" title="1.开源数据源实现"></a>1.开源数据源实现</h4><blockquote><p>使用了这些数据库连接池，项目中就不需要编写连接数据库的代码！</p></blockquote><ul><li><p>DBCP (需要用到commons-dbcp-1.4.jar、commons-pool-1.6.jar包)</p></li><li><p>C3P0 (需要用到c3p0-0.9.5.5.jar、mchange-commons-java-0.2.19.jar包)</p></li><li><p>Druid:Alibaba</p></li></ul><h4 id="2-jdbcUtils-DBCP-properties"><a href="#2-jdbcUtils-DBCP-properties" class="headerlink" title="2.jdbcUtils_DBCP.properties"></a>2.jdbcUtils_DBCP.properties</h4><pre><code class="hljs java">#连接设置 DBCP数据源定义！driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql:<span class="hljs-comment">//localhost:3306/bank</span>username=rootpassword=<span class="hljs-number">123456</span>#初始化连接initialSize=<span class="hljs-number">10</span>#最大连接数量maxActive=<span class="hljs-number">50</span>#最大空闲连接maxIdle=<span class="hljs-number">20</span>#最小空闲连接minIdle=<span class="hljs-number">5</span>#超时等待时间maxWait=<span class="hljs-number">60000</span>#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;]#注意：“user” 与 “password” 两个属性会被明确地传递，因此这里不需要包含他们。connectionProperties=useUnicode=<span class="hljs-keyword">true</span>;characterEncoding=UTF8#指定由连接池所创建的连接的自动提交（auto-commit）状态。defaultAutoCommit=<span class="hljs-keyword">true</span>#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLEdefaultTransactionIsolation=READ_UNCOMMITTED</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baixf.utils;<span class="hljs-keyword">import</span> org.apache.commons.dbcp2.BasicDataSource;<span class="hljs-keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jdbcUtils_DBCP</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            InputStream in = jdbcUtils_DBCP.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcpconfig.properties&quot;</span>);            Properties properties = <span class="hljs-keyword">new</span> Properties();            properties.load(in);            <span class="hljs-comment">//创建数据源 工厂模式 -- 》 创建</span>            dataSource = BasicDataSourceFactory.createDataSource(properties);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">// 2 获取连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">return</span> dataSource.getConnection();<span class="hljs-comment">//从数据源中获取连接</span>    &#125;    <span class="hljs-comment">// 3 释放连接</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                resultSet.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (statement!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                statement.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">if</span> (connection!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                connection.close();            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h4 id="3-c3p0-config-xml"><a href="#3-c3p0-config-xml" class="headerlink" title="3.c3p0-config.xml"></a>3.c3p0-config.xml</h4><pre><code class="hljs java">&lt;c3p0-config&gt;  &lt;!-- 使用默认的配置读取连接池对象 --&gt;  &lt;<span class="hljs-keyword">default</span>-config&gt;      &lt;!--  连接参数 --&gt;    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;    &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//localhost:3306/test&lt;/property&gt;</span>    &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;    &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;        &lt;!-- 连接池参数 --&gt;    &lt;!--初始化申请的连接数量--&gt;    &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt;    &lt;!--最大的连接数量--&gt;    &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt;    &lt;!--超时时间--&gt;    &lt;property name=&quot;checkoutTimeout&quot;&gt;3000&lt;/property&gt;  &lt;/default-config&gt;  &lt;named-config name=<span class="hljs-string">&quot;otherc3p0&quot;</span>&gt;     &lt;!--  连接参数 --&gt;    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;    &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//localhost:3306/test&lt;/property&gt;</span>    &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;    &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;        &lt;!-- 连接池参数 --&gt;    &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt;    &lt;property name=&quot;maxPoolSize&quot;&gt;8&lt;/property&gt;    &lt;property name=&quot;checkoutTimeout&quot;&gt;1000&lt;/property&gt;  &lt;/named-config&gt;&lt;/c3p0-config&gt;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.utils;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">//自定义的JDBC工具类, 结合配置文件使用.</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils2</span> </span>&#123;    <span class="hljs-comment">//1. 构造方法私有化.</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">JDBCUtils2</span><span class="hljs-params">()</span></span>&#123;&#125;    <span class="hljs-comment">//2. 定义一些私有的静态的成员变量, 用来记录配置文件中的信息.</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driverClass;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;    <span class="hljs-comment">//3. 定义方法loadProperties(), 用来读取配置文件, 并将读取到的数据赋值给变量.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadProperties</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//3.1 定义Properties集合</span>        Properties pp = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">//3.2 加载配置文件中的文件到集合中.</span>        <span class="hljs-keyword">try</span> &#123;            pp.load(JDBCUtils2.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;config.properties&quot;</span>));        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-comment">//3.3 给成员变量赋值.</span>        driverClass = pp.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);        url = pp.getProperty(<span class="hljs-string">&quot;url&quot;</span>);        username = pp.getProperty(<span class="hljs-string">&quot;username&quot;</span>);        password = pp.getProperty(<span class="hljs-string">&quot;password&quot;</span>);    &#125;    <span class="hljs-comment">//4. 通过静态代码块, 用来注册驱动.</span>    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//核心细节: 方法只有被调用, 才会执行.</span>            <span class="hljs-comment">//调用loadProperties()方法, 读取配置文件.</span>            loadProperties();            <span class="hljs-comment">//注册驱动.</span>            Class.forName(driverClass);        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//5. 对外提供一个公共的访问方式, 用来获取: 连接对象.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username,password);        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-comment">//6. 释放资源.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement stat, ResultSet rs)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;                rs.close();                rs = <span class="hljs-keyword">null</span>;       <span class="hljs-comment">//GC会优先回收null对象.</span>            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span> (stat != <span class="hljs-keyword">null</span>) &#123;                    stat.close();                    stat = <span class="hljs-keyword">null</span>;                &#125;            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;                e.printStackTrace();            &#125; <span class="hljs-keyword">finally</span> &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;                        conn.close();                        conn = <span class="hljs-keyword">null</span>;                    &#125;                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement stat)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (stat != <span class="hljs-keyword">null</span>) &#123;                stat.close();                stat = <span class="hljs-keyword">null</span>;            &#125;        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;                    conn.close();                    conn = <span class="hljs-keyword">null</span>;                &#125;            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1">狂神说B站视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.mysql.com/">MySQL官网</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL教程</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Java</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶学习</title>
    <link href="/2021/02/06/Java/Java%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/02/06/Java/Java%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、IO框架学习"><a href="#一、IO框架学习" class="headerlink" title="一、IO框架学习"></a>一、IO框架学习</h2><p> <img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1058428-20191224142510049-508348747.png" alt="img"></p><h3 id="1-流的概念"><a href="#1-流的概念" class="headerlink" title="1.流的概念"></a>1.流的概念</h3><p>内存与存储设备之间传输数据的通道</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1998506-20200914231017273-598093604.png" alt=""></p><h3 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h3><h4 id="按方向【重点】"><a href="#按方向【重点】" class="headerlink" title="按方向【重点】"></a>按方向【重点】</h4><ul><li>输入流：将&lt;存储设备&gt;中的内容读到&lt;内存&gt;中</li><li>输出流：将&lt;内存&gt;中的内容写到&lt;存储设备&gt;中</li></ul><h4 id="按单位"><a href="#按单位" class="headerlink" title="按单位"></a>按单位</h4><ul><li>字节流：以字节为单位，可以读写所有数据</li><li>字符流：以字符为单位，只能读写文本数据</li></ul><h4 id="按功能"><a href="#按功能" class="headerlink" title="按功能"></a>按功能</h4><ul><li>节点流：具有实际传输数据的读写功能</li><li>过滤流：在节点流的基础之上增强功能</li></ul><h3 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3.字节流"></a>3.字节流</h3><p>字节流的父类（抽象类）</p><pre><code class="hljs java"><span class="hljs-comment">// InputStream 字节输入流</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span></span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span></span>&#123;&#125;<span class="hljs-comment">// OutputStream 字节输出流</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span></span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span></span>&#123;&#125;</code></pre><h4 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h4><p>文件输入流</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206200455088.png" alt="image-20210206200455088"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206201009753.png" alt="image-20210206201009753"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.byteStream;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">//字节输入流</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建FileInputStream 并指定文件路径</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://a.txt&quot;</span>);        <span class="hljs-comment">//2.读取文件 返回-1证明读取完毕</span>        <span class="hljs-comment">//int a=fileInputStream.read();</span>        <span class="hljs-comment">//System.out.println(a);</span>        <span class="hljs-comment">//3.循环读取 单字节读取！</span>        <span class="hljs-comment">//int data=0;</span>        <span class="hljs-comment">//while ((data=fileInputStream.read())!=-1)&#123;</span>        <span class="hljs-comment">//    System.out.println((char) data);</span>        <span class="hljs-comment">//&#125;</span>        <span class="hljs-comment">//4.多字节读取</span>        <span class="hljs-comment">//每次读取3个字节</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        byte[] str=new byte[3];</span><span class="hljs-comment">        int read = fileInputStream.read(str);</span><span class="hljs-comment">        System.out.println(&quot;实际读取的个数：&quot;+read);</span><span class="hljs-comment">        System.out.println(new String(str));</span><span class="hljs-comment">        int read02 = fileInputStream.read(str);</span><span class="hljs-comment">        System.out.println(&quot;实际读取的个数：&quot;+read02);</span><span class="hljs-comment">        System.out.println(new String(str));</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        <span class="hljs-keyword">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">4</span>];        <span class="hljs-keyword">while</span> ((count=fileInputStream.read(buff))!=-<span class="hljs-number">1</span>)&#123;            System.out.println(<span class="hljs-keyword">new</span> String(buff,<span class="hljs-number">0</span>,count));        &#125;        fileInputStream.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206112821062.png" alt="image-20210206112821062"></p><p><strong>拓展：new String()</strong></p><pre><code class="hljs java"><span class="hljs-keyword">new</span> String(<span class="hljs-keyword">byte</span> bytes[], <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206112911463.png" alt="image-20210206112911463"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206112950183.png" alt="image-20210206112950183"></p><p>文件输出流</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206200844885.png" alt="image-20210206200844885"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206200932808.png" alt="image-20210206200932808"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.byteStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建文件字节输出流</span>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://b.txt&quot;</span>,<span class="hljs-keyword">true</span>); <span class="hljs-comment">// true表示不覆盖 接着写 默认为 false</span>        <span class="hljs-comment">// 2 写入文件</span>        fileOutputStream.write(<span class="hljs-number">97</span>);        fileOutputStream.write(<span class="hljs-string">&#x27;c&#x27;</span>);        fileOutputStream.write(<span class="hljs-string">&#x27;c&#x27;</span>);        fileOutputStream.write(<span class="hljs-string">&#x27;\n&#x27;</span>);        <span class="hljs-comment">// 3 写入字符串</span>        String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;helloworld&quot;</span>);        fileOutputStream.write(str.getBytes(StandardCharsets.UTF_8));        fileOutputStream.close();        System.out.println(<span class="hljs-string">&quot;执行完毕！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206114129823.png" alt="image-20210206114129823"></p><h4 id="图片复制案例"><a href="#图片复制案例" class="headerlink" title="图片复制案例"></a>图片复制案例</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.byteStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建流</span>        <span class="hljs-comment">// 1.1 文件字节输入流</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://a.jpg&quot;</span>);        <span class="hljs-comment">// 1.2 文件字节输出流</span>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://b.jpg&quot;</span>);        <span class="hljs-comment">// 2 边读边写</span>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((count=fileInputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;            fileOutputStream.write(bytes,<span class="hljs-number">0</span>,count);        &#125;        <span class="hljs-comment">// 3 关闭</span>        fileOutputStream.close();        fileInputStream.close();        System.out.println(<span class="hljs-string">&quot;执行完毕！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206120047874.png" alt="image-20210206120047874"></p><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><p>缓冲流：<code>BufferedInputStream/ BufferedOutputStream</code></p><ul><li>提高IO效率，减少访问磁盘次数</li><li>数据存储在缓冲区中，flush是将缓冲区的内容写入文件中，也可以直接close</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206201233858.png" alt="image-20210206201233858"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206201317560.png" alt="image-20210206201317560"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.BufferedStream;<span class="hljs-keyword">import</span> java.io.BufferedInputStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-comment">// 使用字节缓冲流 读取 文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建BufferedInputStream</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://a.txt&quot;</span>);        BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(fileInputStream);        <span class="hljs-comment">// 2 使用字节缓冲流读取</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        int data= 0;</span><span class="hljs-comment">        while ((data=bufferedInputStream.read())!=-1)&#123;</span><span class="hljs-comment">            System.out.print((char) data);</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">        System.out.println();</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 3 自己写一个缓冲区</span>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((count=fileInputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;            System.out.println(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,count));        &#125;        <span class="hljs-comment">// 4 只需要关闭缓冲流即可！</span>        bufferedInputStream.close();        fileInputStream.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206121338879.png" alt="image-20210206121338879"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206201425306.png" alt="image-20210206201425306"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206201444489.png" alt="image-20210206201444489"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.BufferedStream;<span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-comment">// 使用字节缓冲流 写入 文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://c.txt&quot;</span>,<span class="hljs-keyword">false</span>);        <span class="hljs-comment">// 1 创建BufferedInputStream</span>        BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(fileOutputStream);        String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;helloworld&quot;</span>);        <span class="hljs-comment">// 2 写入文件</span>        bufferedOutputStream.write(str.getBytes(StandardCharsets.UTF_8));<span class="hljs-comment">// 写入8k缓冲区</span>        bufferedOutputStream.flush();<span class="hljs-comment">//刷新到硬盘</span>        <span class="hljs-comment">// 3 关闭缓冲流</span>        bufferedOutputStream.close();        System.out.println(<span class="hljs-string">&quot;进程完成&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206130104830.png" alt="image-20210206130104830"></p><h3 id="4-对象流"><a href="#4-对象流" class="headerlink" title="4.对象流"></a>4.对象流</h3><pre><code class="hljs java">ObjectOutputStream / ObjectInputStream</code></pre><ul><li>增强了缓冲区功能</li><li>增强了读写8种基本数据类型和字符串的功能</li><li>增强了读写对象的功能<ul><li><code>readObject()</code> 从流中读取一个对象</li><li><code>writeObject(Object obj)</code> 向流中写入一个对象</li></ul></li></ul><p>使用流传输对象的过程称为序列化、反序列化</p><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206202227118.png" alt="image-20210206202227118"></p><blockquote><p>ObjectOutputStream将Java对象的原始数据类型和图形写入OutputStream。可以使用ObjectInputStream读取（重构）对象。可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象。</p><p>只有支持java.io.Serializable接口的对象才能写入流中。  每个可序列化对象的类被编码，包括类的类名和签名，对象的字段和数组的值以及从初始对象引用的任何其他对象的关闭。 </p><p>方法writeObject用于将一个对象写入流中。  任何对象，包括字符串和数组，都是用writeObject编写的。 多个对象或原语可以写入流。  必须从对应的ObjectInputstream读取对象，其类型和写入次序相同。 </p></blockquote><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.objectStream;<span class="hljs-comment">//ObjectStream序列化</span><span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建文件输出流</span>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://stu.bin&quot;</span>);        <span class="hljs-comment">// 2 创建对象输出流</span>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream);        <span class="hljs-comment">// 3 序列化</span>        Student stu01 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>);        Student stu02 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">18</span>);        objectOutputStream.writeObject(stu01);        objectOutputStream.writeObject(stu02);        <span class="hljs-comment">// 4 刷新</span>        objectOutputStream.flush();        <span class="hljs-comment">// 5 关闭</span>        objectOutputStream.close();        System.out.println(<span class="hljs-string">&quot;序列化完毕！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206143558626.png" alt="image-20210206143558626"></p><pre><code class="hljs java"><span class="hljs-comment">//Student类需要实现 Serializable 接口 这个接口仅仅标识这个类可以实现序列化</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Serializable</span> </span>&#123;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Student类</span><span class="hljs-keyword">package</span> IO.objectStream;<span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206144026110.png" alt="image-20210206144026110"></p><h4 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206202142434.png" alt="image-20210206202142434"></p><blockquote><p>ObjectInputStream反序列化先前使用ObjectOutputStream编写的原始数据和对象。</p><p>ObjectOutputStream和ObjectInputStream可以分别为与FileOutputStream和FileInputStream一起使用的对象图提供持久性存储的应用程序。  ObjectInputStream用于恢复先前序列化的对象。  其他用途包括使用套接字流在主机之间传递对象，或者在远程通信系统中进行封送和解组参数和参数。 </p><p>ObjectInputStream确保从流中创建的图中的所有对象的类型与Java虚拟机中存在的类匹配。  根据需要使用标准机制加载类。 </p><p>只能从流中读取支持java.io.Serializable或java.io.Externalizable接口的对象。 </p></blockquote><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.objectStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-comment">// 使用ObjectInputSteam实现反序列化（读取重构对象）</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;        <span class="hljs-comment">// 1 创建文件输入流</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://stu.bin&quot;</span>);        <span class="hljs-comment">// 2 创建对象流</span>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream);        <span class="hljs-comment">// 3 读取文件（反序列化）</span>        Student student01 = (Student) objectInputStream.readObject();        Student student02 = (Student) objectInputStream.readObject();        <span class="hljs-comment">// 4 关闭</span>        objectInputStream.close();        System.out.println(<span class="hljs-string">&quot;执行完毕！&quot;</span>);        <span class="hljs-comment">// 5 输出</span>        System.out.println(student01.toString());        System.out.println(student02.toString());    &#125;&#125;</code></pre><h4 id="Serializable-接口"><a href="#Serializable-接口" class="headerlink" title="Serializable 接口"></a>Serializable 接口</h4><blockquote><p>类的序列化由实现<code>java.io.Serializable</code>接口的类启用。 不实现此接口的类将不会使任何状态序列化或反序列化。 可序列化类的所有子类型都是可序列化的。 序列化接口没有方法或字段，仅用于标识可串行化的语义。</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>某个类要想序列化必须实现 <code>Serializable</code>接口</li><li>序列化类中对象属性要求实现 <code>Serializable</code>接口</li><li>序列化版本号ID，保证序列化的类和反序列化的类是同一个类</li><li>使用transient修饰属性，这个属性就不能序列化</li><li>静态属性不能序列化</li><li>序列化多个对象，可以借助集合来实现</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.objectStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://bai.txt&quot;</span>);        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream);        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王麻子&quot;</span>, <span class="hljs-number">56</span>);        Student student1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王二&quot;</span>, <span class="hljs-number">96</span>);        ArrayList&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        students.add(student);        students.add(student1);        objectOutputStream.writeObject(students);        objectOutputStream.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206152312381.png" alt="image-20210206152312381"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.objectStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://bai.txt&quot;</span>);        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream);        ArrayList arrayList = (ArrayList) objectInputStream.readObject();        System.out.println(arrayList);        objectInputStream.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206152234980.png" alt="image-20210206152234980"></p><h3 id="5-编码方式"><a href="#5-编码方式" class="headerlink" title="5.编码方式"></a>5.编码方式</h3><h4 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h4><ul><li><p>ASCII 码</p><ul><li>学过计算机的人都知道 ASCII 码，总共有 128 个，用一个字节的低 7 位表示，0~31 是控制字符如换行回车删除等；32~126 是打印字符，可以通过键盘输入并且能够显示出来。　</li></ul></li><li><p>GBK（扩展GB2312）</p><ul><li>全称叫《汉字内码扩展规范》，是国家技术监督局为 windows95 所制定的新的汉字内码规范，它的出现是为了扩展 GB2312，加入更多的汉字，它的编码范围是 8140~FEFE（去掉 XX7F）总共有 23940 个码位，它能表示 21003 个汉字，它的编码是和 GB2312 兼容的，也就是说用 GB2312 编码的汉字可以用 GBK 来解码，并且不会有乱码。　　</li></ul></li><li><p>GB18030（兼容GB2312）</p><ul><li>全称是《信息交换用汉字编码字符集》，是我国的强制标准，它可能是单字节、双字节或者四字节编码，它的编码与 GB2312 编码兼容，这个虽然是国家标准，但是实际应用系统中使用的并不广泛。　　</li></ul></li><li><p>Unicode编码集</p><ul><li>UTF-8<ul><li>UTF-16 统一采用两个字节表示一个字符，虽然在表示上非常简单方便，但是也有其缺点，有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，在现在的网络带宽还非常有限的今天，这样会增大网络传输的流量，而且也没必要。而 UTF-8 采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以是由 1~6 个字节组成。</li><li>UTF-8 有以下编码规则：<ol><li>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。</li><li>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。</li><li>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节 </li></ol></li></ul></li></ul></li></ul><h4 id="Reader类"><a href="#Reader类" class="headerlink" title="Reader类"></a>Reader类</h4><p>Reader 类是 Java 的 I/O 中读字符的父类，而 InputStream 类是读字节的父类，InputStreamReader 类就是关联字节到字符的桥梁，它负责在 I/O 过程中处理读取字节到字符的转换，而具体字节到字符的解码实现它由 StreamDecoder 去实现，在 StreamDecoder 解码过程中必须由用户指定 Charset 编码格式。值得注意的是如果你没有指定 Charset，将使用本地环境中的默认字符集，例如在中文环境中将使用 GBK 编码。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/750327-20160829103849918-316242104.png" alt="img"></p><h4 id="Writer类"><a href="#Writer类" class="headerlink" title="Writer类"></a>Writer类</h4><p>字符的父类是 Writer，字节的父类是 OutputStream，通过 OutputStreamWriter 转换字符到字节。如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/750327-20160829104034730-1077627848.png" alt="img"></p><h3 id="6-字符流"><a href="#6-字符流" class="headerlink" title="6.字符流"></a>6.字符流</h3><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.charStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://baixiao.txt&quot;</span>);        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((data=fileInputStream.read())!=-<span class="hljs-number">1</span>)&#123;            System.out.print((<span class="hljs-keyword">char</span>)data);  <span class="hljs-comment">//2个字 6个字节</span>        &#125;        fileInputStream.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206153512107.png" alt="image-20210206153512107"></p><h4 id="字符流的父类（抽象类）"><a href="#字符流的父类（抽象类）" class="headerlink" title="字符流的父类（抽象类）"></a>字符流的父类（抽象类）</h4><p><code>reader</code> 字符输入流</p><ul><li><code>public int read()&#123;&#125;</code></li><li><code>public int read(char[] c)&#123;&#125;</code></li><li><code>public int read(char[] b, int off, int len)&#123;&#125;</code></li></ul><p><code>Writer</code> 字符输出流</p><ul><li><code>public void write(int n)&#123;&#125;</code></li><li><code>public void write(String str)&#123;&#125;</code></li><li><code>public void write(char[] c)&#123;&#125;</code></li></ul><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206202729823.png" alt="image-20210206202729823"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.charStream;<span class="hljs-keyword">import</span> java.io.BufferedInputStream;<span class="hljs-keyword">import</span> java.io.BufferedReader;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建FileReader 文件字符输入流</span>        FileReader fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;e://baixiao.txt&quot;</span>);        <span class="hljs-comment">// 2 单个字符读取</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        int data=0;</span><span class="hljs-comment">        while ((data=fileReader.read())!=-1)&#123;</span><span class="hljs-comment">            System.out.println((char) data);// 读取一个字符</span><span class="hljs-comment">            System.out.println(data);</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 3 创建字符缓冲区读取</span>        <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">2</span>];        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((data=fileReader.read(chars))!=-<span class="hljs-number">1</span>)&#123;            System.out.println(<span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">0</span>, data));        &#125;        <span class="hljs-comment">// 4 关闭</span>        fileReader.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206155532912.png" alt="image-20210206155532912"></p><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206202922983.png" alt="image-20210206202922983"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.charStream;<span class="hljs-keyword">import</span> java.io.FileWriter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileWriter fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;e://hahah.txt&quot;</span>);        String str=<span class="hljs-string">&quot;Java是世界上最好的语言！&quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) &#123;            fileWriter.write(str);        &#125;        fileWriter.close();        System.out.println(<span class="hljs-string">&quot;执行完毕！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206160023430.png" alt="image-20210206160023430"></p><p><strong>进行文本文件复制</strong></p><p>不能复制图片或二进制文件(声音图片)，但是使用字节流可以复制任意文件</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.charStream;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.FileWriter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建</span>        FileReader fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;e://hahah.txt&quot;</span>);        FileWriter fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;e://hahah2.txt&quot;</span>);        <span class="hljs-comment">// 2 读写</span>        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((data=fileReader.read())!=-<span class="hljs-number">1</span>)&#123;            fileWriter.write(data);            fileWriter.flush();        &#125;        <span class="hljs-comment">// 3 关闭</span>        fileReader.close();        fileWriter.close();        System.out.println(<span class="hljs-string">&quot;读写完成&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206160818959.png" alt="image-20210206160818959"></p><p><strong>字符流不能读取图片原因分析：</strong></p><p>二进制文件没有字符编码，不能读取，读取到的都是乱码，更别提写入了！</p><h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><pre><code class="hljs nginx"><span class="hljs-attribute">BufferedReader</span> / BufferedWriter</code></pre><p>高效读写、支持输入换行符、可一次写一行读一行</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203051802.png" alt="image-20210206203051802"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.fileStream;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建缓冲流</span>        FileReader fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;e://writer.txt&quot;</span>);        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(fileReader);        <span class="hljs-comment">// 2 读取</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        int data=0;</span><span class="hljs-comment">        while ((data=bufferedReader.read())!=-1)&#123;</span><span class="hljs-comment">            System.out.print((char) data);</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">        */</span>        <span class="hljs-comment">// 3 readline()</span>        String line=<span class="hljs-keyword">null</span>;        <span class="hljs-keyword">while</span> ((line=bufferedReader.readLine())!=<span class="hljs-keyword">null</span>)&#123;            System.out.println(line);        &#125;        <span class="hljs-comment">// 4 关闭</span>        bufferedReader.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206164102160.png" alt="image-20210206164102160"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203204255.png" alt="image-20210206203204255"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.charStream;<span class="hljs-keyword">import</span> java.io.BufferedWriter;<span class="hljs-keyword">import</span> java.io.FileWriter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.Writer;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1. 创建BufferedWriter对象</span>        FileWriter fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;e://writer.txt&quot;</span>);        BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(fileWriter);        <span class="hljs-comment">// 2. 写入</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;            bufferedWriter.write(<span class="hljs-string">&quot;Java是世界上最好的语言！&quot;</span>);            bufferedWriter.write(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">// 写入一个换行符</span>            bufferedWriter.flush();        &#125;        <span class="hljs-comment">// 3. 关闭</span>        bufferedWriter.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206162729146.png" alt="image-20210206162729146"></p><h4 id="打印流-PrintWriter"><a href="#打印流-PrintWriter" class="headerlink" title="打印流(PrintWriter)"></a>打印流(PrintWriter)</h4><p>封装了<code>print() / println()</code> 方法 支持写入后换行</p><p>支持数据原样打印</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203330231.png" alt="image-20210206203330231"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.fileStream;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;        <span class="hljs-comment">// 1 创建打印流</span>        PrintWriter printWriter = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">&quot;e://printwriter.txt&quot;</span>);        <span class="hljs-comment">// 2 打印</span>        printWriter.write(<span class="hljs-number">97</span>);        printWriter.println(<span class="hljs-number">98</span>);        printWriter.println(<span class="hljs-string">&#x27;a&#x27;</span>);        printWriter.println(<span class="hljs-string">&#x27;最&#x27;</span>);        printWriter.append((<span class="hljs-keyword">char</span>) <span class="hljs-number">97</span>);        <span class="hljs-comment">// 3 关闭</span>        printWriter.close();        System.out.println(<span class="hljs-string">&quot;进程完毕！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206165158917.png" alt="image-20210206165158917"></p><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p>桥转换流 <code>InputStreamReader / OutputStreamWriter</code></p><p>可将字节流转换为字符流</p><p>可设置字符的编码方式</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203459727.png" alt="image-20210206203459727"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.fileStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStreamReader;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo08</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建InputStreamReader对象</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://a.jpg&quot;</span>);        InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(fileInputStream,<span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-comment">// 2 读取文件</span>        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((data=inputStreamReader.read())!=-<span class="hljs-number">1</span>)&#123;            System.out.println(data);        &#125;        <span class="hljs-comment">// 3 关闭</span>        inputStreamReader.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206170457804.png" alt="image-20210206170457804"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203718881.png" alt="image-20210206203718881"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.fileStream;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo09</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建InputStreamReader对象</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://a.jpg&quot;</span>);        InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(fileInputStream,<span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-comment">// 2 OutputStreamWriter对象</span>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;e://c.jpg&quot;</span>);        OutputStreamWriter outputStreamWriter = <span class="hljs-keyword">new</span> OutputStreamWriter(fileOutputStream,<span class="hljs-string">&quot;GBK&quot;</span>);        <span class="hljs-comment">// 3 读取文件</span>        <span class="hljs-keyword">int</span> data=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> ((data=inputStreamReader.read())!=-<span class="hljs-number">1</span>)&#123;            <span class="hljs-comment">// 4 写入文件</span>            System.out.println(data);            outputStreamWriter.write(data);            outputStreamWriter.flush();        &#125;        inputStreamReader.close();        outputStreamWriter.close();        System.out.println(<span class="hljs-string">&quot;储存完毕&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206172130157.png" alt="image-20210206172130157"></p><h3 id="7-File类"><a href="#7-File类" class="headerlink" title="7.File类"></a>7.File类</h3><p>概念：代表物理盘符中的一个文件或者文件夹</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206203811980.png" alt="image-20210206203811980"></p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.File;<span class="hljs-keyword">import</span> javax.xml.crypto.Data;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">//File类的使用</span><span class="hljs-comment">//1. 分隔符</span><span class="hljs-comment">//2. 文件操作</span><span class="hljs-comment">//3. 文件夹操作</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        separator();        touchFile(<span class="hljs-string">&quot;e://a.txt&quot;</span>);        <span class="hljs-comment">//removeFile(&quot;e://a.txt&quot;);</span>        <span class="hljs-comment">//jvmRemove(&quot;e://a.txt&quot;);</span>        catFileInfo(<span class="hljs-string">&quot;e://a.txt&quot;</span>);        judgeFile(<span class="hljs-string">&quot;e://a.txt&quot;</span>);    &#125;    <span class="hljs-comment">// 1 分隔符</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">separator</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;路径分隔符:&quot;</span> + File.pathSeparator);        System.out.println(<span class="hljs-string">&quot;名称分隔符:&quot;</span> + File.separator);    &#125;    <span class="hljs-comment">// 2 文件操作</span>    <span class="hljs-comment">// 2.1 创建文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">touchFile</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        File file = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (!file.exists()) &#123;            System.out.println(<span class="hljs-string">&quot;创建结果：&quot;</span> + file.createNewFile());        &#125; <span class="hljs-keyword">else</span> &#123;            System.out.println(<span class="hljs-string">&quot;文件已存在！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 2.2 删除文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeFile</span><span class="hljs-params">(String url)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;        File file = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (file.exists())&#123;            System.out.println(<span class="hljs-string">&quot;删除结果:&quot;</span>+file.delete());        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 2.3 使用JVM退出时删除文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jvmRemove</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        File file = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (file.exists())&#123;            file.deleteOnExit();            Thread.sleep(<span class="hljs-number">5000</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 3 获取文件信息</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catFileInfo</span><span class="hljs-params">(String url)</span></span>&#123;        File file = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (file.exists())&#123;            System.out.println(<span class="hljs-string">&quot;文件的绝对路径：&quot;</span>+file.getAbsoluteFile());            System.out.println(<span class="hljs-string">&quot;文件的路径:&quot;</span>+file.getPath());            System.out.println(<span class="hljs-string">&quot;文件名称:&quot;</span>+file.getName());            System.out.println(<span class="hljs-string">&quot;文件的父目录：&quot;</span>+file.getParent());            System.out.println(<span class="hljs-string">&quot;文件的长度:&quot;</span>+file.length());            System.out.println(<span class="hljs-string">&quot;文件的修改时间:&quot;</span>+(<span class="hljs-keyword">new</span> Date(file.lastModified()).toLocaleString()));        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 4 判断</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">judgeFile</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        File file = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (file.exists())&#123;            System.out.println(<span class="hljs-string">&quot;文件可读：&quot;</span>+file.canRead());            System.out.println(<span class="hljs-string">&quot;文件可写：&quot;</span>+file.canWrite());            System.out.println(<span class="hljs-string">&quot;文件可执行：&quot;</span>+file.canExecute());            System.out.println(<span class="hljs-string">&quot;是否是文件&quot;</span>+file.isFile());            System.out.println(<span class="hljs-string">&quot;文件是否隐藏了：&quot;</span>+file.isHidden());        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    &#125;</code></pre><h4 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.File;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//touchDir(&quot;e://aaa&quot;);</span>        <span class="hljs-comment">//removeDir(&quot;e://aaa&quot;);</span>        <span class="hljs-comment">//jvmRemove(&quot;e://aaa&quot;);</span>        catDirInfo(<span class="hljs-string">&quot;e://aaa&quot;</span>);    &#125;    <span class="hljs-comment">// 1 分隔符</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">separator</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;路径分隔符:&quot;</span> + File.pathSeparator);        System.out.println(<span class="hljs-string">&quot;名称分隔符:&quot;</span> + File.separator);    &#125;    <span class="hljs-comment">// 2 文件操作</span>    <span class="hljs-comment">// 2.1 创建文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">touchDir</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;            System.out.println(<span class="hljs-string">&quot;创建结果：&quot;</span> + dir.mkdir());        &#125; <span class="hljs-keyword">else</span> &#123;            System.out.println(<span class="hljs-string">&quot;文件已存在！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 2.2 删除文件夹(只能删除空目录)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeDir</span><span class="hljs-params">(String url)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (dir.exists())&#123;            System.out.println(<span class="hljs-string">&quot;删除结果:&quot;</span>+dir.delete());        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 2.3 使用JVM退出时删除文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jvmRemove</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (dir.exists())&#123;            dir.deleteOnExit();            Thread.sleep(<span class="hljs-number">5000</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 3 获取文件信息</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catDirInfo</span><span class="hljs-params">(String url)</span></span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (dir.exists())&#123;            System.out.println(<span class="hljs-string">&quot;文件夹的绝对路径：&quot;</span>+dir.getAbsolutePath());            System.out.println(<span class="hljs-string">&quot;文件夹的路径:&quot;</span>+dir.getPath());            System.out.println(<span class="hljs-string">&quot;文件夹名称:&quot;</span>+dir.getName());            System.out.println(<span class="hljs-string">&quot;文件夹的父目录：&quot;</span>+dir.getParent());            System.out.println(<span class="hljs-string">&quot;文件夹的修改时间:&quot;</span>+(<span class="hljs-keyword">new</span> Date(dir.lastModified()).toLocaleString()));        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 4 判断</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">judgeDir</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        <span class="hljs-keyword">if</span> (dir.exists())&#123;            System.out.println(<span class="hljs-string">&quot;文件可读：&quot;</span>+dir.canRead());            System.out.println(<span class="hljs-string">&quot;文件可写：&quot;</span>+dir.canWrite());            System.out.println(<span class="hljs-string">&quot;文件可执行：&quot;</span>+dir.canExecute());            System.out.println(<span class="hljs-string">&quot;是否是文件夹&quot;</span>+dir.isDirectory());            System.out.println(<span class="hljs-string">&quot;文件是否隐藏了：&quot;</span>+dir.isHidden());        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;文件不存在呀，主人！&quot;</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206185534150.png" alt="image-20210206185534150"></p><h4 id="递归遍历文件夹"><a href="#递归遍历文件夹" class="headerlink" title="递归遍历文件夹"></a>递归遍历文件夹</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.File;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        listDir(<span class="hljs-string">&quot;e://&quot;</span>);    &#125;    <span class="hljs-comment">// 5 遍历文件夹</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listDir</span><span class="hljs-params">(String url)</span></span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        String[] list = dir.list();        <span class="hljs-keyword">for</span> (String s : list) &#123;            System.out.println(s);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206190739847.png" alt="image-20210206190739847"></p><h4 id="递归删除文件夹"><a href="#递归删除文件夹" class="headerlink" title="递归删除文件夹"></a>递归删除文件夹</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO.File;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        deleteDir(<span class="hljs-string">&quot;e://aaa&quot;</span>);        <span class="hljs-comment">// 递归删除文件夹</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteDir</span><span class="hljs-params">(String url)</span></span>&#123;        File dir = <span class="hljs-keyword">new</span> File(url);        File[] files = dir.listFiles();        <span class="hljs-keyword">int</span> count=files.length;        <span class="hljs-keyword">if</span>(files != <span class="hljs-keyword">null</span> &amp;&amp; files.length &gt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">for</span>(File file : files)&#123;                System.out.println(file+<span class="hljs-string">&quot;删除结果：&quot;</span>+file.delete());                count--;            &#125;        &#125;        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>) &#123;            dir.delete();            System.out.println(<span class="hljs-string">&quot;删除完成！&quot;</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206192810593.png" alt="image-20210206192810593"></p><h4 id="FileFilter接口"><a href="#FileFilter接口" class="headerlink" title="FileFilter接口"></a>FileFilter接口</h4><blockquote><p>这是一个功能界面，因此可以用作lambda表达式或方法引用的赋值对象。</p></blockquote><pre><code class="hljs java"><span class="hljs-comment">//FileFilter接口的使用</span><span class="hljs-keyword">package</span> IO.File;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.FileFilter;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        File dir = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\Bai\\Pictures&quot;</span>);        File[] files = dir.listFiles(<span class="hljs-keyword">new</span> FileFilter() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">accept</span><span class="hljs-params">(File pathname)</span> </span>&#123;                <span class="hljs-keyword">if</span> (pathname.getName().endsWith(<span class="hljs-string">&quot;jpg&quot;</span>))&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; <span class="hljs-comment">//符合条件返回true</span>                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;                &#125;            &#125;        &#125;);        <span class="hljs-keyword">for</span> (File file : files) &#123;            System.out.println(file.getName());        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206195109460.png" alt="image-20210206195109460"></p><h3 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1058428-20191224142538937-2092088348.jpg" alt="img"></p><h2 id="二、Java集合框架"><a href="#二、Java集合框架" class="headerlink" title="二、Java集合框架"></a>二、Java集合框架</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/000.png" alt="000"></p><h3 id="1-集合的概念"><a href="#1-集合的概念" class="headerlink" title="1.集合的概念"></a>1.集合的概念</h3><ul><li>概念:对象的容器，定义了对多个对象进行操作的常用方法。可实现数组的功能。</li></ul><h4 id="和数组区别"><a href="#和数组区别" class="headerlink" title="和数组区别"></a>和数组区别</h4><ul><li><p>数组长度固定，集合长度不固定</p></li><li><p>数组可以存储基本类型和引用类型，集合只能存储引用类型</p></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%B7%AE%E5%BC%82.png" alt="差异"></p><ul><li>位置: java.util.*;</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/java.long.object.jpg" alt="java.long.object"></p><h4 id="常见集合分类"><a href="#常见集合分类" class="headerlink" title="常见集合分类"></a>常见集合分类</h4><pre><code class="hljs java">Collection 接口的接口 对象的集合（单列集合）├——-List 接口：元素按进入先后有序保存，可重复│—————-├ LinkedList 接口实现类， 链表， 插入删除， 没有同步， 线程不安全│—————-├ ArrayList 接口实现类， 数组， 随机访问， 没有同步， 线程不安全│—————-└ Vector 接口实现类 数组， 同步， 线程安全│ ———————-└ Stack 是Vector类的实现类└——-Set 接口： 仅接收一次，不可重复，并做内部排序├—————-└HashSet 使用hash表（数组）存储元素│————————└ LinkedHashSet 链表维护元素的插入次序└ —————-TreeSet 底层实现为二叉树，元素排好序Map 接口 键值对的集合 （双列集合）├———Hashtable 接口实现类， 同步， 线程安全├———HashMap 接口实现类 ，没有同步， 线程不安全-│—————–├ LinkedHashMap 双向链表和哈希表实现│—————–└ WeakHashMap├ ——–TreeMap 红黑树对所有的key进行排序└———IdentifyHashMap</code></pre><h3 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2.Collection接口"></a>2.Collection接口</h3><h4 id="Collection体系集合"><a href="#Collection体系集合" class="headerlink" title="Collection体系集合"></a>Collection体系集合</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/Collection%E4%BD%93%E7%B3%BB%E9%9B%86%E5%90%88.png" alt="Collection体系集合"></p><h4 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a>Collection父接口</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180803193423722.png" alt="20180803193423722"></p><h4 id="Collection的简单使用"><a href="#Collection的简单使用" class="headerlink" title="Collection的简单使用"></a>Collection的简单使用</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Collection;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-comment">//Collection接口的使用</span>    <span class="hljs-comment">//添加元素--删除元素--遍历元素--判断元素</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建集合</span>        ArrayList&lt;Object&gt; collection = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-comment">//添加元素</span>        collection.add(<span class="hljs-string">&quot;冰冰&quot;</span>);        collection.add(<span class="hljs-string">&quot;Lisa&quot;</span>);        collection.add(<span class="hljs-string">&quot;IU&quot;</span>);        collection.add(<span class="hljs-string">&quot;书欣&quot;</span>);        collection.add(<span class="hljs-string">&quot;白小飞&quot;</span>);        <span class="hljs-comment">//打印元素个数</span>        System.out.println(collection.size());        <span class="hljs-comment">//打印collection</span>        System.out.println(collection);        <span class="hljs-comment">//删除元素</span>        collection.remove(<span class="hljs-string">&quot;白小飞&quot;</span>);        <span class="hljs-comment">//打印元素个数</span>        System.out.println(<span class="hljs-string">&quot;老婆的个数：&quot;</span>+collection.size());        <span class="hljs-comment">//打印collection</span>        System.out.println(collection);        <span class="hljs-comment">//遍历集合</span>        <span class="hljs-comment">//增强for循环，不能使用普通for,因为没有下标</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        for (int i = 0; i &lt; collection.size(); i++) &#123;</span><span class="hljs-comment">            System.out.println(collection[i]);</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">         */</span>        System.out.println(<span class="hljs-string">&quot;===增强for循环遍历====&quot;</span>);        <span class="hljs-keyword">for</span> (Object o : collection) &#123;            System.out.println(o);        &#125;        System.out.println(<span class="hljs-string">&quot;===Iterator遍历====&quot;</span>);        Iterator iterator = collection.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;            String string = (String) iterator.next();            System.out.println(string);            <span class="hljs-comment">// 在迭代过程中不允许使用collection.remove()方法</span>            <span class="hljs-comment">//collection.remove(string); ConcurrentModificationException:collection</span>            iterator.remove();        &#125;        System.out.println(<span class="hljs-string">&quot;======判断======&quot;</span>);        System.out.println(collection.isEmpty());        System.out.println(collection.contains(<span class="hljs-string">&quot;白小飞&quot;</span>));        System.out.println(<span class="hljs-string">&quot;====删除集合全部元素=====&quot;</span>);        <span class="hljs-comment">//删除集合全部</span>        collection.clear();        <span class="hljs-comment">//判断集合是否为空</span>        System.out.println(collection.isEmpty());        <span class="hljs-comment">//打印collection</span>        System.out.println(collection);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210203114152624.png" alt="image-20210203114152624"></p><h4 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210203220859635.png" alt="image-20210203220859635"></p><h3 id="3-List集合"><a href="#3-List集合" class="headerlink" title="3.List集合"></a>3.List集合</h3><h4 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h4><p>特点:有序、有下标、元素可以重复。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.ListIterator;<span class="hljs-comment">//List接口的使用</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//先创建集合</span>        ArrayList arrayList = <span class="hljs-keyword">new</span> ArrayList();        <span class="hljs-comment">//添加元素</span>        arrayList.add(<span class="hljs-string">&quot;小米&quot;</span>);        arrayList.add(<span class="hljs-string">&quot;小米&quot;</span>);        arrayList.add(<span class="hljs-string">&quot;苹果&quot;</span>);        arrayList.add(<span class="hljs-string">&quot;华为&quot;</span>);        System.out.println(<span class="hljs-string">&quot;========按照索引进行添加============&quot;</span>);        arrayList.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;荣耀&quot;</span>);        <span class="hljs-comment">//打印个数</span>        System.out.println(arrayList.size());        System.out.println(arrayList.toString());        <span class="hljs-comment">//删除</span>        arrayList.remove(<span class="hljs-string">&quot;小米&quot;</span>);        System.out.println(arrayList.toString());        System.out.println(<span class="hljs-string">&quot;===========按照下标索引进行删除==========&quot;</span>);        arrayList.remove(<span class="hljs-number">1</span>);        System.out.println(arrayList.toString());        <span class="hljs-comment">//遍历</span>        System.out.println(<span class="hljs-string">&quot;========普通for循环遍历==========&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;            System.out.println(arrayList.get(i));        &#125;        System.out.println(<span class="hljs-string">&quot;======增强for循环遍历========&quot;</span>);        <span class="hljs-keyword">for</span> (Object o : arrayList) &#123;            System.out.println(o);        &#125;        System.out.println(<span class="hljs-string">&quot;=======迭代器======&quot;</span>);        Iterator iterator = arrayList.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;=========列表迭代器从前往后=========&quot;</span>);        ListIterator listIterator = arrayList.listIterator();        <span class="hljs-keyword">while</span> (listIterator.hasNext())&#123;            System.out.println(listIterator.nextIndex()+<span class="hljs-string">&quot;:&quot;</span>+listIterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;=========列表迭代器从后往前=========&quot;</span>);        <span class="hljs-keyword">while</span> (listIterator.hasPrevious())&#123;            System.out.println(listIterator.previousIndex()+<span class="hljs-string">&quot;:&quot;</span>+listIterator.previous());        &#125;        System.out.println(<span class="hljs-string">&quot;==========判断=========&quot;</span>);        System.out.println(arrayList.contains(<span class="hljs-string">&quot;小米&quot;</span>));        System.out.println(arrayList.contains(<span class="hljs-string">&quot;荣耀&quot;</span>));        System.out.println(<span class="hljs-string">&quot;=========获取元素位置==========&quot;</span>);        System.out.println(arrayList.indexOf(<span class="hljs-string">&quot;华为&quot;</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210203223533429.png" alt="image-20210203223533429"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        List arrayList = <span class="hljs-keyword">new</span> ArrayList();        <span class="hljs-comment">//添加数字（自动集箱）</span>        arrayList.add(<span class="hljs-number">10</span>);        arrayList.add(<span class="hljs-number">30</span>);        arrayList.add(<span class="hljs-number">10</span>);        arrayList.add(<span class="hljs-number">50</span>);        arrayList.remove(<span class="hljs-number">0</span>);        System.out.println(arrayList.toString());        System.out.println(<span class="hljs-string">&quot;========通过数值进行删除的方法=======&quot;</span>);        arrayList.remove((Object) <span class="hljs-number">10</span>);        System.out.println(arrayList.toString());        arrayList.remove(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">50</span>));        System.out.println(arrayList.toString());        <span class="hljs-comment">//添加数据</span>        arrayList.add(<span class="hljs-number">10</span>);        arrayList.add(<span class="hljs-number">30</span>);        arrayList.add(<span class="hljs-number">10</span>);        arrayList.add(<span class="hljs-number">50</span>);        System.out.println(<span class="hljs-string">&quot;添加数据后：&quot;</span>+arrayList);        System.out.println(<span class="hljs-string">&quot;=======返回子集合=====&quot;</span>);        List list = arrayList.subList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);        <span class="hljs-comment">//List list02 = arrayList.subList(2,6); 越界</span>        System.out.println(list);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210203224825285.png" alt="image-20210203224825285"></p><h4 id="List的实现类"><a href="#List的实现类" class="headerlink" title="List的实现类"></a>List的实现类</h4><h5 id="ArrayList-重点"><a href="#ArrayList-重点" class="headerlink" title="ArrayList(重点)"></a>ArrayList(重点)</h5><ul><li>数组结构实现，查询快、增删慢;</li><li>JDK1.2版本，运行效率快、线程不安全。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List.ArrayList;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.ListIterator;<span class="hljs-comment">//ArrayList的使用</span><span class="hljs-comment">//存储结构：数组 ，查找 遍历速度快，增删慢</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ArrayList arrayList = <span class="hljs-keyword">new</span> ArrayList();        <span class="hljs-comment">//添加元素</span>        Student g1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;冰冰&quot;</span>, <span class="hljs-number">18</span>);        Student g2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;虞书欣&quot;</span>, <span class="hljs-number">18</span>);        Student g3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李知恩&quot;</span>, <span class="hljs-number">18</span>);        Student g4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">18</span>);        arrayList.add(g1);        arrayList.add(g2);        arrayList.add(g3);        arrayList.add(<span class="hljs-number">0</span>,g4);        System.out.println(arrayList.toString());        arrayList.remove(<span class="hljs-number">2</span>);        System.out.println(<span class="hljs-string">&quot;=====迭代器======&quot;</span>);        Iterator iterator = arrayList.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;=====列表迭代器======&quot;</span>);        ListIterator listIterator = arrayList.listIterator();        <span class="hljs-keyword">while</span> (listIterator.hasNext())&#123;            System.out.println(listIterator.next().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;反向List迭代器&quot;</span>);        <span class="hljs-keyword">while</span> (listIterator.hasPrevious())&#123;            System.out.println(listIterator.previous().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;=======判断=======&quot;</span>);        System.out.println(arrayList.contains(<span class="hljs-string">&quot;白小飞&quot;</span>));        System.out.println(arrayList.toString());        System.out.println(<span class="hljs-string">&quot;========找位置=======&quot;</span>);        System.out.println(arrayList.indexOf(<span class="hljs-string">&quot;白小飞&quot;</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210203231141392.png" alt="image-20210203231141392"></p><p><strong>删除元素 <code>arrayList.remove(new Student(&quot;name&quot;, 10));</code></strong></p><p>这里重写了 equals(this == obj) 方法</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>&#123;  <span class="hljs-comment">//1 判断是不是同一个对象</span>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == obj)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  &#125;  <span class="hljs-comment">//2 判断是否为空</span>  <span class="hljs-keyword">if</span>(obj == <span class="hljs-keyword">null</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;  <span class="hljs-comment">//3 判断是否是Student类型</span>  <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Student)&#123;    Student == (Student)obj;    <span class="hljs-comment">//4 比较属性</span>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.name.equals(s.getName()) &amp;&amp; <span class="hljs-keyword">this</span>.age == s.getAge())&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;  &#125;  <span class="hljs-comment">//5 不满足条件返回false</span>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;</code></pre><p><strong>原码分析</strong></p><p>DEFAULT_CAPACITY = 10; //默认容量</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204122210858.png" alt="image-20210204122210858"></p><p>注意：如果没有向集合中添加任何元素时，容量0；添加一个后，容量为10；每次扩容是原来的1.5倍</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204122841574.png" alt="image-20210204122841574"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204123132586.png" alt="image-20210204123132586"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204123351858.png" alt="image-20210204123351858"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204123414185.png" alt="image-20210204123414185"></p><p>elementData存放元素的数组</p><p>size 实际元素个数</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204122719123.png" alt="image-20210204122719123"></p><h5 id="Vector（向量）"><a href="#Vector（向量）" class="headerlink" title="Vector（向量）"></a>Vector（向量）</h5><ul><li>数组结构实现，查询快、增删慢;。</li><li>JDK1.0版本，运行效率慢、线程安全。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List.Vector;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;====创建===&quot;</span>);        Vector vector = <span class="hljs-keyword">new</span> Vector&lt;&gt;();        System.out.println(<span class="hljs-string">&quot;====添加元素===&quot;</span>);        vector.add(<span class="hljs-string">&quot;王冰冰&quot;</span>);        vector.add(<span class="hljs-string">&quot;Lisa&quot;</span>);        vector.add(<span class="hljs-string">&quot;白小飞&quot;</span>);        vector.add(<span class="hljs-string">&quot;王冰冰&quot;</span>);        vector.add(<span class="hljs-string">&quot;IU&quot;</span>);        System.out.println(<span class="hljs-string">&quot;===删除元素===&quot;</span>);        vector.remove(<span class="hljs-string">&quot;白小飞&quot;</span>);        vector.remove(<span class="hljs-number">0</span>);        System.out.println(<span class="hljs-string">&quot;===打印集合===&quot;</span>);        System.out.println(vector.toString());        System.out.println(<span class="hljs-string">&quot;===普通for遍历===&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vector.size(); i++) &#123;            System.out.println(vector.get(i));        &#125;        System.out.println(<span class="hljs-string">&quot;===增强for遍历===&quot;</span>);        <span class="hljs-keyword">for</span> (Object o : vector) &#123;            String str = (String)o;            System.out.println(str);        &#125;        System.out.println(<span class="hljs-string">&quot;===普通迭代器===&quot;</span>);        Iterator iterator = vector.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;===List迭代器遍历===&quot;</span>);        ListIterator listIterator = vector.listIterator();        <span class="hljs-keyword">while</span> (listIterator.hasNext())&#123;            System.out.println(listIterator.next().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;===List反向迭代器遍历===&quot;</span>);        <span class="hljs-keyword">while</span> (listIterator.hasPrevious())&#123;            System.out.println(listIterator.previousIndex()+<span class="hljs-string">&quot;:&quot;</span>+listIterator.previous());        &#125;        System.out.println(<span class="hljs-string">&quot;===特有枚举器===&quot;</span>);        Enumeration elements = vector.elements();        <span class="hljs-keyword">while</span> (elements.hasMoreElements())&#123;            System.out.println((String)elements.nextElement());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断冰冰是否存在===&quot;</span>);        System.out.println(vector.contains(<span class="hljs-string">&quot;王冰冰&quot;</span>));        System.out.println(<span class="hljs-string">&quot;===判断是否为空===&quot;</span>);        System.out.println(vector.isEmpty());        System.out.println(<span class="hljs-string">&quot;===获取第一个元素===&quot;</span>);        System.out.println(vector.firstElement());        System.out.println(<span class="hljs-string">&quot;===获取最后一个元素===&quot;</span>);        System.out.println(vector.lastElement());        System.out.println(<span class="hljs-string">&quot;===获取下标为2的元素===&quot;</span>);        System.out.println(vector.elementAt(<span class="hljs-number">2</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204162119291.png" alt="image-20210204162119291"></p><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>链表结构实现，增删快，查询慢。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/LinkedLis.png" alt="LinkedLis"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List.LinkedList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.LinkedList;<span class="hljs-keyword">import</span> java.util.ListIterator;<span class="hljs-comment">//LinkedList</span><span class="hljs-comment">//存储结构：双向链表</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;===创建集合===&quot;</span>);        LinkedList linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        System.out.println(<span class="hljs-string">&quot;===添加元素===&quot;</span>);        Student stu1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">10</span>);        Student stu2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杨洪利&quot;</span>, <span class="hljs-number">10</span>);        Student stu3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;哈哈哈&quot;</span>, <span class="hljs-number">10</span>);        linkedList.add(stu1);        linkedList.add(stu2);        linkedList.add(stu3);        System.out.println(<span class="hljs-string">&quot;===输出长度及数据===&quot;</span>);        System.out.println(linkedList.size());        System.out.println(linkedList.toString());        System.out.println(<span class="hljs-string">&quot;====删除数据===&quot;</span>);        linkedList.remove(<span class="hljs-number">2</span>);        System.out.println(linkedList.toString());        System.out.println(<span class="hljs-string">&quot;===for遍历===&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; linkedList.size(); i++) &#123;            System.out.println(linkedList.get(i));        &#125;        System.out.println(<span class="hljs-string">&quot;===增强for遍历===&quot;</span>);        <span class="hljs-keyword">for</span> (Object o : linkedList) &#123;            Student o1 = (Student) o;            System.out.println(o1);        &#125;        System.out.println(<span class="hljs-string">&quot;===普通迭代器===&quot;</span>);        Iterator iterator = linkedList.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;===listIterator迭代器===&quot;</span>);        ListIterator listIterator = linkedList.listIterator();        <span class="hljs-keyword">while</span> (listIterator.hasNext())&#123;            System.out.println(listIterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;===listIterator反向迭代器===&quot;</span>);        <span class="hljs-keyword">while</span> (listIterator.hasPrevious())&#123;            System.out.println(listIterator.previous().toString());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断并获取===&quot;</span>);        System.out.println(linkedList.contains(<span class="hljs-string">&quot;白小飞&quot;</span>));        System.out.println(linkedList.indexOf(stu1));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204163335185.png" alt="image-20210204163335185"></p><p><strong>源码分析</strong></p><p>int size():集合的大小</p><p>Node first:链表的头节点！</p><p>Node last:链表的尾节点</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204164057185.png" alt="image-20210204164057185"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204164142424.png" alt="image-20210204164142424"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204164212640.png" alt="image-20210204164212640"></p><p>remove速度快：只是改变节点关系，数据不需要移动</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204164655690.png" alt="image-20210204164655690"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/LinkedLis.png" alt="LinkedLis"></p><h4 id="不同结构实现方式"><a href="#不同结构实现方式" class="headerlink" title="不同结构实现方式"></a>不同结构实现方式</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204165047435.png" alt="image-20210204165047435"></p><ul><li><p>ArrayList:必须开辟连续空间，查询快,增删慢。</p></li><li><p>LinkedList:无需开辟连续空间,查询慢,增删快。</p></li></ul><h4 id="List与数组转化"><a href="#List与数组转化" class="headerlink" title="List与数组转化"></a>List与数组转化</h4><pre><code class="hljs java"><span class="hljs-comment">//list.toArrary()</span><span class="hljs-keyword">package</span> aggregate.List;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        list.add(<span class="hljs-number">1</span>);        list.add(<span class="hljs-number">2</span>);        Integer[] array = list.toArray(<span class="hljs-keyword">new</span> Integer[<span class="hljs-number">10</span>]);        Integer[] array1 = list.toArray(<span class="hljs-keyword">new</span> Integer[<span class="hljs-number">2</span>]);        System.out.println(<span class="hljs-string">&quot;objects1 == objects2 : &quot;</span>+(array == array1));        System.out.println(<span class="hljs-string">&quot;show array: &quot;</span>+ Arrays.toString(array));        System.out.println(<span class="hljs-string">&quot;show array1: &quot;</span>+ Arrays.toString(array1));        System.out.println(<span class="hljs-string">&quot;show list: &quot;</span>+list);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205204801334.png" alt="image-20210205204801334"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.List;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">//数组转集合</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String[] students = &#123;<span class="hljs-string">&quot;宰相&quot;</span>,<span class="hljs-string">&quot;皇帝&quot;</span>,<span class="hljs-string">&quot;大臣&quot;</span>,<span class="hljs-string">&quot;御史大夫&quot;</span>&#125;;        List&lt;String&gt; strings = Arrays.asList(students);        <span class="hljs-comment">//这个集合是受限集合，不支持增加删除</span>        <span class="hljs-comment">//System.out.println(strings);</span>        <span class="hljs-comment">//strings.add(&quot;秦王&quot;);</span>        <span class="hljs-comment">//strings.remove(&quot;宰相&quot;);</span>        System.out.println(strings);    &#125;&#125;</code></pre><p><strong>这个集合是受限集合，不支持增加删除操作！</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205205543031.png" alt="image-20210205205543031"></p><pre><code class="hljs java"><span class="hljs-comment">//把基本类型数组转成集合时，需要修改为包装类型</span>Integer[] nums01=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;List&lt;Integer&gt; integers = Arrays.asList(nums01);<span class="hljs-comment">//List&lt;int[]&gt; integers02 = Arrays.asList(nums01);</span>System.out.println(integers);</code></pre><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>Java中int和Integer关系是比较微妙的。关系如下：</p><ol><li>int是基本的数据类型,Integer是int的封装类(复杂数据类型)；</li><li>int和Integer都可以表示某一个数值；</li><li>int和Integer不能够互用，因为他们两种不同的数据类型；</li><li>在类进行初始化时int类的变量初始为0.而Integer的变量则初始化为null</li></ol><p>小结：只是用来进行一些加减乘除的运算or作为参数进行传递，那么就可以直接声明为int基本数据类型，但如果要像对象一样来进行处理，那么就要用Integer来声明一个对象，因为java是面向对象的语言，因此当声明为对象时能够提供很多对象间转换的方式。</p><h3 id="4-泛型"><a href="#4-泛型" class="headerlink" title="4.泛型"></a>4.泛型</h3><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><blockquote><p>本质是参数化类型，把类型作为参数传递</p><p>语法: <T,.....>成为类型占位符，表示一种引用类型，可以写多个逗号隔开</p></blockquote><ul><li>泛型类</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//泛型类</span><span class="hljs-comment">//语法：类名&lt;T&gt;</span><span class="hljs-comment">//T表示类型占位符,可以有多个</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;    <span class="hljs-comment">//泛型可以用于创建变量，但是不能实例化对象 new</span>    <span class="hljs-comment">//使用泛型创建变量</span>    T t;    <span class="hljs-comment">//作为方法的参数</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T t)</span></span>&#123;        System.out.println(t);    &#125;    <span class="hljs-comment">//泛型作为方法的返回值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getT</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> t;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//泛型类的创建</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Demo01&lt;String&gt; demo01 = <span class="hljs-keyword">new</span> Demo01&lt;&gt;();        demo01.t=<span class="hljs-string">&quot;hello&quot;</span>;        demo01.print(<span class="hljs-string">&quot;大家好&quot;</span>);        System.out.println(demo01.getT());        Demo01&lt;Integer&gt; integerDemo01 = <span class="hljs-keyword">new</span> Demo01&lt;&gt;();        integerDemo01.t=<span class="hljs-number">12</span>;        integerDemo01.print(<span class="hljs-number">15</span>);        System.out.println(integerDemo01.getT());    &#125;&#125;</code></pre><p><strong>注意：</strong>1.泛型只能使用引用类型；2.不同泛型类型对象不能相互赋值</p><ul><li>泛型接口</li></ul><pre><code class="hljs java"><span class="hljs-comment">//Demo02</span><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//泛型接口</span><span class="hljs-comment">//注意：不能创建泛型静态常量</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Demo02</span>&lt;<span class="hljs-title">K</span>&gt; </span>&#123;    String name=<span class="hljs-string">&quot;白小飞&quot;</span>;    <span class="hljs-function">K <span class="hljs-title">server</span><span class="hljs-params">(K k)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//方法一</span><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//继承string类型的范型类接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02Impl01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo02</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">server</span><span class="hljs-params">(String s)</span> </span>&#123;        System.out.println(s);        <span class="hljs-keyword">return</span> s;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//方法二</span><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//实现泛型类接口的类也是泛型类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02Impl02</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo02</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">server</span><span class="hljs-params">(T t)</span> </span>&#123;        System.out.println(t);        <span class="hljs-keyword">return</span> t;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//main()</span><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Demo02Impl01 demo02 = <span class="hljs-keyword">new</span> Demo02Impl01();        demo02.server(<span class="hljs-string">&quot;白小飞&quot;</span>);        Demo02Impl02&lt;String&gt; demo02Impl02 = <span class="hljs-keyword">new</span> Demo02Impl02&lt;&gt;();        demo02Impl02.server(<span class="hljs-string">&quot;hello&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204213633053.png" alt="image-20210204213633053"></p><ul><li>泛型方法</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//泛型方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-keyword">public</span> &lt;t&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;say!&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">haha</span><span class="hljs-params">(T t)</span></span>&#123;        System.out.println(t);        <span class="hljs-keyword">return</span> t;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-comment">//调用泛型方法</span><span class="hljs-comment">//类型不需要定义，它会根据传入的值确定类型</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Demo03 demo03 = <span class="hljs-keyword">new</span> Demo03();        demo03.say();        demo03.haha(<span class="hljs-string">&quot;中国加油！&quot;</span>);        demo03.haha(<span class="hljs-number">111</span>);    &#125;&#125;</code></pre><p><strong>好处</strong> </p><ol><li>提高代码重用性 ,类似于重载，一个方法可以传递各种参数！</li><li>防止类型转换异常，提高代码安全性</li></ol><h4 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.SegmentFault;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.LinkedList;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;原迭代器遍历&quot;</span>);        LinkedList&lt;Object&gt; objects = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        objects.add(<span class="hljs-string">&quot;划水&quot;</span>);        objects.add(<span class="hljs-string">&quot;摸鱼&quot;</span>);        objects.add(<span class="hljs-string">&quot;吃饭&quot;</span>);        objects.add(<span class="hljs-number">555</span>);        objects.add(<span class="hljs-number">666</span>);        Iterator&lt;Object&gt; iterator = objects.iterator();        <span class="hljs-comment">//while (iterator.hasNext())&#123;</span>            <span class="hljs-comment">//System.out.println(iterator.toString());</span>            <span class="hljs-comment">//String str = (String) iterator.next();</span>            <span class="hljs-comment">//System.out.println(str);</span>        <span class="hljs-comment">//&#125;</span>        LinkedList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        integers.add(<span class="hljs-number">1</span>);        integers.add(<span class="hljs-number">4</span>);        integers.add(<span class="hljs-number">3</span>);        integers.add(<span class="hljs-number">2</span>);        Iterator&lt;Integer&gt; iterator1 = integers.iterator();        <span class="hljs-keyword">while</span> (iterator1.hasNext())&#123;            System.out.println(iterator1.next());        &#125;        Student stu1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">12</span>);        Student stu2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;冰冰&quot;</span>, <span class="hljs-number">12</span>);        Student stu3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;虞书欣&quot;</span>, <span class="hljs-number">12</span>);        Student stu4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;IU&quot;</span>, <span class="hljs-number">12</span>);        LinkedList&lt;Student&gt; students = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        students.add(stu1);        students.add(stu2);        students.add(stu3);        students.add(stu4);        Iterator&lt;Student&gt; iterator2 = students.iterator();        <span class="hljs-keyword">while</span> (iterator2.hasNext())&#123;            System.out.println(iterator2.next());        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204224544183.png" alt="image-20210204224544183"></p><h3 id="5-Set集合"><a href="#5-Set集合" class="headerlink" title="5.Set集合"></a>5.Set集合</h3><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Set.HashSet;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-comment">//测试 Set 接口的使用</span>    <span class="hljs-comment">//特点：无序 、没有下标 、 不能重复</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建集合</span>        Set&lt;String&gt; hashSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();        <span class="hljs-comment">//添加数据</span>        <span class="hljs-comment">//不能重复！重复的将不会存储！</span>        hashSet.add(<span class="hljs-string">&quot;白小飞&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;白小飞&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;王冰冰&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;吃花椒&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;喵酱&quot;</span>);        System.out.println(hashSet.size());        System.out.println(hashSet.toString());        <span class="hljs-comment">//删除操作</span>        <span class="hljs-comment">//hashSet.remove(&quot;白小飞&quot;);</span>        <span class="hljs-comment">//遍历</span>        System.out.println(<span class="hljs-string">&quot;===使用增强for===&quot;</span>);        <span class="hljs-keyword">for</span> (String s : hashSet) &#123;            System.out.println(s);        &#125;        System.out.println(<span class="hljs-string">&quot;===使用迭代器===&quot;</span>);        Iterator&lt;String&gt; iterator = hashSet.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断===&quot;</span>);        System.out.println(hashSet.contains(<span class="hljs-string">&quot;王冰冰&quot;</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204234823341.png" alt="image-20210204234823341"></p><h4 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a>Set实现类</h4><ul><li>HashSet</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Set.HashSet;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-comment">//HashSet</span><span class="hljs-comment">//存储结构：哈希表（数组+链表+红黑树）</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//新建集合</span>        HashSet&lt;String&gt; hashSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();        <span class="hljs-comment">//添加元素</span>        hashSet.add(<span class="hljs-string">&quot;王冰冰&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;蔡徐坤&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;双厨&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;央视&quot;</span>);        System.out.println(hashSet.size());        System.out.println(hashSet);        <span class="hljs-comment">//删除元素</span>        hashSet.remove(<span class="hljs-string">&quot;央视&quot;</span>);        hashSet.add(<span class="hljs-string">&quot;央视&quot;</span>);        System.out.println(hashSet);        System.out.println(<span class="hljs-string">&quot;===增强for迭代===&quot;</span>);        <span class="hljs-keyword">for</span> (String s : hashSet) &#123;            System.out.println(s);        &#125;        System.out.println(<span class="hljs-string">&quot;===迭代器===&quot;</span>);        Iterator&lt;String&gt; iterator = hashSet.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断===&quot;</span>);        System.out.println(hashSet.contains(<span class="hljs-string">&quot;蔡徐坤&quot;</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210204235919868.png" alt="image-20210204235919868"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Set.HashSet;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建集合</span>        HashSet&lt;Person&gt; people = <span class="hljs-keyword">new</span> HashSet&lt;Person&gt;();        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">11</span>);        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;qdwq&quot;</span>, <span class="hljs-number">11</span>);        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;qdqw&quot;</span>, <span class="hljs-number">11</span>);        Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;caixe&quot;</span>, <span class="hljs-number">11</span>);        <span class="hljs-comment">//添加元素</span>        people.add(p1);        people.add(p2);        people.add(p3);        people.add(p4);        people.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;lisa&quot;</span>,<span class="hljs-number">18</span>));        <span class="hljs-comment">//下面new又存储了一个相同的元素！！</span>        <span class="hljs-comment">//存了两个白小飞！！</span>        people.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">11</span>));        <span class="hljs-comment">//输出元素</span>        System.out.println(people.toString());        System.out.println(<span class="hljs-string">&quot;===增强for循环===&quot;</span>);        <span class="hljs-keyword">for</span> (Person person : people) &#123;            System.out.println(person.toString());        &#125;        System.out.println(<span class="hljs-string">&quot;===迭代器循环===&quot;</span>);        Iterator&lt;Person&gt; iterator = people.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205001302866.png" alt="image-20210205001302866"></p><p><strong>存储过程（重复依据）</strong></p><ol><li>根据hashCode计算保存的位置，如果位置为空，直接保存，若不为空，进行第二步</li><li>再执行equals方法，如果equals为true，则认为是重复，否则形成链表</li></ol><pre><code class="hljs java"><span class="hljs-comment">//方法重写 可以通过new进行remove删除以及不能通过new重复存储了 </span><span class="hljs-comment">//alt+insert 重写 hasCode 和 equal方法</span><span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        Person person = (Person) o;        <span class="hljs-keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> Objects.hash(name, age);    &#125;</code></pre><p>在hashCode方法中存在了一个31，它的作用：</p><p>1.31是一个质数，尽量减少散列冲突</p><p>2.31提高执行效率 31*i=i&lt;&lt;5-i (将乘法换成移位操作，底层计算，效率快)</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205115837148.png" alt="image-20210205115837148"></p><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>基于排列顺序实现元素不重复</li><li>实现了SortedSet接口，对集合元素自动排序</li><li>元素对象的类型必须实现Comparable接口，指定排序规则</li><li>通过CompareTo方法确定是否为重复元素</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/TreeSet.png" alt="TreeSet"></p><h5 id="普通数据默认比较"><a href="#普通数据默认比较" class="headerlink" title="普通数据默认比较"></a>普通数据默认比较</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.TreeSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.TreeSet;<span class="hljs-comment">//使用TreeSet保存数据</span><span class="hljs-comment">//存储结构：红黑树</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TreeSet&lt;String&gt; treeSet = <span class="hljs-keyword">new</span> TreeSet&lt;String&gt;();        treeSet.add(<span class="hljs-string">&quot;asda&quot;</span>);        treeSet.add(<span class="hljs-string">&quot;xya&quot;</span>);        treeSet.add(<span class="hljs-string">&quot;ii&quot;</span>);        treeSet.add(<span class="hljs-string">&quot;a&quot;</span>);        System.out.println(<span class="hljs-string">&quot;个数：&quot;</span>+treeSet.size());        System.out.println(treeSet.toString());        System.out.println(<span class="hljs-string">&quot;===增强for===&quot;</span>);        <span class="hljs-keyword">for</span> (String s : treeSet) &#123;            System.out.println(s);        &#125;        System.out.println(<span class="hljs-string">&quot;===迭代器===&quot;</span>);        Iterator&lt;String&gt; iterator = treeSet.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205125205703.png" alt="image-20210205125205703"></p><h5 id="实现-Comparable接口"><a href="#实现-Comparable接口" class="headerlink" title="实现 Comparable接口"></a>实现 Comparable接口</h5><pre><code class="hljs java"><span class="hljs-comment">//Person</span><span class="hljs-keyword">package</span> aggregate.TreeSet;<span class="hljs-keyword">import</span> java.util.Objects;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Person</span>&gt; </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-comment">//比较规则：先按姓名比，再按年龄比</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Person o)</span> </span>&#123;        <span class="hljs-keyword">int</span> name=<span class="hljs-keyword">this</span>.name.compareTo(o.name);        <span class="hljs-keyword">int</span> age=<span class="hljs-keyword">this</span>.age-o.age;        <span class="hljs-keyword">return</span> name==<span class="hljs-number">0</span>?age:name;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        Person person = (Person) o;        <span class="hljs-keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> Objects.hash(name, age);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.TreeSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.TreeSet;<span class="hljs-comment">//使用TreeSet保存数据</span><span class="hljs-comment">//存储结构：红黑树</span><span class="hljs-comment">//要求：元素必须要实现 Comparable接口,CompareTo() 返回值为0,认为是重复元素</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TreeSet&lt;Person&gt; people = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;xyz&quot;</span>, <span class="hljs-number">11</span>);        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;lisa&quot;</span>,<span class="hljs-number">11</span>);        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;bai&quot;</span>,<span class="hljs-number">11</span>);        Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">11</span>);        people.add(p1);        people.add(p2);        people.add(p3);        people.add(p4);        System.out.println(people.size());        System.out.println(people.toString());        Person p5 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">18</span>);        Person p6 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">18</span>);        people.add(p5);        people.add(p6);        System.out.println(people.toString());        <span class="hljs-keyword">for</span> (Person person : people) &#123;            System.out.println(person.toString());        &#125;        Iterator&lt;Person&gt; iterator = people.iterator();        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;        <span class="hljs-comment">//重写hashSet方法后，将不会储存重复的new 对象</span>        <span class="hljs-comment">//重写hashSet方法后，可以通过new 对象删除具有相同属性的元素</span>        System.out.println(people.toString());        people.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">11</span>));        System.out.println(people.toString());        people.remove(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">18</span>));        System.out.println(people.toString());    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205130919657.png" alt="image-20210205130919657"></p><h5 id="Comparator-实现定制比较（定制器）"><a href="#Comparator-实现定制比较（定制器）" class="headerlink" title="Comparator 实现定制比较（定制器）"></a>Comparator 实现定制比较（定制器）</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.TreeSet;<span class="hljs-comment">//Comparator 定制比较</span><span class="hljs-keyword">import</span> java.util.Comparator;<span class="hljs-keyword">import</span> java.util.TreeSet;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;                <span class="hljs-comment">//创建集合并定制比较规则</span>        TreeSet&lt;Person&gt; people = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>&#123;                <span class="hljs-keyword">int</span> n1 = o1.getName().compareTo(o2.getName());                <span class="hljs-keyword">int</span> n2 = o1.getAge()-o2.getAge();                <span class="hljs-keyword">return</span> n1==<span class="hljs-number">0</span>?n2:n1;            &#125;        &#125;);        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;xyz&quot;</span>, <span class="hljs-number">11</span>);        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;lisa&quot;</span>,<span class="hljs-number">11</span>);        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;bai&quot;</span>,<span class="hljs-number">11</span>);        Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;iu&quot;</span>,<span class="hljs-number">11</span>);        people.add(p1);        people.add(p2);        people.add(p3);        people.add(p4);        System.out.println(people);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205132114298.png" alt="image-20210205132114298"></p><p><strong>example</strong></p><p>要求：使用TreeSet集合实现字符串长度排序</p><p>compare :</p><p>1：前面的数&gt;后面的数，是降序（从大到小）排列，如果想要改为升序排列，就需要返回1</p><p>-1：前面的数&lt;后面的数，是升序（从小到大）排列，不改变位置就返回-1；</p><p>0：二者相等，不进行交换，也就不排序。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.TreeSet;<span class="hljs-keyword">import</span> java.util.Comparator;<span class="hljs-keyword">import</span> java.util.TreeSet;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TreeSet&lt;String&gt; strings = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(String o1, String o2)</span> </span>&#123;                <span class="hljs-keyword">int</span> n1=o1.length()-o2.length();                <span class="hljs-comment">//n1 == 0 说明 长度相等</span>                <span class="hljs-comment">//compare :</span>                <span class="hljs-comment">//1：前面的数&gt;后面的数，是降序（从大到小）排列，如果想要改为升序排列，就需要返回1</span>                <span class="hljs-comment">//-1：前面的数&lt;后面的数，是升序（从小到大）排列，不改变位置就返回-1；</span>                <span class="hljs-comment">//0：二者相等，不进行交换，也就不排序。</span>                <span class="hljs-keyword">int</span> n2=o1.compareTo(o2);                <span class="hljs-comment">//按照默认首字母比较</span>                <span class="hljs-keyword">return</span> n1==<span class="hljs-number">0</span>?n2:n1;            &#125;        &#125;);        strings.add(<span class="hljs-string">&quot;aaaa&quot;</span>);        strings.add(<span class="hljs-string">&quot;zasas&quot;</span>);        strings.add(<span class="hljs-string">&quot;asasd&quot;</span>);        strings.add(<span class="hljs-string">&quot;ada&quot;</span>);        strings.add(<span class="hljs-string">&quot;wd&quot;</span>);        System.out.println(strings);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205133802895.png" alt="image-20210205133802895"></p><h3 id="6-Map集合"><a href="#6-Map集合" class="headerlink" title="6.Map集合"></a>6.Map集合</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/map%E9%9B%86%E5%90%88.png" alt="map集合"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205135518032.png" alt="image-20210205135518032"></p><h4 id="Map父接口"><a href="#Map父接口" class="headerlink" title="Map父接口"></a>Map父接口</h4><p>Map接口的特点</p><ol><li>用于存储任意键值对（key - value）</li><li>键：无序、无下标、不允许重复（唯一）</li><li>值：无序、无下标、允许重复</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Map;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">//Map接口的使用</span><span class="hljs-comment">//特点：(1)存储键值对；(2)键不能重复，值可以重复;(3)无序</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        HashMap&lt;String, Integer&gt; stringIntegerHashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        stringIntegerHashMap.put(<span class="hljs-string">&quot;白小飞&quot;</span>,<span class="hljs-number">18</span>);        stringIntegerHashMap.put(<span class="hljs-string">&quot;葫芦娃&quot;</span>,<span class="hljs-number">18</span>);        stringIntegerHashMap.put(<span class="hljs-string">&quot;哈哈哈&quot;</span>,<span class="hljs-number">18</span>);        stringIntegerHashMap.put(<span class="hljs-string">&quot;嘎嘎嘎&quot;</span>,<span class="hljs-number">18</span>);        System.out.println(stringIntegerHashMap.toString());        System.out.println(<span class="hljs-string">&quot;===不会增加重复元素，但是会更新value值===&quot;</span>);        stringIntegerHashMap.put(<span class="hljs-string">&quot;白小飞&quot;</span>,<span class="hljs-number">21</span>);        System.out.println(stringIntegerHashMap.toString());        System.out.println(<span class="hljs-string">&quot;===keySet遍历===&quot;</span>);        Set&lt;String&gt; strings = stringIntegerHashMap.keySet();        <span class="hljs-keyword">for</span> (String string : strings) &#123;            System.out.println(string+<span class="hljs-string">&quot;:&quot;</span>+stringIntegerHashMap.get(string));        &#125;        System.out.println(<span class="hljs-string">&quot;===entrySet遍历===&quot;</span>);        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = stringIntegerHashMap.entrySet();        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;            System.out.println(entry.getKey()+<span class="hljs-string">&quot;:&quot;</span>+entry.getValue());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断key与value是否存在===&quot;</span>);        System.out.println(stringIntegerHashMap.containsKey(<span class="hljs-string">&quot;白小飞&quot;</span>));        System.out.println(stringIntegerHashMap.containsValue(<span class="hljs-number">18</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205143743861.png" alt="image-20210205143743861"></p><h4 id="KeySet与EntrySet"><a href="#KeySet与EntrySet" class="headerlink" title="KeySet与EntrySet"></a>KeySet与EntrySet</h4><p>entrySet效率较高，可一次性查出key与value。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205143246792.png" alt="image-20210205143246792"></p><h4 id="Map集合的实现类"><a href="#Map集合的实现类" class="headerlink" title="Map集合的实现类"></a>Map集合的实现类</h4><h5 id="HashMap-重点"><a href="#HashMap-重点" class="headerlink" title="HashMap(重点)"></a>HashMap(重点)</h5><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/HashMap.gif" alt="HashMap"></p><ul><li>存储结构：哈希表（数组+链表+红黑树）</li><li>使用key可使hashcode和equals作为重复</li><li>增、删、遍历、判断与上述一致</li></ul><pre><code class="hljs java"><span class="hljs-comment">//Student</span><span class="hljs-keyword">package</span> aggregate.Map.HashMap;<span class="hljs-keyword">import</span> java.util.Objects;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> stuNo;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> stuNo)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.stuNo = stuNo;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getStuNo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> stuNo;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStuNo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stuNo)</span> </span>&#123;        <span class="hljs-keyword">this</span>.stuNo = stuNo;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, stuNo=&quot;</span> + stuNo +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        Student student = (Student) o;        <span class="hljs-keyword">return</span> stuNo == student.stuNo &amp;&amp; Objects.equals(name, student.name);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> Objects.hash(name, stuNo);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> aggregate.Map.HashMap;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">//HashMap集合</span><span class="hljs-comment">//存储结构：哈希表（数组+链表+红黑树）</span><span class="hljs-comment">//使用hashCode 和 equals 方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        HashMap&lt;Student, String&gt; studentStringHashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-comment">//key值不可以重复，但是value值可以！value值也会覆写！！</span>        Student stu01 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">100</span>);        Student stu02 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">102</span>);        Student stu03 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;唐三藏&quot;</span>, <span class="hljs-number">103</span>);        studentStringHashMap.put(stu01,<span class="hljs-string">&quot;上海&quot;</span>);        studentStringHashMap.put(stu02,<span class="hljs-string">&quot;杭州&quot;</span>);        studentStringHashMap.put(stu03,<span class="hljs-string">&quot;北京&quot;</span>);        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+studentStringHashMap.size());        System.out.println(studentStringHashMap.toString());        studentStringHashMap.put(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;沙和尚&quot;</span>,<span class="hljs-number">122</span>),<span class="hljs-string">&quot;北京&quot;</span>);        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+studentStringHashMap.size());        System.out.println(studentStringHashMap.toString());        System.out.println(<span class="hljs-string">&quot;===添加重复元素===&quot;</span>); <span class="hljs-comment">//重写hashCode 和 equals 方法实现不允许存储重复数据</span>        studentStringHashMap.put(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;唐三藏&quot;</span>, <span class="hljs-number">103</span>),<span class="hljs-string">&quot;北京&quot;</span>);        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span>+studentStringHashMap.size());        System.out.println(studentStringHashMap.toString());        studentStringHashMap.remove(stu01);        System.out.println(studentStringHashMap);        <span class="hljs-comment">//studentStringHashMap.clear();</span>        System.out.println(<span class="hljs-string">&quot;===keySet遍历===&quot;</span>);        Set&lt;Student&gt; students = studentStringHashMap.keySet();        <span class="hljs-keyword">for</span> (Student student : students) &#123;            System.out.println(student+<span class="hljs-string">&quot;:&quot;</span>+studentStringHashMap.get(student));        &#125;        System.out.println(<span class="hljs-string">&quot;===entrySet遍历===&quot;</span>);        Set&lt;Map.Entry&lt;Student, String&gt;&gt; entries = studentStringHashMap.entrySet();        <span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : entries) &#123;            System.out.println(entry.getKey()+<span class="hljs-string">&quot;:&quot;</span>+entry.getValue());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断是否存在===&quot;</span>);        System.out.println(studentStringHashMap.containsValue(<span class="hljs-string">&quot;泰安&quot;</span>));        <span class="hljs-comment">//由于重写了equals 和 hashSet 方法， 所以可以通过 new 一个具有相同属性的对象 删除原有元素</span>        System.out.println(studentStringHashMap.containsKey(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;唐三藏&quot;</span>, <span class="hljs-number">103</span>)));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205152510536.png" alt="image-20210205152510536"></p><h6 id="原码分析"><a href="#原码分析" class="headerlink" title="原码分析"></a>原码分析</h6><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205182956377.png" alt="image-20210205182956377"></p><pre><code class="hljs java"><span class="hljs-comment">//默认的初始化容量为16</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;<span class="hljs-comment">//最大的容量，容量的值必须是2的幂并且小于最大容量，最大值为2的30此房</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">//加载因子默认值为0.75</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<span class="hljs-comment">//计数阀值，超过这个值将会使用树形结构替代链表结构</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFYTHRESHOLD = <span class="hljs-number">8</span>;<span class="hljs-comment">//由树形结构转换成链表结构的阀值</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<span class="hljs-comment">//树形结构最小容量为64</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<span class="hljs-comment">//链表数组</span><span class="hljs-keyword">transient</span> Node&lt;K, V&gt;[] table;<span class="hljs-comment">//HashMap中value的集合</span><span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet;<span class="hljs-comment">//hashMap的长度</span><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;</code></pre><ul><li>刚创建hashSet时table=null size=0以节省空间</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205182303236.png" alt="image-20210205182303236"></p><pre><code class="hljs java">Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;        <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)            n = (tab = resize()).length;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">if</span> (++size &gt; threshold)            resize();        afterNodeInsertion(evict);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</code></pre><h6 id="源码分析总结"><a href="#源码分析总结" class="headerlink" title="源码分析总结"></a>源码分析总结</h6><ol><li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16</li><li>当元素个数大于阈值（16*0.75 = 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数</li><li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li><li>jdk1.8 当链表长度 &lt;6 时 调整成链表</li><li>jdk1.8 以前，链表时头插入，之后为尾插入</li></ol><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/HashMap.gif" alt="HashMap"></p><h6 id="HashMap与HashSet"><a href="#HashMap与HashSet" class="headerlink" title="HashMap与HashSet"></a>HashMap与HashSet</h6><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205185143373.png" alt="image-20210205185143373"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205185231505.png" alt="image-20210205185231505"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205185254562.png" alt="image-20210205185254562"></p><p>HashSet实现了 Set接口，不允许出现重复元素，但是向HashSet中存储对象必须重写对象的HashCode和equals方法。<strong>HashSet是由HashMap实现的</strong>。HashSet允许存储NULL元素，并且NULL永远存储在第一个。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/HashSet.png" alt="HashSet"></p><p>HashMap实现了Map接口，允许NULL键NULL值。使用hash寻址会发生hash冲突问题，底层使用数组加链表的结构，解决了冲突也均衡了查找和增删的效率;一般将数组中的每一个元素称作桶（segment）。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/HashMap.png" alt="HashMap"></p><h5 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h5><p>线程安全，运行效率慢；不允许null作为key或是value</p><h5 id="Properties-属性集合"><a href="#Properties-属性集合" class="headerlink" title="Properties(属性集合)"></a>Properties(属性集合)</h5><p>hashtable的子类，要求key和value都是string，通常用于配置文件的读取</p><p>特点：</p><ul><li>1.存储属性名和属性值</li><li>2.属性名和属性值都是字符串类型</li><li>3.没有泛型</li><li>和流有关</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206214707613.png" alt="image-20210206214707613"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Map;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 1 创建集合</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">// 2 添加数据</span>        properties.setProperty(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);        System.out.println(properties.toString());        <span class="hljs-comment">// 3 遍历</span>        <span class="hljs-comment">// 3.1 keySet</span>        Set&lt;Object&gt; objects = properties.keySet();        <span class="hljs-keyword">for</span> (Object o : objects) &#123;            System.out.println(o+<span class="hljs-string">&quot;:&quot;</span>+properties.getProperty((String) o));        &#125;        <span class="hljs-comment">// 3.2 entrySet</span>        Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = properties.entrySet();        System.out.println(entries.toString());        <span class="hljs-comment">// 3.3 stringPropertyNames</span>        Set&lt;String&gt; strings = properties.stringPropertyNames();        <span class="hljs-keyword">for</span> (String string : strings) &#123;            System.out.println(string+<span class="hljs-string">&quot;:&quot;</span>+properties.getProperty(string));        &#125;        <span class="hljs-comment">// 4 和流有关的方法</span>        <span class="hljs-comment">// 4.1 properties.list(printWriter)</span>        <span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(&quot;e://abc.txt&quot;);</span>        <span class="hljs-comment">//properties.list(printWriter);</span>        <span class="hljs-comment">//printWriter.close();</span>        <span class="hljs-comment">// 4.2 properties.store(printWriter,&quot;注释&quot;);</span>        <span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(&quot;e://xyz.txt&quot;);</span>        <span class="hljs-comment">//properties.store(printWriter,&quot;注释&quot;);</span>        <span class="hljs-comment">//printWriter.close();</span>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);        <span class="hljs-comment">// 4.3 properties.load(fileInputStream);</span>        Properties properties1 = <span class="hljs-keyword">new</span> Properties();        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;e://abc.txt&quot;</span>);        properties1.load(fileInputStream);        fileInputStream.close();        System.out.println(properties1.toString());    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210206214418402.png" alt="image-20210206214418402"></p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Map.TreeMap;<span class="hljs-keyword">import</span> java.util.Comparator;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-keyword">import</span> java.util.TreeMap;<span class="hljs-comment">//TreeMap</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//定制器比较</span>        TreeMap&lt;Student, Integer&gt; studentIntegerTreeMap = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;                <span class="hljs-keyword">int</span> n1=o1.getStuNo()-o2.getStuNo();                <span class="hljs-keyword">return</span> n1;            &#125;        &#125;);        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">120</span>);        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;呜呜呜&quot;</span>, <span class="hljs-number">121</span>);        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杨洪利&quot;</span>, <span class="hljs-number">123</span>);        studentIntegerTreeMap.put(s1,<span class="hljs-number">11</span>);        studentIntegerTreeMap.put(s2,<span class="hljs-number">12</span>);        studentIntegerTreeMap.put(s3,<span class="hljs-number">15</span>);        System.out.println(studentIntegerTreeMap.toString());        studentIntegerTreeMap.put(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杨洪利&quot;</span>, <span class="hljs-number">123</span>),<span class="hljs-number">88</span>);        System.out.println(studentIntegerTreeMap.toString());        System.out.println(<span class="hljs-string">&quot;===删除===&quot;</span>);        studentIntegerTreeMap.remove(s3);        System.out.println(studentIntegerTreeMap.toString());        System.out.println(<span class="hljs-string">&quot;===keyset遍历===&quot;</span>);        Set&lt;Student&gt; students = studentIntegerTreeMap.keySet();        <span class="hljs-keyword">for</span> (Student student : students) &#123;            System.out.println(student.toString()+<span class="hljs-string">&quot;:&quot;</span>+studentIntegerTreeMap.get(student));        &#125;        System.out.println(<span class="hljs-string">&quot;===entryset遍历===&quot;</span>);        Set&lt;Map.Entry&lt;Student, Integer&gt;&gt; entries = studentIntegerTreeMap.entrySet();        <span class="hljs-keyword">for</span> (Map.Entry&lt;Student, Integer&gt; entry : entries) &#123;            System.out.println(entry.getKey()+<span class="hljs-string">&quot;:&quot;</span>+entry.getValue());        &#125;        System.out.println(<span class="hljs-string">&quot;===判断===&quot;</span>);        System.out.println(studentIntegerTreeMap.containsKey(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;白小飞&quot;</span>, <span class="hljs-number">120</span>)));        System.out.println(studentIntegerTreeMap.containsValue(<span class="hljs-number">12</span>));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205193328064.png" alt="image-20210205193328064"></p><h3 id="7-Collections工具类"><a href="#7-Collections工具类" class="headerlink" title="7.Collections工具类"></a>7.Collections工具类</h3><blockquote><p>此类仅由静态方法组合或返回集合。  它包含对集合进行操作的多态算法，“包装器”，返回由指定集合支持的新集合，以及其他一些可能的和最终的。</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205211930624.png" alt="image-20210205211930624"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> aggregate.Collection;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Collections;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">//Collections工具类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        List list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        list.add(<span class="hljs-number">1</span>);        list.add(<span class="hljs-number">2</span>);        list.add(<span class="hljs-number">3</span>);        list.add(<span class="hljs-number">8</span>);        <span class="hljs-comment">//打印</span>        System.out.println(list.toString());        <span class="hljs-comment">//排序</span>        Collections.sort(list);        <span class="hljs-comment">//打印</span>        System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span>+list.toString());        <span class="hljs-comment">//binarySearch</span>        System.out.println(Collections.binarySearch(list, <span class="hljs-number">8</span>));        System.out.println(Collections.binarySearch(list, <span class="hljs-number">0</span>));        <span class="hljs-comment">//copy复制</span>        ArrayList arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;            arrayList.add(i);        &#125;        System.out.println(<span class="hljs-string">&quot;由于collections.copy()需要相同长度，添加数据后&quot;</span>);        System.out.println(<span class="hljs-string">&quot;arraryList：&quot;</span>+arrayList.toString());        Collections.copy(arrayList,list);        System.out.println(<span class="hljs-string">&quot;copy后的数据：&quot;</span>+arrayList);        System.out.println(<span class="hljs-string">&quot;reserve倒序&quot;</span>);        Collections.reverse(list);        System.out.println(<span class="hljs-string">&quot;reserve:&quot;</span>+list);        System.out.println(<span class="hljs-string">&quot;乱序排列&quot;</span>);        Collections.shuffle(list);        System.out.println(<span class="hljs-string">&quot;乱序后：&quot;</span>+list);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210205212108002.png" alt="image-20210205212108002"></p><h2 id="三、Java常见类"><a href="#三、Java常见类" class="headerlink" title="三、Java常见类"></a>三、Java常见类</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/av583632476">千锋教育-2020最新版 Java基础-IO框架</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.cnblogs.com/wugongzi/p/12092326.html">Java——IO流超详细总结</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1zD4y1Q7Fw">千锋教育-2020年最新版 Java集合框架详解 通俗易懂</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.sohu.com/a/382360719_505818">HashMap待读文章</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html">java int与integer的区别</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>集合框架</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA快捷键汇总</title>
    <link href="/2021/02/05/software/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/"/>
    <url>/2021/02/05/software/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="编辑类快捷键"><a href="#编辑类快捷键" class="headerlink" title="编辑类快捷键"></a>编辑类快捷键</h2><div class="table-container"><table><thead><tr><th>编辑类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td><strong>psvm/main + Tab/回车</strong></td><td>生成main方法</td></tr><tr><td><strong>sout + tab/回车</strong></td><td>生成输出语句</td></tr><tr><td>Ctrl+X / Ctrl + Y</td><td>删除一行（如果选中了一部分代码，就是剪切选中部分，不选就是剪切当前行），Ctrl+X会覆盖剪切板</td></tr><tr><td><strong>Ctrl+D</strong></td><td>复制一行</td></tr><tr><td>Ctrl+/ 或 Ctrl+Shift+/</td><td>注释代码</td></tr><tr><td>Ctrl + Z</td><td>撤销</td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销</td></tr><tr><td>Ctrl + C</td><td>复制</td></tr><tr><td>Ctrl + V</td><td>粘贴</td></tr><tr><td><strong>Ctrl + O</strong></td><td>重写方法</td></tr><tr><td><strong>Ctrl + I</strong></td><td>实现方法</td></tr><tr><td>Ctr + shift + U</td><td>大小写转化</td></tr><tr><td>Ctrl + Shift + J</td><td>整合两行为一行</td></tr><tr><td>Ctrl + Shift + space</td><td>自动补全代码</td></tr><tr><td>Alt + 回车</td><td>导入包,自动修正</td></tr><tr><td>Alt + /</td><td>代码提示</td></tr><tr><td><strong>Alt + Insert</strong></td><td>生成代码(如GET,SET方法,构造函数等)</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码</td></tr><tr><td>Ctrl + Alt + I</td><td>自动缩进</td></tr><tr><td><strong>Ctrl + Alt + T</strong></td><td>生成try catch/while/for/if else</td></tr><tr><td>Ctrl + Alt + O</td><td>优化导入的类和包</td></tr><tr><td><strong>fori</strong></td><td>生成for循环for (int i = 0; i&lt; ; i++) { }</td></tr><tr><td>iter</td><td>生成增强for循环</td></tr><tr><td>itar</td><td>生成array for代码块</td></tr><tr><td>itit</td><td>生成iterator 迭代</td></tr><tr><td>itli</td><td>生成List的遍历</td></tr><tr><td>itco</td><td>生成Collection迭代</td></tr></tbody></table></div><h2 id="查找、替换类快捷键"><a href="#查找、替换类快捷键" class="headerlink" title="查找、替换类快捷键"></a>查找、替换类快捷键</h2><div class="table-container"><table><thead><tr><th>查找、替换类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件中查找</td></tr><tr><td>Ctrl + Shift + F</td><td>在整个项目或者指定窗口中查找文本</td></tr><tr><td>Ctrl + N</td><td>在项目中查找类</td></tr><tr><td>Ctrl + Shift + N</td><td>查找文件</td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换</td></tr><tr><td>Ctrl + Shift+R</td><td>在指定窗口替换文本</td></tr><tr><td>Ctrl + W</td><td>自动按语法选中代码</td></tr><tr><td>Ctrl + Shift + W</td><td>反向自动按语法选中代码</td></tr><tr><td>Ctrl + G</td><td>定位行</td></tr><tr><td>Ctrl＋Shift＋Backspace</td><td>跳转到上一次编辑的位置</td></tr><tr><td>Ctrl + alt + ←/→</td><td>前后跳转编辑过的地方</td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>查找 变量 / 方法</td></tr><tr><td>Alt + F7</td><td>找到你的函数或者变量或者类的所有引用到的地方</td></tr><tr><td>Alt + F3</td><td>高亮显示所有该选中文本，按 Enter 选中下一个，按 Esc 高亮消失</td></tr><tr><td>F4</td><td>在当前类中查找变量的来源</td></tr><tr><td>Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按 Esc 高亮消失</td></tr><tr><td>双击Shift</td><td>查找任何内容</td></tr></tbody></table></div><h2 id="编译、运行类快捷键"><a href="#编译、运行类快捷键" class="headerlink" title="编译、运行类快捷键"></a>编译、运行类快捷键</h2><div class="table-container"><table><thead><tr><th>编译、运行类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F9</td><td>编译项目</td></tr><tr><td>Ctrl + Shift + F9</td><td>编译当前文件</td></tr><tr><td>Shift + F10</td><td>正常启动</td></tr><tr><td>Alt + Shift + F10</td><td>弹出 Run 的可选择菜单</td></tr><tr><td>Shift + F9</td><td>debug模式启动</td></tr><tr><td>Alt + Shift + F9</td><td>选择 Debug</td></tr></tbody></table></div><h2 id="Debug快捷键"><a href="#Debug快捷键" class="headerlink" title="Debug快捷键"></a>Debug快捷键</h2><div class="table-container"><table><thead><tr><th>Debug快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F7</td><td>在 Debug 模式下，步入，如果当前行断点是一个方法，则进入当前方法体内</td></tr><tr><td>Shift + F7</td><td>智能步入</td></tr><tr><td>Alt + Shift + F7</td><td>强制步入</td></tr><tr><td>F8</td><td>在 Debug 模式下，步过，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>Shift + F8</td><td>步出</td></tr><tr><td>Alt + Shift + F8</td><td>强制步过</td></tr><tr><td>alt + F8</td><td>在 Debug 模式下，选中查看值</td></tr><tr><td>Ctrl + Shift + F8</td><td>查看断点</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行。如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>Alt +F9</td><td>运行至光标的位置</td></tr><tr><td>Ctrl + Alt+ F9</td><td>强制运行至光标处</td></tr><tr><td>Alt + F10</td><td>定位到断点</td></tr></tbody></table></div><h2 id="重构快捷键"><a href="#重构快捷键" class="headerlink" title="重构快捷键"></a>重构快捷键</h2><div class="table-container"><table><thead><tr><th>重构快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Shift + F6</td><td>重命名</td></tr><tr><td>Ctrl + Alt + C</td><td>抽取常量</td></tr><tr><td>Ctrl + Alt + F</td><td>抽取字段</td></tr><tr><td>Ctrl + Alt + M</td><td>抽取方法</td></tr><tr><td>Ctrl + Alt + P</td><td>抽取参数</td></tr><tr><td>Ctrl + Alt + V</td><td>抽取变量</td></tr></tbody></table></div><h2 id="其他类快捷键"><a href="#其他类快捷键" class="headerlink" title="其他类快捷键"></a>其他类快捷键</h2><div class="table-container"><table><thead><tr><th>其他类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + C</td><td>复制文件的完整路径</td></tr><tr><td>Ctrl + E</td><td>显示最近打开的文件</td></tr><tr><td>Ctrl + Shift + E</td><td>显示最近修改的文件列表的弹出层</td></tr><tr><td>Ctrl + P</td><td>方法参数提示</td></tr><tr><td>Ctrl + Q</td><td>可以看到当前方法的声明</td></tr><tr><td>Ctrl + Alt + Space</td><td>类名或接口名提示</td></tr><tr><td>Ctrl + F12</td><td>显示当前文件的结构</td></tr><tr><td>Ctrl + H</td><td>显示当前类的结构图</td></tr><tr><td>Ctrl + Q</td><td>显示注释文档信息</td></tr><tr><td>Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td>Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td>Ctrl + K</td><td>版本控制提交项目，需要此项目有加入到版本控制才能够使用</td></tr><tr><td>Ctrl + T</td><td>Ctrl + T</td></tr><tr><td>Ctrl + Tab</td><td>切换编辑窗口。如果在切换的过程又按Delete键，则是关闭对应选中的窗口</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IDEA</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习</title>
    <link href="/2021/02/02/Java/Java%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/02/02/Java/Java%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Java零基础学习视频通俗易懂（狂神说Java）"><a href="#Java零基础学习视频通俗易懂（狂神说Java）" class="headerlink" title="Java零基础学习视频通俗易懂（狂神说Java）"></a>Java零基础学习视频通俗易懂（狂神说Java）</h2><p>狂神说B站视频：<a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p><p>Java官网：<a href="https://www.java.com/">https://www.java.com/</a></p><h2 id="一、Java入门"><a href="#一、Java入门" class="headerlink" title="一、Java入门"></a>一、Java入门</h2><h3 id="1-Java的诞生"><a href="#1-Java的诞生" class="headerlink" title="1.Java的诞生"></a>1.Java的诞生</h3><p>1972年C语言建立。</p><p>问题：</p><ul><li>指针</li><li>内存管理</li></ul><p>1982年C++诞生。</p><p>问题：</p><ul><li>复杂</li></ul><p>1995年建立Java。</p><p>（C++—-）</p><p>为每台电脑安装JVM（Java虚拟机）。</p><p>分类：</p><ul><li><p>JavaSE</p></li><li><p>JavaME</p></li><li><p>JavaEE</p></li></ul><blockquote><p>三高：高可用，高性能，高并发。</p></blockquote><p>Java帝国的稳固：</p><p>2006：Hadoop(大数据端)<br>2008:Android(手机端)</p><h3 id="2-Java的特性和优势"><a href="#2-Java的特性和优势" class="headerlink" title="2.Java的特性和优势"></a>2.Java的特性和优势</h3><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h3 id="3-Java三大版本"><a href="#3-Java三大版本" class="headerlink" title="3.Java三大版本"></a>3.Java三大版本</h3><blockquote><p>最大优点：跨平台语言；技术：JVM。<br>Write once , run anywhere!</p></blockquote><ul><li>JavaSE 标准版</li></ul><p>开发桌面程序，控制台开发</p><ul><li>JavaME 嵌入式开发</li></ul><p>手机程序开发</p><ul><li>JavaEE 企业级开发</li></ul><p>Web端，服务器开发</p><h3 id="4-JDK-JRE-JVM"><a href="#4-JDK-JRE-JVM" class="headerlink" title="4.JDK JRE JVM"></a>4.JDK JRE JVM</h3><ul><li>JDK : Java Development Kit</li><li>JRE: Java Runtime Environment</li><li>JVM : JAVA Virtual Machine</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-28/1611838219935-image.png" alt=""></p><h3 id="5-Java开发环境搭建"><a href="#5-Java开发环境搭建" class="headerlink" title="5.Java开发环境搭建"></a>5.Java开发环境搭建</h3><p>1.卸载JDK</p><ul><li>删除java安装目录</li><li>删除JAVA_HOME</li><li>删除Path下的JAVA目录</li><li>java -version</li></ul><p>2.安装JDK</p><ul><li>百度搜索JDK8，下载电脑对应版本</li><li>双击安装JDK,设置安装路径</li><li>配置环境变量：JAVA_HOME</li><li>配置path变量</li><li><code>java -version</code>查看安装成功</li></ul><p>3.JDK目录</p><p>bin:存放可执行程序</p><p>include:引入c头文件</p><p>jre:java运行环境</p><p>lib:java库，工具</p><p>src:资源文件，类</p><p>4.hello world!</p><ul><li>编辑java文件</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;        System.out.print(<span class="hljs-string">&quot;Hello,World!&quot;</span>);    &#125;&#125;</code></pre><ul><li>编译java文件</li></ul><pre><code class="hljs shell">javac hello.java</code></pre><p>结果会在当前目录生成一个hello.class文件</p><ul><li>运行class文件</li></ul><pre><code class="hljs shell">java hello</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-28/1611840969443-image.png" alt=""></p><p>5.可能出现的问题</p><ul><li>java大小写敏感</li><li>尽量使用英文，防止乱码</li><li>文件名与类名必须要保持一致</li><li>要使用英文符号</li></ul><h3 id="6-Java程序运行机制"><a href="#6-Java程序运行机制" class="headerlink" title="6.Java程序运行机制"></a>6.Java程序运行机制</h3><blockquote><p>编译型(complie)：c c++ 操作系统<br>解释型：网页 javasprit python<br>Java既是编译型语言又是解释型语言</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-28/1611841932106-image.png" alt=""></p><h3 id="7-IDEA安装"><a href="#7-IDEA安装" class="headerlink" title="7.IDEA安装"></a>7.IDEA安装</h3><p>1.什么是IDE？</p><blockquote><p>集成开发环境</p></blockquote><p>2.IDEA介绍</p><blockquote><p>jetbrains公司，公司总部位于捷克。</p></blockquote><p>3.IDEA下载</p><p>官网下载地址：<a href="https://download.jetbrains.com/idea/ideaIU-2020.3.2.exe">https://download.jetbrains.com/idea/ideaIU-2020.3.2.exe</a></p><h2 id="二、Java基本语法"><a href="#二、Java基本语法" class="headerlink" title="二、Java基本语法"></a>二、Java基本语法</h2><h3 id="1-注释-标识符-关键字"><a href="#1-注释-标识符-关键字" class="headerlink" title="1.注释 标识符 关键字"></a>1.注释 标识符 关键字</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>java中的注释有三种：</p><p>1.单行注释</p><blockquote><p>只能注释一行文字</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//单行注释</span>        <span class="hljs-comment">//输出 hello world</span>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);    &#125;&#125;</code></pre><p>2.多行注释</p><blockquote><p>可以注释多行文字</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">/*</span><span class="hljs-comment">        多行注释</span><span class="hljs-comment">        可跨行</span><span class="hljs-comment">         */</span>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);    &#125;&#125;</code></pre><p>3.文档注释</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> hello_world</span><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> baixf</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span></code></pre><p>4.有趣的代码注释</p><pre><code class="hljs java"><span class="hljs-comment">/***</span><span class="hljs-comment"> *                    .::::.</span><span class="hljs-comment"> *                  .::::::::.</span><span class="hljs-comment"> *                 :::::::::::</span><span class="hljs-comment"> *             ..:::::::::::&#x27;</span><span class="hljs-comment"> *           &#x27;::::::::::::&#x27;</span><span class="hljs-comment"> *             .::::::::::</span><span class="hljs-comment"> *        &#x27;::::::::::::::..</span><span class="hljs-comment"> *             ..::::::::::::.</span><span class="hljs-comment"> *           ``::::::::::::::::</span><span class="hljs-comment"> *            ::::``:::::::::&#x27;        .:::.</span><span class="hljs-comment"> *           ::::&#x27;   &#x27;:::::&#x27;       .::::::::.</span><span class="hljs-comment"> *         .::::&#x27;      ::::     .:::::::&#x27;::::.</span><span class="hljs-comment"> *        .:::&#x27;       :::::  .:::::::::&#x27; &#x27;:::::.</span><span class="hljs-comment"> *       .::&#x27;        :::::.:::::::::&#x27;      &#x27;:::::.</span><span class="hljs-comment"> *      .::&#x27;         ::::::::::::::&#x27;         ``::::.</span><span class="hljs-comment"> *  ...:::           ::::::::::::&#x27;              ``::.</span><span class="hljs-comment"> * ```` &#x27;:.          &#x27;:::::::::&#x27;                  ::::..</span><span class="hljs-comment"> *                    &#x27;.:::::&#x27;                    &#x27;:&#x27;````..</span><span class="hljs-comment"> */</span></code></pre><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>标识符注意点：</p><ul><li>所有的标识符都应该以字母(A-Z或者a-z),美元符($)、或者下划线(_）开始</li><li>首字符之后可以是字母(A-Z或者a-z),美元符（$)、下划线（_）或数字的任何字符组合不能使用关键字作为变量名或方法名。</li><li>标识符是大小写敏感的<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String man=<span class="hljs-string">&quot;banananana&quot;</span>;        String Man=<span class="hljs-string">&quot;orangegege&quot;</span>;    &#125;&#125;</code></pre></li><li>合法标识符举例: age、$salary._value、_1_value</li><li>非标识符举例:123abc、-salary、#abc</li></ul><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20190407171115204.png" alt=""></p><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><blockquote><p>强类型语言：要求变量的使用严格规定，所有变量必须定义后才能使用。安全性高；速度慢。</p><p>弱类型语言：要求变量的使用要符合规定，所有变量都必须先定义后才能使用。</p></blockquote><h4 id="基本数据类型-primitive-type"><a href="#基本数据类型-primitive-type" class="headerlink" title="基本数据类型(primitive type)"></a>基本数据类型(primitive type)</h4><blockquote><p>byte:1个字节;</p><p>short:2个字节;</p><p>int:4个字节;</p><p>long:8个字节;</p><p>float:4个字节；</p><p>double:8个字节;</p><p>char:2个字节;</p><p>boolean:1位。</p></blockquote><p>1.数值类型</p><ul><li>整数类型</li></ul><blockquote><p>int其实是一个类，Integer;byte同理Byte。</p></blockquote><pre><code class="hljs java"><span class="hljs-comment">//整数</span><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>; <span class="hljs-comment">//最常用byte num2 = 20;</span><span class="hljs-keyword">short</span> num3 = <span class="hljs-number">30</span>;<span class="hljs-keyword">long</span> num4 = <span class="hljs-number">30L</span>;  <span class="hljs-comment">//Long类型要在数字后面加个L</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">//进制问题</span><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> i2 = <span class="hljs-number">010</span>; <span class="hljs-comment">//八进制0</span><span class="hljs-keyword">int</span> i3 = <span class="hljs-number">0x10</span>; <span class="hljs-comment">//十六进制0x 0~9 A~F</span>system.out.print1n(i);system.out.print1n(i2);System.out.println(i3);</code></pre><ul><li>浮点类型</li></ul><pre><code class="hljs java"><span class="hljs-comment">//浮点数</span><span class="hljs-keyword">float</span> num5 = <span class="hljs-number">50.1F</span>;<span class="hljs-keyword">double</span> num6 = <span class="hljs-number">3.141592653589793238462643</span>;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//浮点数的舍入误差问题</span><span class="hljs-comment">//fLoat 有限 离散 舍入误差 大约 接近但不等于</span>f1oat f = <span class="hljs-number">0.1f</span>; <span class="hljs-comment">//0.1</span><span class="hljs-keyword">double</span> d = <span class="hljs-number">1.0</span>/<span class="hljs-number">10</span>; <span class="hljs-comment">//0.1</span>system.out.println(f==d); <span class="hljs-comment">//false</span>system.out.println(f);system.out.println(d);f1oat d1 = <span class="hljs-number">23131312312312313f</span>;f1oat d2 = d1 + <span class="hljs-number">1</span>;system.out.print1n(d1==d2);<span class="hljs-comment">//true</span></code></pre><ul><li>字符类型<pre><code class="hljs java"><span class="hljs-comment">//字符</span><span class="hljs-keyword">char</span> name = <span class="hljs-string">&#x27;A&#x27;</span> ;<span class="hljs-comment">//字符串,string不是关键字，类</span><span class="hljs-comment">//string namea =&quot;白小飞&quot;</span></code></pre></li></ul><pre><code class="hljs java"><span class="hljs-comment">//强制类型转换，所有的字符本质还是数字</span><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;中;</span><span class="hljs-string">system.out.println(c1);</span><span class="hljs-string">system.out.println((int)c1); //强制换行</span><span class="hljs-string">system.out.println(c2);</span><span class="hljs-string">system.out.println((int)c2); //强制换行</span><span class="hljs-string">char c3 = &#x27;</span>\u0061<span class="hljs-string">&#x27;;</span><span class="hljs-string">System.out.println(c3); //a</span><span class="hljs-string"></span><span class="hljs-string">//所有的字符本质还是数字</span><span class="hljs-string">//编码 unicode 表:(97 = a 65 =A) 2字节 0 - 65536 Excel 2 16 = 65536</span><span class="hljs-string"></span></code></pre><pre><code class="hljs java"><span class="hljs-comment">//转义字符 </span><span class="hljs-comment">// \t制表符 \n换行</span>system.out.println(<span class="hljs-string">&quot;He1lo\twor1d&quot;</span>);system.out.println(<span class="hljs-string">&quot;He1lo\nwor1d&quot;</span>);</code></pre><pre><code class="hljs java">string sa = <span class="hljs-keyword">new</span> String( original: <span class="hljs-string">&quot;he11o world&quot;</span>);string sb = <span class="hljs-keyword">new</span> String( original: <span class="hljs-string">&quot;he1lo world&quot;</span>);system.out.print1n(sa==sb);<span class="hljs-comment">// false</span>String sc = <span class="hljs-string">&quot;he1lo wor1d&quot;</span>;string sd = <span class="hljs-string">&quot;he1lo wor1d&quot;</span> ;system.out.println(sc==sd);/对象从内存分析<span class="hljs-comment">//true</span></code></pre><p>2.bollean类型<br><pre><code class="hljs java">/布尔值:是非<span class="hljs-keyword">boolean</span> f1ag = <span class="hljs-keyword">true</span>;<span class="hljs-comment">//booLean flag = false;</span></code></pre></p><pre><code class="hljs java"><span class="hljs-comment">//布尔值扩展</span><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">true</span>)&#123;&#125;<span class="hljs-keyword">if</span>(flag)&#123;&#125;<span class="hljs-comment">//less is more!</span></code></pre><h4 id="引用类型-reference-type"><a href="#引用类型-reference-type" class="headerlink" title="引用类型(reference type)"></a>引用类型(reference type)</h4><p>1.类</p><p>2.接口</p><p>3.数组</p><h3 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h3><blockquote><p>由于Java是强类型语言，所以要进行有些运算的时候的，需要用到类型转换。</p><p>低————————-》》》》》》———————————-高</p><p>byte,short,char &gt; int &gt; long &gt; float &gt; double</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">128</span>;<span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>)i; <span class="hljs-comment">//内存溢出</span><span class="hljs-keyword">double</span> c = i; <span class="hljs-comment">//强制转换 (类型)变量名 高-&gt;地</span><span class="hljs-comment">//自动转换 地-&gt;高</span>system.out.println(i);System.out.println(b);System.out.println(c);</code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换到低容量的时候，强制转换</li><li>转换的时候可能存在内存溢出，或者精度问题!</li></ul><pre><code class="hljs java">system.out.println((<span class="hljs-keyword">int</span>)<span class="hljs-number">23.7</span>);system.out.println((<span class="hljs-keyword">int</span>)-<span class="hljs-number">45.89f</span>);<span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-keyword">int</span> d = c+<span class="hljs-number">1</span>;system.out.println(d);System.out.println((<span class="hljs-keyword">char</span>)d);</code></pre><pre><code class="hljs java">/操作比较大的数的时候，注意溢出问题<span class="hljs-comment">//JDK7新特性，数字之间可以用下划线分割</span><span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<span class="hljs-keyword">int</span> years = <span class="hljs-number">20</span>;<span class="hljs-keyword">int</span> total = money * years; <span class="hljs-comment">//-1474836480 ,计算的时候溢出了</span><span class="hljs-keyword">long</span> total2 = money * years;<span class="hljs-comment">//默认是int，转换之前已经存在问题了?</span><span class="hljs-keyword">long</span> total3 = money * ((<span class="hljs-keyword">long</span>)yeans);<span class="hljs-comment">//先把一个数转换为Long</span>system.out.println(total3);</code></pre><h3 id="4-变量常量"><a href="#4-变量常量" class="headerlink" title="4.变量常量"></a>4.变量常量</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><p>变量是什么:就是可以变化的量!</p><p>Java是一种强类型语言，每个变量都必须声明其类型。</p><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p></blockquote><pre><code class="hljs java">type varName [=value] [&#123;,varName[=value]&#125;];<span class="hljs-comment">//数据类型 变量值 = 值; 可以用逗号隔开来声明多个同类型变量。</span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><p>每个变量都有类型，类型可以是基本类型,也可以是引用类型。</p><p>变量名必须是合法的标识符。</p><p>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>; <span class="hljs-comment">//程序可读性</span>string name = <span class="hljs-string">&quot;baixf&quot;</span>;<span class="hljs-keyword">char</span> x = <span class="hljs-string">&#x27;x&#x27;</span> ;<span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14</span>;</code></pre><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variable</span> </span>&#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> allClicks=<span class="hljs-number">0</span>; <span class="hljs-comment">//类变量</span>    String str=<span class="hljs-string">&quot;hello world&quot;</span>; <span class="hljs-comment">//实例变量</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; <span class="hljs-comment">//局部变量</span>    &#125;&#125;</code></pre><p>1.类变量</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130142240522.png" alt="image-20210130142240522"></p><p>2.实例变量</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130121110438.png" alt="image-20210130121110438"></p><p>3.局部变量</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210130115820.png" alt="QQ截图20210130115820"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130120149238.png" alt="image-20210130120149238"></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo01</span> </span>&#123;    <span class="hljs-comment">//属性：变量；</span>    <span class="hljs-comment">//类变量</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> salary = <span class="hljs-number">2500</span>;    <span class="hljs-comment">//实例变量：从属于对象-这个类;如果不自行初始化，这个类型的默认值 0;</span>    <span class="hljs-comment">//布尔值：默认为 false;</span>    <span class="hljs-comment">//除了基本类型，其余的都是null;</span>    String name;    <span class="hljs-keyword">int</span> age;    <span class="hljs-comment">//main方法；</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//局部变量；必须声明和初始化值</span>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>; <span class="hljs-comment">//有效范围仅在其main方法中</span>        System.out.println(i);        <span class="hljs-comment">//变量类型 变量名字 = new demo01();</span>        demo01 demo01=<span class="hljs-keyword">new</span> demo01();        System.out.println(demo01.age);        System.out.println(demo01.name);        <span class="hljs-comment">//类变量</span>        System.out.println(salary);    &#125;    <span class="hljs-comment">//System.out.println(i); i超出适用范围</span>&#125;</code></pre><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><blockquote><p>常量(Constant):初始化(initialize)后不能再改变值!不会变动的值。</p><p>所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p><p>常量名一般使用大写字符。</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">final</span> 常量名=值;<span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.14</span>;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo02</span> </span>&#123;    <span class="hljs-comment">//关键词：final</span>    <span class="hljs-comment">//修饰符，不存在先后顺序</span>    <span class="hljs-comment">//静态常量，例如游戏中对界面的设定</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14</span>; <span class="hljs-comment">//常量尽量全部大写，或者大写加下划线</span>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(pi);        System.out.println(PI);    &#125;&#125;</code></pre><h4 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h4><p>所有变量、方法、类名:见名知意</p><p><strong>类成员变量</strong>:<strong>首字母小写和驼峰原则</strong>: monthSalary，lastWeek</p><p>局部变量:<strong>首字母小写和驼峰原则</strong></p><p>常量:<strong>大写字母和下划线</strong>:MAX_VALUE</p><p>类名:<strong>首字母大写和驼峰原则</strong>: Man, GoodMan</p><p>方法名:<strong>首字母小写和驼峰原则</strong>: run(), runRun()</p><h3 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h3><h4 id="Java语言支持如下运算符"><a href="#Java语言支持如下运算符" class="headerlink" title="Java语言支持如下运算符:"></a>Java语言支持如下运算符:</h4><ul><li>算术运算符:  +，-，<em>，l，%，++，—。</em></li><li>赋值运算符: =*</li><li>关系运算符:&gt;，&lt;，&gt;=，&lt;=，==, !=, instanceof</li><li>逻辑运算符: &amp;&amp;,|，!</li><li>位运算符: &amp;,|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;(了解! ! ! )</li><li>条件运算符: ?∶</li><li>扩展赋值运算符:+=，-=，*=，/=</li></ul><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//二元运算符</span>        <span class="hljs-keyword">int</span> a =<span class="hljs-number">10</span>;        <span class="hljs-keyword">int</span> b =<span class="hljs-number">20</span>;        <span class="hljs-keyword">int</span> c =<span class="hljs-number">30</span>;        <span class="hljs-keyword">int</span> d =<span class="hljs-number">40</span>;        System.out.println(a+b);        System.out.println(a-b);        System.out.println(a*b);        System.out.println(a/b);        System.out.println(a/(<span class="hljs-keyword">double</span>)b);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">long</span> a = <span class="hljs-number">12345566l</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">32411230</span>;        <span class="hljs-keyword">short</span> c = <span class="hljs-number">50</span>;        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;        <span class="hljs-comment">//多个数操作时，存在最高级则最终为最高级的数据类型</span>                System.out.println(a+b+c+d); <span class="hljs-comment">//long</span>        System.out.println(b+c+d); <span class="hljs-comment">//int</span>        System.out.println(c+d); <span class="hljs-comment">//int</span>    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//关系运算符返回的结果：true false 布尔值</span>        <span class="hljs-comment">//常与 if 使用</span>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">60</span>;        <span class="hljs-keyword">int</span> c = <span class="hljs-number">11</span>;        System.out.println(a==b);        System.out.println(a!=b);        System.out.println(a&gt;=b);        System.out.println(a&lt;=b);        System.out.println(a%c);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//++ -- 自增 自减</span>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;        System.out.println(a);        System.out.println(a++);        System.out.println(a);        System.out.println(++a);        System.out.println(a);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-number">3</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><span class="hljs-number">5</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//幂运算 3^2=9</span>        <span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);        System.out.println(pow);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//幂运算 3^2=9</span>        <span class="hljs-comment">//Math类提供很多数学方法</span>        <span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);        System.out.println(pow);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-comment">//逻辑运算符</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//与或非</span>        <span class="hljs-keyword">boolean</span> a = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">false</span>;        System.out.println(a &amp;&amp; b); <span class="hljs-comment">//两个全为真才为真</span>        System.out.println(a || b); <span class="hljs-comment">//有一真则为真</span>        System.out.println(!(a &amp;&amp; b)); <span class="hljs-comment">//真变假，假变真</span>        <span class="hljs-comment">//短路运算</span>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;        System.out.println(b &amp;&amp; (c++&gt;<span class="hljs-number">4</span>)); <span class="hljs-comment">//当前面第一个为 false 时，后面的不会执行</span>        System.out.println(c); <span class="hljs-comment">//输出c仍为 5 ，说明 c++并未执行</span>    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-comment">//位运算</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">/*</span><span class="hljs-comment">       A = 1001 1100</span><span class="hljs-comment">       B = 1010 1110</span><span class="hljs-comment"></span><span class="hljs-comment">       A&amp;B 1000 1100</span><span class="hljs-comment">       A|B 1011 1110</span><span class="hljs-comment">       A^B 0011 0010 //异或：相同则为0，不同为1</span><span class="hljs-comment">       ~B  0101 0011</span><span class="hljs-comment">        */</span>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0b1001_1100</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0b1010_1110</span>;        System.out.println(Integer.toBinaryString(a&amp;b));        System.out.println(Integer.toBinaryString(a|b));        System.out.println(Integer.toBinaryString(a^b));        System.out.println(Integer.toBinaryString(~b));        <span class="hljs-comment">/*</span><span class="hljs-comment">        2*8最快运算</span><span class="hljs-comment">        </span><span class="hljs-comment">        底层：二进制，所以效率极其高</span><span class="hljs-comment">        </span><span class="hljs-comment">        &lt;&lt;</span><span class="hljs-comment">        &gt;&gt;</span><span class="hljs-comment"></span><span class="hljs-comment">        0000 0000 0</span><span class="hljs-comment">        0000 0001 1</span><span class="hljs-comment">        0000 0010 2</span><span class="hljs-comment">        0000 0100 3</span><span class="hljs-comment">        0000 1000 4</span><span class="hljs-comment">         */</span>        System.out.println(<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">3</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo08</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;        <span class="hljs-keyword">int</span> c = <span class="hljs-number">10</span>;        a+=b; <span class="hljs-comment">//a = a + b</span>        c-=b; <span class="hljs-comment">//c = c - b</span>        <span class="hljs-comment">//字符串连接符 +</span>                <span class="hljs-comment">//细节问题</span>        System.out.println(<span class="hljs-string">&quot;&quot;</span>+a+b); <span class="hljs-comment">//先做前面的，即将其整体转换为string</span>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//先做整数相加，再转换为字符串</span>        System.out.println(a);        System.out.println(c);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-number">3020</span><span class="hljs-number">50</span><span class="hljs-number">30</span>-<span class="hljs-number">10</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> operator;<span class="hljs-comment">//三元运算符</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo09</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// x : y ? z</span>        <span class="hljs-comment">// 如果 x 为 true,则为 y, 否则为 z</span>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">5</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">6</span>;        <span class="hljs-keyword">int</span> c = <span class="hljs-number">10</span>;        <span class="hljs-comment">//if 但是这样会更简洁</span>        System.out.println((a&gt;<span class="hljs-number">70</span>?b:c));    &#125;&#125;</code></pre><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1001990-20161025144757265-1724289762.png" alt="img"></p><h3 id="6-包机制"><a href="#6-包机制" class="headerlink" title="6.包机制"></a>6.包机制</h3><ul><li>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130155614595.png" alt="image-20210130155614595"></p><ul><li>包语句的语法格式为:</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> pkg1[. pkg2[. pkg3...]];</code></pre><ul><li>一般利用公司域名倒置作为包名;</li></ul><pre><code class="hljs java">tk.baixf.wwwtk.baixf.blog</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130161002562.png" alt="image-20210130161002562"></p><ul><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”语句可完成此功能</li></ul><pre><code class="hljs java"><span class="hljs-keyword">import</span> package1[.package2……].(classname|*)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130155735582.png" alt="image-20210130155735582"></p><h3 id="7-JavaDoc"><a href="#7-JavaDoc" class="headerlink" title="7.JavaDoc"></a>7.JavaDoc</h3><ul><li>javadoc命令是用来生成自己API文档的</li><li>参数信息<pre><code>*  @author作者名*  @version版本*  @since指明需要最早使用的jdk版本*  @param参数名*  @return返回值情况*  @throws 异常抛出情况</code></pre></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130162646770.png" alt="image-20210130162646770"></p><pre><code class="hljs java">javadoc -encoding UTF-<span class="hljs-number">8</span> -charset UTF-<span class="hljs-number">8</span> Doc.java</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130162630700.png" alt="image-20210130162630700"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130162816782.png" alt="image-20210130162816782"></p><h4 id="IDEA生成JavaDOC"><a href="#IDEA生成JavaDOC" class="headerlink" title="IDEA生成JavaDOC"></a>IDEA生成JavaDOC</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130163450497.png" alt="image-20210130163450497"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130163912238.png" alt="image-20210130163912238"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130164227061.png" alt="image-20210130164227061"></p><h2 id="三、Java流程控制"><a href="#三、Java流程控制" class="headerlink" title="三、Java流程控制"></a>三、Java流程控制</h2><h3 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h3><h4 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h4><ul><li><p>之前我们学的基本语法中我们并没有实现程序和人的交互，但是Java给我们提供了这样一个工具类，我们可以获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入。</strong></p></li><li><p>基本语法:</p><pre><code class="hljs java">Scanner s = <span class="hljs-keyword">new</span> Scanner(System.in);</code></pre></li><li><p>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.scanner;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入你想输入的字符串：&quot;</span>);        String str = scanner.nextLine();        System.out.println(<span class="hljs-string">&quot;刚刚输入的为：&quot;</span>+str);        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130172554506.png" alt="image-20210130172554506"></p><h4 id="Scanner对象-1"><a href="#Scanner对象-1" class="headerlink" title="Scanner对象"></a>Scanner对象</h4><p>1.next():</p><ul><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next()不能得到带有空格的字符串。</li></ul><p>2.nextLine():</p><ul><li>以Enter为结束符,也就是说nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.scanner;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建一个扫描器对象，用于接收键盘数据</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;使用next方法接受：&quot;</span>);        <span class="hljs-comment">//判断用户有没有输入字符串</span>        <span class="hljs-keyword">if</span>(scanner.hasNext())&#123;            <span class="hljs-comment">//使用next方法接受</span>            String str = scanner.next(); <span class="hljs-comment">//程序会等待用户输入完毕</span>            System.out.println(<span class="hljs-string">&quot;输入的内容为：&quot;</span>+str);        &#125;        <span class="hljs-comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关掉</span>        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130165812969.png" alt="image-20210130165812969"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.scanner;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//从键盘接收数据</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;使用nextLine方式接受：&quot;</span>);        <span class="hljs-comment">//判断是否还有输入</span>        <span class="hljs-keyword">if</span>(scanner.hasNextLine())&#123;            String str = scanner.nextLine();            System.out.println(<span class="hljs-string">&quot;输出的内容为&quot;</span>+str);        &#125;        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130171458148.png" alt="image-20210130171458148"></p><h4 id="对浮点数的支持"><a href="#对浮点数的支持" class="headerlink" title="对浮点数的支持"></a>对浮点数的支持</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.scanner;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;        <span class="hljs-keyword">float</span> b = <span class="hljs-number">0.00f</span>;        <span class="hljs-comment">//从键盘接收数据</span>        System.out.println(<span class="hljs-string">&quot;请输入整数：&quot;</span>);        <span class="hljs-keyword">if</span>(scanner.hasNextInt())&#123;            a = scanner.nextInt();            System.out.println(<span class="hljs-string">&quot;输入的整数为：&quot;</span>+a);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;您输入的不是整数！&quot;</span>);        &#125;        System.out.println(<span class="hljs-string">&quot;请输入一个小澍：&quot;</span>);        <span class="hljs-keyword">if</span>(scanner.hasNextFloat())&#123;            b = scanner.nextFloat();            System.out.println(<span class="hljs-string">&quot;您输入的浮点数为&quot;</span>+b);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;您输入的不是浮点数！！&quot;</span>);        &#125;        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130175521982.png" alt="image-20210130175521982"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130175554281.png" alt="image-20210130175554281"></p><blockquote><p>此处出现了问题：由于第一次输入的不是整数，这个数也当作了第二次的输入值。</p></blockquote><h4 id="查看Scanner类"><a href="#查看Scanner类" class="headerlink" title="查看Scanner类"></a>查看Scanner类</h4><p>ctrl+鼠标点击代码中的<code>Scanner</code></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130181050290.png" alt="image-20210130181050290"></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><blockquote><p>输入多个数字，求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束并输出结果。</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.scanner;<span class="hljs-keyword">import</span> com.sun.org.apache.xerces.internal.util.SynchronizedSymbolTable;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//输入多个数字，求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束并输出结果</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        <span class="hljs-comment">//计算和</span>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;        System.out.println(<span class="hljs-string">&quot;请输入一个值：&quot;</span>);        <span class="hljs-keyword">while</span> (scanner.hasNextDouble()) &#123;            System.out.println(<span class="hljs-string">&quot;请输入一个值：&quot;</span>);            <span class="hljs-keyword">double</span> x = scanner.nextDouble();            count+=<span class="hljs-number">1</span>;            sum+=x;            System.out.println(<span class="hljs-string">&quot;你已经输入了&quot;</span>+count+<span class="hljs-string">&quot;个值,当前的sum为&quot;</span>+sum);        &#125;        System.out.println(<span class="hljs-string">&quot;和为：&quot;</span>+sum);        System.out.println(<span class="hljs-string">&quot;平均值为：&quot;</span>+sum/count);        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130183257766.png" alt="image-20210130183257766"></p><h3 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h3><ul><li>JAVA的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130184048588.png" alt="image-20210130184048588"></p><ul><li>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的，<strong>它是任何一个算法都离不开的一种基本算法结构。</strong></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.sequence;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);        System.out.println(<span class="hljs-string">&quot;world&quot;</span>);        System.out.println(<span class="hljs-string">&quot;i&quot;</span>);        System.out.println(<span class="hljs-string">&quot;am&quot;</span>);        System.out.println(<span class="hljs-string">&quot;roger&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130184653182.png" alt="image-20210130184653182"></p><h3 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h3><h4 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h4><blockquote><p>我们很多时候需要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中用if语句来表示。</p></blockquote><p><strong>语法：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<span class="hljs-comment">//如果布尔表达式为true将执行的语句</span>&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130185128817.png" alt="image-20210130185128817"></p><p><strong>example</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ifDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入内容：&quot;</span>);        String s = scanner.nextLine();        <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;hello&quot;</span>))&#123;            System.out.println(s);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;End&quot;</span>);        &#125;        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130185910002.png" alt="image-20210130185910002"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130185931090.png" alt="image-20210130185931090"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130190107906.png" alt="image-20210130190107906"></p><h4 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h4><blockquote><p>那现在有个需求，公司要收购一个软件，成功了，给人支付100万元，失败了，自己找人开发。这样的需求用一个if就搞不定了，我们需要有两个判断，需要一个双选择结构，所以就有了if-else结构。</p></blockquote><p><strong>语法：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<span class="hljs-comment">//如果布尔表达式的值为true</span>&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">//如果布尔表达式的值为false</span>&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130192927678.png" alt="image-20210130192927678"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ifDome02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//考试分数大于60就是及格，小于60就是不及格。</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入学生成绩：&quot;</span>);        <span class="hljs-keyword">double</span> score = scanner.nextDouble();        <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">60</span>)&#123;            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);        &#125;        scanner.close();    &#125;&#125;</code></pre><pre><code class="hljs java">请输入学生成绩：<span class="hljs-number">99</span>及格    Process finished with exit code <span class="hljs-number">0</span></code></pre><h4 id="if多选择结果"><a href="#if多选择结果" class="headerlink" title="if多选择结果"></a>if多选择结果</h4><blockquote><p>我们发现刚才的代码不符合实际情况，真实的情况还可能存在ABCD，存在区间多级判断。比如90-100就是A，80-90 就是B..等等，在生活中我们很多时候的选择也不仅仅只有两个，所以我们需要一个多选择结构来处理这类问题!</p></blockquote><p><strong>语法：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式 <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//如果布尔表达式1的值为true执行代码</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式 <span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//如果布尔表达式2的值为true执行代码</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式 <span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//如果布尔表达式3的值为true执行代码</span>&#125;<span class="hljs-keyword">else</span> (布尔表达式 <span class="hljs-number">4</span>)&#123;<span class="hljs-comment">//如果布尔表达式4的值为true执行代码</span>&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130194239201.png" alt="image-20210130194239201"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ifDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//if多选择</span>        <span class="hljs-comment">//if语句至多有 1 个else 语句,else 语句在所有的else if语句之后。if语句可以有若干个else if语句，它们必须在else语句之前。</span>        <span class="hljs-comment">//一旦其中一个 else if 语句检测为true，其他的else if 以及else 语句都将跳过执行。</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入学生成绩：&quot;</span>);        <span class="hljs-keyword">double</span> score = scanner.nextDouble();        <span class="hljs-keyword">if</span>(score==<span class="hljs-number">100</span>)&#123;            System.out.println(<span class="hljs-string">&quot;恭喜满分&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">100</span> &amp;&amp; score&gt;=<span class="hljs-number">90</span>)&#123;            System.out.println(<span class="hljs-string">&quot;A&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">90</span> &amp;&amp; score&gt;=<span class="hljs-number">80</span>)&#123;            System.out.println(<span class="hljs-string">&quot;B&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">80</span> &amp;&amp; score&gt;=<span class="hljs-number">70</span>)&#123;            System.out.println(<span class="hljs-string">&quot;C&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">70</span> &amp;&amp; score&gt;=<span class="hljs-number">60</span>)&#123;            System.out.println(<span class="hljs-string">&quot;D&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">60</span> &amp;&amp; score&gt;=<span class="hljs-number">0</span>)&#123;            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;输入的成绩非法！&quot;</span>);        &#125;        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130195538459.png" alt="image-20210130195538459"></p><h4 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h4><blockquote><p>使用嵌套的 if…else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if 语句。你可以像if语句一样嵌套else if…else。</p></blockquote><p><strong>语法:</strong></p><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式 <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//如果布尔表达式 1的值为true执行代码</span>    <span class="hljs-keyword">if</span>(布尔表达式 <span class="hljs-number">2</span>)&#123;        <span class="hljs-comment">//如果布尔表达式 2的值为true执行代码</span>    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/ifqiantao.jpg" alt=""></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//二分查找</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ifDemo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//如何最快寻找输入的1-100之内的数位于那个区间[0,50]或[51,100]</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入你想输入的数字：&quot;</span>);        <span class="hljs-keyword">double</span> value = scanner.nextDouble();        <span class="hljs-keyword">if</span>(value&gt;=<span class="hljs-number">0</span> &amp;&amp; value&lt;=<span class="hljs-number">100</span>)&#123;            <span class="hljs-keyword">if</span>(value&gt;=<span class="hljs-number">0</span> &amp;&amp; value&lt;=<span class="hljs-number">50</span>)&#123;                System.out.println(<span class="hljs-string">&quot;你所判断的值在0-50区间&quot;</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                System.out.println(<span class="hljs-string">&quot;你所判断的值在51-100区间&quot;</span>);            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;您输入的值不在合法的区间内！&quot;</span>);        &#125;        scanner.close();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130202016175.png" alt="image-20210130202016175"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130202038849.png" alt="image-20210130202038849"></p><h4 id="switch多选择结果"><a href="#switch多选择结果" class="headerlink" title="switch多选择结果"></a>switch多选择结果</h4><ul><li>多选择结构还有一个实现方式就是switch case语句。</li><li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li><li>switch语句中的变量类型可以是:<ul><li>byte、short、int或者char</li><li>从Java SE 7开始switch支持字符串String类型了</li><li>同时case标签必须为字符串常量或字面量。</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;    <span class="hljs-keyword">case</span> value :        <span class="hljs-comment">//语句</span>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//可选</span>    <span class="hljs-keyword">case</span> value :        <span class="hljs-comment">//语句</span>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//可选</span>     <span class="hljs-comment">//你可以有任意数量的case语句</span>        <span class="hljs-keyword">default</span> :         <span class="hljs-comment">//语句  //可选</span>&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/javaswitch.jpg" alt=""></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">switchDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">char</span> grade = <span class="hljs-string">&#x27;C&#x27;</span>;                <span class="hljs-comment">//case 穿透 </span>        <span class="hljs-comment">//switch 匹配一个值</span>        <span class="hljs-comment">//break 跳出循环</span>                <span class="hljs-keyword">switch</span> (grade)&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:                System.out.println(<span class="hljs-string">&quot;再接再厉&quot;</span>);            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:                System.out.println(<span class="hljs-string">&quot;挂科&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                System.out.println(<span class="hljs-string">&quot;输入的内容非法！&quot;</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130204055505.png" alt="image-20210130204055505"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">switchDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//从Java SE 7开始switch支持字符串String类型了</span>        String name = <span class="hljs-string">&quot;杨洪利&quot;</span>;        <span class="hljs-keyword">switch</span> (name)&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;白小飞&quot;</span>:                System.out.println(<span class="hljs-string">&quot;只是昵称&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;杨洪利&quot;</span>:                System.out.println(<span class="hljs-string">&quot;正是在下！&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                System.out.println(<span class="hljs-string">&quot;找错了吧&quot;</span>);                <span class="hljs-comment">//反编译：查找.class编译后文件</span>                <span class="hljs-comment">//file--project structure</span>        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130205557103.png" alt="image-20210130205557103"></p><pre><code class="hljs java"><span class="hljs-comment">//编译后switchDemo.class文件</span><span class="hljs-comment">//看源码！好思想！</span><span class="hljs-comment">//</span><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="hljs-comment">// (powered by FernFlower decompiler)</span><span class="hljs-comment">//</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">switchDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">switchDemo02</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String name = <span class="hljs-string">&quot;杨洪利&quot;</span>;        <span class="hljs-keyword">byte</span> var3 = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">switch</span>(name.hashCode()) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">26326951</span>:            <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;杨洪利&quot;</span>)) &#123;                var3 = <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">29919724</span>:            <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;白小飞&quot;</span>)) &#123;                var3 = <span class="hljs-number">0</span>;            &#125;        &#125;        <span class="hljs-keyword">switch</span>(var3) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:            System.out.println(<span class="hljs-string">&quot;只是昵称&quot;</span>);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            System.out.println(<span class="hljs-string">&quot;正是在下！&quot;</span>);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            System.out.println(<span class="hljs-string">&quot;找错了吧&quot;</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130210010668.png" alt="image-20210130210010668"></p><h3 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h3><blockquote><p>在Java5中引入了一种主要用于数组的增强型for循环。</p></blockquote><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul><li>while是最基本的循环，它的结构为：</li></ul><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123;<span class="hljs-comment">//循环内容</span>&#125;</code></pre><ul><li>只要布尔表达式为true，循环就会一直执行下去。</li><li><strong>我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。</strong></li><li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。<pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whileDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;            <span class="hljs-comment">//监听消息</span>            <span class="hljs-comment">//......</span>        &#125;    &#125;&#125;</code></pre></li><li>循环条件一直为true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环。会影响程序性能或者造成程序卡死奔溃!</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/whilejava.png" alt=""></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whileDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//输出1-100</span>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(a&lt;=<span class="hljs-number">100</span>)&#123;            System.out.println(a);            a++;        &#125;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whileDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//计算1+2+...+100</span>        <span class="hljs-comment">//高斯的故事</span>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(a&lt;=<span class="hljs-number">100</span>)&#123;            sum+=a;            a++;        &#125;        System.out.println(sum);    &#125;&#125;</code></pre><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><ul><li><p>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p></li><li><p>do…while循环和while循环相似，不同的是，do…while循环至少会执行一次。</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;    <span class="hljs-comment">//代码语句</span>&#125;<span class="hljs-keyword">while</span>(布尔表达式);</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">doWhileDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//计算1+2+...+100</span>        <span class="hljs-comment">//高斯的故事</span>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;        <span class="hljs-keyword">do</span> &#123;            sum += a;            a++;        &#125;<span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">100</span>);        System.out.println(sum);    &#125;&#125;</code></pre><ul><li><p>While和do-While的区别:</p><ul><li>while先判断后执行。dowhile是先执行后判断!</li><li>Do…while总是保证循环体会被至少执行一次!这是他们的主要差别。</li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/doandwhile.jpg" alt="doandwhile"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-comment">//while与do while比较</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">doWhileDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> a =<span class="hljs-number">0</span> ;        <span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">0</span>)&#123;            System.out.println(a);        &#125;        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        <span class="hljs-keyword">do</span> &#123;            System.out.println(a);        &#125;<span class="hljs-keyword">while</span> (a&gt;<span class="hljs-number">0</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130213539960.png" alt="image-20210130213539960"></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><ul><li>虽然所有循环结构都可以用while或者do…while表示，但Java提供了另一种语句——for循环，使一些循环结构变得更加简单。</li><li>for循环语句是支持迭代的一种通用结构，<strong>是最有效、最灵活的循环结构。</strong></li><li>for循环执行的次数是在执行前就确定的。语法格式如下:</li></ul><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化;布尔表达式;更新)&#123;    <span class="hljs-comment">//代码语句</span>&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/javafor.jpg" alt="javafor"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">forDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span> (a&lt;=<span class="hljs-number">100</span>)&#123;            System.out.println(a);            a++;        &#125;        System.out.println(<span class="hljs-string">&quot;while循环结束！&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.out.println(i);        &#125;        System.out.println(<span class="hljs-string">&quot;for循环结束！&quot;</span>);        <span class="hljs-comment">/*</span><span class="hljs-comment">         关于for循环有以下几点说明:</span><span class="hljs-comment">        最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</span><span class="hljs-comment">        然后，检测布尔表达式的值。如果为true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。执行一次循环后，更新循环控制变量(迭代因子控制循环变量的增减)。</span><span class="hljs-comment">        再次检测布尔表达式。循环执行上面的过程。</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">//死循环的一种</span>        <span class="hljs-keyword">for</span>(;;)&#123;        &#125;    &#125;&#125;</code></pre><h4 id="练习1：分别计算0-100的奇数和和偶数和"><a href="#练习1：分别计算0-100的奇数和和偶数和" class="headerlink" title="练习1：分别计算0-100的奇数和和偶数和"></a>练习1：分别计算0-100的奇数和和偶数和</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> oddSum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> evenSum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;                evenSum+=i;            &#125;<span class="hljs-keyword">else</span>&#123;                oddSum+=i;            &#125;        &#125;        System.out.println(<span class="hljs-string">&quot;偶数和为：&quot;</span>+evenSum);        System.out.println(<span class="hljs-string">&quot;奇数和为:&quot;</span>+oddSum);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130220402919.png" alt="image-20210130220402919"></p><h4 id="练习2：用while和for循环输出1-1000之间能被5整除的数，并每行输出三个"><a href="#练习2：用while和for循环输出1-1000之间能被5整除的数，并每行输出三个" class="headerlink" title="练习2：用while和for循环输出1-1000之间能被5整除的数，并每行输出三个"></a>练习2：用while和for循环输出1-1000之间能被5整除的数，并每行输出三个</h4><pre><code class="hljs java"><span class="hljs-comment">//while循环</span><span class="hljs-comment">//用while循环输出1-1000之间能被5整除的数，并每行输出三个</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        String str=<span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-keyword">while</span> (i&lt;=<span class="hljs-number">1000</span>)&#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;                str=str+i;                <span class="hljs-comment">//System.out.println(i);</span>                count++;            &#125;            <span class="hljs-keyword">if</span> (count==<span class="hljs-number">3</span>)&#123;                System.out.println(str);                count=<span class="hljs-number">0</span>;                str=<span class="hljs-string">&quot; &quot;</span>;            &#125;            i++;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130222114116.png" alt="image-20210130222114116"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-comment">//改进版：用while循环输出1-1000之间能被5整除的数，并每行输出三个</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        String str=<span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-keyword">while</span> (i&lt;=<span class="hljs-number">1000</span>)&#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;                str=str+<span class="hljs-string">&quot;\t&quot;</span>+i;                <span class="hljs-comment">//System.out.println(i);</span>                count++;            &#125;            <span class="hljs-keyword">if</span> (count==<span class="hljs-number">3</span>)&#123;                System.out.println(str);                count=<span class="hljs-number">0</span>;                str=<span class="hljs-string">&quot; &quot;</span>;            &#125;            i++;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131105440171.png" alt="image-20210131105440171"></p><pre><code class="hljs java"><span class="hljs-comment">//for循环</span><span class="hljs-comment">//用for循环输出1-1000之间能被5整除的数，并每行输出三个</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        String str=<span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;            <span class="hljs-keyword">if</span> (i%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>) &#123;                <span class="hljs-comment">//System.out.println(i);</span>                count++;                str=i+str;            &#125;            <span class="hljs-keyword">if</span> (count==<span class="hljs-number">3</span>)&#123;                count=<span class="hljs-number">0</span>;                System.out.println(str);                str=<span class="hljs-string">&quot;&quot;</span>;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130222931332.png" alt="image-20210130222931332"></p><pre><code class="hljs java"><span class="hljs-comment">//改进版：用for循环输出1-1000之间能被5整除的数，并每行输出三个</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        String str=<span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;            <span class="hljs-keyword">if</span> (i%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>) &#123;                <span class="hljs-comment">//System.out.println(i);</span>                count++;                str=i+<span class="hljs-string">&quot;\t&quot;</span>+str;            &#125;            <span class="hljs-keyword">if</span> (count==<span class="hljs-number">3</span>)&#123;                count=<span class="hljs-number">0</span>;                System.out.println(str);                str=<span class="hljs-string">&quot;&quot;</span>;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131105648579.png" alt="image-20210131105648579"></p><h4 id="练习3：打印九九乘法表"><a href="#练习3：打印九九乘法表" class="headerlink" title="练习3：打印九九乘法表"></a>练习3：打印九九乘法表</h4><pre><code class="hljs java"><span class="hljs-comment">//打印九九乘法表</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String str = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;= i; j++)&#123;                str=str+j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+j*i;            &#125;            System.out.println(str);            str=<span class="hljs-string">&quot;&quot;</span>;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130223543727.png" alt="image-20210130223543727"></p><pre><code class="hljs java"><span class="hljs-comment">//改进版：打印九九乘法表</span><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String str = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;= i; j++)&#123;                str=str+j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+j*i+<span class="hljs-string">&quot;\t&quot;</span>;            &#125;            System.out.println(str);            str=<span class="hljs-string">&quot;&quot;</span>;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131105758223.png" alt="image-20210131105758223"></p><h4 id="print与println"><a href="#print与println" class="headerlink" title="print与println"></a>print与println</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.print(i);        &#125;        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(i);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131110609781.png" alt="image-20210131110609781"></p><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><ul><li>这里我们先只是见一面，做个了解，之后数组我们重点使用。</li><li>Java5引入了一种主要用于数组或集合的增强型for循环。</li><li>Java增强for 循环语法格式如下:<pre><code class="hljs java"><span class="hljs-keyword">for</span>(声明语句：表达式)&#123;<span class="hljs-comment">//代码句子</span>&#125;</code></pre></li><li>声明语句:声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</li><li>表达式:表达式是要访问的数组名，或者是返回值为数组的方法。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">forDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] numbers=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>&#125;; <span class="hljs-comment">//定义了一个数组</span>        <span class="hljs-comment">//本质理解</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;            System.out.println(numbers[i]);        &#125;        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);        <span class="hljs-comment">//for与数组结合的应用</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x:numbers)&#123;            System.out.println(x);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130224401703.png" alt="image-20210130224401703"></p><h3 id="5-break-amp-amp-continue"><a href="#5-break-amp-amp-continue" class="headerlink" title="5.break &amp;&amp; continue"></a>5.break &amp;&amp; continue</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">breakDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.out.println(i);            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        System.out.println(<span class="hljs-string">&quot;白小飞牛呀！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130224903155.png" alt="image-20210130224903155"></p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">continueDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;            System.out.println(i);            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">continue</span>;            &#125;        &#125;        System.out.println(<span class="hljs-string">&quot;白小飞牛呀！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130225044116.png" alt="image-20210130225044116"></p><h4 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h4><ul><li>goto关键字很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在语言中得到正式使用;Java没有goto。然而，在break和continue这两个关键字的身上，我们仍然能看出一些goto的影子——带标签的break和continue。</li><li>“标签”是指后面跟一个冒号的标识符，例如： label</li><li>对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是:我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">labelDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//打印101-150之间所有的质数</span>        <span class="hljs-comment">//质数：除了1和其本身不能被其它自然数整除的数！</span>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;        outer:<span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i =<span class="hljs-number">101</span> ; i&lt;<span class="hljs-number">150</span> ; i++ )&#123;            <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>; j&lt;i/<span class="hljs-number">2</span> ; j++ )&#123;                <span class="hljs-keyword">if</span>( i%j == <span class="hljs-number">0</span> )&#123;                    <span class="hljs-keyword">continue</span> outer;                &#125;            &#125;            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210130231148400.png" alt="image-20210130231148400"></p><h3 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h3><h4 id="打印一个三角形"><a href="#打印一个三角形" class="headerlink" title="打印一个三角形"></a>打印一个三角形</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/printsanjiao.png" alt="printsanjiao"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.struct.selection;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">5</span>; j &gt; i; j--) &#123;                System.out.print(<span class="hljs-string">&quot; &quot;</span>);            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= i; k++) &#123;                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt; i; l++) &#123;                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);            &#125;            System.out.println();        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131112523759.png" alt="image-20210131112523759"></p><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p><strong>run—debug</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131113123484.png" alt="image-20210131113123484"></p><h2 id="四、Java方法"><a href="#四、Java方法" class="headerlink" title="四、Java方法"></a>四、Java方法</h2><h3 id="1-何谓方法"><a href="#1-何谓方法" class="headerlink" title="1.何谓方法"></a>1.何谓方法</h3><ul><li>System.out.println()，是类.对象.方法。</li><li>Java方法是语句的集合，它们在一起执行一个功能。<ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用<pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-comment">//main函数</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> sum = add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);        System.out.println(sum);        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);        printModel();    &#125;    <span class="hljs-comment">//定义一个add方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b;    &#125;    <span class="hljs-comment">//定义一个printModel方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printModel</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">5</span>; j &gt; i; j--) &#123;                System.out.print(<span class="hljs-string">&quot;1&quot;</span>);            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= i; k++) &#123;                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt; i; l++) &#123;                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);            &#125;            System.out.println();        &#125;    &#125;&#125;</code></pre></li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131165813313.png" alt="image-20210131165813313"></p><ul><li>设计方法的原则:方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，<strong>就是一个方法只完成1个功能，这样利于我们后期的扩展。</strong></li></ul><blockquote><p>方法的命名规则?首字母小写和驼峰原则</p></blockquote><h3 id="2-方法的定义及调用"><a href="#2-方法的定义及调用" class="headerlink" title="2.方法的定义及调用"></a>2.方法的定义及调用</h3><h4 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h4><ul><li>Java的方法类似于其它语言的函数，<strong>是一段用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语法:</li><li>方法包含一个方法头和一个方法体。下面是一个方法的所有部分:<ul><li>修饰符:修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li><li>返回值类型∶方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li><li>方法名:是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>参数类型:参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li>形式参数:在方法被调用时用于接收外界输入的数据。</li><li>实参:调用方法时实际传给方法的数据。</li><li>方法体:方法体包含具体的语句，定义该方法的功能。</li></ul></li></ul><p><strong>语法：</strong></p><pre><code class="hljs java">修饰符 返回值类型 方法名（参数类型 参数名）&#123;    ...    方法体    ...    <span class="hljs-keyword">return</span> 返回值;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-comment">//main方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> a = compare(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);        System.out.println(<span class="hljs-string">&quot;最大值是：&quot;</span>+a);        System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);        <span class="hljs-keyword">int</span> b = compare(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);        System.out.println(b);    &#125;    <span class="hljs-comment">//比较大小</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2)</span></span>&#123;        <span class="hljs-keyword">int</span> result = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(num1==num2)&#123;            System.out.println(<span class="hljs-string">&quot;两个值相等！&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//中止方法</span>        &#125;        <span class="hljs-keyword">if</span> (num1&gt;num2)&#123;            result = num1;        &#125;<span class="hljs-keyword">else</span> &#123;            result = num2;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131172708998.png" alt="image-20210131172708998"></p><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><ul><li><p>调用方法:对象名.方法名(实参列表)</p></li><li><p>Java支持两种调用方法的方式，根据方法是否返回值来选择。</p></li><li><p>当方法返回一个值的时候，方法调用通常被当做一个值。例如:</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">int</span> larger = max(<span class="hljs-number">30</span>，<span class="hljs-number">40</span>);</code></pre><ul><li>如果方法返回值是void，方法调用一定是一条语句。</li></ul><pre><code class="hljs java">system.out. print1n(<span class="hljs-string">&quot;Hello&quot;</span>);</code></pre><ul><li><strong>课后拓展了解:值传递和引用传递</strong></li></ul><h3 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h3><ul><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</li><li><p>方法的重载的规则:</p><ul><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li><p>实现理论:</p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-comment">//方法重载</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> add = add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);        <span class="hljs-keyword">int</span> add1 = add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);        <span class="hljs-keyword">double</span> add2 = add(<span class="hljs-number">2.1</span>, <span class="hljs-number">2.2</span>);        <span class="hljs-keyword">double</span> add3 = add(<span class="hljs-number">2.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">2.3</span>);        System.out.println(add);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        System.out.println(add1);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        System.out.println(add2);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        System.out.println(add3);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b+c;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b,<span class="hljs-keyword">double</span> c)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b+c;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131174622388.png" alt="image-20210131174622388"></p><h3 id="4-命令行传参"><a href="#4-命令行传参" class="headerlink" title="4.命令行传参"></a>4.命令行传参</h3><ul><li>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//args.length:数组长度</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;            System.out.println(i+<span class="hljs-string">&quot;args:&quot;</span>+args[i]);        &#125;    &#125;&#125;</code></pre><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt; javac Demo04.java</span><span class="hljs-meta">&gt;</span><span class="bash">&gt; <span class="hljs-built_in">cd</span> ..</span><span class="hljs-meta">&gt;</span><span class="bash">&gt; <span class="hljs-built_in">cd</span> ..</span><span class="hljs-meta">&gt;</span><span class="bash">&gt; java Demo04 this is yhl baixf</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131175825859.png" alt="image-20210131175825859"></p><h3 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h3><ul><li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号(.…)。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-comment">//调用可变参数</span><span class="hljs-comment">//减小多余方法重载定义</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">double</span> add = add(<span class="hljs-number">2.1</span>, <span class="hljs-number">3.2</span>);        System.out.println(add);        <span class="hljs-keyword">double</span> add1 = add(<span class="hljs-number">1.0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>);        System.out.println(add1);        <span class="hljs-keyword">double</span> add2 = add();        System.out.println(add2);                <span class="hljs-comment">//new对象调用方法</span>        System.out.println(<span class="hljs-string">&quot;=============&quot;</span>);        Demo06 demo06 = <span class="hljs-keyword">new</span> Demo06();        <span class="hljs-keyword">double</span> add3 = demo06.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);        System.out.println(add3);    &#125;    <span class="hljs-comment">//add方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span>... numbers)</span></span>&#123;        <span class="hljs-keyword">if</span> (numbers.length==<span class="hljs-number">0</span>)&#123;            System.out.println(<span class="hljs-string">&quot;null&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;                result += numbers[i];            &#125;            <span class="hljs-keyword">return</span> result;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131183318588.png" alt="image-20210131183318588"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-comment">//调用可变参数</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        printMax(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);        printMax(<span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMax</span><span class="hljs-params">(<span class="hljs-keyword">double</span>...numbers)</span></span>&#123;        <span class="hljs-keyword">if</span> (numbers.length==<span class="hljs-number">0</span>)&#123;            System.out.println(<span class="hljs-string">&quot;没有输入值！&quot;</span>);            <span class="hljs-keyword">return</span>;                &#125;        <span class="hljs-keyword">double</span> result=numbers[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;numbers.length ; i++) &#123;            <span class="hljs-keyword">if</span> (numbers[i]&gt;result)&#123;                result=numbers[i];            &#125;        &#125;        System.out.println(<span class="hljs-string">&quot;最大值是：&quot;</span>+result);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131181624274.png" alt="image-20210131181624274"></p><h3 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h3><ul><li>递归就是:A方法调用A方法!就是自己调用自己</li><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li><li>递归结构包括两个部分:<ul><li>递归头:什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体:什么时候需要调用自身方法。</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> i = rankMultiply(<span class="hljs-number">4</span>);        System.out.println(i);        System.out.println(rankMultiply(<span class="hljs-number">1</span>));        System.out.println(rankMultiply(<span class="hljs-number">6</span>));    &#125;    <span class="hljs-comment">//5! 5*4*3*2*1</span>    <span class="hljs-comment">//4! f(4)*f(3)*f(2)*1</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rankMultiply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;        <span class="hljs-keyword">if</span> (value==<span class="hljs-number">1</span>)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span>(value * rankMultiply(value - <span class="hljs-number">1</span>));        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131185838888.png" alt="image-20210131185838888"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131185641932.png" alt="image-20210131185641932"></p><blockquote><p>栈机制：递归会带来大量的函数调用，产生很多额外的时间开销，对于深度大的情况，占用大量占用，程序会报错。</p><p>小计算可以用递归；大计算则不好！只是一种很好的算法机制！</p></blockquote><h3 id="7-练习"><a href="#7-练习" class="headerlink" title="7.练习"></a>7.练习</h3><p><strong>计算器：加减乘除</strong></p><blockquote><p>写四个方法：加减乘除</p><p>利用循环+switch进行交互</p><p>传递需要操作的数</p><p>输出结果</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-keyword">import</span> sun.awt.Symbol;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//计算器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        System.out.println(<span class="hljs-string">&quot;请输入你要输的第一个数：&quot;</span>);        <span class="hljs-keyword">double</span> v1 = scanner.nextDouble();        System.out.println(<span class="hljs-string">&quot;请输入你要进行的操作：&quot;</span>);        String next = scanner.next();        System.out.println(<span class="hljs-string">&quot;请输入你要输的第二个数：&quot;</span>);        <span class="hljs-keyword">double</span> v2 = scanner.nextDouble();        scanner.close();        <span class="hljs-keyword">switch</span> (next)&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:                System.out.println(add(v1,v2));                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:                System.out.println(reduce(v1,v2));                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:                System.out.println(multiply(v1,v2));                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:                <span class="hljs-keyword">if</span> (v2==<span class="hljs-number">0</span>) &#123;                    System.out.println(<span class="hljs-string">&quot;除数不能为0！&quot;</span>);                    &#125;<span class="hljs-keyword">else</span> &#123;                    System.out.println(v1 + next + v2 + <span class="hljs-string">&quot;=&quot;</span> + divide(v1, v2));                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                System.out.println(<span class="hljs-string">&quot;输入的符号有误！&quot;</span>);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a-b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a*b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a/b;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131193550822.png" alt="image-20210131193550822"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.method;<span class="hljs-comment">//改进版，000退出系统</span><span class="hljs-keyword">import</span> sun.awt.Symbol;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//计算器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">praDemo01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;            Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;            System.out.println(<span class="hljs-string">&quot;输入000即可退出此系统&quot;</span>);            System.out.println(<span class="hljs-string">&quot;请输入你要输的第一个数：&quot;</span>);            <span class="hljs-keyword">double</span> v1 = scanner.nextDouble();            <span class="hljs-keyword">if</span> (v1==<span class="hljs-number">000</span>)&#123;                <span class="hljs-keyword">break</span>;            &#125;            System.out.println(<span class="hljs-string">&quot;请输入你要进行的操作：&quot;</span>);            String next = scanner.next();            System.out.println(<span class="hljs-string">&quot;请输入你要输的第二个数：&quot;</span>);            <span class="hljs-keyword">double</span> v2 = scanner.nextDouble();            <span class="hljs-keyword">switch</span> (next) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:                    System.out.println(add(v1, v2));                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:                    System.out.println(reduce(v1, v2));                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:                    System.out.println(multiply(v1, v2));                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:                    <span class="hljs-keyword">if</span> (v2 == <span class="hljs-number">0</span>) &#123;                        System.out.println(<span class="hljs-string">&quot;除数不能为0！&quot;</span>);                    &#125; <span class="hljs-keyword">else</span> &#123;                        System.out.println(v1 + next + v2 + <span class="hljs-string">&quot;=&quot;</span> + divide(v1, v2));                    &#125;                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">default</span>:                    System.out.println(<span class="hljs-string">&quot;输入的符号有误！&quot;</span>);            &#125;        &#125;        scanner.close();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a+b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">reduce</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a-b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a*b;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b)</span></span>&#123;        <span class="hljs-keyword">return</span> a/b;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131194210280.png" alt="image-20210131194210280"></p><h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><h3 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h3><ul><li>数组是相同类型数据的有序集合。</li><li>数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。</li><li>其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/arrary.jpg" alt="arrary"></p><h3 id="2-数组声明创建"><a href="#2-数组声明创建" class="headerlink" title="2.数组声明创建"></a>2.数组声明创建</h3><ul><li>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量<br>的语法:<pre><code class="hljs java">dataType[] arrayRefVar;<span class="hljs-comment">//首选的方法</span>或dataType arrayRefVar[];<span class="hljs-comment">//效果相同，但不是首选方法</span></code></pre></li><li>Java语言使用new操作符来创建数组，语法如下:<pre><code class="hljs java">dataType[] arrayRefVar = <span class="hljs-keyword">new</span> dataType[ arraySize];</code></pre></li><li>数组的元素是通过索引访问的，数组索引从0开始。</li><li>获取数组长度:<pre><code class="hljs java">arrays.length</code></pre></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131223808097.png" alt="image-20210131223808097"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo01</span> </span>&#123;    <span class="hljs-comment">//变量的类型 变量的名字 = 变量的值；</span>    <span class="hljs-comment">//数组类型‘</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//int[] nums; 声明一个数组</span>        <span class="hljs-comment">//nums=new int[10]; 为数组开辟一个空间</span>        <span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;            nums[i]=i;        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.print(nums[i]);        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210131223620352.png" alt="image-20210131223620352"></p><h4 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201101055038.png" alt="image-20210201101055038"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//1.声明一个数组</span>        <span class="hljs-keyword">int</span>[] numbers;        <span class="hljs-comment">//2.创建一个数组</span>        numbers = <span class="hljs-keyword">new</span>  <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];        <span class="hljs-comment">//3.给数组中的元素赋值</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;numbers.length ; i++) &#123;            numbers[i]=<span class="hljs-number">1</span>;        &#125;        <span class="hljs-comment">//4.取值</span>        System.out.println(numbers[<span class="hljs-number">10</span>]);        <span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 10</span>        <span class="hljs-comment">//at tk.array.ArrayDemo02.main(ArrayDemo02.java:15)</span>    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201100850960.png" alt="image-20210201100850960"></p><h4 id="数组的三种初始化"><a href="#数组的三种初始化" class="headerlink" title="数组的三种初始化"></a>数组的三种初始化</h4><ul><li>静态初始化</li></ul><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;Man[] mans=&#123;<span class="hljs-keyword">new</span> Man(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">new</span> Man(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//静态初始化 创建+赋值</span>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;        <span class="hljs-comment">//Man[] mans=&#123;new Man(),new Man()&#125;;</span>        System.out.println(a[<span class="hljs-number">0</span>]);        System.out.println(a[<span class="hljs-number">1</span>]);    &#125;&#125;</code></pre><ul><li>动态初始化</li></ul><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;a[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//动态初始化：包含默认初始值</span>        <span class="hljs-keyword">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];        b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;        System.out.println(b[<span class="hljs-number">0</span>]);        System.out.println(b[<span class="hljs-number">1</span>]);    &#125;&#125;</code></pre><ul><li>数组的默认初始化<ul><li>数组是引用类型它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//动态初始化：包含默认初始值</span>        <span class="hljs-keyword">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];        b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;        System.out.println(b[<span class="hljs-number">0</span>]);        System.out.println(b[<span class="hljs-number">1</span>]);    &#125;&#125;</code></pre><h4 id="数组的基本特点"><a href="#数组的基本特点" class="headerlink" title="数组的基本特点"></a>数组的基本特点</h4><ul><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型,不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的。</strong></li></ul><h4 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h4><ul><li>下标的合法区间:[0, length-1]，如果越界就会报错;</li></ul><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];system.out.print1n(a[<span class="hljs-number">2</span>]);&#125;</code></pre><ul><li><strong>ArraylndexOutOfBoundsException :数组下标越界异常!</strong></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>数组是相同数据类型(数据类型可以为任意类型)的有序集合。</li><li>数组也是对象。数组元素相当于对象的成员变量</li><li>数组长度的确定的，不可变的。如果越界，则报:ArrayIndexOutofBounds。</li></ul><h3 id="3-数组使用"><a href="#3-数组使用" class="headerlink" title="3.数组使用"></a>3.数组使用</h3><h4 id="普通For循环"><a href="#普通For循环" class="headerlink" title="普通For循环"></a>普通For循环</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];        <span class="hljs-comment">//遍历为a赋值</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;            a[i] = i;        &#125;        <span class="hljs-comment">//求和</span>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;            sum+=a[i];        &#125;        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum);        <span class="hljs-comment">//求最大值</span>        <span class="hljs-keyword">int</span> max=a[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length ; i++) &#123;            <span class="hljs-keyword">if</span> (a[i]&gt;max)&#123;                max=a[i];            &#125;        &#125;        System.out.println(<span class="hljs-string">&quot;max=&quot;</span>+max);        &#125;    &#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201105000198.png" alt="image-20210201105000198"></p><h4 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>&#125;;        <span class="hljs-comment">//JDK1.5</span>        <span class="hljs-comment">//但不支持按下标操作</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : a) &#123;            System.out.println(i);        &#125;                    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201105337832.png" alt="image-20210201105337832"></p><h4 id="数组作方法入参"><a href="#数组作方法入参" class="headerlink" title="数组作方法入参"></a>数组作方法入参</h4><h4 id="数组作返回值"><a href="#数组作返回值" class="headerlink" title="数组作返回值"></a>数组作返回值</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo06</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] array=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>&#125;;        printArray(array);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        printArray(reverse(array));    &#125;    <span class="hljs-comment">//打印数组方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span></span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            System.out.print(array[i]);        &#125;    &#125;    <span class="hljs-comment">//反转数组</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reverse(<span class="hljs-keyword">int</span>[] array)&#123;        <span class="hljs-keyword">int</span>[] result=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=array.length-<span class="hljs-number">1</span>; i &lt; array.length; i++,j=array.length-<span class="hljs-number">1</span>-i) &#123;            result[i]=array[j];        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201111041306.png" alt="image-20210201111041306"></p><h3 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h3><ul><li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</p></li><li><p>二维数组</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">int</span> a[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>];</code></pre><ul><li>解析:以上二维数组a可以看成一个两行五列的数组。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201112336745.png" alt="image-20210201112336745"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo07</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[][] array=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;array.length ; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;                array[i][j]=i+j;            &#125;        &#125;        System.out.println(array[<span class="hljs-number">0</span>]);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        printArray(array[<span class="hljs-number">0</span>]);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        System.out.println(array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);        printArray2(array);    &#125;    <span class="hljs-comment">//打印数组方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span></span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            System.out.println(array[i]);        &#125;    &#125;    <span class="hljs-comment">//遍历打印二维数组</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] array)</span></span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;array[i].length ; j++) &#123;                System.out.print(array[i][j]);            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201113343550.png" alt="image-20210201113343550"></p><h4 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo08</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[][][] array=&#123;&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;&#125;,&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;&#125;&#125;;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length ; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;array[i].length ; j++) &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; array[i][j].length; k++) &#123;                    System.out.print(array[i][j][k]);                &#125;                System.out.println();            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201120133839.png" alt="image-20210201120133839"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201115958420.png" alt="image-20210201115958420"></p><h3 id="5-Arrays"><a href="#5-Arrays" class="headerlink" title="5.Arrays"></a>5.Arrays</h3><ul><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了一个工具类Arrays供我们使用,从而可以对数据对象进行一些基本的操作。</p></li><li><p><strong>查看JDK帮助文档</strong></p></li><li><p>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不用”使用对象来调用(注意:是”不用”而不是”不能”)</p></li><li><p>具有以下常用功能:</p><ul><li>给数组赋值:通过fill方法。</li><li>对数组排序:通过sort方法,按升序。</li><li><p>比较数组:通过equals 方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素:通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul></li></ul><h4 id="Array-toString-方法"><a href="#Array-toString-方法" class="headerlink" title="Array.toString()方法"></a>Array.toString()方法</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201124139914.png" alt="image-20210201124139914"></p><pre><code class="hljs java"><span class="hljs-comment">//Array.toString()方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toString</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;        <span class="hljs-keyword">if</span> (a == <span class="hljs-keyword">null</span>)            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;        <span class="hljs-keyword">int</span> iMax = a.length - <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (iMax == -<span class="hljs-number">1</span>)            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[]&quot;</span>;        StringBuilder b = <span class="hljs-keyword">new</span> StringBuilder();        b.append(<span class="hljs-string">&#x27;[&#x27;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; ; i++) &#123;            b.append(a[i]);            <span class="hljs-keyword">if</span> (i == iMax)                <span class="hljs-keyword">return</span> b.append(<span class="hljs-string">&#x27;]&#x27;</span>).toString();            b.append(<span class="hljs-string">&quot;, &quot;</span>);        &#125;    &#125;</code></pre><p><strong>返回的为String类型，可接收数据。</strong></p><pre><code class="hljs java"><span class="hljs-comment">//自写Array.toString()方法</span><span class="hljs-comment">//造轮子</span><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">import</span> java.lang.reflect.Array;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo09</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">double</span>[] array=<span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">10</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;array.length ; i++) &#123;            array[i]= Math.random();        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            System.out.print(array[i]);        &#125;        System.out.println(<span class="hljs-string">&quot;\n&quot;</span>);        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);        System.out.println(Arrays.toString(array));        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);        toString(array);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">toString</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] array)</span></span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>)&#123;                System.out.print(<span class="hljs-string">&quot;[&quot;</span>+array[i]+<span class="hljs-string">&quot;,&quot;</span>);            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i==array.length-<span class="hljs-number">1</span>)&#123;                System.out.print(array[i]+<span class="hljs-string">&quot;]&quot;</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                System.out.print(array[i]+<span class="hljs-string">&quot;,&quot;</span>);            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201123852927.png" alt="image-20210201123852927"></p><h4 id="Array-sort"><a href="#Array-sort" class="headerlink" title="Array.sort()"></a>Array.sort()</h4><p><strong>sort方法只是对原数组进行排序</strong>，并未改变原数组长度，即对原数组长度没有影响，因此<strong>不需要定义一个数组接收它 ，即不需要返回值</strong>。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201124307712.png" alt="image-20210201124307712"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo10</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] array=&#123;<span class="hljs-number">151</span>,<span class="hljs-number">22</span>,<span class="hljs-number">63</span>,<span class="hljs-number">45</span>,<span class="hljs-number">66</span>,<span class="hljs-number">88</span>,<span class="hljs-number">62</span>,<span class="hljs-number">33</span>,<span class="hljs-number">45</span>,<span class="hljs-number">36</span>,<span class="hljs-number">35</span>&#125;;        Arrays.sort(array);<span class="hljs-comment">//数组进行升序排序</span>        System.out.println(array);        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);        System.out.println(Arrays.toString(array));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201124952343.png" alt="image-20210201124952343"></p><h4 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill()"></a>Array.fill()</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201130414472.png" alt="image-20210201130414472"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201130937707.png" alt="image-20210201130937707"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo11</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] array=&#123;<span class="hljs-number">12</span>,<span class="hljs-number">56</span>,<span class="hljs-number">89</span>,<span class="hljs-number">56</span>,<span class="hljs-number">55</span>,<span class="hljs-number">61</span>,<span class="hljs-number">33</span>,<span class="hljs-number">69</span>&#125;;                Arrays.fill(array,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// arrays,fromindex,toindex,value</span>        System.out.println(Arrays.toString(array));        Arrays.fill(array,<span class="hljs-number">0</span>);<span class="hljs-comment">// arrays,value</span>        System.out.println(Arrays.toString(array));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201130952306.png" alt="image-20210201130952306"></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/paixu.png" alt="paixu"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/fuzadu.png" alt="fuzadu"></p><ul><li><p>冒泡排序无疑是最为出名的排序算法之一，总共有八大排序!</p></li><li><p>冒泡的代码还是相当简单的，两层循环，外层冒泡轮数，里层依次比较，江湖中人人尽皆知。</p></li><li>我们看到嵌套循环，应该立马就可以得出这个算法的时间复杂度为O(n2)。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo12</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] array=&#123;<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>,<span class="hljs-number">26</span>,<span class="hljs-number">98</span>,<span class="hljs-number">42</span>&#125;;        System.out.println(Arrays.toString(array));        <span class="hljs-keyword">int</span> swap=<span class="hljs-number">0</span>;                <span class="hljs-comment">//冒泡排序</span>        <span class="hljs-comment">//1.比较数组中，两个相邻元素，小的放后面</span>        <span class="hljs-comment">//2.每次比较产生一个最小值</span>        <span class="hljs-comment">//3.下一轮减小依次排序</span>        <span class="hljs-comment">//4.依次循环，直到结束！</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length-i-<span class="hljs-number">1</span>; j++) &#123;                <span class="hljs-keyword">if</span> (array[j]&lt;array[j+<span class="hljs-number">1</span>])&#123;                    swap=array[j+<span class="hljs-number">1</span>];                    array[j+<span class="hljs-number">1</span>]=array[j];                    array[j]=swap;                &#125;            &#125;            System.out.println(Arrays.toString(array));        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201141737007.png" alt="image-20210201141737007"></p><pre><code class="hljs java"><span class="hljs-comment">//优化版</span><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo12</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] array=&#123;<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>,<span class="hljs-number">26</span>,<span class="hljs-number">98</span>,<span class="hljs-number">42</span>&#125;;        System.out.println(Arrays.toString(array));        <span class="hljs-keyword">int</span> swap=<span class="hljs-number">0</span>;        <span class="hljs-comment">//冒泡排序</span>        <span class="hljs-comment">//1.比较数组中，两个相邻元素，小的放后面</span>        <span class="hljs-comment">//2.每次比较产生一个最小值</span>        <span class="hljs-comment">//3.下一轮减小依次排序</span>        <span class="hljs-comment">//4.依次循环，直到结束！</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">boolean</span> flag=<span class="hljs-keyword">false</span>;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length-i-<span class="hljs-number">1</span>; j++) &#123;                <span class="hljs-keyword">if</span> (array[j]&lt;array[j+<span class="hljs-number">1</span>])&#123;                    swap=array[j+<span class="hljs-number">1</span>];                    array[j+<span class="hljs-number">1</span>]=array[j];                    array[j]=swap;                    flag=<span class="hljs-keyword">true</span>;                &#125;                &#125;            <span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">false</span>)&#123;                <span class="hljs-keyword">break</span>;            &#125;            System.out.println(Arrays.toString(array));        &#125;        System.out.println(<span class="hljs-string">&quot;最终排序结果：&quot;</span>+Arrays.toString(array));    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201163909625.png" alt="image-20210201163909625"></p><h3 id="6-稀疏数组"><a href="#6-稀疏数组" class="headerlink" title="6.稀疏数组"></a>6.稀疏数组</h3><ul><li>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀</li><li>疏数组来保存该数组。稀疏数组的处理方式是:<ul><li>记录数组一共有几行几列，有多少个不同值</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201165106242.png" alt="image-20210201165106242"></p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201165143433.png" alt="image-20210201165143433"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tk.array;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo13</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[][] array=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">10</span>];        array[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;        array[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;                System.out.print(array[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);            &#125;            System.out.println();        &#125;        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;                <span class="hljs-keyword">if</span> (array[i][j]!=<span class="hljs-number">0</span>)&#123;                    sum+=<span class="hljs-number">1</span>;                &#125;            &#125;        &#125;        <span class="hljs-comment">//System.out.println(sum);</span>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span>[][] array01=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];        array01[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=array.length;        array01[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=array[<span class="hljs-number">0</span>].length;        array01[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=sum;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array[i].length; j++) &#123;                <span class="hljs-keyword">if</span> (array[i][j]!=<span class="hljs-number">0</span>)&#123;                    count++;                    array01[count][<span class="hljs-number">0</span>]=i;                    array01[count][<span class="hljs-number">1</span>]=j;                    array01[count][<span class="hljs-number">2</span>]=array[i][j];                &#125;            &#125;        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array01.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array01[i].length; j++) &#123;                System.out.print(array01[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);            &#125;            System.out.println();        &#125;        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);        <span class="hljs-keyword">int</span>[][] array02=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array01[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][array01[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array01.length; i++) &#123;            array02[array01[i][<span class="hljs-number">0</span>]][array01[i][<span class="hljs-number">1</span>]]=array01[i][<span class="hljs-number">2</span>];        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array02.length; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array02[i].length; j++) &#123;                System.out.print(array02[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);            &#125;            System.out.println();        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201172504975.png" alt="image-20210201172504975"></p><h2 id="六、面向对象编程"><a href="#六、面向对象编程" class="headerlink" title="六、面向对象编程"></a>六、面向对象编程</h2><blockquote><p>Java核心思想，OOP。</p></blockquote><h3 id="1-初始面向对象"><a href="#1-初始面向对象" class="headerlink" title="1.初始面向对象"></a>1.初始面向对象</h3><h4 id="面向过程-amp-amp-面向对象"><a href="#面向过程-amp-amp-面向对象" class="headerlink" title="面向过程 &amp;&amp; 面向对象"></a>面向过程 &amp;&amp; 面向对象</h4><ul><li>面向过程思想<ul><li>步骤清晰简单，第一步做什么，第二步做什么…</li><li>面对过程适合处理一些较为简单的问题</li></ul></li><li><p>面向对象思想</p><ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题!</li></ul></li><li><p><strong>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p></li></ul><h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h4><blockquote><p>方法+属性=类！</p></blockquote><ul><li>面向对象编程(Object-Oriented Programming, oOP)<br>面向对象编程的本质就是:<strong>以类的方式组织代码，以对象的组织(封装)数据。</strong></li><li><strong>抽象：核心思想。</strong></li><li><strong>三大特性</strong>:<ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态 </strong></li></ul></li><li>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</li><li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li></ul><h3 id="2-方法回顾和加深"><a href="#2-方法回顾和加深" class="headerlink" title="2.方法回顾和加深"></a>2.方法回顾和加深</h3><ul><li>方法的定义<ul><li>修饰符</li><li>返回类型</li><li>break和return的区别<br>break:跳出switch,结束循环；return:结束方法。</li></ul></li><li>方法名<ul><li>参数列表</li><li>异常抛出<pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo01;<span class="hljs-comment">//Demo01就是一个类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-comment">//main方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">    修饰符 (返回值类型) 方法名 (数据类型 参数)&#123;</span><span class="hljs-comment">        //方法体</span><span class="hljs-comment">        return 返回值；</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,world&quot;</span>;        <span class="hljs-comment">//System.out.println(&quot;1&quot;);</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span><span class="hljs-params">(String string)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;string!&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;&#125;</code></pre></li></ul></li></ul><p><strong>return结束方法，后面的代码将不会执行，也不允许执行。</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201182337150.png" alt="image-20210201182337150"></p><ul><li>方法的调用<ul><li>静态方法</li><li>非静态方法</li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201184238264.png" alt="image-20210201184238264"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;            <span class="hljs-comment">//不可以调用</span>    <span class="hljs-comment">//原因：static静态方法是和类一起创建的</span>    <span class="hljs-comment">// 而非静态方法h()是类实例化对象创建后才创建的</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;        h();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span></span>&#123;    &#125;&#125;</code></pre><ul><li>形参和实参</li><li>值传递和引用传递<pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//值传递</span>        <span class="hljs-keyword">int</span> a =<span class="hljs-number">1</span>;        change(a);        System.out.println(a);        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);                <span class="hljs-comment">//引用传递：对象，本质还是值传递</span>        Person person = <span class="hljs-keyword">new</span> Person();        change(person);        System.out.println(person.name);    &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;        a=<span class="hljs-number">10</span>;    &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(Person person)</span></span>&#123;                <span class="hljs-comment">//person是一个对象：指向的---&gt; Person person = new Person();这是一个具体的人，可以改变属性！</span>        person.name=<span class="hljs-string">&quot;白小飞&quot;</span>;    &#125;&#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;        String name;&#125;</code></pre></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201191148152.png" alt="image-20210201191148152"></p><ul><li>this关键字</li></ul><p><strong>this.代表当前类的，=后面的一般为传过来的值。</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    String name;    <span class="hljs-comment">//alt + insert 可快速调出构造器</span>    <span class="hljs-comment">//无参构造</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;王冰冰&quot;</span>;    &#125;    <span class="hljs-comment">//有参构造</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name=name;    &#125;&#125;</code></pre><h3 id="3-创建对象"><a href="#3-创建对象" class="headerlink" title="3.创建对象"></a>3.创建对象</h3><h4 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h4><blockquote><p>对象，是具体的事物。类，是抽象的，是对对象的抽象。</p></blockquote><ul><li>类是一种<strong>抽象的数据类型</strong>,它是对某一类事物整体描述/定义,但是并不能代表某一个具体的事物.<ul><li>动物、植物、手机、电脑.…….</li><li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li></ul></li><li>对象是抽象概念的<strong>具体实例</strong><ul><li>张三就是人的一个具体实例,张三家里的旺财就是狗的一个具体实例。</li><li>能够体现出特点,展现出功能的是具体的实例,而不是一个抽象的概念.</li></ul></li></ul><h4 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h4><ul><li><strong>使用new关键字创建对象</strong>。</li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象<strong>进行默认的初始化</strong>以及对类中<strong>构造器</strong>的调用。<pre><code class="hljs java"><span class="hljs-comment">//Girlfriend类</span><span class="hljs-keyword">package</span> oop.demo02;<span class="hljs-comment">//女朋友类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girlfriend</span> </span>&#123;    <span class="hljs-comment">//属性：字段</span>    String name;    <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">int</span> height;    <span class="hljs-comment">//方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">travel</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot;和白小飞去游玩了！&quot;</span>);    &#125;&#125;</code></pre></li></ul><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo02;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-comment">//类：抽象的；需要将其实例化为对象</span>    <span class="hljs-comment">//类实例化后会返回自己的对象！</span>    <span class="hljs-comment">//冰冰，书欣，lisa...对象就是一个个Girlfriend类的具体实例！</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Girlfriend no1 = <span class="hljs-keyword">new</span> Girlfriend();        Girlfriend no2 = <span class="hljs-keyword">new</span> Girlfriend();        Girlfriend no3 = <span class="hljs-keyword">new</span> Girlfriend();        System.out.print(no1.name);        System.out.print(no1.age);        System.out.print(no1.height);        System.out.println(<span class="hljs-string">&quot;=========&quot;</span>);        no1.name=<span class="hljs-string">&quot;王冰冰&quot;</span>;        no1.age=<span class="hljs-number">31</span>;        no1.height=<span class="hljs-number">165</span>;        no2.name=<span class="hljs-string">&quot;虞书欣&quot;</span>;        no3.name=<span class="hljs-string">&quot;Lisa&quot;</span>;        System.out.println(<span class="hljs-string">&quot;女友一号：&quot;</span>+no1.name+<span class="hljs-string">&quot;,年龄,&quot;</span>+no1.age+<span class="hljs-string">&quot;,身高：&quot;</span>+no1.height);        System.out.println(<span class="hljs-string">&quot;女友二号：&quot;</span>+no1.name);        System.out.println(<span class="hljs-string">&quot;女友三号：&quot;</span>+no1.name);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201202701529.png" alt="image-20210201202701529"></p><ul><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩个特点:<ul><li>1.必须和类的名字相同</li><li>⒉.必须没有返回类型,也不能写void</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-comment">//Person类</span><span class="hljs-keyword">package</span> oop.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-comment">//一个类即使什么都不写，他也会存在一个方法</span>    String name;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-comment">//一个项目应该只存在一个main方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//new 实例化一个对象</span>        Person person = <span class="hljs-keyword">new</span> Person();        System.out.println(person.name);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201204615735.png" alt="image-20210201204615735"></p><pre><code class="hljs java"><span class="hljs-comment">//编写构造器</span><span class="hljs-comment">//Person类</span><span class="hljs-keyword">package</span> oop.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-comment">//一个类即使什么都不写，他也会存在一个方法</span>    String name;    <span class="hljs-comment">//alt + insert 可快速调出构造器</span>    <span class="hljs-comment">//1.使用new关键字，本质是再调用构造器</span>    <span class="hljs-comment">//2.构造器用来初始化值</span>    <span class="hljs-comment">//无参构造</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;王冰冰&quot;</span>;    &#125;    <span class="hljs-comment">//有参构造</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name=name;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-comment">//一个项目应该只存在一个main方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//new 实例化一个对象</span>        Person person = <span class="hljs-keyword">new</span> Person();        System.out.println(person.name);        Person person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;虞书欣&quot;</span>);        System.out.println(person2.name);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201205106517.png" alt="image-20210201205106517"></p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li><p>类：</p><ul><li>静态的属性——属性</li><li>动态的行为——方法</li></ul></li><li><p>构造器： </p><ul><li>和类名相同；</li><li>没有返回值。</li></ul></li><li>作用：<ul><li>new 本质就是在调用构造器；</li><li>初始化对象的值。</li></ul></li><li>注意点：<ul><li>定义有参构造之后，如果使用无参构造，将会显示<strong>没有为该对象定义无参的构造函数。</strong></li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201205608983.png" alt="image-20210201205608983"></p><h3 id="4-对象的创建分析"><a href="#4-对象的创建分析" class="headerlink" title="4.对象的创建分析"></a>4.对象的创建分析</h3><pre><code class="hljs java"><span class="hljs-comment">//Pet类</span><span class="hljs-keyword">package</span> oop.demo04;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;    String name;    <span class="hljs-keyword">int</span> age;    <span class="hljs-comment">//默认存在无参构造对属性进行初始化！</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-keyword">this</span>.age+<span class="hljs-string">&quot;岁的&quot;</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot;正在叫！&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo04;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Pet dog = <span class="hljs-keyword">new</span> Pet();        dog.name=<span class="hljs-string">&quot;旺财&quot;</span>;        dog.age=<span class="hljs-number">3</span>;        dog.shout();        Pet cat = <span class="hljs-keyword">new</span> Pet();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201213549544.png" alt="image-20210201213549544"></p><p><strong>对象的引用：</strong></p><ul><li>引用类型：基本类型（8种）</li><li>对象是通过引用来操作的，栈—-&gt;堆(内存地址)</li></ul><h3 id="5-面向对象的三大特征"><a href="#5-面向对象的三大特征" class="headerlink" title="5.面向对象的三大特征"></a>5.面向对象的三大特征</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>该露的露，该藏的藏<ul><li>我们程序设计要追求 <strong>“高内聚，低耦合”</strong>。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合:仅暴露少量的方法给外部使用。</li></ul></li><li>封装(数据的隐藏)<ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。 </li></ul></li><li>记住这句话就够了:  <strong>属性私有，get/set</strong></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201222329136.png" alt="image-20210201222329136"></p><pre><code class="hljs java"><span class="hljs-comment">//Girlfriend</span><span class="hljs-keyword">package</span> oop.demo05;<span class="hljs-comment">//类 private:私有</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girlfriend</span> </span>&#123;    <span class="hljs-comment">//属性私有</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//名字</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age; <span class="hljs-comment">//年龄</span>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">//手机号</span>    <span class="hljs-comment">//提供一些可以操作这些属性的方法</span>    <span class="hljs-comment">//提供一些public的get、set方法</span>    <span class="hljs-comment">//赋值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;        <span class="hljs-keyword">this</span>.name=name;    &#125;    <span class="hljs-comment">//取值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;    &#125;    <span class="hljs-comment">//alt+insert</span>    <span class="hljs-comment">//自动生成get、set方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">if</span> (age!=<span class="hljs-number">18</span>)&#123;            System.out.println(<span class="hljs-string">&quot;冰冰永远18岁！&quot;</span>);            <span class="hljs-keyword">this</span>.age=<span class="hljs-number">18</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">this</span>.age = age;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhone</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> phone;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhone</span><span class="hljs-params">(String phone)</span> </span>&#123;        <span class="hljs-keyword">this</span>.phone = phone;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo05;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Girlfriend no01 = <span class="hljs-keyword">new</span> Girlfriend();        System.out.println(no01.getName());        System.out.println(<span class="hljs-string">&quot;========&quot;</span>);        no01.setName(<span class="hljs-string">&quot;王冰冰&quot;</span>);        no01.setAge(<span class="hljs-number">31</span>);<span class="hljs-comment">//不行，冰冰18岁！</span>        System.out.println(<span class="hljs-string">&quot;=========&quot;</span>);        System.out.println(no01.getName()+<span class="hljs-string">&quot;の年龄是&quot;</span>+no01.getAge()+<span class="hljs-string">&quot;岁！&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201223554452.png" alt="image-20210201223554452"></p><p><strong>封装的好处：</strong></p><ul><li>提高程序的交全性,保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护增加了</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote><p>final定义的类无法被继承！</p></blockquote><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思是“扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承!</li><li>继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的俩个类，一个为子类(派生类),一个为父类(基类)。子类继承父类,使用关键字extends来表示。</li><li>子类和父类之间,从意义上讲应该具有”is a”的关系.</li></ul><pre><code class="hljs java"><span class="hljs-comment">//Person</span><span class="hljs-keyword">package</span> oop.demo06;<span class="hljs-comment">//Person 人：父类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;        <span class="hljs-comment">//一般属性才是私有的</span>    <span class="hljs-comment">//public</span>    <span class="hljs-comment">//protected </span>    <span class="hljs-comment">//default</span>    <span class="hljs-comment">//private</span>        <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> money=<span class="hljs-number">100_0000</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot;在学习&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Bai</span><span class="hljs-keyword">package</span> oop.demo06;<span class="hljs-comment">//学生 is 人 ： 派生类 ， 子类</span><span class="hljs-comment">//子类继承了父类，就会拥有父类的全部方法！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bai</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo06;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Bai bai = <span class="hljs-keyword">new</span> Bai();        bai.setName(<span class="hljs-string">&quot;白小飞&quot;</span>);        bai.study();        System.out.println(bai.money);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202101521466.png" alt="image-20210202101521466"></p><ul><li>object类</li></ul><pre><code class="hljs java">crtl+h <span class="hljs-comment">//调出继承树状结构</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202104737270.png" alt="image-20210202104737270"></p><ul><li>super</li></ul><p><strong>super调用父类属性</strong></p><pre><code class="hljs java"><span class="hljs-comment">//Pet</span><span class="hljs-comment">//在java中，所有的类默认继承object类</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;    String name=<span class="hljs-string">&quot;宠物&quot;</span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Cat</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span></span>&#123;    String name=<span class="hljs-string">&quot;小猫&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">(String name)</span></span>&#123;        System.out.println(name);  <span class="hljs-comment">//main函数调用这个方法时传进来的参数</span>        System.out.println(<span class="hljs-keyword">this</span>.name); <span class="hljs-comment">//cat类中name的初始值</span>        System.out.println(<span class="hljs-keyword">super</span>.name); <span class="hljs-comment">//父类pet中name的初始值</span>    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Cat cat1 = <span class="hljs-keyword">new</span> Cat();        cat1.shout(<span class="hljs-string">&quot;旺财&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202104555623.png" alt="image-20210202104555623"></p><p><strong>super调用父类方法</strong></p><pre><code class="hljs java"><span class="hljs-comment">//Pet</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;    <span class="hljs-keyword">protected</span> String name=<span class="hljs-string">&quot;宠物&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Pet&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Cat</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span></span>&#123;    <span class="hljs-keyword">private</span> String name=<span class="hljs-string">&quot;小猫&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">(String name)</span></span>&#123;        System.out.println(name);  <span class="hljs-comment">//main函数调用这个方法时传进来的参数</span>        System.out.println(<span class="hljs-keyword">this</span>.name); <span class="hljs-comment">//cat类中name的初始值</span>        System.out.println(<span class="hljs-keyword">super</span>.name); <span class="hljs-comment">//父类pet中name的初始值</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Cat&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;        print(); <span class="hljs-comment">//调用自己的print方法</span>        <span class="hljs-keyword">this</span>.print(); <span class="hljs-comment">//同上，实质一样</span>        <span class="hljs-keyword">super</span>.print(); <span class="hljs-comment">//调用父类方法</span>    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo07;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Cat cat1 = <span class="hljs-keyword">new</span> Cat();        cat1.shout(<span class="hljs-string">&quot;旺财&quot;</span>);        cat1.test01();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202105800899.png" alt="image-20210202105800899"></p><p><strong>但是当父类的方法设为私有时将无法通过super调用,同理，私有属性也无法调用！</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202110223215.png" alt="image-20210202110223215"></p><p><strong>无参构造器</strong></p><pre><code class="hljs java"><span class="hljs-comment">//Pet</span><span class="hljs-keyword">package</span> oop.demo08;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pet</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;Pet的无参构造器被执行了！&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Cat</span><span class="hljs-keyword">package</span> oop.demo08;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//隐藏代码：调用了父类的无参构造器！</span>        <span class="hljs-keyword">super</span>();  <span class="hljs-comment">//必须要放在子类构造器的第一行</span>        <span class="hljs-comment">//this(); this也必须要放在第一行</span>        System.out.println(<span class="hljs-string">&quot;Cat的无参构造器被执行了！&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo08;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Cat cat = <span class="hljs-keyword">new</span> Cat();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202111759005.png" alt="image-20210202111759005"></p><p><strong>子类中隐藏存在着无参构造，在子类的无参构造中也隐藏存在着super()关键字,且super()只能放在第一行。</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202111628182.png" alt="image-20210202111628182"></p><p><strong>如果父类中不存在无参构造，那个子类也将不允许出现无参构造（因为子类的无参构造中隐藏着super()对父类的无参调用）;父类只存在有参构造器时，可以通过super（参数）来使用。</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202112516198.png" alt="image-20210202112516198"></p><p><strong>小结</strong></p><p>super注意点:</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中!</li><li>super和 this不能同时调用构造方法!</li></ol><p>vs this:</p><ol><li>代表的对象不同:</li><li>this:本身调用者这个对象</li><li>super:代表父类对象的应用前提</li><li>this:没哟继承也可以使用</li><li>super:只能在继承条件才可以使用构造方法</li><li>this():本类的构造</li><li>super():父类的构造!</li></ol><ul><li>方法重写</li></ul><p><strong>静态方法重写</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202114412345.png" alt="image-20210202114412345"></p><p><strong>非静态方法重写</strong></p><pre><code class="hljs java"><span class="hljs-comment">//Pet</span><span class="hljs-keyword">package</span> oop.demo09;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;动物叫！&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Cat</span><span class="hljs-keyword">package</span> oop.demo09;<span class="hljs-comment">//继承</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span> </span>&#123;    <span class="hljs-comment">//重写都是方法的重写，和属性无关</span>    <span class="hljs-comment">//alt+insert @Overwrite方法重写</span>    <span class="hljs-comment">//注释：有功能的注释！</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.shout();    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo09;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//静态方法与非静态方法区别很大！</span>        <span class="hljs-comment">//静态方法：方法的调用只和左边，定义的数据类型有关</span>        <span class="hljs-comment">//非静态方法：重写</span>        Cat cat01 = <span class="hljs-keyword">new</span> Cat();        Pet cat02 = <span class="hljs-keyword">new</span> Cat();        cat01.shout();        cat02.shout();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202115605665.png" alt="image-20210202115605665"></p><p><strong>方法重写与重载</strong></p><blockquote><p>重载是在本类中进行;重写需要有继承关系；出现在子类与父类之间。</p></blockquote><p><strong>方法重写：overwrite</strong></p><p>1.方法名必须相同</p><p>2.参数列表必须相同</p><p>3.修饰符：public&gt;protected&gt;default&gt;private</p><p>4.抛出的异常：范围可以缩小，但不能扩大；</p><p>5.子类与父类的方法体不同！</p><p><strong>为什么需要方法重写</strong></p><p>父类的功能，子类可能不需要，或者不一定满足。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p></li><li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多。</p></li><li><p>多态存在的条件</p><ul><li>有继承关系</li></ul></li><li><p>子类重写父类方法</p><ul><li>父类引用指向子类对象</li></ul></li><li><p>注意:多态是方法的多态，属性没有多态性。</p></li></ul><pre><code class="hljs java"><span class="hljs-comment">//Person</span><span class="hljs-keyword">package</span> oop.demo10;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;father&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Student</span><span class="hljs-keyword">package</span> oop.demo10;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;son&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;eat&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo10;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//一个对象的实际类型是确定的</span>        <span class="hljs-comment">//new Student();</span>        <span class="hljs-comment">//new Person();</span>        <span class="hljs-comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span>        <span class="hljs-comment">//student能调用的方法都是自己或者继承父亲的！</span>        Student student01 = <span class="hljs-keyword">new</span> Student();        <span class="hljs-comment">//person父类型，可以指向子类，但是不能调用子类独有的方法</span>        Person student02 = <span class="hljs-keyword">new</span> Student();        student01.run();        student02.run(); <span class="hljs-comment">//子类重写了父类的方法，就会执行子类的方法体！</span>        <span class="hljs-comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span>        student01.eat();        <span class="hljs-comment">//父类没有，子类有的方法需要通过强制转换降级才可以调用该方法！</span>        ((Student) student02).eat();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202150600564.png" alt="image-20210202150600564"></p><p><strong>多态注意事项：</strong></p><p>1.多态是方法的多态，属性没有多态。</p><p>2.父类和子类有联系 类型转换异常 ClassCastException!</p><p>3.存在条件：继承关系，方法需要重写，父类引用指向子类！Father f1=new Son();</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202151904772.png" alt="image-20210202151904772"></p><p><strong>不可以继承的方法</strong></p><p>1.static 方法，属于类，他不属于实例 </p><p>2.final 常量；</p><p>3.private方法；</p><ul><li>instanceof</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo12;<span class="hljs-keyword">import</span> oop.demo06.Person;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Student stu01 = <span class="hljs-keyword">new</span> Student();        Teacher tea01 = <span class="hljs-keyword">new</span> Teacher();        Person per01 = <span class="hljs-keyword">new</span> Person();        Object obj01 = <span class="hljs-keyword">new</span> Student();        <span class="hljs-comment">//object &gt; string</span>        <span class="hljs-comment">//object &gt; person &gt; student</span>        <span class="hljs-comment">//object &gt; person &gt; teacher</span>        System.out.println(stu01 <span class="hljs-keyword">instanceof</span> oop.demo12.Person);<span class="hljs-comment">//true</span>        System.out.println(tea01 <span class="hljs-keyword">instanceof</span> oop.demo12.Person);<span class="hljs-comment">//true</span>        System.out.println(stu01 <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span>        System.out.println(tea01 <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span>        <span class="hljs-comment">//System.out.println(stu01 instanceof String); 编译报错</span>        <span class="hljs-comment">//System.out.println(tea01 instanceof String); 编译报错</span>        System.out.println(per01 <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span>        <span class="hljs-comment">//System.out.println(per01 instanceof Student); 编译报错</span>        System.out.println(stu01 <span class="hljs-keyword">instanceof</span> oop.demo12.Person);<span class="hljs-comment">//true</span>        System.out.println(stu01 <span class="hljs-keyword">instanceof</span> oop.demo12.Person);<span class="hljs-comment">//true</span>        System.out.println(obj01 <span class="hljs-keyword">instanceof</span> String);<span class="hljs-comment">//false</span>        System.out.println(obj01 <span class="hljs-keyword">instanceof</span> oop.demo12.Person);<span class="hljs-comment">//true</span>    &#125;&#125;</code></pre><p><strong>对象的类型转换</strong></p><pre><code class="hljs java"><span class="hljs-comment">//Person</span><span class="hljs-keyword">package</span> oop.demo12;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;run&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Student</span><span class="hljs-keyword">package</span> oop.demo12;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;study&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//Application</span><span class="hljs-keyword">package</span> oop.demo12;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//类型之间的转换 高---》低</span>        <span class="hljs-comment">//高转低</span>        Person student = <span class="hljs-keyword">new</span> Student();        student.run();        <span class="hljs-comment">//student.study();编译报错 不能调用父类没有定义的方法</span>        <span class="hljs-comment">//将这个对象转换为Student类型后，我们就可以使用student类型的方法了</span>        ((Student) student).study();        <span class="hljs-comment">//将低级的类转换为高级的类</span>        Student stu1 = <span class="hljs-keyword">new</span> Student();        Person per1 = stu1;        <span class="hljs-comment">//但是子类转换为父类后可能会丢失一些子类的方法</span>        <span class="hljs-comment">//per1.study(); 编译报错</span>        <span class="hljs-comment">//仍可以通过强制类型转换</span>        ((Student)stu1).study();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202161834593.png" alt="image-20210202161834593"></p><p><strong>小结</strong></p><p>1.父类引用指向子类的对象</p><p>2.把子类转换为父类，向上转型，直接新建一个父类对象，直接赋值即可。</p><p>3.把父类转为子类，向下转型，需要强制转换。</p><p>4.方便方法的抽象，减少重复的代码，简洁。</p><h3 id="6-stastic"><a href="#6-stastic" class="headerlink" title="6.stastic"></a>6.stastic</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo13;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String name; <span class="hljs-comment">//静态属性  多线程</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age; <span class="hljs-comment">//非静态属性</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;run&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;say&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Student student = <span class="hljs-keyword">new</span> Student();        System.out.println(Student.name);        <span class="hljs-comment">//非静态属性不可以直接输出类变量！！</span>        <span class="hljs-comment">//System.out.println(Student.age);编译报错</span>        System.out.println(student.name);        System.out.println(student.age);        System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);        student.say();        student.run();        <span class="hljs-comment">//同理，非静态方法也不可以通过类方法的形式调用！</span>        <span class="hljs-comment">//Student.say(); 编译出错</span>        Student.run();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202163726936.png" alt="image-20210202163726936"></p><p><strong>匿名代码块、静态代码块与内存分析</strong></p><p>1.静态代码块只执行一次，和类一起加载</p><p>2.匿名代码块和对象一起产生，但是在方法前执行！用来赋初始值~</p><p>3.构造器（类的方法，创建对象时生成，但是执行晚于匿名代码块）</p><pre><code class="hljs csharp">package oop.demo13;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> &#123;    <span class="hljs-comment">//1.只执行一次，和类一起加载</span>    <span class="hljs-keyword">static</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);    &#125;        <span class="hljs-comment">//2.和对象一起产生，但是在方法前执行！用来赋初始值~</span>    &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;匿名代码块&quot;</span>);    &#125;    <span class="hljs-comment">//3</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;构造器&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        Teacher teacher = <span class="hljs-keyword">new</span> Teacher();        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===============&quot;</span>);        Teacher teacher1 = <span class="hljs-keyword">new</span> Teacher();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202164418119.png" alt="image-20210202164418119"></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210201213549544.png" alt=""></p><p><strong>静态导入包</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo13;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.PI;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.random;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APP</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;                <span class="hljs-comment">//导入前调用</span>        System.out.println(Math.random());        <span class="hljs-comment">//导入后调用</span>        System.out.println(PI);        System.out.println(random());    &#125;&#125;</code></pre><h3 id="7-抽象类"><a href="#7-抽象类" class="headerlink" title="7.抽象类"></a>7.抽象类</h3><pre><code class="hljs java"><span class="hljs-comment">//A</span><span class="hljs-keyword">package</span> oop.demo14;<span class="hljs-comment">//抽象类: 类 extends: 单继承   （但是接口可以多继承！！）</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;        <span class="hljs-comment">//约束 ~ 有人帮我们实现！</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;A&quot;</span>);    &#125;    <span class="hljs-comment">//abstract , 抽象方法，只有方法名字，没有方法的实现！</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//B</span><span class="hljs-keyword">package</span> oop.demo14;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-comment">//继承抽象类的子类必须要重写父类的抽象方法，除非她也是抽象类~😂</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;say&quot;</span>);    &#125;&#125;</code></pre><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p><strong>实质：抽象的抽象！</strong></p><p>1.不能new这个抽象类</p><p>2.抽象类中可以写普通的方法</p><p>3.抽象方法必须在抽象类中</p><p>4.抽象类不可以被new为一个对象</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202171603697.png" alt="image-20210202171603697"></p><p>思考：抽象类是否存在构造器？存在！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202171946025.png" alt="image-20210202171946025"></p><p>抽象类存在的意义？提高开发效率</p><h3 id="8-接口"><a href="#8-接口" class="headerlink" title="8.接口"></a>8.接口</h3><blockquote><p>普通类:只有具体实现</p><p>抽象类:具体实现和规范(抽象方法)都有!</p><p>接口:只有规范!</p></blockquote><ul><li>接口就是规范，定义的是一组规则。</li><li>接口的本质是契约！</li><li>OO的精髓是，是对对象的抽象，最能体现这一点的是接口。</li><li>声明类的关键字是class;声明接口的关键字是interface。</li><li>接口实现了约束和实现的分离，面向接口编程！</li></ul><pre><code class="hljs java"><span class="hljs-comment">//UserService</span><span class="hljs-keyword">package</span> oop.demo15;<span class="hljs-comment">//interface 定义的关键字。 接口都需要有实现类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;        <span class="hljs-comment">//常量 public static final </span>    <span class="hljs-keyword">int</span> age=<span class="hljs-number">99</span>;        <span class="hljs-comment">//接口中的所有定义的方法其实都是公共抽象的 public abstract </span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//TimeService</span><span class="hljs-keyword">package</span> oop.demo15;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TimeService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timmer</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//UserServiceImpl</span><span class="hljs-keyword">package</span> oop.demo15;<span class="hljs-comment">//抽象类：extends 单继承</span><span class="hljs-comment">//类 可以实现接口：implements 接口 多继承</span><span class="hljs-comment">//实现了接口的类，必须要重写接口的方法</span><span class="hljs-comment">//多继承 利用接口实现多继承</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span>,<span class="hljs-title">TimeService</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timmer</span><span class="hljs-params">()</span> </span>&#123;    &#125;&#125;</code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>1.接口是一个约束，实现了约束和实现的分离！</p><p>2.定义了一些方法，让不同的人实现。</p><p>3.接口中的所有定义的方法其实public abstract。</p><p>4.接口中的属性默认 public static final。</p><p>5.接口不能被实例化。</p><p>6.通过implement可以实现接口多继承！</p><h3 id="9-内部类"><a href="#9-内部类" class="headerlink" title="9.内部类"></a>9.内部类</h3><p>内部类就是在一个类的内部在定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><pre><code class="hljs java"><span class="hljs-comment">//Outer &amp;&amp; Inner</span><span class="hljs-keyword">package</span> oop.demo16;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;    <span class="hljs-keyword">private</span> String name=<span class="hljs-string">&quot;IU知恩&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;这是外部类的方法！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inner</span></span>&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span></span>&#123;            System.out.println(<span class="hljs-string">&quot;这是内部类方法！&quot;</span>);        &#125;        <span class="hljs-comment">//内部类方法：调用外部类私有变量</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPri</span><span class="hljs-params">()</span></span>&#123;            System.out.println(name);        &#125;    &#125;    &#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//APP</span><span class="hljs-keyword">package</span> oop.demo16;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建外部类对象</span>        Outer outer = <span class="hljs-keyword">new</span> Outer();        outer.out();        <span class="hljs-comment">//创建内部类对象</span>        Outer.inner inner = outer.<span class="hljs-function">new <span class="hljs-title">inner</span><span class="hljs-params">()</span></span>;        inner.in();        inner.getPri();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202181204231.png" alt="image-20210202181204231"></p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>static是随class创建时产生的，所以内部类是无法调用外部类的属性值的，他们的创建是在class之后的。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202182140298.png" alt="image-20210202182140298"></p><p>而且 Java 中普通内部类为何不能有static数据和static字段，也不能包含嵌套类。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202183625815.png" alt="image-20210202183625815"></p><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo19;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;    <span class="hljs-comment">//局部内部类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;run&quot;</span>);        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;                System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Outer outer = <span class="hljs-keyword">new</span> Outer();        outer.run();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202190024715.png" alt="image-20210202190024715"></p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo19;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APP</span>  </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//匿名内部类</span>        <span class="hljs-comment">//匿名对象</span>        <span class="hljs-comment">//没有名字初始化类，不用将实例保存到变量中</span>        <span class="hljs-keyword">new</span> A().pr();        UserService hello = <span class="hljs-keyword">new</span> UserService() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pr</span><span class="hljs-params">()</span> </span>&#123;                System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);            &#125;        &#125;;        hello.pr();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pr</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pr</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202185603609.png" alt="image-20210202185603609"></p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul><li>一个Java类中可以有多个class类，但只能有一个public class。</li><li>一般用于测试 main()。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo18;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;    &#125;<span class="hljs-comment">//一个Java类中可以有多个class类，但只能有一个public class</span><span class="hljs-comment">//一般用于测试 main()</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;            &#125;&#125;</code></pre><h2 id="七、异常机制"><a href="#七、异常机制" class="headerlink" title="七、异常机制"></a>七、异常机制</h2><h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h3><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如:你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或硬盘可能满了。等等。</li><li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是:Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</li><li>异常指程序运行中出现的不期而至的各种状况,如:文件找不到、网络连接失败、非法参数等。</li><li>异常发生在程序运行期间,它影响了正常的程序执行流程。</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> Exception.demo01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-number">9</span>/<span class="hljs-number">0</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202191139819.png" alt="image-20210202191139819"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> Exception.demo01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">new</span> App().a();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123;        b();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span>&#123;        a();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202191317459.png" alt="image-20210202191317459"></p><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><ul><li><p>检查性异常</p><p>语法异常，编译异常…..</p></li><li><p>运行时异常</p></li><li>异常</li></ul><h3 id="2-异常体系结构"><a href="#2-异常体系结构" class="headerlink" title="2.异常体系结构"></a>2.异常体系结构</h3><ul><li>Java把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常Exception。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/JavaException.png" alt="JavaException"></p><h4 id="错误（Error）"><a href="#错误（Error）" class="headerlink" title="错误（Error）"></a>错误（Error）</h4><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（Virtual MachineError)，当JVM不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止;</li><li>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><ul><li><p>在Exception分支中有一个重要的子类RuntimeException(运行时异常)</p><ul><li><p>ArraylndexOutOfBoundsException(数组下标越界)</p></li><li><p>NullPointerException(空指针异常)</p></li><li><p>ArithmeticException(算术异常)</p></li><li><p>MissingResourceException(丢失资源)</p></li><li><p>ClassNotFoundException(找不到类）等异常，</p><p>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</p></li></ul></li><li><p>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生;</p></li></ul><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>Error和Exception的区别: Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程;Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</p><h3 id="3-Java异常处理机制"><a href="#3-Java异常处理机制" class="headerlink" title="3.Java异常处理机制"></a>3.Java异常处理机制</h3><ul><li><p>抛出异常</p></li><li><p>捕获异常</p></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%BC%82%E5%B8%B8.jpg" alt="异常"></p><h3 id="4-处理异常"><a href="#4-处理异常" class="headerlink" title="4.处理异常"></a>4.处理异常</h3><h4 id="异常处理五个关键字"><a href="#异常处理五个关键字" class="headerlink" title="异常处理五个关键字"></a>异常处理五个关键字</h4><ul><li>try、catch、finall</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> Exception.demo01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//ctrl+alt+t 快捷键</span>                <span class="hljs-comment">//假设要捕获多个异常：从小到大！</span>        <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">//try 监控区域</span>            <span class="hljs-keyword">new</span> App().a();        &#125; <span class="hljs-keyword">catch</span> (Error e) &#123; <span class="hljs-comment">//catch(要捕获的异常类型) 捕获异常</span>            System.out.println(<span class="hljs-string">&quot;ERROR&quot;</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;            System.out.println(<span class="hljs-string">&quot;Exception&quot;</span>);        &#125;<span class="hljs-keyword">catch</span> (Throwable e) &#123;            System.out.println(<span class="hljs-string">&quot;Throwable&quot;</span>);        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">//处理善后工作</span>            System.out.println(<span class="hljs-string">&quot;完成&quot;</span>);        &#125;        <span class="hljs-comment">//finally可以不写，一般用于异常时 对 IO等资源关闭！</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123;        b();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span>&#123;        a();    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202194814075.png" alt="image-20210202194814075"></p><ul><li>throw、throws</li></ul><p>主动的抛出异常。一般在方法中使用</p><pre><code class="hljs java"><span class="hljs-comment">//throw</span><span class="hljs-keyword">package</span> Exception.demo02;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        App app = <span class="hljs-keyword">new</span> App();        app.divide(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">//主动的抛出异常。一般在方法中使用</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException();        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202204437890.png" alt="image-20210202204437890"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> Exception.demo03;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">new</span> App().divide(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//假设方法内部无法处理这个异常，方法上抛出异常</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> <span class="hljs-keyword">throws</span> ArithmeticException</span>&#123;        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException();        &#125;    &#125;&#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/image-20210202205225304.png" alt="image-20210202205225304"></p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch (Exception)来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源</li></ul><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/Java基础basic.png" alt="Java基础basic"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV12J41137hu">狂神说B站视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.java.com/">Java官网</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>狂神</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习</title>
    <link href="/2021/01/25/MySQL/MySQL%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/25/MySQL/MySQL%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL学习笔记（狂神说Java）"><a href="#MySQL学习笔记（狂神说Java）" class="headerlink" title="MySQL学习笔记（狂神说Java）"></a>MySQL学习笔记（狂神说Java）</h2><p>狂神说B站视频：<a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1">https://www.bilibili.com/video/BV1NJ411J79W?p=1</a></p><p>MySQL官网：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p><p>MySQL教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p><h2 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1.初识MySQL"></a>1.初识MySQL</h2><p>JavaEE: 企业级java开发 Web</p><p>前端（页面：展示，数据！） </p><p>后台（连接点：连接数据库 JDBC，连接前端（控制，控制视图跳转，给前端传输数据））</p><p>数据库（存数据(变量)，txt，Excel（类似关系型数据库），word）</p><blockquote><p>只会写代码，学好数据库，基本混饭吃；<br>操作系统，数据结构与算法！当一个不错的程序员！<br>离散数学，数字电路，网站体系结构，编译原理。+实战经验=》优秀的程序员</p></blockquote><h3 id="1-1-为什么学习数据库"><a href="#1-1-为什么学习数据库" class="headerlink" title="1.1 为什么学习数据库"></a>1.1 为什么学习数据库</h3><p>1.岗位需求</p><p>java必须会mysql</p><p>2.现在的世界，大数据时代~，数据可以变现，得数据者得天下。</p><p>3.被迫需求；存数据</p><p>4.数据库是所有软件体系中最核心的存在。DBA</p><h3 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h3><p>数据库（DB，DateBase）</p><p>概念：数据仓库，<strong>软件</strong>，安装在操作系统（windows,linux,mac）之上! SQL,可以存储大量数据，500万！</p><p>作用：存储数据，管理数据</p><h3 id="1-3-数据库分类"><a href="#1-3-数据库分类" class="headerlink" title="1.3 数据库分类"></a>1.3 数据库分类</h3><p>关系型数据库：SQL<br>（Excel(行列)）</p><ul><li>Mysql,Oracle,Aql server, DB2,SQLlite</li><li>通过表和表之间，行和行之间的关系进行数据的存储， 学员信息表、考勤表……</li></ul><p>非关系型数据库 NoSQL<br>(key:value)</p><ul><li>Redis,MongDB</li><li>非关系型数据库，对象存储，通过对象自身属性决定。</li></ul><p>DBMS (DB：数据库 MS：管理系统)</p><ul><li>数据库管理软件（相当于excel,wps）,科学有效的管理数据，维护和获取数据。</li><li>MySQL</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121182535.png" alt=""></p><h3 id="1-4-MySQL简介"><a href="#1-4-MySQL简介" class="headerlink" title="1.4 MySQL简介"></a>1.4 MySQL简介</h3><p>MySQL是<strong>一个关系型数据库管理系统</strong>，<strong>由瑞典MySQL AB 公司开发</strong>，属于 <strong>Oracle 旗下产品</strong>。MySQL 是<strong>最流行的关系型数据库管理系统</strong>之一，在 WEB 应用方面，MySQL是最好的 <strong>RDBMS (Relational Database Management System，关系数据库管理系统) </strong>应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，<strong>关系数据库将数据保存在不同的表中</strong>，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 <strong>SQL 语言</strong>是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为<strong>社区版和商业版</strong>，由于其<strong>体积小</strong>、<strong>速度快</strong>、总体拥有<strong>成本低</strong>，尤其是<strong>开放源码</strong>这一特点，一般中小型网站包括大型网站（搭建集群）的开发都选择 MySQL 作为网站数据库。</p><p><a href="https://www.mysql.com/">官网</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121183806.png" alt=""></p><h3 id="1-5-安装MySQL"><a href="#1-5-安装MySQL" class="headerlink" title="1.5 安装MySQL"></a>1.5 安装MySQL</h3><ul><li><p>免安装版：解压就可以用MySQL免安装版的数据存储，默认在当前解压文件夹下。 命令提示符窗口(cmd)启动后，文件目录下对会出现data这个文件就是用于储存数据的。免安装版需要像jdk一样配置环境变量。</p></li><li><p>安装版：安装就可以用MySQL安装版：MySQL安装版的数据存储，默认在电脑安装目录文件下。不用配置环境变量。</p></li></ul><p>(官网下载地址)[<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a>]</p><p>(清华大学开源镜像站)[<a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/">https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/</a>]</p><blockquote><p>安装建议：1.尽量不要使用exe,注册表，卸载麻烦；2.尽可能使用安装包安装</p></blockquote><p>安装步骤:</p><p>1、下载后得到zip压缩包.</p><p>2、解压到自己想要安装到的目录，本人解压到的是D:\mysql</p><p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p><p>选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹</p><p>4、编辑 my.ini 文件 ,注意替换路径位置</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 目录一定要换成自己的</span>[mysqld]basedir=D:\mysql-5.7.19\datadir=D:\mysql-5.7.19\data\ #原本无 系统会自动生成 不需要自己建port=3306 #端口skip-grant-tables #跳过密码验证</code></pre><p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入<br><pre><div class="caption"><span>–install``` (安装mysql服务)</span></div><code class="hljs mysqld">&#96;&#96;&#96;shellC:\WINDOWS\system32&gt;mysqld -installService successfully installed.</code></pre></p><p>6、再输入  <code>mysqld --initialize-insecure --user=mysql</code> 初始化数据文件(生成data目录)</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121214901.png" alt=""></p><p>7、然后再次启动mysql </p><pre><code class="hljs shell">net start mysqlC:\WINDOWS\system32&gt;net start mysqlMySQL 服务正在启动 .MySQL 服务已经启动成功。</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121215321.png" alt=""></p><p>8、然后用命令 <code>mysql –u root –p</code> 进入mysql管理界面（密码可为空）</p><pre><code class="hljs shell">-u root #用户名是一个叫root的用户-p #切记：-p之后没有空格C:\WINDOWS\system32&gt;mysql -u root -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.19 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</code></pre><p>9、进入界面后更改root密码</p><pre><code class="hljs shell">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;;</code></pre><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> update mysql.user <span class="hljs-built_in">set</span> authentication_string=password(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span> and Host = <span class="hljs-string">&#x27;localhost&#x27;</span>;</span>Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1</code></pre><p>11、刷新权限</p><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> flush privileges;</span>Query OK, 0 rows affected (0.00 sec)</code></pre><p>12、修改 my.ini文件删除最后一句skip-grant-tables</p><pre><code class="hljs shell">[mysqld]basedir=D:\mysql-5.7.19\datadir=D:\mysql-5.7.19\data\port=3306<span class="hljs-meta">#</span><span class="bash">skip-grant-tables</span></code></pre><p>13、重启mysql即可正常使用</p><pre><code class="hljs shell">net stop mysqlnet start mysqlC:\WINDOWS\system32&gt;net stop mysqlMySQL 服务正在停止.MySQL 服务已成功停止。C:\WINDOWS\system32&gt;net start mysqlMySQL 服务正在启动 .MySQL 服务已经启动成功。</code></pre><p>14、连接上测试出现以下结果就安装好了</p><pre><code class="hljs shell">mysql -u root -pmysql -u root -p123456 #-p后不要空格 此方式只是不安全C:\WINDOWS\system32&gt;mysql -u root -pEnter password: ******Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.19 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<span class="hljs-meta">mysql&gt;</span></code></pre><pre><code class="hljs shell">sc delete mysql #清空mysql服务⚠ 可用于重装mysql</code></pre><h3 id="1-6-SQLyog"><a href="#1-6-SQLyog" class="headerlink" title="1.6 SQLyog"></a>1.6 SQLyog</h3><p>可手动操作,管理MySQL数据库的软件工具</p><p>特点 : 简洁 , 易用 , 图形化</p><p>数据库信息在/data目录</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121221913.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121222318.png" alt=""></p><p>1.新建一个数据库 school</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 每一个sqlyog的操作都对应一个sql语句</span>CREATE DATABASE `school`CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121222724.png" alt=""></p><p>2.新建一张表 student</p><pre><code class="hljs shell">字段 id, name, age<span class="hljs-meta">#</span><span class="bash"> 历史记录</span>CREATE TABLE `school`.`student` ( `id` INT(10) NOT NULL COMMENT &#x27;学员id&#x27;, `name` VARCHAR(100) NOT NULL COMMENT &#x27;学员name&#x27;, `age` INT(3) NOT NULL COMMENT &#x27;学员age&#x27;, PRIMARY KEY (`id`) ) ENGINE=INNODB CHARSET=utf8 COLLATE=utf8_general_ci;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121224046.png" alt=""></p><p>3.查看表</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 历史记录</span>SELECT * FROM `school`.`student` LIMIT 0, 1000;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121224442.png" alt=""></p><p>4.添加信息</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 历史记录</span>INSERT INTO `school`.`student` (`id`, `name`, `age`) VALUES (&#x27;01&#x27;, &#x27;baixf&#x27;, &#x27;18&#x27;);</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121224632.png" alt=""></p><p>5.删除信息</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 历史记录</span>/*[21-Jan 22:50:44][34 ms]*/ DELETE FROM `school`.`student` WHERE `id` = &#x27;2&#x27;;</code></pre><h3 id="1-7连接数据库"><a href="#1-7连接数据库" class="headerlink" title="1.7连接数据库"></a>1.7连接数据库</h3><p>命令行连接！</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mysql -uroot -p123456</span>C:\Users\Bai&gt;mysql -uroot -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 6Server version: 5.7.19 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mysql命令模式</span><span class="hljs-meta">mysql&gt;</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看更改root密码的命令</span>update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;;<span class="hljs-meta">#</span><span class="bash"> mysql.user 数据库后的某个表</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> authentication_string=password(<span class="hljs-string">&#x27;123456&#x27;</span>) 设置密码</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210121225852.png" alt=""></p><pre><code class="hljs shell"></code></pre><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases; <span class="hljs-comment">#显示所有数据库</span></span>+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || school             || sys                |+--------------------+5 rows in set (0.00 sec)<span class="hljs-meta">mysql&gt;</span><span class="bash"> use school  <span class="hljs-comment"># 使用某个数据库</span></span>Database changed<span class="hljs-meta">mysql&gt;</span><span class="bash"> show tables; <span class="hljs-comment"># 显示该数据库下所有表</span></span>+------------------+| Tables_in_school |+------------------+| student          |+------------------+1 row in set (0.00 sec)<span class="hljs-meta">mysql&gt;</span><span class="bash"> describe student; <span class="hljs-comment"># 查看某个表信息</span></span>+-------+--------------+------+-----+---------+-------+| Field | Type         | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| id    | int(10)      | NO   | PRI | NULL    |       || name  | varchar(100) | NO   |     | NULL    |       || age   | int(3)       | NO   |     | NULL    |       |+-------+--------------+------+-----+---------+-------+3 rows in set (0.00 sec)<span class="hljs-meta">mysql&gt;</span><span class="bash"> create database baixf; <span class="hljs-comment"># 创建一个数据库</span></span>Query OK, 1 row affected (0.00 sec)<span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span>+--------------------+| Database           |+--------------------+| information_schema || baixf              || mysql              || performance_schema || school             || sys                |+--------------------+6 rows in set (0.00 sec)<span class="hljs-meta">mysql&gt;</span><span class="bash"> use baixf <span class="hljs-comment"># 使用某个数据库</span></span>Database changed<span class="hljs-meta">mysql&gt;</span><span class="bash"> show tables; <span class="hljs-comment"># 新创建的数据库下表为空</span></span>Empty set (0.00 sec)<span class="hljs-meta">#</span><span class="bash"> 注释：</span><span class="hljs-meta">#</span><span class="bash"> 单行注释 <span class="hljs-comment"># 注释内容</span></span><span class="hljs-meta">#</span><span class="bash"> 多行注释 /* 注释内容 */</span><span class="hljs-meta">#</span><span class="bash"> 单行注释 -- 注释内容        (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></code></pre><h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><blockquote><p>操作数据库 - 》 操作数据库中的表 - 》 操作表中的数据</p></blockquote><ul><li>MySQL不区分大小写</li></ul><h3 id="2-1-操作数据库"><a href="#2-1-操作数据库" class="headerlink" title="2.1 操作数据库"></a>2.1 操作数据库</h3><p>1.创建数据库</p><pre><code class="hljs mysql">CREATE DATABASE [IF NOT EXISTS] baixf;</code></pre><p>2.删除数据库</p><pre><code class="hljs mysql">DROP DATABASE IF EXISTS baixf;</code></pre><p>3.使用数据库</p><pre><code class="hljs mysql">USE school;# 如果表名或者字段名中使用了特殊字符，就需要加 &#96;user&#96; 使其不显示高亮SELECT USER FROM student;SELECT &#96;USER&#96; FROM student;</code></pre><p>4.查看数据库</p><pre><code class="hljs mysql">SHOW DATABASES; # 查看所有数据库</code></pre><p><strong>学习思路：</strong></p><ul><li>对照sqlyog可视化查看历史记录</li><li>固定语法或关键字必需记住</li></ul><h3 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2 数据库的列类型"></a>2.2 数据库的列类型</h3><blockquote><p>数值</p></blockquote><ul><li>tinyint            十分小的数据                    1个字节</li><li>smallint          较小的数据                       2个字节</li><li>mediumint     中等的数据                      3个字节</li><li><strong>int                 标准的整数                         4个字节</strong></li><li>igint                较大的数据                        8个字节</li><li>float                 浮点数                              4个字节</li><li>doule                浮点数                             8个字节</li><li>decimal             字符串形式的浮点数     金融常用</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char                 字符串固定大小 0-255</li><li><strong>varchar          可变字符串 0-65535</strong></li><li>tingtext            微型文本 1-2^8-1</li><li><strong>text                  文本串</strong></li></ul><blockquote><p>时间日期</p></blockquote><ul><li>date            YYYY-MM-DD       日期格式</li><li>time             HH:MM:SS           时间格式</li><li><strong>datetime      YYYY-MM-DD  HH:MM:SS </strong>   最常用时间格式</li><li>timestamp     时间戳   1970.1.1到现在的毫秒数</li><li>year                 年</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li><strong>注意，不要使用NULL进行计算</strong></li></ul><h3 id="2-3-数据库的字段属性"><a href="#2-3-数据库的字段属性" class="headerlink" title="2.3 数据库的字段属性"></a>2.3 数据库的字段属性</h3><p><strong>Unsigned</strong></p><ul><li>无符号的整数</li><li>声明了该列不能为负数</li></ul><p><strong>zerofill</strong></p><ul><li>0填充的</li><li>不足的位数，使用0来填充</li></ul><p><strong>自增</strong></p><ul><li><p>通常理解为自增，自动在上一条记录基础上+1（默认）</p></li><li><p>通常用来设置唯一主键—— index,必须是整数类型</p></li><li><p>可以自定义设计主键的递增的起始和步长</p></li></ul><p><strong>非空 NULL NOT NULL</strong></p><ul><li>假设设置为not null ，如果不给它赋值，就会报错!</li><li>NUII，如果不填写值，默认就是null !</li></ul><p><strong>默认</strong></p><ul><li>设置默认的值！</li><li>sex,默认为男，如果不设置则为默认值。</li></ul><p><strong>拓展：</strong></p><pre><code class="hljs sql">*/每一个表，都必须存在以下五个字段!未来做项目用的，表示一个记录存在意义!id 主键&#x27;version` 乐观锁is_delete 伪删除gmt_create 创建时间gmt_update 修改时间*/</code></pre><h3 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4 创建数据库表"></a>2.4 创建数据库表</h3><pre><code class="hljs mysql">--目标︰创建一个schoo1数据库--创建学生表(列,字段)使用mysql创建--注意点:使用英文，表的名称和字段尽量使用&#96;&#96;括起来-- AUTO_INCREMENT 自增--字符串使用单引号括起来!--所有的语句后面加,--最后一个不用加-- PRIMARY KEY主键，一般一个表只有一个唯一的主键!            CREATE TABLE IF NOT EXISTS student(&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;登陆密码&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;地址&#39;,&#96;email&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY(&#96;id&#96;))ENGINE INNODB CHARSET utf8;</code></pre><p><strong>格式</strong></p><pre><code class="hljs mysql">CREATE TABLE [IF NOT EXISTS]&#96;表名&#96;(&#96;字段名&#96; 列类型 [属性] [索引] [注释],&#96;字段名&#96; 列类型 [属性] [索引] [注释],......&#96;字段名&#96; 列类型 [属性] [索引] [注释],)[表类型][字符集设置][注释]</code></pre><p><strong>常用命令</strong></p><pre><code class="hljs mysql">SHOW CREATE DATABASE school --查看创建数据库的语句SHOW CREATETABLE student --查看student数据表的定义语句DESC student --显示表的结构</code></pre><h3 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h3><pre><code class="hljs mysql">INNODB #默认使用MyISAM #早些年使用</code></pre><div class="table-container"><table><thead><tr><th></th><th>MyISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table></div><p>常规使用操作：</p><ul><li>MyISAM 节约空间，速度较快</li><li>INNODB 安全性高，事务的处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在data目录下,一个目录对应一个数据库</p><p>本质还是文件的存储!</p><p>MySQL引擎在物理文件上的区别</p><ul><li><p>INNODB 在数据库表中只有*.frm文件，以及上级目录下的ibdata1文件·MYISAM对应文件。</p></li><li><p>MySQL引擎在物理文件上的区别</p><ul><li><p>*.frm表结构的定义文件。</p></li><li><p>*.MYD数据文件 (data)。</p></li><li>*.MYI索引文件(index)</li></ul></li></ul><blockquote><p>设置数据库表的字符集编码</p></blockquote><pre><code class="hljs mysql">CHARSET&#x3D;utf8</code></pre><ul><li><p>不设置的话，会是mysql默认的字符集编码~(不支持中文! )</p></li><li><p>MySQL的默认编码是Latih1，不支持中文</p></li><li><p>在my.ini 中配置默认的编码</p></li></ul><pre><code class="hljs mysql">character-set-server&#x3D;utf8</code></pre><h3 id="2-6-修改和删除表"><a href="#2-6-修改和删除表" class="headerlink" title="2.6 修改和删除表"></a>2.6 修改和删除表</h3><blockquote><p>修改</p></blockquote><pre><code class="hljs mysql">-―修改表名 ALTERTABLE 旧表名 RENAME As 新表名ALTER TABLE teacher RENAME AS teacherl--增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性ALTERTABLE teacher1 ADD age INT (11)-―修改表的字段(重命名，修改约束!)--ALTER TALE 表名 MODIFY 字段名 列属性[]ALTERTABLE teacher1 MODIFY age VARCHAR (11)--修改约束----ALTER TALE 表名 CHANGE 旧字段名字 新字段名 列属性[]ALTERTABLE teacher1 CHANGE age age1 INT(1) --字段重名名# change用来字段重命名，不能修改字段类型和约束;# modify不用来字段重命名，只能修改字段类型和约束;--删除表的字段：ALTER TALE 表名 DROP 字段名ALTER TALE teacher01 DROP 字段名</code></pre><blockquote><p>删除</p></blockquote><pre><code class="hljs mysql">--删除表(如果表存在就删除)DROP TALE IF EXISTS teacher01</code></pre><p><strong>所有创建删除操作尽量加上判断，以免报错</strong></p><p><strong>注意点</strong>：</p><ul><li>`` 字段名使用这个包裹。</li><li>— 注释</li><li>sql关键字大小写不敏感，建议用小写（狂神）！</li><li>所有符号全部用英文。</li></ul><h2 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3.MySQL数据管理"></a>3.MySQL数据管理</h2><h3 id="3-1-外键"><a href="#3-1-外键" class="headerlink" title="3.1 外键"></a>3.1 外键</h3><blockquote><p>方式一 在创建表时增加约束（麻烦，比较复杂）</p></blockquote><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS grade(&#96;gradeid&#96; INT(30) NOT NULL AUTO_INCREMENT COMMENT &#39;年级号&#39;,&#96;gradename&#96; VARCHAR(30) NOT NULL COMMENT &#39;年级名称&#39;,PRIMARY KEY(&#96;gradeid&#96;))ENGINE INNODB CHARSET utf8;--学生表的 gradeid 字段要去引用年级表的 gradeid--定义外键 key--给这个外键添加约束(执行引用) references 引用CREATE TABLE IF NOT EXISTS student(&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;gradeid&#96; INT(30) NOT NULL COMMENT &#39;学生的年级&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;登陆密码&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;地址&#39;,&#96;email&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY(&#96;id&#96;),KEY &#96;FK_gradeid&#96; (&#96;gradeid&#96;),CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96;(&#96;gradeid&#96;))ENGINE INNODB CHARSET utf8;</code></pre><p>删除有外键关系表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）。</p><blockquote><p>方式二 创建表成功后 添加外键约束</p></blockquote><pre><code class="hljs mysql">--ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 那个表(那个字段);ALTER TABLE student ADD CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY(&#96;gradeid&#96;) REFERENCES &#96;grade&#96;(&#96;gradeid&#96;);# 物理外键 数据库级别的外键，不建议使用，避免数据库过多造成困扰。</code></pre><p><strong>最佳实践</strong></p><ul><li><p>数据库就是单纯的表，只用来存数据，只有行（数据)和列(字段)</p></li><li><p>我们想使用多张表的数据，想使用外键(程序去实现)</p></li></ul><h3 id="3-2-DML语言全部记住"><a href="#3-2-DML语言全部记住" class="headerlink" title="3.2 DML语言全部记住"></a>3.2 DML语言全部记住</h3><p><strong>数据库意义</strong>：数据存储，数据管理</p><p>DML语言： 数据操作语言</p><ul><li>insert</li><li>update</li><li>delete</li></ul><h3 id="3-3-添加"><a href="#3-3-添加" class="headerlink" title="3.3 添加"></a>3.3 添加</h3><blockquote><p>insert</p></blockquote><pre><code class="hljs mysql">-- 插入语句-- insert into 表名([字段名1，字段名2，字段名3])values(值1),(值2),(值3),(……)INSERT INTO &#96;grade&#96;(&#96;gradename&#96;)VALUES(&#39;大四&#39;)-- 由于主键自增我们可以省略（如果不写表的字段，他会一一插入）-- 即：INSERT INTO &#96;grade&#96; VALUES(&#39;01&#39;,&#39;大一&#39;)INSERT INTO &#96;grade&#96;(&#96;gradeid&#96;,&#96;gradename&#96;) VALUES(&#39;01&#39;,&#39;大一&#39;)-- 一般写插入语句，我们一定要数据和字段一一对应！-- 插入多个字段INSERT INTO &#96;grade&#96;(&#96;gradename&#96;) VALUES(&#39;大一&#39;),(&#39;大二&#39;)</code></pre><pre><code class="hljs mysql"># 删除原来的表DROP TABLE student;DROP TABLE grade;# 创建新表CREATE TABLE IF NOT EXISTS grade(&#96;gradeid&#96; INT(30) NOT NULL AUTO_INCREMENT COMMENT &#39;年级号&#39;,&#96;gradename&#96; VARCHAR(30) NOT NULL COMMENT &#39;年级名称&#39;,PRIMARY KEY(&#96;gradeid&#96;))ENGINE INNODB CHARSET utf8;CREATE TABLE IF NOT EXISTS student(&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;gradeid&#96; INT(30) NOT NULL DEFAULT &#39;16&#39; COMMENT &#39;学生的年级&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;登陆密码&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;地址&#39;,&#96;email&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY(&#96;id&#96;))ENGINE INNODB CHARSET utf8;# 插入一个数据INSERT INTO &#96;student&#96;(&#96;name&#96;) VALUES(&#39;张三&#39;)# 插入多条数据（一一对应）INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;,&#96;gradeid&#96;) VALUES(&#39;李四&#39;,&#39;aaaaa&#39;,&#39;男&#39;,&#39;033&#39;)</code></pre><p><strong>语法</strong>：<code>insert into 表名([字段名1，字段名2，字段名3])values(值1),(值2),(值3),(……)</code></p><p><strong>注意事项：</strong></p><ul><li>字段字段之间使用英文,隔开</li><li>字段是可以省路的，但是后面的值必须要一一对应<pre><code class="hljs mysql">INSERT INTO &#96;student&#96; VALUES(&#39;033&#39;,&#39;003&#39;,&#39;baixf&#39;,&#39;白小飞&#39;,&#39;男&#39;,&#39;20000301&#39;,&#39;泰安&#39;,&#39;707401057@qq.com&#39;)</code></pre><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122153509.png" alt=""></li><li>可以同时插入多条数据，VALUES后面的值，需要使用<code>VALUES(),()……</code>隔开</li></ul><h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><blockquote><p>update 修改谁 （条件） set 原来的值 = 新值</p></blockquote><pre><code class="hljs mysql">--修改学员名字,带了简介UPDATE &#96;student&#96; SET NAME&#x3D;&#39;杨洪利&#39; WHERE &#96;id&#96; &#x3D; &#39;1&#39;;--不指定条件的情况下，会改动所有表!UPDATE &#96;student&#96; SET NAME&#x3D;&#39;荣耀v40&#39;;--修改多个属性 , 隔开UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&#39;白小飞&#39;,&#96;email&#96;&#x3D;&#39;707401057@qq.com&#39; WHERE &#96;id&#96;&#x3D;1--通过多个条件进行判断，无上限UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&#39;Red K40&#39; WHERE &#96;name&#96;&#x3D;&#39;荣耀v40&#39; AND &#96;sex&#96;&#x3D;&#39;女&#39;--语法:UPDATE 表名 srt colnum_name &#x3D; value[,colnum_name &#x3D; value,……] where 条件</code></pre><p><strong>条件：where 子句 运算符</strong>  </p><p>id等于某个值，大于某个值，或者在区间内修改。</p><div class="table-container"><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td>&lt;&gt;或！=</td><td>不等于</td><td>5&lt;&gt;6</td><td>true</td></tr><tr><td>&gt;</td><td></td><td></td><td></td></tr><tr><td>&lt;</td><td></td><td></td><td></td></tr><tr><td>&lt;=</td><td></td><td></td><td></td></tr><tr><td>&gt;=</td><td></td><td></td><td></td></tr><tr><td>BETWEEN  AND</td><td>在某个<strong>闭合</strong>区间</td><td>between 2 and 5</td><td></td></tr><tr><td>AND</td><td>我和你&amp;&amp;</td><td>5&gt;1 AND 1&gt;2</td><td>false</td></tr><tr><td>OR</td><td>我或你\</td><td>\</td><td></td><td>5&gt;1 OR 1&gt;2</td><td>true</td></tr></tbody></table></div><p><strong>语法：</strong><code>UPDATE_表名 set co1num_name = value,[co1num_name = value,.. . .] where [条件]</code></p><p><strong>注意;</strong></p><ul><li><p>colnum_name是数据库的列，尽量带上``</p></li><li><p>条件，筛选的条件，如果没有指定，则会修改所有的列</p></li><li><p>value，是一个具体的值，也可以是一个变量</p></li><li><p>多个设置的属性之间，使用英文逗号隔开</p></li></ul><pre><code class="hljs mysql">UPDATE ‘student’ SET &#96;birthday&#39;&#x3D; CURRENT_TIME WHERE &#96;name&#96; &#x3D; &#39;长江7号&#39; AND sex&#x3D;&#39;女&#39;</code></pre><h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h3><blockquote><p>delete 命令</p></blockquote><pre><code class="hljs mysql">--删除数据（不建议这样使用）DELETE FROM student;--删除指定数据DELETE FROM &#96;student&#96; WHERE &#96;id&#96;&#x3D;&#39;1&#39;;</code></pre><blockquote><p>TRUNCATE 命令</p></blockquote><pre><code class="hljs mysql">--清空student表TRUNCATE &#96;student&#96;</code></pre><blockquote><p>delete 和 TRUNCATE 的区别</p></blockquote><ul><li><p>相同点：都能删除数据，都不会删除数据表结构</p></li><li><p>不同点 ：</p><pre><code>   *  TRUNCATE 重新设置 自增列 计数器会清零   *  TRUNCATE 不会影响事务</code></pre></li></ul><pre><code class="hljs mysql">--测试delete和TRUNCATE区别CREATETABLE &#96;test&#96;(&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT,&#96;coll&#96; VARCHAR(20) NOT NULL,PRIMARY KEY (&#39;id&#39;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8-- 添加数据INSERT INTO &#96;test&#96;(&#96;coll&#96;) VALUES(&#39;01&#39;),(&#39;02&#39;),(&#39;03&#39;);-- 自增会归零DELETE FROM &#96;test&#96;-- 不会影响自增TRUNCATE &#96;test&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122163050.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122163220.png" alt=""></p><p><strong>了解即可：</strong>delete删除的问题，重启数据库，现象</p><ul><li>INNODB 自增列从1开始（存在内存中，断电即失）</li><li>MyISAM  继续从上一个字增量开始（存在文件中，不丢失）</li></ul><h2 id="4-DQL查询数据"><a href="#4-DQL查询数据" class="headerlink" title="4. DQL查询数据"></a>4. DQL查询数据</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1 DQL"></a>4.1 DQL</h3><p>（data query language:数据查询语言）</p><ul><li>所有的查询操作都用它 select</li><li>简单的查询，复杂的查询他都能做</li><li>数据库中最核心的语言，最重要的语言</li><li>使用频率最高的语句</li></ul><blockquote><p><strong>SELECT语法</strong></p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122223514.png" alt=""></p><p><strong>执行下面sql语句建立插入数据</strong></p><pre><code class="hljs mysql">-- 创建一个school数据库CREATE DATABASE IF NOT EXISTS &#96;school&#96;;-- 使用schooll数据库USE &#96;school&#96;;-- 创建学生表DROP TABLE IF EXISTS &#96;student&#96;;CREATE TABLE &#96;student&#96;(&#96;studentno&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,&#96;loginpwd&#96; VARCHAR(20) DEFAULT NULL,&#96;studentname&#96; VARCHAR(20) DEFAULT NULL COMMENT &#39;学生姓名&#39;,&#96;sex&#96; TINYINT(1) DEFAULT NULL COMMENT &#39;性别，0或1&#39;,&#96;gradeid&#96; INT(11) DEFAULT NULL COMMENT &#39;年级编号&#39;,&#96;phone&#96; VARCHAR(50) NOT NULL COMMENT &#39;联系电话，允许为空&#39;,&#96;address&#96; VARCHAR(255) NOT NULL COMMENT &#39;地址，允许为空&#39;,&#96;borndate&#96; DATETIME DEFAULT NULL COMMENT &#39;出生时间&#39;,&#96;email&#96; VARCHAR (50) NOT NULL COMMENT &#39;邮箱账号允许为空&#39;,&#96;identitycard&#96; VARCHAR(18) DEFAULT NULL COMMENT &#39;身份证号&#39;,PRIMARY KEY (&#96;studentno&#96;),UNIQUE KEY &#96;identitycard&#96;(&#96;identitycard&#96;),KEY &#96;email&#96; (&#96;email&#96;))ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;utf8;-- 创建年级表DROP TABLE IF EXISTS &#96;grade&#96;;CREATE TABLE &#96;grade&#96;(&#96;gradeid&#96; INT(11) NOT NULL AUTO_INCREMENT COMMENT &#39;年级编号&#39;,  &#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,    PRIMARY KEY (&#96;gradeid&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT &#x3D; 6 DEFAULT CHARSET &#x3D; utf8;-- 创建科目表DROP TABLE IF EXISTS &#96;subject&#96;;CREATE TABLE &#96;subject&#96;(&#96;subjectno&#96;INT(11) NOT NULL AUTO_INCREMENT COMMENT &#39;课程编号&#39;,    &#96;subjectname&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;课程名称&#39;,    &#96;classhour&#96; INT(4) DEFAULT NULL COMMENT &#39;学时&#39;,    &#96;gradeid&#96; INT(4) DEFAULT NULL COMMENT &#39;年级编号&#39;,    PRIMARY KEY (&#96;subjectno&#96;))ENGINE &#x3D; INNODB AUTO_INCREMENT &#x3D; 19 DEFAULT CHARSET &#x3D; utf8;-- 创建成绩表DROP TABLE IF EXISTS &#96;result&#96;;CREATE TABLE &#96;result&#96;(&#96;studentno&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,    &#96;subjectno&#96; INT(4) NOT NULL COMMENT &#39;课程编号&#39;,    &#96;examdate&#96; DATETIME NOT NULL COMMENT &#39;考试日期&#39;,    &#96;studentresult&#96; INT (4) NOT NULL COMMENT &#39;考试成绩&#39;,    KEY &#96;subjectno&#96; (&#96;subjectno&#96;))ENGINE &#x3D; INNODB DEFAULT CHARSET &#x3D; utf8;-- 插入学生数据 其余自行添加 这里只添加了2行INSERT INTO &#96;student&#96; (&#96;studentno&#96;,&#96;loginpwd&#96;,&#96;studentname&#96;,&#96;sex&#96;,&#96;gradeid&#96;,&#96;phone&#96;,&#96;address&#96;,&#96;borndate&#96;,&#96;email&#96;,&#96;identitycard&#96;)VALUES(1000,&#39;123456&#39;,&#39;张伟&#39;,0,2,&#39;13800001234&#39;,&#39;北京朝阳&#39;,&#39;1980-1-1&#39;,&#39;text123@qq.com&#39;,&#39;123456198001011234&#39;),(1001,&#39;123456&#39;,&#39;赵强&#39;,1,3,&#39;13800002222&#39;,&#39;广东深圳&#39;,&#39;1990-1-1&#39;,&#39;text111@qq.com&#39;,&#39;123456199001011233&#39;);-- 插入成绩数据  这里仅插入了一组，其余自行添加INSERT INTO &#96;result&#96;(&#96;studentno&#96;,&#96;subjectno&#96;,&#96;examdate&#96;,&#96;studentresult&#96;)VALUES(1000,1,&#39;2013-11-11 16:00:00&#39;,85),(1000,2,&#39;2013-11-12 16:00:00&#39;,70),(1000,3,&#39;2013-11-11 09:00:00&#39;,68),(1000,4,&#39;2013-11-13 16:00:00&#39;,98),(1000,5,&#39;2013-11-14 16:00:00&#39;,58);-- 插入年级数据INSERT INTO &#96;grade&#96; (&#96;gradeid&#96;,&#96;gradename&#96;) VALUES(1,&#39;大一&#39;),(2,&#39;大二&#39;),(3,&#39;大三&#39;),(4,&#39;大四&#39;),(5,&#39;预科班&#39;);-- 插入科目数据INSERT INTO &#96;subject&#96;(&#96;subjectno&#96;,&#96;subjectname&#96;,&#96;classhour&#96;,&#96;gradeid&#96;)VALUES(1,&#39;高等数学-1&#39;,110,1),(2,&#39;高等数学-2&#39;,110,2),(3,&#39;高等数学-3&#39;,100,3),(4,&#39;高等数学-4&#39;,130,4),(5,&#39;C语言-1&#39;,110,1),(6,&#39;C语言-2&#39;,110,2),(7,&#39;C语言-3&#39;,100,3),(8,&#39;C语言-4&#39;,130,4),(9,&#39;Java程序设计-1&#39;,110,1),(10,&#39;Java程序设计-2&#39;,110,2),(11,&#39;Java程序设计-3&#39;,100,3),(12,&#39;Java程序设计-4&#39;,130,4),(13,&#39;数据库结构-1&#39;,110,1),(14,&#39;数据库结构-2&#39;,110,2),(15,&#39;数据库结构-3&#39;,100,3),(16,&#39;数据库结构-4&#39;,130,4),(17,&#39;C#基础&#39;,130,1);</code></pre><h3 id="4-2-指定查询字段"><a href="#4-2-指定查询字段" class="headerlink" title="4.2 指定查询字段"></a>4.2 指定查询字段</h3><pre><code class="hljs mysql">-- 查询全部的学生 select * from 表SELECT * FROM &#96;student&#96;-- 查询指定字段SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;-- 别名，给结果起名字SELECT &#96;studentno&#96; AS 学号,&#96;studentname&#96; AS 学生姓名 FROM &#96;student&#96;-- 还可以给查寻的表起别名SELECT &#96;studentno&#96; AS 学号,&#96;studentname&#96; AS 学生姓名 FROM &#96;student&#96; AS s</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122165608.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122165620.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122165652.png" alt=""></p><pre><code class="hljs mysql">-- 函数 Concat(a,b) 拼接字符串SELECT CONCAT(&#39;姓名：&#39;,&#96;studentname&#96;) AS &#39;新名字&#39; FROM &#96;student&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122170618.png" alt=""></p><p><strong>语法：</strong><code>SELECT 字段  ... FROM 表</code></p><blockquote><p>有的时候，列名字不是那么的见名知意。我们起别名As</p><p>字段名 as 别名      表名 as 别名</p><p>去重   distinct</p></blockquote><pre><code class="hljs mysql">-- 查询一下那些同学参加了考试，成绩（result表）SELECT * FROM &#96;result&#96;-- 查询哪些学号的同学参加了考试(含重复的)SELECT &#96;studentno&#96; FROM &#96;result&#96;-- 发现重复数据，去重SELECT DISTINCT &#96;studentno&#96; FROM &#96;result&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122171607.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122171618.png" alt=""></p><blockquote><p>数据库的列</p></blockquote><pre><code class="hljs mysql">-- 查看系统版本(函数)SELECT VERSION()-- 用来计算（计算表达式）SELECT 200-3*58 AS &#39;查询结果&#39;-- 查询自增的步长（变量）SELECT @@auto_increment_increment-- 将查询到的成绩整体加一分SELECT &#96;studentno&#96;,&#96;studentresult&#96;+1 AS &#39;加分后&#39; FROM &#96;result&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122171825.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122172611.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122172559.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122172547.png" alt=""></p><p><strong>数据库中的表达式:文本值，列，Null，函数，计算表达式，系统变量….</strong></p><p><strong>格式：</strong></p><p><code>select 表达式 from 表</code></p><h3 id="4-3-where条件句子"><a href="#4-3-where条件句子" class="headerlink" title="4.3 where条件句子"></a>4.3 where条件句子</h3><p>作用：检索数据中<code>符合条件</code>的值</p><blockquote><p>逻辑运算符:尽量使用英文</p></blockquote><p>搜索的条件由一个或多个表达式组成！结果为布尔值</p><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>and &amp;&amp;</td><td>a and  a&amp;&amp;b</td><td>逻辑与，全为真则真</td></tr><tr><td>or \</td><td>\</td><td></td><td>a or b a\</td><td>\</td><td>b</td><td>逻辑或，有一真则为真</td></tr><tr><td>Not !</td><td>not a ! a</td><td>逻辑非，取反</td></tr></tbody></table></div><pre><code class="hljs mysql"># 查询成绩在85-100范围的学生-------------------------SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM result# 查询成绩大于80小于100的所有学号SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM resultWHERE &#96;studentresult&#96;&gt;&#x3D;80 AND &#96;studentresult&#96;&lt;&#x3D;100# &amp;&amp;SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM resultWHERE &#96;studentresult&#96;&gt;&#x3D;80 &amp;&amp; &#96;studentresult&#96;&lt;&#x3D;100# 模糊查询（区间范围内）SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM resultWHERE &#96;studentresult&#96; BETWEEN 85 AND 100</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122174558.png" alt=""></p><pre><code class="hljs mysql"># 查询除studentno&#x3D;1000以外的学生成绩SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM resultWHERE &#96;studentno&#96; !&#x3D; 1000SELECT &#96;studentno&#96;,&#96;studentresult&#96; FROM resultWHERE NOT &#96;studentno&#96; &#x3D; 1000</code></pre><blockquote><p>模糊查询：比较运算符</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a is null</td><td>如果操作符为NULL则结果为真</td></tr><tr><td>IS NOT NULL</td><td>a is not null</td><td>如果操作符为not NULL则结果为真</td></tr><tr><td>BETWEEN AND</td><td>a between b and c</td><td>若a在和c之间，结果为真</td></tr><tr><td><strong>LIKE</strong></td><td>a like b</td><td>SQL匹配，如果a匹配，则结果为真</td></tr><tr><td><strong>IN</strong></td><td>a in (a1,a2……）</td><td>假设a在a1,或者a2……其中的某一个值中，结果为真</td></tr></tbody></table></div><pre><code class="hljs mysql"># 模糊查询# 查询名字中姓赵的同学# like结合%(0-任一个字符) _(一个字符)SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;WHERE &#96;studentname&#96; LIKE &#39;赵%&#39;# 查询赵后面只有一个字的同学SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;WHERE &#96;studentname&#96; LIKE &#39;赵_&#39;# 查询赵后面只有两个字的同学SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;WHERE &#96;studentname&#96; LIKE &#39;赵__&#39;# 查询名字中有强字的同学SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;WHERE &#96;studentname&#96; LIKE &#39;%强%&#39;</code></pre><pre><code class="hljs mysql"># in(具体的一个或者多个值)# 查询1000，1001号学员信息SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96;WHERE &#96;studentno&#96; IN (1000,1001);# 查询在北京的学生SELECT &#96;studentno&#96;,&#96;studentname&#96;,&#96;address&#96; FROM &#96;student&#96;WHERE &#96;address&#96; IN (&#39;北京朝阳&#39;);</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122193032.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122193041.png" alt=""></p><pre><code class="hljs mysql"># NULL# 查询地址为空的学生SELECT &#96;studentno&#96;,&#96;studentname&#96;,&#96;address&#96; FROM &#96;student&#96;WHERE &#96;address&#96;&#x3D;&#39;&#39; OR &#96;address&#96; IS NULL# NOT NULL# 查询有出生日期的同学SELECT &#96;studentno&#96;,&#96;studentname&#96;,&#96;address&#96; FROM &#96;student&#96;WHERE &#96;borndate&#96; IS NOT NULL# 查询无出生日期的同学SELECT &#96;studentno&#96;,&#96;studentname&#96;,&#96;address&#96; FROM &#96;student&#96;WHERE &#96;borndate&#96; IS NULL</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122193635.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122193644.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122193655.png" alt=""></p><h3 id="4-4-联表查询"><a href="#4-4-联表查询" class="headerlink" title="4.4 联表查询"></a>4.4 联表查询</h3><blockquote><p>join 对比</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122202508.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1445197-20191221112233284-1442014363.png" alt=""></p><pre><code class="hljs mysql">-- ------- 联表查询 join -------# 查询参加了考试的同学（学号,姓名,科目编号,科目成绩）&#x2F;*思路1．分析需求，分析查询的字段来自哪些表，（连接查询&gt;2．确定使用哪种连接查询? 7种确定交叉点(这两个表中哪个数据是相同的)判断的条件:学生表的中 studentNo &#x3D; 成绩表 studentNo*&#x2F;# INNER JOINSELECT s.studentno,&#96;studentname&#96;,&#96;subjectno&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS sINNER JOIN &#96;result&#96; AS rWHERE s.studentno&#x3D;r.studentno# INNER JOINSELECT s.studentno,&#96;studentname&#96;,&#96;subjectno&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS sINNER JOIN &#96;result&#96; AS rON s.studentno&#x3D;r.studentno-- 拓展 join on 与 where-- jion（连接的表） on（判断的条件） 连接查询-- where 等值查询# RIGHT JOINSELECT s.studentno,&#96;studentname&#96;,&#96;subjectno&#96;,&#96;studentresult&#96;FROM &#96;student&#96; sRIGHT JOIN &#96;result&#96; rON s.studentno &#x3D; r.studentno# LEFT JOINSELECT s.studentno,&#96;studentname&#96;,&#96;subjectno&#96;,&#96;studentresult&#96;FROM &#96;student&#96; sLEFT JOIN &#96;result&#96; rON s.studentno &#x3D; r.studentno</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122205550.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122210627.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122205533.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122205514.png" alt=""></p><div class="table-container"><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>inner join</td><td>如果表中有一个匹配项就返回行</td></tr><tr><td>left join</td><td>从左表中返回所有的值，即使右表中没有匹配</td></tr><tr><td>right join</td><td>从右表中返回所有的值，即使左表中没有匹配</td></tr></tbody></table></div><pre><code class="hljs mysql"># 查询缺考的同学SELECT s.studentno,&#96;studentname&#96;,&#96;subjectno&#96;,&#96;studentresult&#96;FROM &#96;student&#96; sLEFT JOIN &#96;result&#96; rON s.studentno &#x3D; r.studentnoWHERE studentresult IS NULL</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122210349.png" alt=""></p><pre><code class="hljs mysql">-- 思考题（查询参加了考试的信息：学号，学生名，科目名，分数）&#x2F;*思路1．分析需求，分析查询的字段来自哪些表，（连接查询&gt;2．确定使用哪种连接查询? 7种确定交叉点(这两个表中哪个数据是相同的)判断的条件:学生表的中 studentNo &#x3D; 成绩表 studentNo*&#x2F;SELECT s.studentno,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS sRIGHT JOIN &#96;result&#96; AS r ON s.studentno &#x3D; r.studentnoINNER JOIN &#96;subject&#96; AS subON r.subjectno &#x3D; sub.subjectno</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122211952.png" alt=""></p><pre><code class="hljs mysql"># 解题思路-- 我要查询哪些数据select ..。-- 从那几个表中查 FROM 表 xxx Join 连接的表 on 交叉条件-- 假设存在一种多张表查询，慢慢来，先查询两张表然后再慢慢增加-- FROM a LEFT JOIN b # 以a表的为基准依据-- FROM a RIGHT JOIN b # 以b表的为基准依据-- FROM INNER JOIN   # 以两者共有的为基准依据</code></pre><pre><code class="hljs mysql">练习1：-- 查询学员所属的年级(学号，学生的姓名，年级名称)SELECT &#96;studentno&#96;,&#96;studentname&#96;,&#96;gradename&#96;FROM &#96;student&#96; AS sLEFT JOIN &#96;grade&#96; AS gON s.&#96;gradeid&#96;&#x3D;g.&#96;gradeid&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122215507.png" alt=""></p><pre><code class="hljs mysql">练习2：-- 查询科目所属的年级（科目名称，年级名称)SELECT &#96;subjectname&#96;,&#96;gradename&#96;FROM &#96;subject&#96; AS sINNER JOIN &#96;grade&#96; AS gON s.&#96;gradeid&#96;&#x3D;g.&#96;gradeid&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122220054.png" alt=""></p><pre><code class="hljs mysql">练习3：-- 查询了参加考试的同学信息(学号，学生姓名，科目名，分数)SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122220956.png" alt=""></p><pre><code class="hljs mysql">练习4：-- 查询了参加高等数学-2考试的同学信息(学号，学生姓名，科目名，分数)SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;WHERE sub.&#96;subjectname&#96;&#x3D;&#39;高等数学-2&#39;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122221249.png" alt=""></p><blockquote><p>自连接：自己的表和自己的表相连接（了解）</p></blockquote><p>执行以下sql,导入数据</p><pre><code class="hljs mysql">CREATE TABLE category (categoryid INT(10) UNSIGNED NOT NULL auto_increment COMMENT &#39;主题ID&#39;,pid INT(10) NOT NULL COMMENT &#39;父ID&#39;,categoryName VARCHAR(50) NOT NULL COMMENT &#39;主题名字&#39;,PRIMARY KEY(categoryid)) ENGINE&#x3D;INNODB auto_increment&#x3D;9 DEFAULT CHARSET &#x3D; utf8;INSERT INTO category(categoryid,pid,categoryName)VALUES(&#39;2&#39;,&#39;1&#39;,&#39;信息技术&#39;),(&#39;3&#39;,&#39;1&#39;,&#39;软件开发&#39;),(&#39;4&#39;,&#39;3&#39;,&#39;数据库&#39;),(&#39;5&#39;,&#39;1&#39;,&#39;美术设计&#39;),(&#39;6&#39;,&#39;3&#39;,&#39;web开发&#39;),(&#39;7&#39;,&#39;5&#39;,&#39;PS技术&#39;),(&#39;8&#39;,&#39;2&#39;,&#39;办公信息&#39;);</code></pre><p><strong>核心：将一张表拆为两张一样的表即可。</strong></p><p>父类</p><div class="table-container"><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table></div><p>子类</p><div class="table-container"><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>we开发</td></tr><tr><td>5</td><td>7</td><td>ps技术</td></tr></tbody></table></div><p><strong>操作：查询父类对应的子类关系</strong></p><div class="table-container"><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table></div><pre><code class="hljs mysql">-- 查询父子关系表，把两张表看成两张一模一样的表SELECT a.&#96;categoryName&#96;,b.&#96;categoryName&#96;FROM &#96;category&#96; AS a,&#96;category&#96; AS bWHERE a.&#96;categoryid&#96;&#x3D;b.&#96;pid&#96;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210122214924.png" alt=""></p><h3 id="4-5分页和排序"><a href="#4-5分页和排序" class="headerlink" title="4.5分页和排序"></a>4.5分页和排序</h3><blockquote><p>排序</p></blockquote><pre><code class="hljs mysql">-- 分页和排序-- ORDER BY 通过哪个字段排序 -- 排序：升序ASC，降序DESCSELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;ORDER BY &#96;studentresult&#96; DESC-- 升序SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;ORDER BY &#96;studentresult&#96; ASC</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123111003.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123111017.png" alt=""></p><pre><code class="hljs mysql">-- 100w条数据-- 为什么分页-- 缓解数据库压力， 瀑布流-- 分页-- 语法：limit 起始页，页面的大小-- LIMIT 0,3 1~3页SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;ORDER BY &#96;studentresult&#96; ASCLIMIT 0,3-- limit 1,3 从第一页开始往下三页SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuRIGHT JOIN &#96;result&#96; AS rON stu.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;r.&#96;subjectno&#96;ORDER BY &#96;studentresult&#96; ASCLIMIT 1,3</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123111831.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123111841.png" alt=""></p><pre><code class="hljs mysql">-- 网页应用：当前页，总的页数，页面大小-- 第一页 limit0,5-- 第二页 limit 5,5-- 第三页 limit 10,5-- 第N页 limit (N-1)*pagesize,pagesize-- pagesize:页面大小-- (N-1)*pagesize:起始值-- N:当前页-- 数据总数&#x2F;页面大小&#x3D;总页数</code></pre><p><strong>语法：<code>limit(查询起始值，需要查询的条数)</code></strong></p><pre><code class="hljs mysql">练习1：-- 查询 JAVA第一学年课程成绩排名前十的学生，并且分数要大于80 的学生信息（学号，姓名，课程名称，分数)SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;subjectname&#96;,&#96;studentresult&#96;FROM &#96;student&#96; AS stuINNER JOIN &#96;result&#96; AS resON stu.&#96;studentno&#96;&#x3D;res.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D;res.&#96;subjectno&#96;WHERE &#96;subjectname&#96;&#x3D;&#39;JAVA&#39; AND &#96;studentresult&#96;&gt;80ORDER BY &#96;studentresult&#96; DESCLIMIT 0,10</code></pre><h3 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6 子查询"></a>4.6 子查询</h3><blockquote><p>where(值是固定的，这个值是计算出来的)</p></blockquote><p><strong>本质：在where语句中嵌套一个子循环语句</strong></p><pre><code class="hljs mysql">-- 子查询-- 分数不小于80分的学生的学号和姓名，高等数学-1SELECT DISTINCT s.&#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96; AS sINNER JOIN &#96;result&#96; AS rON s.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;WHERE r.&#96;studentresult&#96;&gt;&#x3D;80 AND &#96;subjectno&#96;&#x3D; (SELECT &#96;subjectno&#96; FROM &#96;subject&#96;WHERE &#96;subjectname&#96;&#x3D;&#39;高等数学-1&#39;)-- inner join-- 分数不小于80分的学生的学号和姓名，高等数学-1SELECT DISTINCT s.&#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96; AS sINNER JOIN &#96;result&#96; AS rON s.&#96;studentno&#96;&#x3D;r.&#96;studentno&#96;INNER JOIN &#96;subject&#96; AS subON sub.&#96;subjectno&#96;&#x3D; r.&#96;subjectno&#96;WHERE r.&#96;studentresult&#96;&gt;&#x3D;80 AND &#96;subjectname&#96;&#x3D;&#39;高等数学-1&#39;-- 子查询再改造(由里及外)-- 分数不小于80分的学生的学号和姓名，高等数学-1SELECT &#96;studentno&#96;,&#96;studentname&#96; FROM &#96;student&#96; WHERE &#96;studentno&#96; IN (SELECT &#96;studentno&#96; FROM &#96;result&#96; WHERE &#96;studentresult&#96;&gt;&#x3D;80 AND &#96;subjectno&#96;&#x3D;(SELECT &#96;subjectno&#96; FROM &#96;subject&#96; WHERE &#96;subjectname&#96;&#x3D;&#39;高等数学-1&#39;))</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123191410.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123191421.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123191436.png" alt=""></p><pre><code class="hljs mysql">-- 练习:查询c语言-1前5名同学的成绩的信息(学号，姓名，分数)-- 使用子查询~SELECT stu.&#96;studentno&#96;,&#96;studentname&#96;,&#96;studentresult&#96; FROM &#96;student&#96; AS stuINNER JOIN &#96;result&#96; AS resON stu.&#96;studentno&#96;&#x3D;res.&#96;studentno&#96;WHERE &#96;subjectno&#96;&#x3D;(SELECT &#96;subjectno&#96; FROM &#96;subject&#96; WHERE &#96;subjectname&#96;&#x3D;&#39;c语言-1&#39;)ORDER BY &#96;studentresult&#96; DESCLIMIT 0,5</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210123191238.png" alt=""></p><h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5. MySQL函数"></a>5. MySQL函数</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-function-reference.html">MySQL官网函数介绍</a></p><h3 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1 常用函数"></a>5.1 常用函数</h3><pre><code class="hljs mysql">-- 数学运算SELECT ABS(-8)  -- 绝对值SELECT CEILING(9.5) -- 向上取整SELECT FLOOR(10.6) -- 向下取整SELECT RAND() -- 随机数SELECT SIGN(-0.66) -- 判断一个数的符号-- -1SELECT SIGN(0.66) -- 判断一个数的符号-- 1SELECT SIGN(0) -- 判断一个数的符号-- 0-- 字符串函数SELECT CHAR_LENGTH(&#39;白小飞&#39;) -- 字符串长度-- 3SELECT CONCAT(&#39;我爱&#39;,&#39;mysql&#39;,&#39;哈哈&#39;) -- 拼接字符串-- 我爱mysql哈哈SELECT INSERT(&#39;我爱编程&#39;,1,2,&#39;超级热爱&#39;) -- 查询替换-- 从第1个起替换2个长度字符-- 超级热爱编程SELECT LOWER(&#39;KuangShen&#39;) -- 转小写-- kuangshenSELECT UPPER(&#39;baixf&#39;) -- 转大写-- BAIXFSELECT INSTR(&#39;baixf&#39;,&#39;x&#39;) -- x 出现在aixf的第几个位置-- 4SELECT REPLACE(&#39;baixf-tk&#39;,&#39;tk&#39;,&#39;ml&#39;)-- baixf-mlSELECT SUBSTR(&#39;狂神说坚持就能成功&#39;,4,3) -- 返回指定的子字符串（源字符串，截取的位置，截取的长度）-- 第四个开始截取3个-- 坚持就SELECT SUBSTR(&#39;狂神说坚持就能成功&#39;,4) -- 从第四个开始截到尾-- 坚持就能成功SELECT REVERSE(&#39;狂神说坚持就能成功&#39;) -- 反转-- 功成能就持坚说神狂-- 查询姓 张的同学 ，名字 邹SELECT REPLACE(&#96;studentname&#96;,&#39;张&#39;,&#39;邹&#39;) FROM student WHERE studentname LIKE &#39;张%&#39;-- 时间和日期函数（记住）SELECT CURRENT_DATE() -- 获取当前日期SELECT CURDATE() -- 获取当前日期-- 2021-01-23SELECT NOW() -- 获取当前时间SELECT LOCALTIME() -- 当前时间SELECT SYSDATE() -- 系统时间-- 2021-01-23 20:23:55SELECT YEAR(NOW()) -- 获取年份-- 2021SELECT MONTH(NOW()) -- 获取月份-- 1SELECT DAY(NOW()) -- 获取日-- 23SELECT MINUTE(NOW()) -- 获取分-- 25SELECT SECOND(NOW()) -- 获取秒-- 57-- 系统SELECT SYSTEM_USER() -- 获取当前用户-- root@localhostSELECT USER() -- 获取用户-- root@localhostSELECT VERSION() -- 获取mysql版本信息-- 5.7.19</code></pre><h3 id="5-2-聚合函数（常用）"><a href="#5-2-聚合函数（常用）" class="headerlink" title="5.2 聚合函数（常用）"></a>5.2 聚合函数（常用）</h3><div class="table-container"><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>COUNT()</strong></td><td>计数</td></tr><tr><td>SUM()</td><td>计和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr><tr><td>……</td><td>……</td></tr></tbody></table></div><pre><code class="hljs mysql">-- 聚合函数-- 都能够统计表中的数据(想查询一个表中有多少条记录，就用这个count())-- count(‘字段’)：忽略NULL-- count(*):不会忽略NULL，本质计算行数-- count(1):不会忽略NULL，本质计算行数SELECT COUNT(&#96;studentname&#96;) FROM &#96;student&#96;; -- count(指定列)-- 3SELECT COUNT(*) FROM &#96;student&#96;; -- count(*)-- 3SELECT COUNT(1) FROM &#96;student&#96;; -- count(1)-- 3SELECT COUNT(1) FROM &#96;result&#96;; -- count(1)-- 5SELECT SUM(&#96;studentresult&#96;) AS 总和 FROM &#96;result&#96;SELECT AVG(&#96;studentresult&#96;) AS 平均分 FROM &#96;result&#96;SELECT MAX(&#96;studentresult&#96;) AS 最高分 FROM &#96;result&#96;SELECT MIN(&#96;studentresult&#96;) AS 最低分 FROM &#96;result&#96;</code></pre><h3 id="5-3-数据库级别的MD5加密（扩展）"><a href="#5-3-数据库级别的MD5加密（扩展）" class="headerlink" title="5.3 数据库级别的MD5加密（扩展）"></a>5.3 数据库级别的MD5加密（扩展）</h3><p>什么是MD5？</p><p>主要增强算法复杂度和不可逆性。</p><p>MD5不可逆，具体的值的md5是一样的。</p><p>MD5破解网站的原理，背后有一个字典，MD5加密后的值加密的值。</p><pre><code class="hljs mysql">-- 测试MD5加密CREATE TABLE &#96;testmd5&#96;(&#96;id&#96; INT(4) NOT NULL,&#96;name&#96; VARCHAR(20) NOT NULL,&#96;pwd&#96; VARCHAR(50) NOT NULL,PRIMARY KEY(&#96;id&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8-- 明文密码INSERT INTO testmd5 VALUES(1,&#39;zhangsan&#39;,&#39;123456&#39;),(2,&#39;lisi&#39;,&#39;123456&#39;)-- 加密UPDATE testmd5 SET pwd&#x3D;MD5(pwd) WHERE id &#x3D;1</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124115455.png" alt=""></p><pre><code class="hljs mysql">-- 全部加密UPDATE testmd5 SET pwd&#x3D;MD5(pwd)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124115512.png" alt=""></p><pre><code class="hljs mysql">-- 插入的时候加密INSERT INTO testmd5 VALUES(5,&#39;baixf&#39;,MD5(&#39;123456&#39;)),(4,&#39;xyz&#39;,MD5(&#39;123456&#39;))</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124115528.png" alt=""></p><pre><code class="hljs mysql">-- 如何校验：123456-- 将用户传递进来的密码，进行md5加密，然后对比加密后的值SELECT * FROM testmd5 WHERE &#96;name&#96;&#x3D;&#39;baixf&#39; &amp;&amp; &#96;pwd&#96;&#x3D;MD5(&#39;123456&#39;)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124115539.png" alt=""></p><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1 什么是事务"></a>6.1 什么是事务</h3><hr><p>1.SQL执行  A给B转账 A 1000   ———》200  B200</p><p>2.SQL执行  B收到A的钱  A 800 ———-》B  400</p><hr><p>将一组SQL放在一个批次中执行~</p><blockquote><p>事务原则：ACID原则 原子性 一致性 隔离性 持久性</p></blockquote><p><a href="https://blog.csdn.net/dengjili/article/details/82468576">参考链接</a></p><p><strong>原子性</strong></p><p>要么都成功，要么都失败</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180906211811672.png" alt=""></p><p>这个过程包含两个步骤</p><p>A： 800 - 200 = 600<br>B: 200 + 200 = 400</p><p>原子性表示，这两个步骤一起成功，或者一起失败，不能只发生其中一个动作</p><p><strong>一致性（Consistency）</strong></p><p>针对一个事务操作前与操作后的状态一致</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180906211811672.png" alt=""></p><p>操作前A：800，B：200<br>操作后A：600，B：400</p><p>一致性表示事务完成后，符合逻辑运算</p><p><strong>持久性（Durability）</strong>— 事务提交</p><p>表示事务结束后的数据不随着外界原因导致数据丢失，事务一旦提交不可逆。</p><p>操作前A：800，B：200<br>操作后A：600，B：400<br>如果在操作前（事务还没有提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：800，B：200<br>如果在操作后（事务已经提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：600，B：400</p><p> <strong>隔离性（Isolation）</strong></p><p>针对多个用户同时操作，数据库为每个用户开启的事务，不会被其他用户操作的数据所干扰。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180907101233416.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200111115243422.png" alt=""></p><blockquote><p>事务的隔离级别</p></blockquote><p><strong>脏读：</strong></p><p>指一个事务读取了另外一个事务未提交的数据。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200111114825772.png" alt=""></p><p><strong>不可重复读：</strong></p><p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p><p>页面统计查询值</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180907105351860.png" alt=""></p><p>点击生成报表的时候，B有人转账进来300（事务已经提交）</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180907105428179.png" alt=""></p><p><strong>虚读(幻读)</strong></p><p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。<br>（一般是行影响，多了一行）</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20180907105623839.png" alt=""></p><blockquote><p>执行事务</p></blockquote><pre><code class="hljs mysql">-- 事务-- mysql默认开启事务自动提交的SET autocommit&#x3D;0  -- 关闭SET autocommit&#x3D;1  -- 默认开启-- 手动处理事务SET sutocommit&#x3D;1 -- 关闭自动提交-- 事务开启START TRANSACTION -- 标记一个事务的开启，从这之后的sql都在同一个事务里INSERT ***INSERT ***-- 提交：持久化（成功！）COMMIT-- 回滚：回到原来的样子（失败！）ROLLBACK-- 事务结束SET autocommit&#x3D;0 -- 开启自动提交-- 了解SAVEPOINT 保存点名 -- 设置一个事物的保存点-- 回滚到保存点ROLLBACK TO SAVEPOINT 保存点名-- 撤销保存点RELEASE SAVEPOINT 保存点名</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124152456.png" alt=""></p><blockquote><p>模拟转账实例</p></blockquote><pre><code class="hljs mysql">-- 转账CREATE DATABASE &#96;shop&#96; CHARACTER SET utf8 COLLATE utf8_general_ciUSE shopCREATE TABLE &#96;acount&#96;(&#96;id&#96; INT(3) NOT NULL AUTO_INCREMENT,&#96;name&#96; VARCHAR(20) NOT NULL,&#96;money&#96; DECIMAL(9,2) NOT NULL,PRIMARY KEY(&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO &#96;acount&#96;(&#96;name&#96;,&#96;money&#96;)VALUES (&#39;A&#39;,500.00),(&#39;B&#39;,1000.00)-- 事务SET autocommit&#x3D;0; -- 关闭事务提交START TRANSACTION; -- 事务开始UPDATE &#96;acount&#96; SET &#96;money&#96;&#x3D;&#96;money&#96;-200 WHERE &#96;name&#96;&#x3D;&#39;A&#39;;UPDATE &#96;acount&#96; SET &#96;money&#96;&#x3D;&#96;money&#96;+200 WHERE &#96;name&#96;&#x3D;&#39;B&#39;;COMMIT; -- 提交，事务一旦被提交就无法回滚ROLLBACK; -- 回滚SET autocommit&#x3D;1; -- 开启事务自动提交，恢复默认值</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124203912.png" alt=""></p><h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7. 索引"></a>7. 索引</h2><blockquote><p>MySQL官方对索引的定义为：<strong>索引（Index)是帮助MySQL高效获取数据的数据结构。</strong>提取句子主干，就可以得到索引的本质:索引是数据结构。</p></blockquote><h3 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1 索引的分类"></a>7.1 索引的分类</h3><ul><li><p>主键索引 PRIMARY KEY</p>  <pre><code class="hljs mysql">唯一的标识，不可重复，只能有一个</code></pre></li><li><p>唯一索引 UNIQUE KEY</p>  <pre><code class="hljs mysql">避免重复的列出现，唯一索引可以重复，多个列都可以表示 唯一索引</code></pre></li><li><p>常规索引 KEY/INDEX</p>  <pre><code class="hljs mysql">默认的</code></pre></li><li><p>全文索引 FullText</p></li></ul><pre><code class="hljs mysql">在特定的数据库引擎下才有，快速定位数据</code></pre><pre><code class="hljs mysql">-- 索引-- 索引的使用-- 1、在创建表的时候给字段增加索引-- 2、创建完毕后，增加索引-- 显示所有的索引信息SHOW INDEX FROM student-- 增加一个全文索引(索引名）列名ALTER TABLE student ADD FULLTEXT INDEX &#96;studentname&#96;(&#96;studentname&#96;);</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124163553.png" alt=""></p><pre><code class="hljs mysql">-- explain查看sql执行状况EXPLAIN SELECT * FROM student --常规索引，非全文索引</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124163927.png" alt=""></p><pre><code class="hljs mysql">EXPLAIN SELECT * FROM student WHERE MATCH(&#96;studentname&#96;) AGAINST(&#39;赵&#39;);</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124164439.png" alt=""></p><h3 id="7-2-模拟测试"><a href="#7-2-模拟测试" class="headerlink" title="7.2 模拟测试"></a>7.2 模拟测试</h3><p><strong>执行下面语句</strong></p><pre><code class="hljs mysql">CREATE TABLE &#96;app_user&#96; (&#96;id&#96; BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,&#96;name&#96; VARCHAR(50) DEFAULT&#39;&#39; COMMENT&#39;用户昵称&#39;,&#96;email&#96; VARCHAR(50) NOT NULL COMMENT&#39;用户邮箱&#39;,&#96;phone&#96; VARCHAR(20) DEFAULT&#39;&#39; COMMENT&#39;手机号&#39;,&#96;gender&#96; TINYINT(4) UNSIGNED DEFAULT &#39;0&#39;COMMENT &#39;性别（0：男;1:女）&#39;,&#96;password&#96; VARCHAR(100) NOT NULL COMMENT &#39;密码&#39;,&#96;age&#96; TINYINT(4) DEFAULT&#39;0&#39;  COMMENT &#39;年龄&#39;,&#96;create_time&#96; DATETIME DEFAULT CURRENT_TIMESTAMP,&#96;update_time&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8 COMMENT &#x3D; &#39;app用户表&#39;-- 插入100万数据.DELIMITER $$-- 写函数之前必须要写，标志CREATE FUNCTION mock_data ()RETURNS INTBEGINDECLARE num INT DEFAULT 1000000;DECLARE i INT DEFAULT 0;WHILE i&lt;num DOINSERT INTO &#96;app_user&#96;(&#96;name&#96;,&#96;eamil&#96;,&#96;phone&#96;,&#96;gender&#96;)VALUES(CONCAT(&#39;用户&#39;,i),&#39;19224305@qq.com&#39;,&#39;123456789&#39;,FLOOR(RAND()*2));SET i&#x3D;i+1;END WHILE;RETURN i;END;SELECT mock_data() -- 执行此函数 生成一百万条数据-- 拓展：删除函数DROP FUNCTION &#96;school&#96;.&#96;mock_data&#96;;</code></pre><pre><code class="hljs mysql">SELECT * FROM &#96;app_user&#96; WHERE &#96;name&#96;&#x3D;&#39;用户911&#39;-- 查询很慢  总耗时:3.531 secEXPLAIN SELECT * FROM &#96;app_user&#96; WHERE &#96;name&#96;&#x3D;&#39;用户911&#39; -- 总耗时: 0.120 sec-- id_表名_字段名-- CREATE INDEX索引名on表(字段)CREATE INDEX id_app_user_name ON app_user(&#96;name&#96;);-- 总耗时      : 17.448 secSELECT * FROM &#96;app_user&#96; WHERE &#96;name&#96;&#x3D;&#39;用户911&#39;-- 就很快~，总耗时      : 0.101 sec</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124203204.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124203136.png" alt=""></p><p><strong>重点：索引在小数据量的时候，用户不大，但是在大数据的时候，区别十分明显~</strong></p><h3 id="7-3-索引原则"><a href="#7-3-索引原则" class="headerlink" title="7.3 索引原则"></a>7.3 索引原则</h3><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用查询的字段中</li></ul><blockquote><p>拓展：索引的数据结构</p></blockquote><p>Hash 类型的索引</p><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">拓展必看文章 30分钟 细读</a></p><p>Btree:InnoDB 的默认数据结构~</p><h2 id="8-权限管理和备份"><a href="#8-权限管理和备份" class="headerlink" title="8. 权限管理和备份"></a>8. 权限管理和备份</h2><h3 id="8-1用户管理"><a href="#8-1用户管理" class="headerlink" title="8.1用户管理"></a>8.1用户管理</h3><blockquote><p>SQL yog可视化管理</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124204658.png" alt=""></p><blockquote><p>SQL 命令操作</p></blockquote><p>用户表：mysql.user</p><p>本质：对这张表进行增删改查</p><pre><code class="hljs mysql">-- 创建用户CREATE USER baixf IDENTIFIED BY &#39;123456&#39;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124210354.png" alt=""></p><pre><code class="hljs mysql">-- 修改密码(修改当前用户密码)SET PASSWORD&#x3D;PASSWORD(&#39;111111&#39;)-- 修改指定用户密码SET PASSWORD FOR baixf&#x3D;PASSWORD(&#39;111111&#39;)</code></pre><pre><code class="hljs mysql">-- 给用户重命名  RENAME USER 原名字 TO 新名字RENAME USER baixf TO baixftk</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124210622.png" alt=""></p><pre><code class="hljs mysql">-- 用户授权, 库.表 (*.*:全部库的全部表)-- 除了给其他用户授权其他都能干GRANT ALL PRIVILEGES ON *.*  TO baixftk</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124210738.png" alt=""></p><pre><code class="hljs mysql">-- 查看权限SHOW GRANTS FOR baixftk -- 查看指定用户的权限-- GRANT ALL PRIVILEGES ON *.* TO &#39;baixftk&#39;@&#39;%&#39;SHOW GRANTS FOR root@localhost-- GRANT PROXY ON &#39;&#39;@&#39;&#39; TO &#39;root&#39;@&#39;localhost&#39; WITH GRANT OPTION</code></pre><pre><code class="hljs mysql">-- 撤销权限 REVOKE 哪些权限 ，在那个撤销，给谁撤销REVOKE ALL PRIVILEGES ON *.* FROM baixftk</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124211214.png" alt=""></p><pre><code class="hljs mysql">-- 删除用户DROP USER baixftk</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124211439.png" alt=""></p><h3 id="8-2-数据库备份"><a href="#8-2-数据库备份" class="headerlink" title="8.2 数据库备份"></a>8.2 数据库备份</h3><p>为什么备份？</p><ul><li>保证重要的数据不丢失</li><li>数据转移A-》B</li></ul><p>MySQL数据库备份的方式</p><ul><li>直接拷贝物理文件</li><li>使用SQLyog等可视化管理工具上手动导出</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210124214715.png" alt=""></p><ul><li>使用命令行 <code>mysqldump</code>在命令行使用</li></ul><pre><code class="hljs shell">mysqldump localhost -uroot -p123456 school student &gt;d:/桌面/a.sql</code></pre><pre><code class="hljs mysql"># mysq1dump -h 主机 -u用户名 -p 密码 数据库 表名&gt;物理磁盘位置&#x2F;文件名mysq1dump -h 1ocalhost -uroot -p123456 school student &gt;D:&#x2F;a.sq1# mysq1dump -h 主机 -u用户名 -p 密码 数据库 表1 表2 表3 &gt;物理磁盘位置&#x2F;文件名mysqldump -h 1oca1host -uroot -p123456 schoo1 student &gt;D:&#x2F;a.sq1</code></pre><pre><code class="hljs mysql">-- 导入-- 登陆的情况下，切换到指定的数据库-- source 备份文件source d:&#x2F;a.sqlmysql -u用户名 -p密码 库名&lt;备份文件</code></pre><h2 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9. 规范数据库设计"></a>9. 规范数据库设计</h2><h3 id="9-1-为什么需要设计"><a href="#9-1-为什么需要设计" class="headerlink" title="9.1 为什么需要设计"></a>9.1 为什么需要设计</h3><p><strong>当数据库比较复杂的时候，我们就需要设计</strong></p><p>糟糕的数据库设计：</p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦、异常[屏蔽使用外键]</li><li>程序性能差</li></ul><p>良好的数据库设计：</p><ul><li>节省内存空间</li><li>保证数据库完整性</li><li>方便我们开发系统</li></ul><p><strong>软件开发中，关于数据库设计</strong></p><ul><li>分析需求：分析业务和需要处理的数据的要求</li><li>概要设计：设计关系图E-R图</li></ul><p><strong>设计数据库的步骤：（个人博客）</strong></p><ul><li><p>收集信息，分析需求 (尽可能全，避免修改)</p><pre><code>    * 用户表（用户登录注销，用户的个人信息，写博客，创建分类）    * 分类表（文章分类，谁创建的）    * 文章表（文章的信息）    * 友链表（友链信息）    * 自定义表（系统信息，某个关键字，或者一些字段）key:value</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E7%94%A8%E6%88%B7%E8%A1%A8.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%85%B3%E6%B3%A8%E8%A1%A8.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%88%86%E7%B1%BB%E8%A1%A8.png" alt=""></p></li></ul><p>  <img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E6%96%87%E7%AB%A0%E8%A1%A8.png" alt=""></p><p>  <img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E8%AF%84%E8%AE%BA%E8%A1%A8.png" alt=""></p><p>  <img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/%E5%8F%8B%E9%93%BE%E8%A1%A8.png" alt=""></p><ul><li>标识实体（把需求落地到每个字段）</li><li>标识实体之间的关系<pre><code>   * 写博客：user -&gt;blog   * 创建分类：user -&gt;category   * 关注：user-&gt;user   * 友链：links   * 评论：user-user-blog</code></pre></li></ul><blockquote><p>类似系统：BBS、CM……</p></blockquote><h3 id="9-2-三大范式"><a href="#9-2-三大范式" class="headerlink" title="9.2 三大范式"></a>9.2 三大范式</h3><p><strong>为什么需要数据规范化？</strong></p><ul><li><p>信息会重复</p></li><li><p>更新会导致异常</p></li><li><p>插入异常</p><pre><code>    * 无法正常显示信息</code></pre></li><li><p>删除异常</p><ul><li>丢失有效数据</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><a href="https://www.cnblogs.com/wsg25/p/9615100.html"><a href="https://www.cnblogs.com/wsg25/p/9615100.html">关系型数据库设计：三大范式的通俗理解</a></a></p><p><strong>第一范式（1NF）</strong></p><p>原子性：保证每一列不可分</p><p>举例说明：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909201651535-1215699096.png" alt=""></p><p>在上面的表中，“家庭信息”和“学校信息”列均不满足原子性的要求，故不满足第一范式，调整如下：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909202243826-1032549277.png" alt=""></p><p>可见，调整后的每一列都是不可再分的，因此满足第一范式（1NF）；</p><p><strong>第二范式（2NF）</strong></p><p>前提：满足第一范式</p><p>每张表只描述一件事情</p><p>举例说明：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909204750951-639647799.png" alt=""></p><p>在上图所示的情况中，同一个订单中可能包含不同的产品，因此主键必须是“订单号”和“产品号”联合组成，</p><p>但可以发现，产品数量、产品折扣、产品价格与“订单号”和“产品号”都相关，但是订单金额和订单时间仅与“订单号”相关，与“产品号”无关，</p><p>这样就不满足第二范式的要求，调整如下，需分成两个表：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909210444227-1008056975.png" alt=""></p><p><strong>第三范式（3NF）</strong></p><p>前提：满足第一范式、第二范式</p><p>第三范式需要确保数据表中的每一列数据都和主键有关，而不能间接相关。</p><p>举例说明：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909211311408-1364899740.png" alt=""></p><p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，</p><p>而不是主键“学号”，所以需做如下调整：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1218459-20180909211539242-1391100354.png" alt=""></p><p>这样以来，就满足了第三范式的要求。</p><p>ps:如果把上表中的班主任姓名改成班主任教工号可能更确切，更符合实际情况，不过只要能理解就行。</p><blockquote><p>拓展：规范数据库的设计</p></blockquote><p><strong>规范性和性能的问题</strong></p><p>阿里规定：关联查询的表不得超过三张</p><ul><li>考虑商业化的需求和目标，（成本，用户体验-&gt;被迫不需要关联查询！）数据库的性能更加重要。</li><li>在规范性能的问题的时候，需要适当的考虑一下规范性！</li><li>故意给某些表增加一些荣誉的字段。（从夺标查询变为单表查询）</li><li>故意增加一些计算列（从大数据量减为小数据量的查询；添加索引）</li></ul><h2 id="10-JDBC"><a href="#10-JDBC" class="headerlink" title="10. JDBC"></a>10. JDBC</h2><h3 id="10-1-数据库驱动"><a href="#10-1-数据库驱动" class="headerlink" title="10.1 数据库驱动"></a>10.1 数据库驱动</h3><p>驱动：声卡、显卡、数据库</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210125121635.png" alt=""></p><p>我们的程序会通过数据库驱动和数据库打交道！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1">狂神说B站视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.mysql.com/">MySQL官网</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL教程</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>狂神</tag>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker深入学习</title>
    <link href="/2021/01/20/Docker/Docker%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/20/Docker/Docker%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker容器学习笔记Ⅱ（狂神说Java）"><a href="#Docker容器学习笔记Ⅱ（狂神说Java）" class="headerlink" title="Docker容器学习笔记Ⅱ（狂神说Java）"></a>Docker容器学习笔记Ⅱ（狂神说Java）</h2><p>狂神说B站视频：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">https://www.bilibili.com/video/BV1og4y1q7M4?p=1</a></p><p>学习docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p><p>使用docker：<a href="https://labs.play-with-docker.com/">https://labs.play-with-docker.com/</a></p><h2 id="一、大纲"><a href="#一、大纲" class="headerlink" title="一、大纲"></a>一、大纲</h2><p><strong>入门：</strong></p><ul><li><p>Docker概述</p></li><li><p>Docker安装</p></li><li><p>Docker命令</p><ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>……</li></ul></li><li><p>Docker镜像</p></li></ul><p><strong>精髓：</strong></p><ul><li><p>容器数据卷</p></li><li><p>DockerFile</p></li><li><p>Docker网络原理</p></li></ul><p><strong>企业级：</strong></p><ul><li><p>IDEA整合Docker</p></li><li><p>集群</p><ul><li>Docker Compose</li><li>Docker Swarm</li></ul></li><li><p>CI/CD Jenkins流水线</p></li></ul><h2 id="七、容器数据卷"><a href="#七、容器数据卷" class="headerlink" title="七、容器数据卷"></a>七、容器数据卷</h2><h3 id="1-什么是容器卷？"><a href="#1-什么是容器卷？" class="headerlink" title="1.什么是容器卷？"></a>1.什么是容器卷？</h3><p>docker的理念回顾</p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p><p>MySQL，容器删除了，删库跑路！需求：MySQL数据可以存储在本地！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118184134.png" alt=""></p><p>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</p><h3 id="2-使用数据卷"><a href="#2-使用数据卷" class="headerlink" title="2.使用数据卷"></a>2.使用数据卷</h3><blockquote><p>方式一 ：直接使用命令挂载 -v</p></blockquote><pre><code class="hljs shell">pi@raspbian:~$ docker volume --helpUsage:  docker volume COMMANDManage volumesCommands:  create      Create a volume  inspect     Display detailed information on one or more volumes  ls          List volumes  prune       Remove all unused local volumes  rm          Remove one or more volumesRun &#x27;docker volume COMMAND --help&#x27; for more information on a command.</code></pre><pre><code class="hljs shell">-v, --volume list Bind mount a volumedocker run -it -v 主机目录:容器内目录 -p 主机端口:容器内端口➜ ~ docker run -it -v /home/ceshi:/home centos /bin/bash<span class="hljs-meta">#</span><span class="bash">通过 docker inspect 容器id 查看</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118185009.png" alt=""></p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的</p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118190945.png" alt=""></p><h3 id="3-实战：安装MySQL"><a href="#3-实战：安装MySQL" class="headerlink" title="3.实战：安装MySQL"></a>3.实战：安装MySQL</h3><p>思考：MySQL的数据持久化的问题</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取mysql镜像</span></code></pre><pre><code class="hljs shell">[root@iZ8vb2p24tqw8n1tpvr1b9Z ~]# docker pull mysqlUsing default tag: latestlatest: Pulling from library/mysqla076a628af6f: Pull complete f6c208f3f991: Pull complete 88a9455a9165: Pull complete 406c9b8427c6: Pull complete 7c88599c0b25: Pull complete 25b5c6debdaf: Pull complete 43a5816f1617: Pull complete 1a8c919e89bf: Pull complete 9f3cf4bd1a07: Pull complete 80539cea118d: Pull complete 201b3cad54ce: Pull complete 944ba37e1c06: Pull complete Digest: sha256:feada149cb8ff54eade1336da7c1d080c4a1c7ed82b5e320efb5beebed85ae8cStatus: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 运行容器,需要做数据挂载 <span class="hljs-comment">#安装启动mysql，需要配置密码的，这是要注意点！</span></span><span class="hljs-meta">#</span><span class="bash"> 参考官网hub  https://hub.docker.com/_/mysql</span>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -dmysql:tag<span class="hljs-meta">#</span><span class="bash">启动我们得</span>-d 后台运行-p 端口映射-v 卷挂载-e 环境配置-- name 容器名字</code></pre><pre><code class="hljs shell">[root@iZ8vb2p24tqw8n1tpvr1b9Z ~]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf -v /home/mysql/data:/etc/mysql/data -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:latest82f5b7eb56016504512959ec881fc4760456bb62a614ca8aaa1e4cb7d98ad4ec</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动成功之后，我们在本地使用sqlyog来测试一下</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119150146.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> native-连接到服务器的3306--和容器内的3306映射</span><span class="hljs-meta">#</span><span class="bash"> 在本地测试创建一个数据库，查看一下我们映射的路径是否ok！</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119152005.png" alt=""></p><p>假设我们将容器删除 ：<br><pre><code class="hljs shell">[root@iZ8vb2p24tqw8n1tpvr1b9Z mysql]# docker rm -f 82f5b7eb560182f5b7eb5601[root@iZ8vb2p24tqw8n1tpvr1b9Z mysql]# lsconf  data[root@iZ8vb2p24tqw8n1tpvr1b9Z mysql]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               latest              c8562eaf9d81        8 hours ago         546MBwiznote/wizserver   latest              34c5a021e1c1        6 months ago        1.75GBelasticsearch       latest              5acf0e8da90b        2 years ago         486MB[root@iZ8vb2p24tqw8n1tpvr1b9Z mysql]# docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES[root@iZ8vb2p24tqw8n1tpvr1b9Z mysql]# docker ps -aCONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                     PORTS               NAMESf84fe6e51312        wiznote/wizserver          &quot;bash /wiz/app/entry…&quot;   2 hours ago         Created                                        optimistic_proskuriakova3de71bbb3db7        34c5a021e1c1               &quot;bash /wiz/app/entry…&quot;   2 hours ago         Created                                        nice_kalam9517379c5255        34c5a021e1c1               &quot;-p 80:6666&quot;             2 hours ago         Created                                        distracted_satoshi0ef8cabd3bb7        wiznote/wizserver:latest   &quot;bash /wiz/app/entry…&quot;   2 months ago        Exited (137) 3 hours ago                       WizNode</code></pre><br>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能。</p><h3 id="4-具名和匿名挂载"><a href="#4-具名和匿名挂载" class="headerlink" title="4.具名和匿名挂载"></a>4.具名和匿名挂载</h3><p>所有的docker容器内的卷，没有指定目录的情况下都是在 /var/lib/docker/volumes/xxxx/_data<br>下如果指定了目录，docker volume ls 是查看不到的。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 匿名挂载</span>-v 容器内路径!</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker run -d -P  -v /etc/nginx nginxb60ee929f32fdbc2d0f98aad67dc85ca2e3ebe29450d02114657b87d88622e80</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有的volume的情况</span>pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMESb60ee929f32f   nginx     &quot;/docker-entrypoint.…&quot;   24 seconds ago   Up 21 seconds   0.0.0.0:49153-&gt;80/tcp   lucid_blackwellpi@raspbian:~$ docker volume lsDRIVER    VOLUME NAMElocal     754e0542ce40a802a3bf79df05c44ccff9b137347153b8ce7988f49f0455b732</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这里发现，这种就是匿名挂载，我们在 -v只写了容器内的路径，没有写容器外的路径！</span><span class="hljs-meta">#</span><span class="bash"> 具名挂载</span>pi@raspbian:~$ docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginxf89ce3a25e626a69d70c2b903d5cd68b53cbe5594485e0c5b843ccc2508c28d9pi@raspbian:~$ docker volume lsDRIVER    VOLUME NAMElocal     754e0542ce40a802a3bf79df05c44ccff9b137347153b8ce7988f49f0455b732local     juming-nginx<span class="hljs-meta">#</span><span class="bash"> 通过 -v 卷名：容器内路径</span><span class="hljs-meta">#</span><span class="bash"> 查看一下这个卷</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119161603.png" alt=""></p><p>所有的docker容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxxx/_data</code>下。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119162957.png" alt=""></p><p>如果指定了目录，docker volume ls 是查看不到的。</p><pre><code class="hljs shell">pi@raspbian:~$ docker run -d -P -v /home/nginx:/etc/nginx nginx38c0e3bab52fc8f411e8078c17c43a39aa3a98081ab021a96e9d32855b41dc01pi@raspbian:~$ docker volume lsDRIVER    VOLUME NAMElocal     754e0542ce40a802a3bf79df05c44ccff9b137347153b8ce7988f49f0455b732local     juming-nginx</code></pre><p><strong>如何区别匿名挂载、具名挂载、指定路径挂载</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 三种挂载： 匿名挂载、具名挂载、指定路径挂载</span>-v 容器内路径 #匿名挂载-v 卷名：容器内路径 #具名挂载-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</code></pre><p> <strong>拓展</strong></p><p><strong>ro</strong>  <strong>rw</strong> 改变读写权限</p><pre><code class="hljs shell">ro #readonly 只读rw #readwrite 可读可写docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginxdocker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx<span class="hljs-meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></code></pre><h3 id="5-初识Dockerfile"><a href="#5-初识Dockerfile" class="headerlink" title="5.初识Dockerfile"></a>5.初识Dockerfile</h3><blockquote><p>挂载的方式二</p></blockquote><p> Dockerfile 就是用来构建docker镜像的构建文件！命令脚本！先体验一下！</p><p>通过这个脚本可以生成镜像，镜像。启动自己写的镜像。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随便 建议Dockerfile</span><span class="hljs-meta">#</span><span class="bash"> 文件中的内容 指令(大写) 参数</span>FROM centosVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]CMD echo &quot;----end----&quot;CMD /bin/bash<span class="hljs-meta">#</span><span class="bash">这里的每个命令，就是镜像的一层！</span></code></pre><pre><code class="hljs shell">pi@raspbian:~/docker-test$ docker build -f dockerfile01 -t baixf/centos .</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119164447.png" alt=""></p><p>进入生成的镜像，查看一下卷挂载</p><pre><code class="hljs shell">docker run -it baixf/centos /bin/bash</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119164759.png" alt=""></p><p>这个卷在主机一定有一个同步目录（匿名挂载）。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119165325.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119165355.png" alt=""></p><p>在<code>baixf/centos</code>测试一下<code>/volume1/￥￥</code>新建文件看同步出去了！</p><p>这种方式使用的十分多，因为我们通常会构建自己的镜像！</p><p><strong>假设构建镜像时候没有挂载卷，要手动镜像挂载 -v 卷名：容器内路径！</strong></p><h3 id="6-数据卷容器"><a href="#6-数据卷容器" class="headerlink" title="6.数据卷容器"></a>6.数据卷容器</h3><p>多个MySQL同步数据！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119171148.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> centos01为父容器</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动3个容器</span></code></pre><p>1.启动docker01</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119173535.png" alt=""></p><p>2.启动docker02并在数据卷<code>volume01</code>内新建文件</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119173805.png" alt=""></p><p>3.检查docker01中的<code>volume01</code>中是否有这个文件。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119173927.png" alt=""></p><p>4.新建docker03继承<code>docker01</code>，并查看<code>volume01</code>内是否有刚刚新建的文件。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119174736.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119174809.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119174832.png" alt=""></p><p>5.删除docker01容器，查看docker02 d0cker03数据是否还存在。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119175310.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119175349.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119175420.png" alt=""></p><p>6.此时在docker02中新建一个文件查看docker03能否同步。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119175632.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119175724.png" alt=""></p><p><strong>以上例子所示，docker02 03共同继承docker01，如果将docker01删除，docker02 03 仍保留数据，docker02 03仍可同步数据。</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119180428.png" alt=""></p><p><strong>多个mysql实现数据共享</strong> </p><pre><code class="hljs shell">➜ ~ docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01mysql:5.7➜ ~ docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --namemysql02 --volumes-from mysql01 mysql:5.7<span class="hljs-meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步！</span></code></pre><p><strong>结论：</strong></p><p>容器之间bing的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。(病毒)</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h2 id="八、DockerFile"><a href="#八、DockerFile" class="headerlink" title="八、DockerFile"></a>八、DockerFile</h2><h3 id="1-DockerFile介绍"><a href="#1-DockerFile介绍" class="headerlink" title="1.DockerFile介绍"></a>1.DockerFile介绍</h3><p>dockerfile 是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119192401.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119192459.png" alt=""></p><p>但是很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h3 id="2-DockerFile构建过程"><a href="#2-DockerFile构建过程" class="headerlink" title="2.DockerFile构建过程"></a>2.DockerFile构建过程</h3><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1625523270,2105451565.jpg" alt=""></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简<br>单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>(之前是jar war包)</p><p><strong>步骤：开发，部署，运维。缺一不可！</strong></p><ul><li><p>DockerFile：构建文件，定义了一切的步骤，源代码</p></li><li><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p></li><li><p>Docker容器：容器就是镜像运行起来提供服务。</p></li></ul><h3 id="3-DockerFile常用指令"><a href="#3-DockerFile常用指令" class="headerlink" title="3.DockerFile常用指令"></a>3.DockerFile常用指令</h3><p>以前的话是使用别人的，，现在我们要自己做一个。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/3865597739,462198828.jpg" alt=""></p><pre><code class="hljs shell">FROM # 基础镜像，一切从这里开始构建MAINTAINER # 镜像是谁写的， 姓名+邮箱RUN # 镜像构建的时候需要运行的命令ADD # 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录WORKDIR # 镜像的工作目录VOLUME # 挂载的目录EXPOSE # 保留端口配置CMD # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD # 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令。COPY # 类似 ADD ，将我们文件拷贝到镜像中ENV # 构建的时候设置环境变量！</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/911490-20171208222222062-849020400.png" alt=""></p><h3 id="4-实战测试"><a href="#4-实战测试" class="headerlink" title="4.实战测试"></a>4.实战测试</h3><p>Docker Hub 中的99%镜像都是从FROM scratch 这个基础镜像开始的，然后配置相应的软件和配置来构建的。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119203852.png" alt=""></p><blockquote><p>创建一个自己的centos</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1.编写Dockerfile文件</span>pi@raspbian:~/docker-test$ cat dockerfile02FROM centosMAINTAINER baixf&lt;707401057@qq.com&gt;ENV MYPATH /usr/localWORKDIR MYPATHRUN yum install vimRUN yun install net-toolsEXPOSE 80CMD echo MYPATHCMD echo &quot;----end----&quot;CMD /bin/bash</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span><span class="hljs-meta">#</span><span class="bash"> 命令 docker build -f 文件路径 -t 镜像名:[tag] .</span>pi@raspbian:~/docker-test$ docker build -f dockerfile02 -t mycentos:1.0 .Successfully built 031644e6e6f2Successfully tagged mycentos:1.0</code></pre><p><strong>测试运行</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119205649.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker <span class="hljs-built_in">history</span> 镜像id  查看镜像操作历史记录</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119205839.png" alt=""></p><p><strong>查看官方其他镜像制作 dockerfile </strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mysql</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119210335.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> tomcat</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119210521.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/entrypoint.jpg" alt=""></p><p><strong>CMD 和 ENTRYPOINT 的区别</strong></p><pre><code class="hljs shell">CMD # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> CMD测试</span><span class="hljs-meta">#</span><span class="bash"> dockerfile03</span>FROM centosCMD [&quot;ls&quot;,&quot;-a&quot;]<span class="hljs-meta">#</span><span class="bash"> build</span>docker build -f dockerfile03 -t cmdtest .<span class="hljs-meta">#</span><span class="bash">run【正常👍】</span>pi@raspbian:~/docker-test$ docker run cmdtest....dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar<span class="hljs-meta">#</span><span class="bash"> 追加命令【ERROR❌】</span>pi@raspbian:~/docker-test$ docker run cmdtest -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.ERRO[0001] error waiting for container: context canceled</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ENTRYPOINT 测试</span><span class="hljs-meta">#</span><span class="bash"> dockerfile04</span>FROM centosENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]<span class="hljs-meta">#</span><span class="bash">build</span>docker build -f dockerfile04 -t entrypointtest .<span class="hljs-meta">#</span><span class="bash"> 追加执行【正常】👍</span>pi@raspbian:~/docker-test$ docker run entrypointtest -l total 56drwxr-xr-x   1 root root 4096 Jan 19 13:20 .drwxr-xr-x   1 root root 4096 Jan 19 13:20 ..-rwxr-xr-x   1 root root    0 Jan 19 13:20 .dockerenvlrwxrwxrwx   1 root root    7 Nov  3 15:23 bin -&gt; usr/bindrwxr-xr-x   5 root root  320 Jan 19 13:20 devdrwxr-xr-x   1 root root 4096 Jan 19 13:20 etcdrwxr-xr-x   2 root root 4096 Nov  3 15:23 homelrwxrwxrwx   1 root root    7 Nov  3 15:23 lib -&gt; usr/liblrwxrwxrwx   1 root root    9 Nov  3 15:23 lib64 -&gt; usr/lib64drwx------   2 root root 4096 Dec  4 17:44 lost+founddrwxr-xr-x   2 root root 4096 Nov  3 15:23 mediadrwxr-xr-x   2 root root 4096 Nov  3 15:23 mntdrwxr-xr-x   2 root root 4096 Nov  3 15:23 optdr-xr-xr-x 230 root root    0 Jan 19 13:20 procdr-xr-x---   2 root root 4096 Dec  4 17:45 rootdrwxr-xr-x  11 root root 4096 Dec  4 17:45 runlrwxrwxrwx   1 root root    8 Nov  3 15:23 sbin -&gt; usr/sbindrwxr-xr-x   2 root root 4096 Nov  3 15:23 srvdr-xr-xr-x  12 root root    0 Jan 19 13:20 sysdrwxrwxrwt   7 root root 4096 Dec  4 17:45 tmpdrwxr-xr-x  12 root root 4096 Dec  4 17:44 usrdrwxr-xr-x  20 root root 4096 Dec  4 17:45 var</code></pre><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测<br>试效果！</p><h3 id="5-实战：Tomcat镜像"><a href="#5-实战：Tomcat镜像" class="headerlink" title="5.实战：Tomcat镜像"></a>5.实战：Tomcat镜像</h3><p>1.准备镜像文件  tomcat  和  jdk 的压缩包。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119213840.png" alt=""></p><p>2.编写 Dokerfile 文件。</p><pre><code class="hljs shell">FROM centos #MAINTAINER baixf&lt;707401057@qq.com&gt;COPY README /usr/local/README #复制文件ADD jdk-8u231-linux-x64.tar.gz /usr/local/ #复制解压,add会自动解压ADD apache-tomcat-9.0.22.tar.gz /usr/local/ #复制解压，add会自动解压RUN yum -y install vimENV MYPATH /usr/local #设置环境变量WORKDIR $MYPATH #设置工作目录ENV JAVA_HOME /usr/local/jdk1.8.0_11ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HONE/binEXPOSE 8080 #设置暴露的端口CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -F /usr/local/apachetomcat-9.0.22/logs/catalina.out # 设置默认命令</code></pre><p>3、构建镜像</p><pre><code class="hljs shell">docker build -t diytomcat:0.1 .</code></pre><p>4、run镜像</p><pre><code class="hljs shell">docker run -d -p 8080:8080 --name tomcat01 -v /home/kuangshen/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.35/logsmytomcat:0.1</code></pre><p>5、访问测试</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">宿主机：curl localhost:9090</span></code></pre><p>6、发布项目(由于做了卷挂载，我们直接在本地编写项目就可以发布了！)</p><p>发现：项目部署成功，可以直接访问！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h3 id="6-发布自己的镜像"><a href="#6-发布自己的镜像" class="headerlink" title="6.发布自己的镜像"></a>6.发布自己的镜像</h3><ul><li><p>Dockerhub</p><p>1.注册账号<br>2.确定这个账号可以登录<br>3.登录</p></li></ul><pre><code class="hljs shell">pi@raspbian:~/docker-test$ docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username</code></pre><pre><code class="hljs shell">pi@raspbian:~/docker-test$ docker login -u baixfxyzPassword: WARNING! Your password will be stored unencrypted in /home/pi/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeededpi@raspbian:~/docker-test$ docker logoutRemoving login credentials for https://index.docker.io/v1/</code></pre><p>  4.登陆即可，提交 push 镜像</p><pre><code class="hljs shell">pi@raspbian:~/docker-test$ docker push mycentos:1.0The push refers to repository [docker.io/library/mycentos]b2f7e775e8e8: Preparing 16764cdd1bc4: Preparing denied: requested access to the resource is denied<span class="hljs-meta">#</span><span class="bash"> 会发现push不上去，因为如果没有前缀的话默认是push到 官方的library</span><span class="hljs-meta">#</span><span class="bash"> 解决方法</span><span class="hljs-meta">#</span><span class="bash"> 第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了</span><span class="hljs-meta">$</span><span class="bash"> docker build -t chengcoder/mytomcat:0.1 .</span><span class="hljs-meta">#</span><span class="bash"> 第二种 使用docker tag <span class="hljs-comment">#然后再次push</span></span><span class="hljs-meta">$</span><span class="bash"> docker tag 容器id chengcoder/mytomcat:1.0 </span><span class="hljs-meta">#</span><span class="bash">然后再次push</span>看官网 很详细https://cr.console.aliyun.com/repository/</code></pre><ul><li>阿里云镜像服务上</li></ul><blockquote><p>看官网 很详细<a href="https://cr.console.aliyun.com/repository/">https://cr.console.aliyun.com/repository/</a></p></blockquote><p>1.登录阿里云</p><p>2.找到容器镜像服务</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119222602.png" alt=""></p><p>3.创建命名空间</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210119222635.png" alt=""></p><p>4.创建容器镜像</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo docker login --username=白小飞23335 registry.cn-beijing.aliyuncs.com</span><span class="hljs-meta">$</span><span class="bash"> sudo docker tag [ImageId] registry.cn-beijing.aliyuncs.com/aliyun-0-docker/baixf-docker:[镜像版本号]</span><span class="hljs-meta">$</span><span class="bash"> sudo docker push registry.cn-beijing.aliyuncs.com/aliyun-0-docker/baixf-docker:[镜像版本号]</span>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</code></pre><h3 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/212601uiw811i4ng6ixdx2.jpg"  /></p><p><strong>拓展命令：</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 压缩🗜</span>pi@raspbian:~/docker-test$ docker save --helpUsage:  docker save [OPTIONS] IMAGE [IMAGE...]Save one or more images to a tar archive (streamed to STDOUT by default)Options:  -o, --output string   Write to a file, instead of STDOUT  <span class="hljs-meta">#</span><span class="bash"> 加载</span>pi@raspbian:~/docker-test$ docker load --helpUsage:  docker load [OPTIONS]Load an image from a tar archive or STDINOptions:  -i, --input string   Read from tar archive file, instead of STDIN  -q, --quiet          Suppress the load output</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/01190232_02Qb.png" alt=""></p><h2 id="九、Docker-网络"><a href="#九、Docker-网络" class="headerlink" title="九、Docker 网络"></a>九、Docker 网络</h2><h3 id="1-理解Docker-0"><a href="#1-理解Docker-0" class="headerlink" title="1.理解Docker 0"></a>1.理解Docker 0</h3><p><strong>清空环境！！</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 清空所有网络</span>pi@raspbian:~$ docker rm -f $(docker ps -aq)5dcf3101615dedc3cd5cbb9b3bb8ed02e68c53b9c300d387ae2cfd05203b9fcea1f7cbe095287e1750f5576d355f51c8782c0b38337def483955a1ee31ed87fa60d6ef259865413d38c0e3bab52ff89ce3a25e62b60ee929f32f96bda453ea8b54c30f206041d2f86a05fc7352a80307a7fc31df0aa6fb9e5a1b3e72a2e4c86f35254ea1e7c4a115ff369cbf742ee266a535e5ba619cf4311e01d778e6b768a79f510c96b8cf9bc209bcaba4de1f0eaf062ca9fbf31980e0ab6a792d5e8c75755d4de87f016f76bd27490955</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker删除所有镜像</span>pi@raspbian:~$ docker rmi -f $(docker images -aq)Untagged: entrypointtest:latestDeleted: sha256:3459497a6f33985afe63dc36a0f0b794defdb76c3974056c9a5f0d8ca242d112Untagged: cmdtest:latestDeleted: sha256:3c53210e3778da8985410fd8b337e36642a77bea744b78be417c0cc8375fc7a1Untagged: mycentos:1.0Deleted: sha256:031644e6e6f2aaaa19da04b0f0d16ca5bf6c2cbcb9809240f6dcaa0f69029672Deleted: sha256:eb0c768082054902771e1f2472339e2165461b465c925e2bded425e664d7e429Deleted: sha256:c39bd5d9475073b945d822f2cf6a6d4da5354ecda0c6c108d97809a415155188Deleted: sha256:5bc857eb704af9e2cfabb2168a5b269a7e773fd5b11f28b9a67bf02130bf45ebDeleted: sha256:4d7f5bac46f9282d268516aa34ac23ee2461a9fb604b859d9ccdc64f14b1d51fDeleted: sha256:007c7aaad1025cc82b2cf930f4b9dca5fe17f752d43543a785c41461dba3891cDeleted: sha256:fbd181bb730e6eff3ce209801fbb8eaff247a296229aad2c7be456517472872fDeleted: sha256:2cf8bf16568fab9497bfe313623e711924ef9d517927eccd0d6abbefb62ab1c0Untagged: baixf/centos:latestDeleted: sha256:ddd32d4effdd7d9dd473c4dad875d6e8734b697f00278e69e4fee8a8945e4e63Deleted: sha256:26d3ed80b9235716a6eadf283de74c16927a9e5d95e21cb5232dbe2edea7ccdfDeleted: sha256:82319feb9890c866a0264e8f4a2e76546f3b7b73ef66c7ca1cbfd9291bccc812Untagged: tomcat:66Deleted: sha256:60e208f14f34aeb7a338d3d238cde22f1cb342dbd83265b71909aea146118d56Deleted: sha256:78dacba1b96f3738579287e45619f6b266b3ef11239c1d1a9531c0dde9436f32Untagged: tomcat:1.0Deleted: sha256:83ac74acd5e011fa39241a5d1c4c43ad65cc9b6a68d5cbbac96db14917e6e000Deleted: sha256:1329ab2e7df2548e6df50cb7136a5200cb6c57343293a39446f6377849118224Untagged: redis:latestUntagged: redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494Deleted: sha256:aab98baa141a5336da8748325b8ef41bb387276bc8215b32070f38c27de20733Deleted: sha256:605d5301258d50af4f8d1f6287fa8d19e298f2b3fa713d54ac0afef873a2c739Deleted: sha256:b7dba623b62968065543ddd904ef25659953d3a23bb6d27678a311c0dc044e74Deleted: sha256:ab1ac7683b4e74b5f6a69ab622d30c2db2311191b68c8ff870c47ce965fe916fDeleted: sha256:fd21bb159809171cae4f0a9f25418f59c9648868d6c3f6dcf6e0d95263d14b17Deleted: sha256:fe784928e3300261632064b45d268faa2b8cfe0bb046d04524b3314cf3b4ba86Untagged: tomcat:latestUntagged: tomcat@sha256:94cc18203335e400dbafcd0633f33c53663b1c1012a13bcad58cced9cd9d1305Deleted: sha256:688bd6a32df3e2c59d42dee0ea343a962f33308f02226ad1785d6b287ba2f33aDeleted: sha256:b9fdf641d7fa89de59127b60302297c2c230c826ef3583e1af4ebf446033e99eDeleted: sha256:98b2e5f6158f9689b6a1e14f1850eb9919525a77d9212058d62c0e70e46d1614Deleted: sha256:b607261c17e5a3878e2c8f17102c8acd31cc10afe624a5593c2d0d4cffa8dc16Deleted: sha256:549688c0055d8ccafcea97a203f59d716c30f300d55aa2519095b8925c600209Deleted: sha256:f4c5a2eb902fc3661085c4101e454509cc20b0f9619ef506e28fe29ebaad3f10Deleted: sha256:0f3633510041342910c1312156ea5e0f5dc0a250a76c35cd6610632fb4bf6823Deleted: sha256:7671fe9d1ffb73c4f320db3729569ba104582370ec2f8b0d1e9b8a5738fe6ef3Deleted: sha256:12f5d1640038ea6b949341ea394e8af61b3a684ec05b5a1e48ffd2050b6e9290Deleted: sha256:c19a8558650d94114779314f952eb65d2baca80cdc396e3e28d8cae815201c5bDeleted: sha256:7ce7f234bab77e0253069b93abf52000e714b9fe82ad5e3b47d60bbde097781bUntagged: nginx:latestUntagged: nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aaDeleted: sha256:9b016c5aa4e8f867e102fac18f0ecaed7b151c798b70354afdb54a24e76462abDeleted: sha256:4f68a3976989e90f271414a0b504ed7960b315bd42dad0ae8d8c2d8cf850c266Deleted: sha256:e119254da86e1a89e11868661c511ffe6ca7a4956bb8c66c9d05d6d6dfcc37cbDeleted: sha256:c4ca4f3b6bc0bdcc9eecf38c44af52931bd0e73fecd779625b761c07e5b300d4Deleted: sha256:5e9255d400c476d794a592be75b3eaa460ef233ed96a970d79b46d00b93b1ce2Deleted: sha256:5c4f3d84264daaff85b2f005a4c295693e48c0e9c3ae76e64a7f3914e94e583bUntagged: centos:latestUntagged: centos@sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1Deleted: sha256:a0477e85b8aebf57d58bfa74a6598eccfd3fcc43a78c8e29c380cde2e7300a1bDeleted: sha256:16764cdd1bc476620e90917137529491698856d33294e38e7e11b0444715eb24Untagged: hello-world:latestUntagged: hello-world@sha256:31b9c7d48790f0d8c50ab433d9c3b7e17666d6993084c002c2ff1ca09b96391dDeleted: sha256:a29f45ccde2ac0bde957b1277b1501f471960c8ca49f1588c6c885941640ae60Deleted: sha256:167d9097a0a0c9ad3c82d85cdd3d078db0410523d29251194ef08288cb785a2aError: No such image: eb0c76808205Error: No such image: c39bd5d94750Error: No such image: 5bc857eb704aError: No such image: 4d7f5bac46f9Error: No such image: 2cf8bf16568fError: No such image: fbd181bb730eError: No such image: 26d3ed80b923Error: No such image: 82319feb9890</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看</span>pi@raspbian:~$ docker imagesREPOSITORY   TAG       IMAGE ID   CREATED   SIZEpi@raspbian:~$ docker ps -aCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><ul><li>测试</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120140150.png" alt=""></p><p>三个网络</p><pre><code class="hljs shell">问题： docker 是如果处理容器网络访问的？</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120140610.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试 运行一个tomcat</span>pi@raspbian:~$ docker run -d -P --name tomcat01 tomcat<span class="hljs-meta">#</span><span class="bash"> 查看容器内网络地址 ip addr 发现容器启动的时候会得到eth0@的ip ip地址，docker分配！</span>pi@raspbian:~$ docker exec -it tomcat01 ip addr</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120141340.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 思考：linux能否ping通这个网络</span></code></pre><pre><code class="hljs shell">pi@raspbian:~$ ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.284 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.105 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.177 ms64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.127 ms64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.121 ms<span class="hljs-meta">#</span><span class="bash"> linux 可以 ping 通 docker 容器内部</span></code></pre><ul><li>原理</li></ul><p>1.我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要按照了docker，<br>就会有一个docker0桥接模式，使用的技术是veth-pair技术！</p><p><strong>再次测试 ip addr</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120142638.png" alt=""></p><p>2.在启动一个容器测试，发现又多了一对网络</p><pre><code class="hljs shell">pi@raspbian:~$ docker run -d -P  --name tomcat02 tomcat327db62f9f2ada6eca1c8b15419ddeaee534096208d12301a38804d964f69f5dpi@raspbian:~$ docker exec -it tomcat01 ip addrpi@raspbian:~$ docker exec -it tomcat02 ip addr</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120144350.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120144249.png" alt=""></p><pre><code class="hljs shell">我们发现这个容器带来网卡，都是一对对的veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连正因为有这个特性 veth-pair 充当一个桥梁，连接各种虚拟网络设备的OpenStac,Docker容器之间的连接，OVS的连接，都是使用evth-pair技术</code></pre><p>3、我们来测试下tomcat01和tomcat02是否可以ping通</p><pre><code class="hljs shell">pi@raspbian:~$ docker exec -it tomcat01 ping 172.17.0.3pi@raspbian:~$ docker exec -it tomcat01 ping 172.17.0.2</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120145628.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120150440.png" alt=""></p><p> <strong>结论</strong>：tomcat01和tomcat02公用一个路由器，docker0。</p><p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用 ip。</p><p><strong>拓展：计算机网络</strong></p><p>255.255.0.1/16 域 局域网！</p><p>00000000.00000000.00000000.00000000</p><p>255.255.0.0 - 255.255.255.255  255*255-2</p><p><strong>小结</strong>： Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥 docker0</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120151252.png" alt=""></p><p>Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件）</p><p><strong>只要容器停止或者删除，对应的网桥一对就没了！</strong></p><pre><code class="hljs shell">pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                     NAMES327db62f9f2a   tomcat    &quot;catalina.sh run&quot;   34 minutes ago      Up 34 minutes      0.0.0.0:49154-&gt;8080/tcp   tomcat0214c6b9b831c4   tomcat    &quot;catalina.sh run&quot;   About an hour ago   Up About an hour   0.0.0.0:49153-&gt;8080/tcp   tomcat01pi@raspbian:~$ docker stop 327db62f9f2a327db62f9f2api@raspbian:~$ ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether dc:a6:32:32:3f:f3 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic noprefixroute eth0       valid_lft 7037sec preferred_lft 7037sec    inet6 fe80::8074:3558:bc0f:6a10/64 scope link noprefixroute        valid_lft forever preferred_lft forever3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq state UP group default qlen 1000    link/ether dc:a6:32:32:3f:f5 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.101/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0       valid_lft 7083sec preferred_lft 7083sec    inet6 fe80::b147:6e97:3e61:9203/64 scope link noprefixroute        valid_lft forever preferred_lft forever4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:d1:83:a7:72 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:d1ff:fe83:a772/64 scope link        valid_lft forever preferred_lft forever5: docker_gwbridge: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default     link/ether 02:42:a8:dd:7b:50 brd ff:ff:ff:ff:ff:ff    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker_gwbridge       valid_lft forever preferred_lft forever7: veth42162a4@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default     link/ether 72:e0:76:05:2c:0d brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 169.254.138.46/16 brd 169.254.255.255 scope global noprefixroute veth42162a4       valid_lft forever preferred_lft forever    inet6 fe80::70e0:76ff:fe05:2c0d/64 scope link        valid_lft forever preferred_lft forever</code></pre><h3 id="2-–-link"><a href="#2-–-link" class="headerlink" title="2.–-link"></a>2.–-link</h3><p><strong>思考一个场景：我们编写了一个微服务，database url=ip: 项目不重启，数据ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ping不通</span>pi@raspbian:~$ docker exec -it tomcat02 ping tomcat01ping: tomcat01: Name or service not known<span class="hljs-meta">#</span><span class="bash"> 运行一个tomcat03 --link tomcat02</span>pi@raspbian:~$ docker run -d -P  --name tomcat03 --link tomcat02 tomcat31110eb8ef9e9202e40c0fdb4c8522ee39cef4df1929fba4390b7e1614db8bfa<span class="hljs-meta">#</span><span class="bash"> 用tomcat03 ping tomcat02 可以ping通</span>pi@raspbian:~$ docker exec -it tomcat03 ping tomcat02PING tomcat02 (172.17.0.3) 56(84) bytes of data.64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.630 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.167 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.142 ms<span class="hljs-meta">#</span><span class="bash"> 用tomcat02 ping tomcat03 ping不通</span>pi@raspbian:~$ docker exec -it tomcat02 ping tomcat03ping: tomcat03: Name or service not known</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120154117.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看docker network --<span class="hljs-built_in">help</span></span>pi@raspbian:~$ docker network --helpUsage:  docker network COMMANDManage networksCommands:  connect     Connect a container to a network  create      Create a network  disconnect  Disconnect a container from a network  inspect     Display detailed information on one or more networks  ls          List networks  prune       Remove all unused networks  rm          Remove one or more networksRun &#x27;docker network COMMAND --help&#x27; for more information on a command.</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker network lsNETWORK ID     NAME              DRIVER    SCOPE421f2c2a5ec7   bridge            bridge    localeb4bd4907eff   docker_gwbridge   bridge    local06a3c9e409f6   host              host      locale129f1c57a68   none              null      local</code></pre><p><strong>探究： docker network inspect 网络id 网段相同</strong></p><pre><code class="hljs shell">docker inspect 421f2c2a5ec7</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120154204.png" alt=""></p><pre><code class="hljs shell">docker inspect tomcat03</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120155437.png" alt=""></p><p>查看tomcat03里面的/etc/hosts发现有tomcat02的配置</p><pre><code class="hljs shell">docker exec tomcat03 cat /etc/hosts</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120155700.png" alt=""></p><p>本质探究：–-link 本质就是在hosts配置中添加映射 </p><p>现在使用 Docker 已经不建议使用 –link 了！ </p><p>自定义网络，不适用 docker0！ </p><p>docker0 问题：不支持容器名连接访问！</p><h3 id="3-自定义网络"><a href="#3-自定义网络" class="headerlink" title="3.自定义网络"></a>3.自定义网络</h3><ul><li>查看所有的docker网络</li></ul><pre><code class="hljs shell">pi@raspbian:~$ docker network lsNETWORK ID     NAME              DRIVER    SCOPE421f2c2a5ec7   bridge            bridge    localeb4bd4907eff   docker_gwbridge   bridge    local06a3c9e409f6   host              host      locale129f1c57a68   none              null      local</code></pre><p><strong>网络模式</strong> </p><p>bridge ：桥接 docker（默认，自己创建也是用bridge模式） </p><p>none ：不配置网络，一般不用 </p><p>host ：和宿主主机共享网络 </p><p>container ：容器网络连通（用得少！局限很大）</p><p><strong>测试</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 我们直接启动的命令 --net bridge,而这个就是我们得docker0</span><span class="hljs-meta">#</span><span class="bash"> bridge就是docker0</span><span class="hljs-meta">$</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span>等价于 =&gt; docker run -d -P --name tomcat01 --net bridge tomcat<span class="hljs-meta">#</span><span class="bash"> docker0，特点：默认，域名不能访问。 --link可以打通连接，但是很麻烦！</span><span class="hljs-meta">#</span><span class="bash"> 我们可以 自定义一个网络</span><span class="hljs-meta">#</span><span class="bash"> --driver bridge</span><span class="hljs-meta">#</span><span class="bash"> --subnet 192.168.0.0/16</span><span class="hljs-meta">#</span><span class="bash"> --gateway 192.168.0.1</span><span class="hljs-meta">$</span><span class="bash"> docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span>pi@raspbian:~$ docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet3a84276ed04cc6fd1cc499a9b63b7d4957b83a599a7d65e8bd483cad5cd4200bpi@raspbian:~$ docker network lsNETWORK ID     NAME              DRIVER    SCOPE421f2c2a5ec7   bridge            bridge    localeb4bd4907eff   docker_gwbridge   bridge    local06a3c9e409f6   host              host      local3a84276ed04c   mynet             bridge    locale129f1c57a68   none              null      local</code></pre><p>我们自己的网络就创建好了。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120161453.png" alt=""></p><pre><code class="hljs shell">pi@raspbian:~$ docker run -d -P --name tomcat-net-01 --net mynet tomcatb650b67f860b9e1db725b185d018430fa5cd101691933a28d6791937bc7112ebpi@raspbian:~$ docker run -d -P --name tomcat-net-02 --net mynet tomcat8fc5140b4d55da708a13f8777f3fe18a9c627c1ed3c72f6b55134b4113f02e08pi@raspbian:~$ docker inspect mynet[    &#123;        &quot;Name&quot;: &quot;mynet&quot;,        &quot;Id&quot;: &quot;3a84276ed04cc6fd1cc499a9b63b7d4957b83a599a7d65e8bd483cad5cd4200b&quot;,        &quot;Created&quot;: &quot;2021-01-20T16:11:39.555402615+08:00&quot;,        &quot;Scope&quot;: &quot;local&quot;,        &quot;Driver&quot;: &quot;bridge&quot;,        &quot;EnableIPv6&quot;: false,        &quot;IPAM&quot;: &#123;            &quot;Driver&quot;: &quot;default&quot;,            &quot;Options&quot;: &#123;&#125;,            &quot;Config&quot;: [                &#123;                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;                &#125;            ]        &#125;,        &quot;Internal&quot;: false,        &quot;Attachable&quot;: false,        &quot;Ingress&quot;: false,        &quot;ConfigFrom&quot;: &#123;            &quot;Network&quot;: &quot;&quot;        &#125;,        &quot;ConfigOnly&quot;: false,        &quot;Containers&quot;: &#123;            &quot;8fc5140b4d55da708a13f8777f3fe18a9c627c1ed3c72f6b55134b4113f02e08&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-02&quot;,                &quot;EndpointID&quot;: &quot;9ddc507c5a7c61cc8bfb4309ef99e2bbd512c95711ca24d1f7f56d82aa0ac2ff&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;,            &quot;b650b67f860b9e1db725b185d018430fa5cd101691933a28d6791937bc7112eb&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-01&quot;,                &quot;EndpointID&quot;: &quot;91231509fd2ff4c96a09cd558b7ef438ff4b1c7d76881417119473a43dee3878&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;        &#125;,        &quot;Options&quot;: &#123;&#125;,        &quot;Labels&quot;: &#123;&#125;    &#125;]</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120161908.png" alt=""></p><p><strong>自定义网络可以互相ping通</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在自定义的网络下，服务可以互相ping通，不用使用–link</span>pi@raspbian:~$ docker exec -it tomcat-net-01 ping 192.168.0.3docker exec -it tomcat-net-01 ping tomcat-net-02PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.619 ms64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.215 ms64 bytes from 192.168.0.3: icmp_seq=3 ttl=64 time=0.148 ms64 bytes from 192.168.0.3: icmp_seq=4 ttl=64 time=0.186 mspi@raspbian:~$ docker exec -it tomcat-net-01 ping tomcat-net-02PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.230 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.238 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.285 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=4 ttl=64 time=0.163 ms</code></pre><p>我们自定义的网络docker当我们维护好了对应的关系，推荐我们平时这样使用网络！</p><p> 好处：</p><p> redis -不同的集群使用不同的网络，保证集群是安全和健康的 。</p><p>mysql-不同的集群使用不同的网络，保证集群是安全和健康的。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120163742.png" alt=""></p><h3 id="4-网络连通"><a href="#4-网络连通" class="headerlink" title="4.网络连通"></a>4.网络连通</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120194458.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在docker0启动tomcat01</span>pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                     NAMES8fc5140b4d55   tomcat    &quot;catalina.sh run&quot;   26 minutes ago   Up 26 minutes   0.0.0.0:49158-&gt;8080/tcp   tomcat-net-02b650b67f860b   tomcat    &quot;catalina.sh run&quot;   26 minutes ago   Up 26 minutes   0.0.0.0:49157-&gt;8080/tcp   tomcat-net-01pi@raspbian:~$ docker run -d -P --name tomcat01 tomcat163d7c78f25272bd6f9caed9310cd9ee89f17e6b262a400191f14c62d44e202epi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                     NAMES163d7c78f252   tomcat    &quot;catalina.sh run&quot;   6 seconds ago    Up 4 seconds    0.0.0.0:49159-&gt;8080/tcp   tomcat018fc5140b4d55   tomcat    &quot;catalina.sh run&quot;   27 minutes ago   Up 27 minutes   0.0.0.0:49158-&gt;8080/tcp   tomcat-net-02b650b67f860b   tomcat    &quot;catalina.sh run&quot;   27 minutes ago   Up 27 minutes   0.0.0.0:49157-&gt;8080/tcp   tomcat-net-01</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120164002.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试打通 tomcat01 - mynet</span>pi@raspbian:~$ docker network connect mynet tomcat01<span class="hljs-meta">#</span><span class="bash"> 查看mynet</span>pi@raspbian:~$ docker network inspect mynet</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120164725.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 连通之后就是将tomcat01放到了mynet网络下</span><span class="hljs-meta">#</span><span class="bash"> 一个容器两个ip</span><span class="hljs-meta">#</span><span class="bash"> 公网ip 私网ip</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试tomcat01与tomcat-net-01是否ping通</span>pi@raspbian:~$ docker exec -it tomcat01 ping tomcat-net-01PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.414 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.225 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.305 ms64 bytes from tomcat-net-01.mynet pi@raspbian:~$ docker exec -it tomcat-net-01 ping tomcat-01ping: tomcat-01: Name or service not knownpi@raspbian:~$ docker exec -it tomcat-net-01 ping tomcat01PING tomcat01 (192.168.0.4) 56(84) bytes of data.64 bytes from tomcat01.mynet (192.168.0.4): icmp_seq=1 ttl=64 time=0.251 ms64 bytes from tomcat01.mynet (192.168.0.4): icmp_seq=2 ttl=64 time=0.381 ms64 bytes from tomcat01.mynet (192.168.0.4): icmp_seq=3 ttl=64 time=0.157 ms</code></pre><p><strong>结论：假设要跨网络操作别人，就需要使用docker network connect 连通！</strong></p><h3 id="5-实战：部署Redis集群"><a href="#5-实战：部署Redis集群" class="headerlink" title="5.实战：部署Redis集群"></a>5.实战：部署Redis集群</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120165831.png" alt=""></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建网卡</span>docker network create redis --subnet 172.38.0.0/16<span class="hljs-meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span>for port in $(seq 1 6);\do \sudo mkdir -p /mydata/redis/node-$&#123;port&#125;/confsudo touch /mydata/redis/node-$&#123;port&#125;/conf/redis.confsudo cat &lt;&lt; EOF &gt;&gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1$&#123;port&#125;cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone<span class="hljs-meta">#</span><span class="bash"> 通过脚本运行六个redis</span>for port in $(seq 1 6);\do \docker run -p 637$&#123;port&#125;:6379 -p 1667$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \-v /mydata/redis/node-$&#123;port&#125;/data:/data \-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdone<span class="hljs-meta">#</span><span class="bash"> 随便进入一个</span>docker exec -it redis-1 /bin/sh <span class="hljs-meta">#</span><span class="bash">redis默认没有bash</span><span class="hljs-meta">#</span><span class="bash"> 创建集群</span>redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</code></pre><pre><code class="hljs shell">root@raspbian:/# for port in $(seq 1 6);\<span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-keyword">do</span> \</span><span class="hljs-meta">&gt;</span><span class="bash"> sudo mkdir -p /mydata/redis/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf</span><span class="hljs-meta">&gt;</span><span class="bash"> sudo touch /mydata/redis/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf</span><span class="hljs-meta">&gt;</span><span class="bash"> sudo cat &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span></span><span class="hljs-meta">&gt;</span><span class="bash"> port 6379</span><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">bind</span> 0.0.0.0</span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-enabled yes</span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-config-file nodes.conf</span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-node-timeout 5000</span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-announce-ip 172.38.0.1<span class="hljs-variable">$&#123;port&#125;</span></span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-announce-port 6379</span><span class="hljs-meta">&gt;</span><span class="bash"> cluster-announce-bus-port 16379</span><span class="hljs-meta">&gt;</span><span class="bash"> appendonly yes</span><span class="hljs-meta">&gt;</span><span class="bash"> EOF</span><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-keyword">done</span></span>root@raspbian:/# for port in $(seq 1 6);\<span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-keyword">do</span> \</span><span class="hljs-meta">&gt;</span><span class="bash"> docker run -p 637<span class="hljs-variable">$&#123;port&#125;</span>:6379 -p 1667<span class="hljs-variable">$&#123;port&#125;</span>:16379 --name redis-<span class="hljs-variable">$&#123;port&#125;</span> \</span><span class="hljs-meta">&gt;</span><span class="bash"> -v /mydata/redis/node-<span class="hljs-variable">$&#123;port&#125;</span>/data:/data \</span><span class="hljs-meta">&gt;</span><span class="bash"> -v /mydata/redis/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf:/etc/redis/redis.conf \</span><span class="hljs-meta">&gt;</span><span class="bash"> -d --net redis --ip 172.38.0.1<span class="hljs-variable">$&#123;port&#125;</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-keyword">done</span></span>66269c755eaee88688ea01efd231b9c57872c230a1bec940124ea9e2aea2c99a7e8b48f50e8b74e45ed97a134866ba0a30845afe67a493bd2d083232ad17780f874c17ffc961098ee3902018b1d8bdfb7e7589b227e3eeaced667fa50cc8e2a2dc14eb2816a645926bc78d8a2a203f5b885574f0c87f87ab04a3f9deab9270dbfe1f79c3536c674fb758229c103a23e306ca6ecee1b736119c59c386f76f29af1de56ee718ed60fbd71a8af241a36b60cb4f55422838b68ff15315be04154c08root@raspbian:/# docker exec -it redis-1 /bin/sh/data # lsappendonly.aof  nodes.conf/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span>Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 172.38.0.15:6379 to 172.38.0.11:6379Adding replica 172.38.0.16:6379 to 172.38.0.12:6379Adding replica 172.38.0.14:6379 to 172.38.0.13:6379M: a33d8e303927c7f9d0a3d12137f0174504f0c1a3 172.38.0.11:6379   slots:[0-5460] (5461 slots) masterM: 81d1c6db29f3e041285968f2e1648eeaa648441c 172.38.0.12:6379   slots:[5461-10922] (5462 slots) masterM: 67dff49fc0e891df591fac841b07ec62851edf7c 172.38.0.13:6379   slots:[10923-16383] (5461 slots) masterS: 218238df71f0b8baf0ca4fd47c18a9aabeb4abd4 172.38.0.14:6379   replicates 67dff49fc0e891df591fac841b07ec62851edf7cS: b8175dbdf99e75577df2c6c575f6d62f364323aa 172.38.0.15:6379   replicates a33d8e303927c7f9d0a3d12137f0174504f0c1a3S: d6fcb4f6de9dc0d9ffb6461624b0a882150028e3 172.38.0.16:6379   replicates 81d1c6db29f3e041285968f2e1648eeaa648441cCan I set the above configuration? (type &#x27;yes&#x27; to accept): yes<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span>Waiting for the cluster to join.....<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span>M: a33d8e303927c7f9d0a3d12137f0174504f0c1a3 172.38.0.11:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: 81d1c6db29f3e041285968f2e1648eeaa648441c 172.38.0.12:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: d6fcb4f6de9dc0d9ffb6461624b0a882150028e3 172.38.0.16:6379   slots: (0 slots) slave   replicates 81d1c6db29f3e041285968f2e1648eeaa648441cS: 218238df71f0b8baf0ca4fd47c18a9aabeb4abd4 172.38.0.14:6379   slots: (0 slots) slave   replicates 67dff49fc0e891df591fac841b07ec62851edf7cM: 67dff49fc0e891df591fac841b07ec62851edf7c 172.38.0.13:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)S: b8175dbdf99e75577df2c6c575f6d62f364323aa 172.38.0.15:6379   slots: (0 slots) slave   replicates a33d8e303927c7f9d0a3d12137f0174504f0c1a3[OK] All nodes agree about slots configuration.<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span>[OK] All 16384 slots covered.</code></pre><p> docker搭建redis集群完成！</p><p><strong>拓展:redis玩一玩</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入集群模式 -c：集群 无参：单机模式</span>/data # redis-cli -c127.0.0.1:6379&gt; <span class="hljs-meta">#</span><span class="bash"> 查看集群信息</span>127.0.0.1:6379&gt; cluster infocluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3  # 集群数目cluster_current_epoch:6cluster_my_epoch:1cluster_stats_messages_ping_sent:521cluster_stats_messages_pong_sent:507cluster_stats_messages_sent:1028cluster_stats_messages_ping_received:502cluster_stats_messages_pong_received:521cluster_stats_messages_meet_received:5cluster_stats_messages_received:1028172.38.0.13:6379&gt; cluster nodes # 查看节点数目d6fcb4f6de9dc0d9ffb6461624b0a882150028e3 172.38.0.16:6379@16379 slave 81d1c6db29f3e041285968f2e1648eeaa648441c 0 1611137999000 6 connected81d1c6db29f3e041285968f2e1648eeaa648441c 172.38.0.12:6379@16379 master - 0 1611137999000 2 connected 5461-10922218238df71f0b8baf0ca4fd47c18a9aabeb4abd4 172.38.0.14:6379@16379 slave 67dff49fc0e891df591fac841b07ec62851edf7c 0 1611137998000 4 connected67dff49fc0e891df591fac841b07ec62851edf7c 172.38.0.13:6379@16379 myself,master - 0 1611137998000 3 connected 10923-16383a33d8e303927c7f9d0a3d12137f0174504f0c1a3 172.38.0.11:6379@16379 master - 0 1611138000096 1 connected 0-5460b8175dbdf99e75577df2c6c575f6d62f364323aa 172.38.0.15:6379@16379 slave a33d8e303927c7f9d0a3d12137f0174504f0c1a3 0 1611137999092 5 connected<span class="hljs-meta">#</span><span class="bash"> slave是从节点 master是主节点</span>127.0.0.1:6379&gt; set a b<span class="hljs-meta">-&gt;</span><span class="bash"> Redirected to slot [15495] located at 172.38.0.13:6379  <span class="hljs-comment"># 当前处理的数据存在了节点为13.6379 master节点</span></span>OK<span class="hljs-meta">#</span><span class="bash"> 选举机制</span><span class="hljs-meta">#</span><span class="bash"> 高可用机制体现👇</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120182702.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210120182649.png" alt=""></p><p><strong> 我们使用docker之后，所有的技术都会慢慢变得简单起来！</strong></p><h2 id="十、SpringBoot微服务打包Docker镜像"><a href="#十、SpringBoot微服务打包Docker镜像" class="headerlink" title="十、SpringBoot微服务打包Docker镜像"></a>十、SpringBoot微服务打包Docker镜像</h2><p>1.构建SpringBoot项目</p><p>2.打包运行 </p><pre><code class="hljs shell">mvn package</code></pre><p>3.编写dockerfile</p><pre><code class="hljs shell">FROM java:8COPY *.jar /app.jarCMD [&quot;--server.port=8080&quot;]EXPOSE 8080ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</code></pre><ol><li>构建镜像</li></ol><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1.复制jar和Dockerfile到服务器</span><span class="hljs-meta">#</span><span class="bash"> 2.构建镜像</span>docker build -t xxxxx:xx .</code></pre><p>5.发布运行 以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p><p>以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/mmexport1612022824914.jpg" alt="mmexport1612022824914"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">狂神说B站视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.runoob.com/docker/docker-tutorial.html">学习docker</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://labs.play-with-docker.com/">使用docker</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>狂神</tag>
      
      <tag>nginx</tag>
      
      <tag>容器</tag>
      
      <tag>镜像</tag>
      
      <tag>tomcat</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker入门</title>
    <link href="/2021/01/18/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/18/Docker/Docker%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker容器学习笔记Ⅰ（狂神说Java）"><a href="#Docker容器学习笔记Ⅰ（狂神说Java）" class="headerlink" title="Docker容器学习笔记Ⅰ（狂神说Java）"></a>Docker容器学习笔记Ⅰ（狂神说Java）</h2><p>狂神说B站视频：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">https://www.bilibili.com/video/BV1og4y1q7M4?p=1</a></p><p>学习docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p><p>使用docker：<a href="https://labs.play-with-docker.com/">https://labs.play-with-docker.com/</a></p><h2 id="一、大纲"><a href="#一、大纲" class="headerlink" title="一、大纲"></a>一、大纲</h2><p><strong>入门：</strong></p><ul><li><p>Docker概述</p></li><li><p>Docker安装</p></li><li><p>Docker命令</p><ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>……</li></ul></li><li><p>Docker镜像</p></li></ul><p><strong>精髓：</strong></p><ul><li><p>容器数据卷</p></li><li><p>DockerFile</p></li><li><p>Docker网络原理</p></li></ul><p><strong>企业级：</strong></p><ul><li><p>IDEA整合Docker</p></li><li><p>集群</p><ul><li>Docker Compose</li><li>Docker Swarm</li></ul></li><li><p>CI/CD Jenkins流水线</p></li></ul><h2 id="二、Docker概述"><a href="#二、Docker概述" class="headerlink" title="二、Docker概述"></a>二、Docker概述</h2><p><strong>1.Docker为什么会出现？</strong></p><p>一款产品： 开发–上线 两套环境！应用环境，应用配置！</p><p>开发 — 运维。 问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？</p><p>环境配置是十分的麻烦，每一个机器都要部署环境(集群Redis、ES、Hadoop…) !费事费力。<br>发布一个项目( jar + (Redis MySQL JDK ES) )，项目能不能带上环境安装打包！</p><p>之前在服务器配置一个应用的环境 Redis MySQL JDK ES Hadoop 配置超麻烦了，不能够跨平台。</p><p>开发环境Windows，最后发布到Linux！</p><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>安卓流程：java — apk —发布（应用商店）一 张三使用apk一安装即可用！</p><p>docker流程： java-jar（环境） — 打包项目帯上环境（镜像） — ( Docker仓库：商店）——-</p><p>Docker给以上的问题，提出了解决方案！</p><p>Docker的思想就来自于集装箱！</p><p>JRE – 多个应用(端口冲突) – 原来都是交叉的！</p><p>隔离：Docker核心思想！打包装箱！每个箱子是互相隔离的。</p><p>Docker通过隔离机制，可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！</p><p><strong>2.Dcoker的历史</strong></p><p>2010年，几个的年轻人，就在美国成立了一家公司 dotcloud</p><p>做一些pass的云计算服务！LXC（Linux Container容器）有关的容器技术！</p><ul><li>Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。</li></ul><p>他们将自己的技术（容器化技术）命名就是 Docker。</p><p>Docker刚刚延生的时候，没有引起行业的注意！dotCloud，就活不下去！</p><ul><li>开源</li></ul><p>2013年，Docker开源！</p><p>越来越多的人发现docker的优点！火了。Docker每个月都会更新一个版本！</p><p>2014年4月9日，Docker1.0发布！</p><p><strong>docker为什么这么火？</strong>十分的轻巧！</p><p>在容器技术出来之前，我们都是使用虚拟机技术！</p><p>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>虚拟机也属于虚拟化技术，Docker容器技术，也是一种虚拟化技术！</p><ul><li><p>vm : linux centos 原生镜像（一个电脑！） 隔离、需要开启多个虚拟机！ 几个G 几分钟</p></li><li><p>docker: 隔离，镜像（最核心的环境 4m + jdk + mysql）十分的小巧，运行镜像就可以了！小巧！几个M 秒级启动！</p></li></ul><p>Docker基于Go语言开发的！开源项目！</p><p>docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a> Docker的文档是超级详细的！</p><p>仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><strong>3.Docker能做什么？</strong></p><p>比较Docker和虚拟机技术的不同：</p><ul><li><p>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</p></li><li><p>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</p></li><li><p>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</p></li></ul><p><strong>4.DevOps（开发、运维）</strong></p><ul><li>应用更快速的交付和部署</li></ul><p>传统：一对帮助文档，安装程序。</p><p>Docker：打包镜像发布测试一键运行。</p><ul><li>更便捷的升级和扩缩容</li></ul><p>使用了 Docker之后，我们部署应用就和搭积木一样</p><p>项目打包为一个镜像，扩展服务器A！服务器B</p><ul><li>更简单的系统运维</li></ul><p>在容器化之后，我们的开发，测试环境都是高度一致的</p><ul><li>更高效的计算资源利用</li></ul><p>Docker是内核级别的虚拟化，可以在一个物理机上可以运行很多的容器实例！服务器的性能可以被压榨到极致。</p><h2 id="三、Docker安装"><a href="#三、Docker安装" class="headerlink" title="三、Docker安装"></a>三、Docker安装</h2><p><strong>1.Docker的基本组成</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/u=1947627492,1772063185&amp;fm=26&amp;gp=0.jpg" alt=""></p><ul><li>镜像（image)：</li></ul><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><ul><li>容器(container)：</li></ul><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.<br>启动，停止，删除，基本命令<br>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><ul><li>仓库(repository)：</li></ul><p>仓库就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库。(很类似git)</p><p>Docker Hub是国外的。</p><p>阿里云…都有容器服务器(配置镜像加速!)</p><p><strong>2.安装Docker</strong></p><ul><li>环境准备</li></ul><p>Linux要求内核3.0以上</p><pre><code class="hljs shell">pi@raspbian:~$ uname -r5.4.83-OPENFANS+20210102-v8pi@raspbian:~$ cat /etc/os-releasePRETTY_NAME=&quot;Debian GNU/Linux 10 (buster)&quot;NAME=&quot;Debian GNU/Linux&quot;VERSION_ID=&quot;10&quot;VERSION=&quot;10 (buster)&quot;VERSION_CODENAME=busterID=debianHOME_URL=&quot;https://www.debian.org/&quot;SUPPORT_URL=&quot;https://www.debian.org/support&quot;BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</code></pre><ul><li>安装</li></ul><pre><code class="hljs shell">帮助文档：https://docs.docker.com/engine/install/</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1.卸载旧版本</span>sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-common<span class="hljs-meta">#</span><span class="bash">2.添加Docker的官方GPG密钥</span>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -sudo apt-key fingerprint 0EBFCD88<span class="hljs-meta">#</span><span class="bash">3.设置镜像的仓库</span>sudo add-apt-repository \   &quot;deb [arch=arm64] https://download.docker.com/linux/debian \<span class="hljs-meta">   $</span><span class="bash">(lsb_release -cs) \</span>   stable&quot;<span class="hljs-meta">#</span><span class="bash">默认是从国外的，不推荐</span><span class="hljs-meta">#</span><span class="bash">推荐使用国内的</span>sudo add-apt-repository \   &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/debian \<span class="hljs-meta">   $</span><span class="bash">(lsb_release -cs) \</span>   stable&quot;<span class="hljs-meta">#</span><span class="bash">更新yum软件包索引</span>yum makecache fast<span class="hljs-meta">#</span><span class="bash">4.安装docker相关的 docker-ce 社区版 而ee是企业版</span>sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">5. 使用docker version查看是否按照成功</span>pi@raspbian:~$ docker versionClient: Docker Engine - Community Version:           20.10.1 API version:       1.41 Go version:        go1.13.15 Git commit:        831ebea Built:             Tue Dec 15 04:35:39 2020 OS/Arch:           linux/arm64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.1  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       f001486  Built:            Tue Dec 15 04:33:40 2020  OS/Arch:          linux/arm64  Experimental:     false containerd:  Version:          1.4.3  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b runc:  Version:          1.0.0-rc92  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff docker-init:  Version:          0.19.0  GitCommit:        de40ad0</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">6. 测试</span>pi@raspbian:~$ docker run hello-worldUnable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-world256ab8fe8778: Already exists Digest: sha256:31b9c7d48790f0d8c50ab433d9c3b7e17666d6993084c002c2ff1ca09b96391dStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (arm64v8) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with:<span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span>Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">8.查看一下下载的镜像</span>pi@raspbian:~$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    a29f45ccde2a   12 months ago   9.14kB</code></pre><p>了解：卸载docker</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1. 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="hljs-meta">#</span><span class="bash">2. 删除资源</span>rm -rf /var/lib/docker<span class="hljs-meta">#</span><span class="bash"> /var/lib/docker 是docker的默认工作路径！</span></code></pre><ul><li>阿里云镜像加速</li></ul><p>1、登录阿里云找到容器服务</p><p><a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">镜像加速器</a></p><p>2、找到镜像加速器</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210117214418.png" alt=""></p><p>3、配置使用</p><pre><code class="hljs shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://mabtc1tu.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><p><strong>3.底层原理</strong></p><ul><li><strong>Docker是怎么工作的？</strong></li></ul><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p><p>Docker-Server接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210117214806.png" alt=""></p><ul><li><strong>为什么Docker比Vm快</strong></li></ul><p>1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>2、docker利用的是宿主机的内核,而不需要Guest OS。</p><p>GuestOS： VM（虚拟机）里的的系统（OS）;</p><p>HostOS：物理机里的系统（OS）；</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/src=http___img2018.cnblogs.com_i-beta_1931096_202002_1931096-20200208093654447-2072313478.png&amp;refer=http___img2018.cnblogs.jpg" alt=""></p><p>因此,当新建一个 容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。然而避免引导、加载操作系统内核是个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载GuestOS，整个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了这个复杂的过程，因此新建一个docker容器只需要几秒钟。</p><h2 id="三、Docker的常用命令"><a href="#三、Docker的常用命令" class="headerlink" title="三、Docker的常用命令"></a>三、Docker的常用命令</h2><p><strong>1.帮助命令</strong></p><pre><code class="hljs shell">docker version #显示docker的版本信息。</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker versionClient: Docker Engine - Community Version:           20.10.1 API version:       1.41 Go version:        go1.13.15 Git commit:        831ebea Built:             Tue Dec 15 04:35:39 2020 OS/Arch:           linux/arm64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.1  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       f001486  Built:            Tue Dec 15 04:33:40 2020  OS/Arch:          linux/arm64  Experimental:     false containerd:  Version:          1.4.3  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b runc:  Version:          1.0.0-rc92  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff docker-init:  Version:          0.19.0  GitCommit:        de40ad0</code></pre><pre><code class="hljs shell">docker info #显示docker的系统信息，包括镜像和容器的数量</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker infoClient: Context:    default Debug Mode: false Plugins:  app: Docker App (Docker Inc., v0.9.1-beta3)  buildx: Build with BuildKit (Docker Inc., v0.5.0-docker)Server: Containers: 6  Running: 0  Paused: 0  Stopped: 6 Images: 1 Server Version: 20.10.1 Storage Driver: overlay2  Backing Filesystem: extfs  Supports d_type: true  Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Cgroup Version: 1 Plugins:  Volume: local  Network: bridge host ipvlan macvlan null overlay  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc Default Runtime: runc Init Binary: docker-init containerd version: 269548fa27e0089a8b8278fc4fc781d7f65a939b runc version: ff819c7e9184c13b7c2607fe6c30ae19403a7aff init version: de40ad0 Security Options:  seccomp   Profile: default Kernel Version: 5.4.83-OPENFANS+20210102-v8 Operating System: Debian GNU/Linux 10 (buster) OSType: linux Architecture: aarch64 CPUs: 4 Total Memory: 1.805GiB Name: raspbian ID: EUR5:D5VI:P5K6:JRE3:4YIL:POWU:QAFS:YLRT:SFV6:6ZI5:EJPM:NSLC Docker Root Dir: /var/lib/docker Debug Mode: false Username: baixfxyz Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries:  127.0.0.0/8 Registry Mirrors:  http://hub-mirror.c.163.com/ Live Restore Enabled: falseWARNING: No blkio weight supportWARNING: No blkio weight_device supportWARNING: bridge-nf-call-ip6tables is disabled</code></pre><pre><code class="hljs shell">docker 命令 --help #帮助命令docker --help</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker --helpUsage:  docker [OPTIONS] COMMANDA self-sufficient runtime for containersOptions:      --config string      Location of client config files (default &quot;/home/pi/.docker&quot;)  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env                           var and default context set with &quot;docker context use&quot;)  -D, --debug              Enable debug mode  -H, --host list          Daemon socket(s) to connect to  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)      --tls                Use TLS; implied by --tlsverify      --tlscacert string   Trust certs signed only by this CA (default &quot;/home/pi/.docker/ca.pem&quot;)      --tlscert string     Path to TLS certificate file (default &quot;/home/pi/.docker/cert.pem&quot;)      --tlskey string      Path to TLS key file (default &quot;/home/pi/.docker/key.pem&quot;)      --tlsverify          Use TLS and verify the remote  -v, --version            Print version information and quitManagement Commands:  app*        Docker App (Docker Inc., v0.9.1-beta3)  builder     Manage builds  buildx*     Build with BuildKit (Docker Inc., v0.5.0-docker)  config      Manage Docker configs  container   Manage containers  context     Manage contexts  image       Manage images  manifest    Manage Docker image manifests and manifest lists  network     Manage networks  node        Manage Swarm nodes  plugin      Manage plugins  secret      Manage Docker secrets  service     Manage services  stack       Manage Docker stacks  swarm       Manage Swarm  system      Manage Docker  trust       Manage trust on Docker images  volume      Manage volumesCommands:  attach      Attach local standard input, output, and error streams to a running container  build       Build an image from a Dockerfile  commit      Create a new image from a container&#x27;s changes  cp          Copy files/folders between a container and the local filesystem  create      Create a new container  diff        Inspect changes to files or directories on a container&#x27;s filesystem  events      Get real time events from the server  exec        Run a command in a running container  export      Export a container&#x27;s filesystem as a tar archive  history     Show the history of an image  images      List images  import      Import the contents from a tarball to create a filesystem image  info        Display system-wide information  inspect     Return low-level information on Docker objects  kill        Kill one or more running containers  load        Load an image from a tar archive or STDIN  login       Log in to a Docker registry  logout      Log out from a Docker registry  logs        Fetch the logs of a container  pause       Pause all processes within one or more containers  port        List port mappings or a specific mapping for the container  ps          List containers  pull        Pull an image or a repository from a registry  push        Push an image or a repository to a registry  rename      Rename a container  restart     Restart one or more containers  rm          Remove one or more containers  rmi         Remove one or more images  run         Run a command in a new container  save        Save one or more images to a tar archive (streamed to STDOUT by default)  search      Search the Docker Hub for images  start       Start one or more stopped containers  stats       Display a live stream of container(s) resource usage statistics  stop        Stop one or more running containers  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE  top         Display the running processes of a container  unpause     Unpause all processes within one or more containers  update      Update configuration of one or more containers  version     Show the Docker version information  wait        Block until one or more containers stop, then print their exit codesRun &#x27;docker COMMAND --help&#x27; for more information on a command.To get more help with docker, check out our guides at https://docs.docker.com/go/guides/</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">帮助文档的地址：https://docs.docker.com/engine/reference/commandline/build/</span></code></pre><p><strong>2.镜像命令</strong></p><pre><code class="hljs shell">docker images #查看所有本地主机上的镜像 可以使用docker image ls代替docker search 搜索镜像docker pull 下载镜像 docker image pulldocker rmi 删除镜像 docker image rm</code></pre><p><strong>docker images 查看所有本地的主机上的镜像</strong></p><pre><code class="hljs shell">pi@raspbian:~$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    a29f45ccde2a   12 months ago   9.14kB</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 解释</span><span class="hljs-meta">#</span><span class="bash">REPOSITORY <span class="hljs-comment"># 镜像的仓库源</span></span><span class="hljs-meta">#</span><span class="bash">TAG <span class="hljs-comment"># 镜像的标签</span></span><span class="hljs-meta">#</span><span class="bash">IMAGE ID <span class="hljs-comment"># 镜像的id</span></span><span class="hljs-meta">#</span><span class="bash">CREATED <span class="hljs-comment"># 镜像的创建时间</span></span><span class="hljs-meta">#</span><span class="bash">SIZE <span class="hljs-comment"># 镜像的大小</span></span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 可选项</span>pi@raspbian:~$ docker images --helpUsage:  docker images [OPTIONS] [REPOSITORY[:TAG]]List imagesOptions:  -a, --all             Show all images (default hides intermediate images) #列出所有镜像      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don&#x27;t truncate output  -q, --quiet           Only show image IDs # 只显示镜像的id</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker images -aq ＃显示所有镜像的ida29f45ccde2a</code></pre><p><strong>docker pull 下载镜像</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span>➜ ~ docker pull tomcat:88: Pulling from library/tomcat #如果不写tag，默认就是latest90fe46dd8199: Already exists #分层下载： docker image 的核心 联合文件系统35a4f1977689: Already existsbbc37f14aded: Already exists74e27dc593d4: Already exists93a01fbfad7f: Already exists1478df405869: Pull complete64f0dd11682b: Pull complete68ff4e050d11: Pull completef576086003cf: Pull complete3b72593ce10e: Pull completeDigest: sha256:0c6234e7ec9d10ab32c06423ab829b32e3183ba5bf2620ee66de866df640a027<span class="hljs-meta">#</span><span class="bash"> 签名 防伪</span>Status: Downloaded newer image for tomcat:8docker.io/library/tomcat:8 #真实地址<span class="hljs-meta">#</span><span class="bash">等价于</span>docker pull tomcat:8docker pull docker.io/library/tomcat:8</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker pull --helpUsage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]Pull an image or a repository from a registryOptions:  -a, --all-tags                Download all tagged images in the repository      --disable-content-trust   Skip image verification (default true)      --platform string         Set platform if server is multi-platform capable  -q, --quiet                   Suppress verbose output</code></pre><p><strong>docker rmi 删除镜像</strong></p><pre><code class="hljs shell">docker rmi -f 镜像id #删除指定的镜像docker rmi -f 镜像id 镜像id 镜像id 镜像id#删除指定的镜像docker rmi -f $(docker images -aq) #删除全部的镜像</code></pre><p><strong>3.容器命令</strong></p><p>说明：我们有了镜像才可以创建容器，Linux，下载centos镜像来学习</p><pre><code class="hljs shell">docker run 镜像id 新建容器并启动docker ps 列出所有运行的容器 docker container listdocker rm 容器id 删除指定容器docker start 容器id #启动容器docker restart容器id #重启容器docker stop 容器id #停止当前正在运行的容器docker kill 容器id #强制停止当前容器</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker container --helpUsage:  docker container COMMANDManage containersCommands:  attach      Attach local standard input, output, and error streams to a running container  commit      Create a new image from a container&#x27;s changes  cp          Copy files/folders between a container and the local filesystem  create      Create a new container  diff        Inspect changes to files or directories on a container&#x27;s filesystem  exec        Run a command in a running container  export      Export a container&#x27;s filesystem as a tar archive  inspect     Display detailed information on one or more containers  kill        Kill one or more running containers  logs        Fetch the logs of a container  ls          List containers  pause       Pause all processes within one or more containers  port        List port mappings or a specific mapping for the container  prune       Remove all stopped containers  rename      Rename a container  restart     Restart one or more containers  rm          Remove one or more containers  run         Run a command in a new container  start       Start one or more stopped containers  stats       Display a live stream of container(s) resource usage statistics  stop        Stop one or more running containers  top         Display the running processes of a container  unpause     Unpause all processes within one or more containers  update      Update configuration of one or more containers  wait        Block until one or more containers stop, then print their exit codesRun &#x27;docker container COMMAND --help&#x27; for more information on a command.</code></pre><p><strong>新建容器并启动</strong></p><pre><code class="hljs shell">docker run [可选参数] image | docker container run [可选参数] image<span class="hljs-meta">#</span><span class="bash">参书说明</span>--name=&quot;Name&quot; 容器名字 tomcat01 tomcat02 用来区分容器-d 后台方式运行-it 使用交互方式运行，进入容器查看内容-p 指定容器的端口 -p 8080(宿主机):8080(容器)-p ip:主机端口:容器端口-p 主机端口:容器端口(常用)-p 容器端口容器端口-P(大写) 随机指定端口</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试、启动并进入容器</span>pi@raspbian:~$ docker run -it centos /bin/bashUnable to find image &#x27;centos:latest&#x27; locallylatest: Pulling from library/centoslatest: Pulling from library/centos333cbcae3fb8: Already exists Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1Status: Downloaded newer image for centos:latest[root@0c96b8cf9bc2 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@0c96b8cf9bc2 /]#  exit #从容器退回主机exitpi@raspbian:~$ ls com.oray.sunlogin.client_10.0.2.24779_arm64.deb   pifan_win10_vm   Wallpapers  &#x27;学习强国-raspberrypi &#x27;   视频 git                                               SunloginRemote   下载         文档                     软件 libary                                            ThunderNetwork   公共         桌面                     音乐 Miniconda3-latest-Linux-armv7l.sh                 tmp.text         图片         模板pi@raspbian:~$</code></pre><p><strong>列出所有运行的容器</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">docker ps命令 <span class="hljs-comment">#列出当前正在运行的容器</span></span>-a, --all Show all containers (default shows just running)-n, --last int Show n last created containers (includes all states)(default -1)-q, --quiet Only display numeric IDs</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMESpi@raspbian:~$ docker ps -aCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                          PORTS     NAMES0c96b8cf9bc2   centos         &quot;/bin/bash&quot;              3 minutes ago    Exited (0) About a minute ago             nervous_albattani09bcaba4de1f   hello-world    &quot;/hello&quot;                 40 minutes ago   Exited (0) 40 minutes ago                 brave_khayyam0eaf062ca9fb   e86f991e5d10   &quot;/docker-entrypoint.…&quot;   5 days ago       Exited (0) 5 days ago                     nginx-testf31980e0ab6a   e86f991e5d10   &quot;/docker-entrypoint.…&quot;   5 days ago       Exited (0) 5 days ago                     agitated_merkle792d5e8c7575   e86f991e5d10   &quot;/docker-entrypoint.…&quot;   5 days ago       Exited (0) 5 days ago                     charming_galois5d4de87f016f   centos         &quot;/bin/bash&quot;              5 days ago       Exited (0) 5 days ago                     suspicious_johnson76bd27490955   hello-world    &quot;/hello&quot;                 5 days ago       Exited (0) 5 days ago                     funny_khayyampi@raspbian:~$ docker ps -aq0c96b8cf9bc209bcaba4de1f0eaf062ca9fbf31980e0ab6a792d5e8c75755d4de87f016f76bd27490955</code></pre><p><strong>退出容器</strong></p><pre><code class="hljs shell">exit #容器直接退出ctrl +P +Q #容器不停止退出</code></pre><p><strong>删除容器</strong></p><pre><code class="hljs shell">docker rm 容器id #删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rfdocker rm -f $(docker ps -aq) #删除指定的容器docker ps -a -q|xargs docker rm #删除所有的容器</code></pre><p><strong>启动和停止容器的操作</strong></p><pre><code class="hljs shell">docker start 容器id #启动容器docker restart 容器id #重启容器docker stop 容器id #停止当前正在运行的容器docker kill 容器id #强制停止当前容器</code></pre><p><strong>4.常用其他命令</strong></p><p><strong>后台启动命令</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker run -d centose6b768a79f51e29c9a8ef5379abc7a273c706a2550f771fd4dd4c744dd247fb2pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 问题docker ps. 发现centos 停止了</span><span class="hljs-meta">#</span><span class="bash"> 退出原因</span><span class="hljs-meta">#</span><span class="bash"> 1、docker容器运行必须有一个前台进程， 如果没有前台进程执行，容器认为空闲，就会自行退出</span><span class="hljs-meta">#</span><span class="bash"> 2、容器运行的命令如果不是那些一直挂起的命令（ 运行top，tail、循环等），就是会自动退出</span><span class="hljs-meta">#</span><span class="bash"> 3、这个是 docker 的机制问题</span><span class="hljs-meta">#</span><span class="bash"> nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></code></pre><p><strong>查看日志</strong></p><pre><code class="hljs shell">docker logs --helpOptions:--details Show extra details provided to logs* -f, --follow Follow log output--since string Show logs since timestamp (e.g. 2013-01-02T13:23:37) orrelative (e.g. 42m for 42 minutes)* --tail string Number of lines to show from the end of the logs(default &quot;all&quot;)* -t, --timestamps Show timestamps--until string Show logs before a timestamp (e.g. 2013-01-02T13:23:37)or relative (e.g. 42m for 42 minutes)</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker run -d centos /bin/sh -c &quot;while true;do echo 6666;sleep 1;done&quot;f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f<span class="hljs-meta">#</span><span class="bash">模拟日志</span><span class="hljs-meta">#</span><span class="bash">显示日志</span>-tf #显示日志信息（一直更新）--tail number #需要显示日志条数docker logs -t --tail n 容器id #查看n行日志docker logs -ft 容器id #跟着日志</code></pre><p><strong>查看容器中进程信息 ps</strong></p><pre><code class="hljs shell">docker top 容器id</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMESf4311e01d778   centos    &quot;/bin/sh -c &#x27;while t…&quot;   9 seconds ago   Up 5 seconds             trusting_curiepi@raspbian:~$ docker top f4311e01d778UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                30484               30450               0                   22:25               ?                   00:00:00            /bin/sh -c while true;do echo 6666;sleep 1;doneroot                32658               30484               0                   22:27               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</code></pre><p><strong>查看镜像的元数据</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span>docker inspect 容器id</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">测试</span>pi@raspbian:~$ docker inspect f4311e01d778[    &#123;        &quot;Id&quot;: &quot;f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f&quot;,        &quot;Created&quot;: &quot;2021-01-17T14:25:35.710610691Z&quot;,        &quot;Path&quot;: &quot;/bin/sh&quot;,        &quot;Args&quot;: [            &quot;-c&quot;,            &quot;while true;do echo 6666;sleep 1;done&quot;        ],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;,            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 30484,            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2021-01-17T14:25:38.846444708Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,        &quot;Image&quot;: &quot;sha256:a0477e85b8aebf57d58bfa74a6598eccfd3fcc43a78c8e29c380cde2e7300a1b&quot;,        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f/resolv.conf&quot;,        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f/hostname&quot;,        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f/hosts&quot;,        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f/f4311e01d77805cd82e583a75cf96e117fac719cf64ace3919158b9f6e3f8f5f-json.log&quot;,        &quot;Name&quot;: &quot;/trusting_curie&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: null,            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;CgroupnsMode&quot;: &quot;host&quot;,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;/proc/asound&quot;,                &quot;/proc/acpi&quot;,                &quot;/proc/kcore&quot;,                &quot;/proc/keys&quot;,                &quot;/proc/latency_stats&quot;,                &quot;/proc/timer_list&quot;,                &quot;/proc/timer_stats&quot;,                &quot;/proc/sched_debug&quot;,                &quot;/proc/scsi&quot;,                &quot;/sys/firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;/proc/bus&quot;,                &quot;/proc/fs&quot;,                &quot;/proc/irq&quot;,                &quot;/proc/sys&quot;,                &quot;/proc/sysrq-trigger&quot;            ]        &#125;,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/f3f69aeb9705b9bc24f209af81cc90657c4c2eee115d3c9d53fd0c67dc661d9d-init/diff:/var/lib/docker/overlay2/c59748945340c6610a4112c42f1f9929a4a1f5b8ae5ab50084cbc3ad12951286/diff&quot;,                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/f3f69aeb9705b9bc24f209af81cc90657c4c2eee115d3c9d53fd0c67dc661d9d/merged&quot;,                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/f3f69aeb9705b9bc24f209af81cc90657c4c2eee115d3c9d53fd0c67dc661d9d/diff&quot;,                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/f3f69aeb9705b9bc24f209af81cc90657c4c2eee115d3c9d53fd0c67dc661d9d/work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;Mounts&quot;: [],        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;f4311e01d778&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;            ],            &quot;Cmd&quot;: [                &quot;/bin/sh&quot;,                &quot;-c&quot;,                &quot;while true;do echo 6666;sleep 1;done&quot;            ],            &quot;Image&quot;: &quot;centos&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;5d580bec850d90d77a2f36592b1d15d4e56acbb7065320914677090968726a7b&quot;,            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/5d580bec850d&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;6d7d115f815c56f29df5333be2296a0cfbb541227396fad448bca0f711e5ca9b&quot;,            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;33604500820e5692b82d7a1fff29f5f6586d572f6db2aef1440d0237a81a2b1e&quot;,                    &quot;EndpointID&quot;: &quot;6d7d115f815c56f29df5333be2296a0cfbb541227396fad448bca0f711e5ca9b&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;]</code></pre><p><strong>进入当前正在运行的容器</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span><span class="hljs-meta">#</span><span class="bash"> 命令</span>docker exec -it 容器id bin/bash<span class="hljs-meta">#</span><span class="bash">测试</span>pi@raspbian:~$ docker exec -it f4311e01d778 bin/bash[root@f4311e01d778 /]# ps  PID TTY          TIME CMD  368 pts/0    00:00:00 bash  396 pts/0    00:00:00 ps[root@f4311e01d778 /]# exitexit</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式二</span>docker attach 容器id<span class="hljs-meta">#</span><span class="bash">测试</span>pi@raspbian:~$ docker attach f4311e01d778666666666666666666666666……</code></pre><pre><code class="hljs shell">区别<span class="hljs-meta">#</span><span class="bash">docker <span class="hljs-built_in">exec</span> <span class="hljs-comment">#进入当前容器后开启一个新的终端，可以在里面操作。（常用）</span></span><span class="hljs-meta">#</span><span class="bash">docker attach <span class="hljs-comment"># 进入容器正在执行的终端</span></span></code></pre><p><strong>从容器内拷贝到主机上</strong></p><pre><code class="hljs shell">docker cp 容器id:容器内路径 主机目的路径<span class="hljs-meta">#</span><span class="bash">进入docker容器内部</span></code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMESe7c4a115ff36   centos    &quot;/bin/bash&quot;   2 minutes ago   Up 2 minutes             awesome_tereshkovapi@raspbian:~$ docker exec -it e7c4a115ff36  /bin/bash[root@e7c4a115ff36 /]# cd[root@e7c4a115ff36 ~]# lsanaconda-ks.cfg  anaconda-post.log  original-ks.cfg[root@e7c4a115ff36 ~]#  touch zsh[root@e7c4a115ff36 ~]# echo &quot;shadiao&quot; &gt; zsh      [root@e7c4a115ff36 ~]# cat zshshadiao[root@e7c4a115ff36 ~]# docker cp e7c4a115ff36:~/zsh /bash: docker: command not found[root@e7c4a115ff36 ~]# pwd/root[root@e7c4a115ff36 ~]# pi@raspbian:~$ docker cp e7c4a115ff36:/root/zsh /home/pipi@raspbian:~$ ls com.oray.sunlogin.client_10.0.2.24779_arm64.deb   pifan_win10_vm   Wallpapers   图片                     模板 git                                               SunloginRemote   zsh         &#x27;学习强国-raspberrypi &#x27;   视频 libary                                            ThunderNetwork   下载         文档                     软件 Miniconda3-latest-Linux-armv7l.sh                 tmp.text         公共         桌面                     音乐pi@raspbian:~$ cat zshshadiao</code></pre><p>学习方式：将所有笔记敲一遍，自己记录笔记！</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p><strong>Docker的所有命令</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/01190232_02Qb.png" alt=""></p><p><strong>Docker命令帮助文档（重要）</strong></p><pre><code class="hljs shell">attach Attach local standard input, output, and error streams to arunning container<span class="hljs-meta">#</span><span class="bash">当前shell下 attach连接指定运行的镜像</span>build Build an image from a Dockerfile # 通过Dockerfile定制镜像commit Create a new image from a container&#x27;s changes #提交当前容器为新的镜像cp Copy files/folders between a container and the local filesystem #拷贝文件create Create a new container #创建一个新的容器diff Inspect changes to files or directories on a container&#x27;sfilesystem #查看docker容器的变化events Get real time events from the server # 从服务获取容器实时时间exec Run a command in a running container # 在运行中的容器上运行命令export Export a container&#x27;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]history Show the history of an image # 展示一个镜像形成历史images List images #列出系统当前的镜像import Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像info Display system-wide information # 显示全系统信息inspect Return low-level information on Docker objects #查看容器详细信息kill Kill one or more running containers # kill指定docker容器load Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]login Log in to a Docker registry #logout Log out from a Docker registrylogs Fetch the logs of a containerpause Pause all processes within one or more containersport List port mappings or a specific mapping for the containerps List containerspull Pull an image or a repository from a registrypush Push an image or a repository to a registryrename Rename a containerrestart Restart one or more containersrm Remove one or more containersrmi Remove one or more imagesrun Run a command in a new containersave Save one or more images to a tar archive (streamed to STDOUT bydefault)search Search the Docker Hub for imagesstart Start one or more stopped containersstats Display a live stream of container(s) resource usage statisticsstop Stop one or more running containerstag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGEtop Display the running processes of a containerunpause Unpause all processes within one or more containersupdate Update configuration of one or more containersversion Show the Docker version informationwait Block until one or more containers stop, then print their exitcodes</code></pre><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><p>三个作业：作业1告诉我们暴露端口的重要性；作业2告诉我们进入容器的重要性；作业3告诉我们查看当前容器状态的重要性，如何修改容器运行的环境。</p><p><strong>作业1：Docker 安装Nginx</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档</span><span class="hljs-meta">#</span><span class="bash">2. 拉取镜像 pull</span><span class="hljs-meta">#</span><span class="bash">3. 运行测试</span><span class="hljs-meta">#</span><span class="bash"> -d 后台运行</span><span class="hljs-meta">#</span><span class="bash"> --name 给容器命名</span><span class="hljs-meta">#</span><span class="bash"> -p 宿主机端口：容器内部端口</span></code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker search -f  stars=5000 nginxNAME      DESCRIPTION                STARS     OFFICIAL   AUTOMATEDnginx     Official build of Nginx.   14291     [OK] pi@raspbian:~$ docker pull nginxUsing default tag: latestlatest: Pulling from library/nginxf8be76fcf206: Pull complete 56d3a31c1999: Pull complete 61e3132252c9: Pull complete 703916d761e9: Pull complete 53e819da52d9: Pull complete Digest: sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aaStatus: Downloaded newer image for nginx:latestdocker.io/library/nginx:latestpi@raspbian:~$ docker run -d --name nginx01 -p 8088:80 nginxc86f35254ea1c2abad877c4942217d55d7e582b382a2510e6d4a5ac8b1118f0cpi@raspbian:~$ curl localhost:8088&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;    body &#123;        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210117230259.png" alt=""></p><p><strong>端口暴露示意图：</strong></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210117230043.png" alt=""></p><p><strong>思考问题</strong>：我们每次改动nginx配置文件，都需要进入容器内部？十分的麻烦，要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？→ 数据卷！</p><p><strong>作业2：docker 来装一个tomcat</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 官方的使用</span>docker run -it --rm tomcat:9.0<span class="hljs-meta">#</span><span class="bash"> 之前的启动都是后台，停止了容器，容器还是可以查到</span><span class="hljs-meta">#</span><span class="bash"> docker run -it --rm image 一般是用来测试，用完就删除（暂时不建议）</span>--rm Automatically remove the container when it exits<span class="hljs-meta">#</span><span class="bash">下载</span>docker pull tomcat<span class="hljs-meta">#</span><span class="bash">启动运行</span>docker run -d -p 8080:8080 --name tomcat01 tomcat<span class="hljs-meta">#</span><span class="bash">测试访问有没有问题</span>curl localhost:8080<span class="hljs-meta">#</span><span class="bash">进入容器</span>➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATEDSTATUS PORTS NAMESdb09851cf82e tomcat &quot;catalina.sh run&quot; 28 seconds agoUp 27 seconds 0.0.0.0:8080-&gt;8080/tcp tomcat01➜ ~ docker exec -it db09851cf82e /bin/bashroot@db09851cf82e:/usr/local/tomcat#<span class="hljs-meta">#</span><span class="bash"> 发现问题：1、linux命令少了。 2.没有webapps</span><span class="hljs-meta">#</span><span class="bash"> 阿里云镜像（阉割版），它为保证最小镜像，将不必要的都剔除了→保证最小可运行环境！</span></code></pre><p><strong>思考问题</strong>：我们以后要部署项目，如果每次都要进入容器是不是十分麻烦？要是可以在容器外部提供一个映射路径，webapps，我们在外部放置项目，就自动同步内部就好了！</p><p><strong>作业3：部署es+kibana</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> es 暴露的端口很多！</span><span class="hljs-meta">#</span><span class="bash"> es 十分耗内存</span><span class="hljs-meta">#</span><span class="bash"> es 的数据一般需要放置到安全目录！挂载</span><span class="hljs-meta">#</span><span class="bash"> --net somenetwork ? 网络配置</span><span class="hljs-meta">#</span><span class="bash"> 下载启动elasticsearch（Docker一步搞定）</span>docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e&quot;discovery.type=single-node&quot; elasticsearch:7.6.2<span class="hljs-meta">#</span><span class="bash"> 测试一下es是否成功启动</span>➜ ~ curl localhost:9200&#123;&quot;name&quot; : &quot;d73ad2f22dd3&quot;,&quot;cluster_name&quot; : &quot;docker-cluster&quot;,&quot;cluster_uuid&quot; : &quot;atFKgANxS8CzgIyCB8PGxA&quot;,&quot;version&quot; : &#123;&quot;number&quot; : &quot;7.6.2&quot;,&quot;build_flavor&quot; : &quot;default&quot;,&quot;build_type&quot; : &quot;docker&quot;,&quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,&quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,&quot;build_snapshot&quot; : false,&quot;lucene_version&quot; : &quot;8.4.0&quot;,&quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,&quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;&#125;,&quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;<span class="hljs-meta">#</span><span class="bash"> 查看docker容器使用内存情况（每秒刷新，也挺耗内存的一个命令）</span>➜ ~ docker stats<span class="hljs-meta">#</span><span class="bash">关闭，添加内存的限制，修改配置文件 -e 环境配置修改</span>➜ ~ docker rm -f d73ad2f22dd3➜ ~ docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e&quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;elasticsearch:7.6.2</code></pre><pre><code class="hljs shell">➜ ~ curl localhost:9200&#123;&quot;name&quot; : &quot;b72c9847ec48&quot;,&quot;cluster_name&quot; : &quot;docker-cluster&quot;,&quot;cluster_uuid&quot; : &quot;yNAK0EORSvq3Wtaqe2QqAg&quot;,&quot;version&quot; : &#123;&quot;number&quot; : &quot;7.6.2&quot;,&quot;build_flavor&quot; : &quot;default&quot;,&quot;build_type&quot; : &quot;docker&quot;,&quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,&quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,&quot;build_snapshot&quot; : false,&quot;lucene_version&quot; : &quot;8.4.0&quot;,&quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,&quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;&#125;,&quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;</code></pre><p>作业：使用kibana连接es？思考网络如何才能连接。</p><h2 id="五、Docker可视化"><a href="#五、Docker可视化" class="headerlink" title="五、Docker可视化"></a>五、Docker可视化</h2><p><strong>什么是portainer？</strong></p><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 运行如下命令即可 打开可视化服务</span>docker run -d -p 8080:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</code></pre><p>访问：<a href="http://ip:8080/">http://ip:8080/</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1732557-20200612151233073-1381095621.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1732557-20200612151250198-1149603218.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1732557-20200612151312879-18447650.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1732557-20200612151331571-58946069.png" alt=""></p><h2 id="六、Docker镜像讲解"><a href="#六、Docker镜像讲解" class="headerlink" title="六、Docker镜像讲解"></a>六、Docker镜像讲解</h2><p><strong>镜像是什么</strong></p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括<strong>代码、运行时库、环境变量和配置文件</strong>。<br>将所有的应用和环境，直接打包为docker镜像，就可以直接运行。</p><ul><li>UnionFs （联合文件系统）</li></ul><p>我们下载的时候看到一层层的下载就是这个。</p><blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p></blockquote><ul><li>Docker镜像加载原理</li></ul><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><blockquote><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel,<br>Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux/Unix系统是一样的，包含boot加載器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu,Centos等等。</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/u=1739556097,893309826&amp;fm=15&amp;gp=0.jpg" alt=""></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118112102.png" alt=""></p><blockquote><p>对于个精简的OS,rootfs可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p></blockquote><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载 。</p><pre><code class="hljs shell">pi@raspbian:~$ docker pull redisUsing default tag: latestlatest: Pulling from library/redisf8be76fcf206: Already exists 10ca116bc5c3: Pull complete 8aa044f70158: Pull complete c9ee276a1a0f: Pull complete 8954c3738673: Pull complete 082886f56848: Pull complete Digest: sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494Status: Downloaded newer image for redis:latestdocker.io/library/redis:latest</code></pre><p><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/1222.png" alt=""></p><p>查看镜像分层的方式可以通过<strong>docker image inspect </strong>命令</p><pre><code class="hljs shell">pi@raspbian:~$ docker image inspect redis[    &#123;        &quot;Id&quot;: &quot;sha256:aab98baa141a5336da8748325b8ef41bb387276bc8215b32070f38c27de20733&quot;,        &quot;RepoTags&quot;: [            &quot;redis:latest&quot;        ],        &quot;RepoDigests&quot;: [            &quot;redis@sha256:0f97c1c9daf5b69b93390ccbe8d3e2971617ec4801fd0882c72bf7cad3a13494&quot;        ],        &quot;Parent&quot;: &quot;&quot;,        &quot;Comment&quot;: &quot;&quot;,        &quot;Created&quot;: &quot;2021-01-13T06:05:21.619263128Z&quot;,        &quot;Container&quot;: &quot;7c9310c3295be6022a73a546d41a7ad89fa09e8502ee43cc0d7df2c9681e2b44&quot;,        &quot;ContainerConfig&quot;: &#123;            &quot;Hostname&quot;: &quot;7c9310c3295b&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;6379/tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,                &quot;GOSU_VERSION=1.12&quot;,                &quot;REDIS_VERSION=6.0.10&quot;,                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.10.tar.gz&quot;,                &quot;REDIS_DOWNLOAD_SHA=79bbb894f9dceb33ca699ee3ca4a4e1228be7fb5547aeb2f99d921e86c1285bd&quot;            ],            &quot;Cmd&quot;: [                &quot;/bin/sh&quot;,                &quot;-c&quot;,                &quot;#(nop) &quot;,                &quot;CMD [\&quot;redis-server\&quot;]&quot;            ],            &quot;Image&quot;: &quot;sha256:047d03cf5cdd81af3dd04d9ca945f956afec58fab4028bbd4cf24f561eae8c20&quot;,            &quot;Volumes&quot;: &#123;                &quot;/data&quot;: &#123;&#125;            &#125;,            &quot;WorkingDir&quot;: &quot;/data&quot;,            &quot;Entrypoint&quot;: [                &quot;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;&#125;        &#125;,        &quot;DockerVersion&quot;: &quot;19.03.12&quot;,        &quot;Author&quot;: &quot;&quot;,        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;6379/tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,                &quot;GOSU_VERSION=1.12&quot;,                &quot;REDIS_VERSION=6.0.10&quot;,                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.10.tar.gz&quot;,                &quot;REDIS_DOWNLOAD_SHA=79bbb894f9dceb33ca699ee3ca4a4e1228be7fb5547aeb2f99d921e86c1285bd&quot;            ],            &quot;Cmd&quot;: [                &quot;redis-server&quot;            ],            &quot;Image&quot;: &quot;sha256:047d03cf5cdd81af3dd04d9ca945f956afec58fab4028bbd4cf24f561eae8c20&quot;,            &quot;Volumes&quot;: &#123;                &quot;/data&quot;: &#123;&#125;            &#125;,            &quot;WorkingDir&quot;: &quot;/data&quot;,            &quot;Entrypoint&quot;: [                &quot;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: null        &#125;,        &quot;Architecture&quot;: &quot;arm64&quot;,        &quot;Os&quot;: &quot;linux&quot;,        &quot;Size&quot;: 98563933,        &quot;VirtualSize&quot;: 98563933,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/8956154e500c52ffc3685660afda4a8cc58237d452eacb0cebabab49ed0b8081/diff:/var/lib/docker/overlay2/957892645b91290509180c7f3619c89ea140ee71f38a9bb6b00098784f3ff640/diff:/var/lib/docker/overlay2/0ea446714060db67ba0c18c012a8234a3015314e1a73ed4a9f9963a0d3635063/diff:/var/lib/docker/overlay2/aa9cc057f7ae7bb7655396dbd69b9c7c22f3124695f1e8640a7554896e9ecd6a/diff:/var/lib/docker/overlay2/843fddc80540357e3e639e8cb7cccbb9512354b70cfe10cee3ed3123dbaed53a/diff&quot;,                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/09b7e18ab5dd846f2c0c7a34930d87063daa356798e6716902bd98c8a96f1906/merged&quot;,                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/09b7e18ab5dd846f2c0c7a34930d87063daa356798e6716902bd98c8a96f1906/diff&quot;,                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/09b7e18ab5dd846f2c0c7a34930d87063daa356798e6716902bd98c8a96f1906/work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;RootFS&quot;: &#123;            &quot;Type&quot;: &quot;layers&quot;,            &quot;Layers&quot;: [                &quot;sha256:5c4f3d84264daaff85b2f005a4c295693e48c0e9c3ae76e64a7f3914e94e583b&quot;,                &quot;sha256:3a812f593e11f6ad98eae74e75a9fe026265d913e9cddc2478e966169e6e9040&quot;,                &quot;sha256:34ec83b8d3276d5396b2b987f169e3ee22c25c21a701c2228cb7cbcb09f33ee6&quot;,                &quot;sha256:4bf30474a6f6b17a5aa86cd8578a8bbd1ab6507bb1ca0096498811647dc8accc&quot;,                &quot;sha256:b195ac169cf01ef7e5342d1cdbe506123584bcf2a3c1da48401adf92c2dfaecd&quot;,                &quot;sha256:693285e577b858ea1cd2ad86bfaca34eac441f2be427131c5e676ad3d69cb5ef&quot;            ]        &#125;,        &quot;Metadata&quot;: &#123;            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;    &#125;]</code></pre><p><strong>理解：</strong></p><blockquote><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创健第三个镜像层该像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p></blockquote><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118113254.png" alt=""></p><blockquote><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p></blockquote><p> <img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118113306.png" alt=""></p><p>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118113519.png" alt=""></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层<br>和CoW [1]。</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合井，对外提供统一的视图。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118115410.png" alt=""></p><p><strong>特点</strong></p><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20210118115520.png" alt=""></p><p>如何提交一个镜像</p><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令和git原理类似</span>docker commit 提交容器成为一个新的副本docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</code></pre><p><strong>实战测试</strong></p><pre><code class="hljs shell">pi@raspbian:~$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEredis         latest    aab98baa141a   4 days ago      98.6MBtomcat        latest    688bd6a32df3   5 days ago      639MBnginx         latest    9b016c5aa4e8   5 days ago      126MBcentos        latest    a0477e85b8ae   5 weeks ago     249MBhello-world   latest    a29f45ccde2a   12 months ago   9.14kB</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1、启动一个默认的tomcat</span>docker run -it -p 8080:8080 tomcat /bin/bash</code></pre><pre><code class="hljs shell">pi@raspbian:~$ curl localhost:8080curl: (56) Recv failure: Connection reset by peer</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 2、发现这个默认的tomcat 是没有webapps应用，官方的镜像默认webapps下面是没有文件的！拷贝文件进去</span></code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker run -it -p 8080:8080 tomcat /bin/bashroot@31df0aa6fb9e:/usr/local/tomcat# lsBUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  workroot@31df0aa6fb9e:/usr/local/tomcat# cd webappsroot@31df0aa6fb9e:/usr/local/tomcat/webapps# lsroot@31df0aa6fb9e:/usr/local/tomcat/webapps# cd ..root@31df0aa6fb9e:/usr/local/tomcat# cp -r webapps.dist/* webappsroot@31df0aa6fb9e:/usr/local/tomcat# exitexitpi@raspbian:~$ docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMESpi@raspbian:~$ docker run -d -p 8080:8080 tomcat52a80307a7fcea44519a75a452369adbdb53cc91b35cc6d0e614f02b2c23db4cpi@raspbian:~$ curl localhost:8080&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/9.0.41&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 3、将操作过的容器通过commit调教为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像。</span>docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</code></pre><pre><code class="hljs shell">pi@raspbian:~$ docker commit -m=&quot;kuangshen666&quot; -a=&quot;baixf&quot; 52a80307a7fc tomcat:1.0sha256:83ac74acd5e011fa39241a5d1c4c43ad65cc9b6a68d5cbbac96db14917e6e000pi@raspbian:~$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEtomcat        1.0       83ac74acd5e0   17 seconds ago   639MBredis         latest    aab98baa141a   4 days ago       98.6MBtomcat        latest    688bd6a32df3   5 days ago       639MBnginx         latest    9b016c5aa4e8   6 days ago       126MBcentos        latest    a0477e85b8ae   5 weeks ago      249MBhello-world   latest    a29f45ccde2a   12 months ago    9.14kB</code></pre><p>如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用<strong>虚拟机的快照</strong>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">狂神说B站视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.runoob.com/docker/docker-tutorial.html">学习docker</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://labs.play-with-docker.com/">使用docker</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>狂神</tag>
      
      <tag>nginx</tag>
      
      <tag>容器</tag>
      
      <tag>镜像</tag>
      
      <tag>tomcat</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国程序员容易发音错误的单词</title>
    <link href="/2021/01/15/%E6%9D%82%E8%B0%88/%E4%B8%AD%E5%9B%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AE%B9%E6%98%93%E5%8F%91%E9%9F%B3%E9%94%99%E8%AF%AF%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <url>/2021/01/15/%E6%9D%82%E8%B0%88/%E4%B8%AD%E5%9B%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AE%B9%E6%98%93%E5%8F%91%E9%9F%B3%E9%94%99%E8%AF%AF%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="Words-Commonly-Mispronounced-by-Chinese-Programmers"><a href="#Words-Commonly-Mispronounced-by-Chinese-Programmers" class="headerlink" title="Words Commonly Mispronounced by Chinese Programmers"></a>Words Commonly Mispronounced by Chinese Programmers</h3><h3 id="中国程序员容易发音错误的单词-点击🔊收听正确读音"><a href="#中国程序员容易发音错误的单词-点击🔊收听正确读音" class="headerlink" title="中国程序员容易发音错误的单词(点击🔊收听正确读音)"></a>中国程序员容易发音错误的单词(点击🔊收听正确读音)</h3><div class="table-container"><table><thead><tr><th>单词</th><th>正确发音（英音）</th><th>正确发音（美音）</th><th>错误发音</th></tr></thead><tbody><tr><td>access</td><td><a href="https://dict.youdao.com/dictvoice?audio=access&amp;type=1">🔊</a>  /‘ækses/</td><td><a href="https://dict.youdao.com/dictvoice?audio=access&amp;type=2">🔊</a>  /ˈækses/</td><td>❌ /ək’ses/</td></tr><tr><td>Adobe</td><td><a href="https://dict.youdao.com/dictvoice?audio=Adobe&amp;type=1">🔊</a>  /ə’dəʊbi/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Adobe&amp;type=2">🔊</a>  /ə’dəʊbi/</td><td>❌ /əˈdub/</td></tr><tr><td>admin</td><td><a href="https://dict.youdao.com/dictvoice?audio=admin&amp;type=1">🔊</a>  /‘ædmɪn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=admin&amp;type=2">🔊</a>  /ˈædmɪn/</td><td>❌ /ɜ:d’mɪn/</td></tr><tr><td>adversarial</td><td><a href="https://dict.youdao.com/dictvoice?audio=adversarial&amp;type=1">🔊</a>  /ˌædvəˈseəriəl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=adversarial&amp;type=2">🔊</a>   /ˌædvərˈseriəl/</td><td>❌ /ədˈvɜːrsəriəl/</td></tr><tr><td>agile</td><td><a href="https://dict.youdao.com/dictvoice?audio=agile&amp;type=1">🔊</a>  /‘ædʒaɪl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=agile&amp;type=2">🔊</a>  /ˈædʒl/</td><td>❌ /ə’dʒaɪl/</td></tr><tr><td>amazon</td><td><a href="https://dict.youdao.com/dictvoice?audio=amazon&amp;type=1">🔊</a>  /‘æməzən/</td><td><a href="https://dict.youdao.com/dictvoice?audio=amazon&amp;type=2">🔊</a>  /ˈæməzɑːn/</td><td>❌ /‘əmeizən/ /ə’meizən/</td></tr><tr><td>analogy</td><td><a href="https://dict.youdao.com/dictvoice?audio=analogy&amp;type=1">🔊</a>  /əˈnælədʒi/</td><td><a href="https://dict.youdao.com/dictvoice?audio=analogy&amp;type=2">🔊</a>  /əˈnælədʒi/</td><td>❌ /ænə’lɒdʒi/</td></tr><tr><td>Angular</td><td><a href="https://dict.youdao.com/dictvoice?audio=Angular&amp;type=1">🔊</a>  /‘æŋgjʊlə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Angular&amp;type=2">🔊</a>  /ˈæŋɡjələr/</td><td>❌ /‘æŋɡələ/ /‘æŋdʒʌlə/</td></tr><tr><td>AJAX</td><td><a href="https://dict.youdao.com/dictvoice?audio=AJAX&amp;type=1">🔊</a>  /‘eidʒæks/</td><td><a href="https://dict.youdao.com/dictvoice?audio=AJAX&amp;type=2">🔊</a>  /‘eidʒæks/</td><td>❌ /ə’dʒʌks/</td></tr><tr><td>alias</td><td><a href="https://dict.youdao.com/dictvoice?audio=alias&amp;type=1">🔊</a>  /ˈeɪliəs/</td><td><a href="https://dict.youdao.com/dictvoice?audio=alias&amp;type=2">🔊</a>  /ˈeɪliəs/</td><td>❌ /ə’lais/</td></tr><tr><td>Apache</td><td><a href="https://dict.youdao.com/dictvoice?audio=Apache&amp;type=1">🔊</a>  /ə’pætʃɪ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Apache&amp;type=2">🔊</a>  /əˈpætʃi/</td><td>❌ /ʌpʌtʃ/</td></tr><tr><td>app</td><td><a href="https://dict.youdao.com/dictvoice?audio=app&amp;type=1">🔊</a>  /æp/</td><td><a href="https://dict.youdao.com/dictvoice?audio=app&amp;type=2">🔊</a>  /æp/</td><td>❌ /eipi’pi/</td></tr><tr><td>archive</td><td><a href="https://dict.youdao.com/dictvoice?audio=archive&amp;type=1">🔊</a>  /‘ɑːkaɪv/</td><td><a href="https://dict.youdao.com/dictvoice?audio=archive&amp;type=2">🔊</a>  /‘ɑːkaɪv/</td><td>❌ /‘ətʃɪv/</td></tr><tr><td>array</td><td><a href="https://dict.youdao.com/dictvoice?audio=array&amp;type=1">🔊</a>  /ə’rei/</td><td><a href="https://dict.youdao.com/dictvoice?audio=array&amp;type=2">🔊</a>  /əˈreɪ/</td><td>❌ /æ’rei/</td></tr><tr><td>ASCII</td><td><a href="https://dict.youdao.com/dictvoice?audio=ascii&amp;type=1">🔊</a>  /‘æski/</td><td><a href="https://dict.youdao.com/dictvoice?audio=ascii&amp;type=2">🔊</a>  /ˈæski/</td><td>❌ /ɑːsk/</td></tr><tr><td>aspect</td><td><a href="https://dict.youdao.com/dictvoice?audio=aspect&amp;type=1">🔊</a>  /‘æspekt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=aspect&amp;type=2">🔊</a>  /ˈæspekt/</td><td>❌ /ə’spekt/</td></tr><tr><td>avatar</td><td><a href="https://dict.youdao.com/dictvoice?audio=avatar&amp;type=1">🔊</a>  /‘ævətɑː/</td><td><a href="https://dict.youdao.com/dictvoice?audio=avatar&amp;type=2">🔊</a>  /ˈævətɑːr/</td><td>❌ /ə’vʌtɑ/</td></tr><tr><td>Azure</td><td><a href="https://dict.youdao.com/dictvoice?audio=azure&amp;type=1">🔊</a>  /‘æʒə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=azure&amp;type=2">🔊</a>  /ˈæʒər/</td><td>❌ /ˈæzʊʒə/</td></tr><tr><td>bind</td><td><a href="https://dict.youdao.com/dictvoice?audio=bind&amp;type=1">🔊</a>  /baɪnd/</td><td><a href="https://dict.youdao.com/dictvoice?audio=bind&amp;type=2">🔊</a>  /baɪnd/</td><td>❌ /bɪnd/</td></tr><tr><td>cache</td><td><a href="https://dict.youdao.com/dictvoice?audio=cache&amp;type=1">🔊</a>  /kæʃ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=cache&amp;type=2">🔊</a>  /kæʃ/</td><td>❌ /kætʃ/</td></tr><tr><td>clang</td><td><a href="https://dict.youdao.com/dictvoice?audio=clang&amp;type=1">🔊</a>  /klæŋ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=clang&amp;type=2">🔊</a>  /klæŋ/</td><td>❌ /sɪlæŋ/</td></tr><tr><td>daemon</td><td><a href="https://dict.youdao.com/dictvoice?audio=Daemon&amp;type=1">🔊</a>  /‘diːmən/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Daemon&amp;type=2">🔊</a>  /ˈdiːmən/</td><td>❌ /dæmən/</td></tr><tr><td>debt</td><td><a href="https://dict.youdao.com/dictvoice?audio=debt&amp;type=1">🔊</a>  /det/</td><td><a href="https://dict.youdao.com/dictvoice?audio=debt&amp;type=2">🔊</a>  /det/</td><td>❌ /de’bit/</td></tr><tr><td>deny</td><td><a href="https://dict.youdao.com/dictvoice?audio=deny&amp;type=1">🔊</a>  /dɪ’naɪ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=deny&amp;type=2">🔊</a>  /dɪˈnaɪ/</td><td>❌ /‘dæni/</td></tr><tr><td>deprecate</td><td><a href="https://dict.youdao.com/dictvoice?audio=deprecate&amp;type=1">🔊</a> /ˈdeprəkeɪt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=deprecate&amp;type=2">🔊</a> /ˈdeprəkeɪt/</td><td></td></tr><tr><td>deque</td><td><a href="https://dict.youdao.com/dictvoice?audio=deque&amp;type=1">🔊</a>  /‘dek/</td><td><a href="https://dict.youdao.com/dictvoice?audio=deque&amp;type=2">🔊</a>  /dɛk/</td><td>❌ /di’kju/</td></tr><tr><td>digest</td><td><a href="https://dict.youdao.com/dictvoice?audio=digest&amp;type=1">🔊</a>  n. /‘dɑɪdʒɛst/ v. /dɑɪ’dʒɛst/</td><td><a href="https://dict.youdao.com/dictvoice?audio=digest&amp;type=2">🔊</a>  /daɪˈdʒest,dɪˈdʒest/</td><td>❌ /‘dɪgɛst/</td></tr><tr><td>Dijkstra</td><td><a href="https://upload.wikimedia.org/wikipedia/commons/8/85/Dijkstra.ogg">🔊</a>  Dutch:/ˈdɛikstra/ English:/ˈdaɪkstrə/</td><td><a href="https://upload.wikimedia.org/wikipedia/commons/8/85/Dijkstra.ogg">🔊</a></td><td></td></tr><tr><td>Django</td><td><a href="https://dict.youdao.com/dictvoice?audio=Django&amp;type=1">🔊</a>  /ˈdʒæŋɡoʊ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Django&amp;type=2">🔊</a>  /ˈdʒæŋɡoʊ/</td><td>❌ /diˈdʒæŋɡoʊ/</td></tr><tr><td>doc</td><td><a href="https://dict.youdao.com/dictvoice?audio=doc&amp;type=1">🔊</a>  /dɒk/</td><td><a href="https://dict.youdao.com/dictvoice?audio=doc&amp;type=2">🔊</a>  /dɒk/</td><td>❌ /daʊk/</td></tr><tr><td>epoch</td><td><a href="https://dict.youdao.com/dictvoice?audio=epoch&amp;type=1">🔊</a>  /ˈiːpɒk/</td><td><a href="https://dict.youdao.com/dictvoice?audio=epoch&amp;type=2">🔊</a>  /ˈepək/</td><td>❌ /‘ɛpətʃ/</td></tr><tr><td>execute</td><td><a href="https://dict.youdao.com/dictvoice?audio=execute&amp;type=1">🔊</a> /ˈeksɪkjuːt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=execute&amp;type=2">🔊</a> /ˈeksɪkjuːt/</td><td></td></tr><tr><td>executor</td><td><a href="https://dict.youdao.com/dictvoice?audio=executor&amp;type=1">🔊</a> /ɪɡˈzekjətə(r)/</td><td><a href="https://dict.youdao.com/dictvoice?audio=executor&amp;type=2">🔊</a> /ɪɡˈzekjətər/</td><td></td></tr><tr><td>event</td><td><a href="https://dict.youdao.com/dictvoice?audio=event&amp;type=1">🔊</a>  /ɪ’vent/</td><td><a href="https://dict.youdao.com/dictvoice?audio=event&amp;type=2">🔊</a>  /ɪˈvent/</td><td>❌ /‘ɪvənt/</td></tr><tr><td>facade</td><td><a href="https://dict.youdao.com/dictvoice?audio=facade&amp;type=1">🔊</a>  /fə’sɑːd/</td><td><a href="https://dict.youdao.com/dictvoice?audio=facade&amp;type=2">🔊</a>  /fəˈsɑːd/</td><td>❌ /‘feikeid/</td></tr><tr><td>fedora</td><td><a href="https://dict.youdao.com/dictvoice?audio=fedora&amp;type=1">🔊</a>  /fɪ’dɔːrə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=fedora&amp;type=2">🔊</a>  /fɪˈdɔːrə/</td><td>❌ /‘fedərə/</td></tr><tr><td>format</td><td><a href="https://dict.youdao.com/dictvoice?audio=format&amp;type=1">🔊</a>  /‘fɔːmæt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=format&amp;type=2">🔊</a>  /ˈfɔːrmæt/</td><td>❌ /fɔ’mæt/</td></tr><tr><td>gauge</td><td><a href="https://dict.youdao.com/dictvoice?audio=gauge&amp;type=1">🔊</a> /ɡeɪdʒ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=gauge&amp;type=2">🔊</a> /ɡeɪdʒ/</td><td>❌ /ɡɑudʒ/</td></tr><tr><td>Git</td><td><a href="https://dict.youdao.com/dictvoice?audio=git&amp;type=1">🔊</a>  /ɡɪt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=git&amp;type=2">🔊</a>  /ɡɪt/</td><td>❌ /dʒɪt/</td></tr><tr><td>GNU</td><td><a href="https://upload.wikimedia.org/wikipedia/commons/2/24/En-gnu.ogg">🔊</a>  /gnu:/</td><td><a href="https://upload.wikimedia.org/wikipedia/commons/2/24/En-gnu.ogg">🔊</a>  /nuː,njuː/</td><td></td></tr><tr><td>Grafana</td><td><a href="http://www.howtopronounce.cc/file/e204a97ed1e440c5ab15ea0117beb955.mp3">🔊</a>   /grəˈfɑːnˌɑː/</td><td><a href="http://www.howtopronounce.cc/file/e204a97ed1e440c5ab15ea0117beb955.mp3">🔊</a>   /grəˈfɑːnˌɑː/</td><td></td></tr><tr><td>GraphQL</td><td><a href="https://dict.youdao.com/dictvoice?audio=GraphQL&amp;type=1">🔊</a>  /græf kju ɛl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=GraphQL&amp;type=2">🔊</a>  /græf kju ɛl/</td><td>❌ /dʒɪgræf kju ɛl/</td></tr><tr><td>GUI</td><td><a href="https://dict.youdao.com/dictvoice?audio={GUI}&amp;type=1">🔊</a>  /ˈɡu:i/</td><td><a href="https://dict.youdao.com/dictvoice?audio={GUI}&amp;type=2">🔊</a>  /ˈɡu:i/</td><td></td></tr><tr><td>Haskell</td><td><a href="https://dict.youdao.com/dictvoice?audio=haskell&amp;type=1">🔊</a>  /ˈhæskəl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=haskell&amp;type=2">🔊</a>  /ˈhæskəl/</td><td>❌ /hæˈskəl/</td></tr><tr><td>height</td><td><a href="https://dict.youdao.com/dictvoice?audio=height&amp;type=1">🔊</a>  /haɪt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=height&amp;type=2">🔊</a>  /haɪt/</td><td>❌ /heɪt/</td></tr><tr><td>hidden</td><td><a href="https://dict.youdao.com/dictvoice?audio=hidden&amp;type=1">🔊</a>  /‘hɪdn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=hidden&amp;type=2">🔊</a>  /ˈhɪdn/</td><td>❌ /‘haɪdn/</td></tr><tr><td>image</td><td><a href="https://dict.youdao.com/dictvoice?audio=image&amp;type=1">🔊</a>  /‘ɪmɪdʒ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=image&amp;type=2">🔊</a>  /ˈɪmɪdʒ/</td><td>❌ /ɪ’meɪdʒ/</td></tr><tr><td>implement</td><td><a href="https://dict.youdao.com/dictvoice?audio=implement&amp;type=1">🔊</a>  /‘ɪmplɪm(ə)nt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=implement&amp;type=2">🔊</a>  /ˈɪmplɪmənt/ /ˈɪmpləˌment/</td><td>❌ /ɪm’plem(ə)nt/</td></tr><tr><td>integer</td><td><a href="https://dict.youdao.com/dictvoice?audio=integer&amp;type=1">🔊</a>  /‘ɪntɪdʒə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=integer&amp;type=2">🔊</a>  /ˈɪntɪdʒər/</td><td>❌ /ˈɪntaɪgə/</td></tr><tr><td>issue</td><td><a href="https://dict.youdao.com/dictvoice?audio=issue&amp;type=1">🔊</a>  /‘ɪʃuː/</td><td><a href="https://dict.youdao.com/dictvoice?audio=issue&amp;type=2">🔊</a>  /ˈɪʃuː/</td><td>❌ /ˈaɪʃuː/</td></tr><tr><td>Java</td><td><a href="https://dict.youdao.com/dictvoice?audio=java&amp;type=1">🔊</a>  /‘dʒɑːvə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=java&amp;type=2">🔊</a>  /ˈdʒɑːvə/</td><td>❌ /‘dʒɑːvɑː/</td></tr><tr><td>jpg</td><td><a href="https://dict.youdao.com/dictvoice?audio=JPEG&amp;type=1">🔊</a>  /‘dʒeɪpeɡ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=JPEG&amp;type=2">🔊</a>  /‘dʒeɪpeɡ/</td><td>❌ /ˈdʒeɪˈpi:ˈdʒiː/</td></tr><tr><td>key</td><td><a href="https://dict.youdao.com/dictvoice?audio=key&amp;type=1">🔊</a>  /kiː/</td><td><a href="https://dict.youdao.com/dictvoice?audio=key&amp;type=2">🔊</a>  /kiː/</td><td>❌ /kei/</td></tr><tr><td>Kubernetes*</td><td><a href="https://dict.youdao.com/dictvoice?audio=Kubernetes&amp;type=2">🔊</a>  /kubз’netɪs/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Kubernetes&amp;type=2">🔊</a>  /kuːbə˞’netiz/</td><td></td></tr><tr><td>lambda</td><td><a href="https://dict.youdao.com/dictvoice?audio=lambda&amp;type=1">🔊</a>  /ˈlæmdə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=lambda&amp;type=2">🔊</a>  /ˈlæmdə/</td><td>❌ /ˈlɒŋmdɑ/</td></tr><tr><td>linear</td><td><a href="https://dict.youdao.com/dictvoice?audio=linear&amp;type=1">🔊</a>  /‘lɪnɪə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=linear&amp;type=2">🔊</a>  /ˈlɪniər/</td><td>❌ /‘laɪə/</td></tr><tr><td>Linux</td><td><a href="https://dict.youdao.com/dictvoice?audio=linux&amp;type=1">🔊</a>  /‘lɪnəks/</td><td><a href="https://dict.youdao.com/dictvoice?audio=linux&amp;type=2">🔊</a>  /ˈlaɪnəks/ /ˈlɪnəks/</td><td>❌ /ˈlɪnʌks/ /ˈlɪnjuːks/</td></tr><tr><td>locale</td><td><a href="https://dict.youdao.com/dictvoice?audio=locale&amp;type=1">🔊</a>  /ləʊ’kɑːl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=locale&amp;type=2">🔊</a>  /loʊˈkæl/</td><td>❌ /ˈloʊk(ə)l/</td></tr><tr><td>Lucene</td><td><a href="https://dict.youdao.com/dictvoice?audio=lucene&amp;type=1">🔊</a>  /lu’siːn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=lucene&amp;type=2">🔊</a>  /lu’siːn/</td><td>❌ /‘lu:sən/</td></tr><tr><td>main</td><td><a href="https://dict.youdao.com/dictvoice?audio=main&amp;type=1">🔊</a>  /meɪn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=main&amp;type=2">🔊</a>  /meɪn/</td><td>❌ /mɪn/</td></tr><tr><td>margin</td><td><a href="https://dict.youdao.com/dictvoice?audio=margin&amp;type=1">🔊</a>  /‘mɑːdʒɪn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=margin&amp;type=2">🔊</a>  /ˈmɑːrdʒɪn/</td><td>❌ /‘mʌgɪn/</td></tr><tr><td>matrix</td><td><a href="https://dict.youdao.com/dictvoice?audio=matrix&amp;type=1">🔊</a>  /ˈmeɪtrɪks/</td><td><a href="https://dict.youdao.com/dictvoice?audio=matrix&amp;type=2">🔊</a>  /ˈmeɪtrɪks/</td><td>❌ /ˈmɑ:trɪks/</td></tr><tr><td>maven</td><td><a href="https://dict.youdao.com/dictvoice?audio=maven&amp;type=1">🔊</a>  /‘meɪvn/</td><td><a href="https://dict.youdao.com/dictvoice?audio=maven&amp;type=2">🔊</a>  /ˈmeɪvn/</td><td>❌ /‘maːvn/</td></tr><tr><td>Microsoft</td><td><a href="https://dict.youdao.com/dictvoice?audio=Microsoft&amp;type=1">🔊</a>  /‘maikrəusɔft/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Microsoft&amp;type=2">🔊</a>  /ˈmaɪkrəsɔːft/</td><td>❌ /‘mikrəusɔft/</td></tr><tr><td>miscellaneous</td><td><a href="https://dict.youdao.com/dictvoice?audio=miscellaneous&amp;type=1">🔊</a> /ˌmɪsəˈleɪniəs/</td><td><a href="https://dict.youdao.com/dictvoice?audio=miscellaneous&amp;type=2">🔊</a> /ˌmɪsəˈleɪniəs/</td><td></td></tr><tr><td>module</td><td><a href="https://dict.youdao.com/dictvoice?audio=module&amp;type=1">🔊</a>  /‘mɒdjuːl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=module&amp;type=2">🔊</a>  /ˈmɑːdʒuːl/</td><td>❌ /‘məʊdl/</td></tr><tr><td>nginx</td><td>Engine X</td><td>Engine X</td><td></td></tr><tr><td>null</td><td><a href="https://dict.youdao.com/dictvoice?audio=null&amp;type=1">🔊</a>  /nʌl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=null&amp;type=2">🔊</a>  /nʌl/</td><td>❌ /naʊ/</td></tr><tr><td>obsolete</td><td><a href="https://dict.youdao.com/dictvoice?audio=obsolete&amp;type=1">🔊</a> /ˈɒbsəliːt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=obsolete&amp;type=2">🔊</a> /ˌɑːbsəˈliːt/</td><td></td></tr><tr><td>OS X</td><td>OS ten</td><td>OS ten</td><td>❌ /ɔs eks/</td></tr><tr><td>phantom</td><td><a href="https://dict.youdao.com/dictvoice?audio=phantom&amp;type=1">🔊</a>  /‘fæntəm/</td><td><a href="https://dict.youdao.com/dictvoice?audio=phantom&amp;type=2">🔊</a>  /ˈfæntəm/</td><td>❌ /‘pæntəm/</td></tr><tr><td>parameter</td><td><a href="https://dict.youdao.com/dictvoice?audio=parameter&amp;type=1">🔊</a>  /pə’ræmɪtə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=parameter&amp;type=2">🔊</a>  /pəˈræmɪtər/</td><td>❌ /‘pærəmɪtə/</td></tr><tr><td>privilege</td><td><a href="https://dict.youdao.com/dictvoice?audio=privilege&amp;type=1">🔊</a>  /‘prɪvəlɪdʒ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=privilege&amp;type=2">🔊</a>  /ˈprɪvəlɪdʒ/</td><td>❌ /‘prɪvɪlɪdʒ/</td></tr><tr><td>Prometheus</td><td><a href="https://dict.youdao.com/dictvoice?audio=prometheus&amp;type=1">🔊</a>  /prə-ˈmē-thē-əs/</td><td><a href="https://dict.youdao.com/dictvoice?audio=prometheus&amp;type=2">🔊</a>  /pro’miθɪəs/</td><td></td></tr><tr><td>putty</td><td><a href="https://dict.youdao.com/dictvoice?audio=putty&amp;type=1">🔊</a>  /ˈpʌti/</td><td><a href="https://dict.youdao.com/dictvoice?audio=putty&amp;type=2">🔊</a>  /ˈpʌti/</td><td>❌ /ˈpuːti/</td></tr><tr><td>Qt</td><td><a href="https://dict.youdao.com/dictvoice?audio=cute&amp;type=1">🔊</a>  /kjuːt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=cute&amp;type=2">🔊</a>  /kjuːt/</td><td></td></tr><tr><td>query</td><td><a href="https://dict.youdao.com/dictvoice?audio=query&amp;type=1">🔊</a>  /‘kwɪəri/</td><td><a href="https://dict.youdao.com/dictvoice?audio=query&amp;type=2">🔊</a>  /ˈkwɪri/</td><td>❌ /‘kwaɪri/</td></tr><tr><td>Realm</td><td><a href="https://dict.youdao.com/dictvoice?audio=realm&amp;type=1">🔊</a>  /relm/</td><td><a href="https://dict.youdao.com/dictvoice?audio=realm&amp;type=2">🔊</a>  /relm/</td><td>❌ /riəlm/</td></tr><tr><td>reconcile</td><td><a href="https://dict.youdao.com/dictvoice?audio=reconcile&amp;type=1">🔊</a> /ˈrekənsaɪl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=reconcile&amp;type=2">🔊</a> /ˈrekənsaɪl/</td><td></td></tr><tr><td>Redux</td><td><a href="https://dict.youdao.com/dictvoice?audio=redux&amp;type=1">🔊</a>  /ri’dʌks/</td><td><a href="https://dict.youdao.com/dictvoice?audio=redux&amp;type=2">🔊</a>  /ri’dʌks/</td><td>❌ /‘ridju:ks/</td></tr><tr><td>resume</td><td><a href="https://dict.youdao.com/dictvoice?audio=resume&amp;type=1">🔊</a>   /rɪ’zju:m/</td><td><a href="https://dict.youdao.com/dictvoice?audio=resume&amp;type=2">🔊</a>  /rɪˈzuːm/</td><td>❌  /rɪ’sju:m/</td></tr><tr><td>resolved</td><td><a href="https://dict.youdao.com/dictvoice?audio=resolved&amp;type=1">🔊</a>  /rɪ’zɒlvd/</td><td><a href="https://dict.youdao.com/dictvoice?audio=resolved&amp;type=2">🔊</a>  /rɪˈzɑːlvd/</td><td>❌ /rɪ’səʊvd/</td></tr><tr><td>resort</td><td><a href="https://dict.youdao.com/dictvoice?audio=resort&amp;type=1">🔊</a>  /rɪˈzɔ:t/</td><td><a href="https://dict.youdao.com/dictvoice?audio=resort&amp;type=2">🔊</a>  /rɪˈzɔːrt/</td><td>❌ /rɪˈsɔ:t/</td></tr><tr><td>retina</td><td><a href="https://dict.youdao.com/dictvoice?audio=retina&amp;type=1">🔊</a>  /‘retɪnə/</td><td><a href="https://dict.youdao.com/dictvoice?audio=retina&amp;type=2">🔊</a>  /ˈretɪnə/</td><td>❌ /ri’tina/</td></tr><tr><td>route</td><td><a href="https://dict.youdao.com/dictvoice?audio=route&amp;type=1">🔊</a>  /ruːt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=route&amp;type=2">🔊</a>  /ruːt,raʊt/</td><td>❌ /rəʊt/</td></tr><tr><td>San Jose</td><td><a href="https://dict.youdao.com/dictvoice?audio=san%20jose&amp;type=1">🔊</a>  /sænhəu’zei/</td><td><a href="https://dict.youdao.com/dictvoice?audio=san%20jose&amp;type=2">🔊</a>  /sænhəu’zei/</td><td>❌ /sæn’ju:s/</td></tr><tr><td>safari</td><td><a href="https://dict.youdao.com/dictvoice?audio=safari&amp;type=1">🔊</a>  /sə’fɑːrɪ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=safari&amp;type=2">🔊</a>  /səˈfɑːri/</td><td>❌ /sæfərɪ/</td></tr><tr><td>scheme</td><td><a href="https://dict.youdao.com/dictvoice?audio=scheme&amp;type=1">🔊</a>  /skiːm/</td><td><a href="https://dict.youdao.com/dictvoice?audio=scheme&amp;type=2">🔊</a>  /skiːm/</td><td>❌ /s’kæmə/</td></tr><tr><td>scala</td><td><a href="https://dict.youdao.com/dictvoice?audio=scala&amp;type=1">🔊</a>  /ˈskɑːlɑ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=scala&amp;type=2">🔊</a>  /ˈskɑːlɑ/</td><td>❌ /ˈskæːlɑ/</td></tr><tr><td>segue</td><td><a href="https://dict.youdao.com/dictvoice?audio=segue&amp;type=1">🔊</a>  /‘sɛɡwe/</td><td><a href="https://dict.youdao.com/dictvoice?audio=segue&amp;type=2">🔊</a>  /ˈseɡweɪ/</td><td>❌ /se’dʒ/</td></tr><tr><td>SQL</td><td>/ˈsiːkwəl/ /ˈesˈkjuːˈel/</td><td>/ˈsiːkwəl/ /ˈesˈkjuːˈel/</td><td></td></tr><tr><td>sudo</td><td>/‘suːduː/</td><td>/‘suːduː/</td><td></td></tr><tr><td>suite</td><td><a href="https://dict.youdao.com/dictvoice?audio=suite&amp;type=1">🔊</a>  /swiːt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=suite&amp;type=2">🔊</a>  /swiːt/</td><td>❌ /sjuːt/</td></tr><tr><td>thymeleaf</td><td><a href="https://dict.youdao.com/dictvoice?audio=thymeleaf&amp;type=1">🔊</a>  /ˈtaɪmˌlɪːf/</td><td><a href="https://dict.youdao.com/dictvoice?audio=thymeleaf&amp;type=2">🔊</a>  /ˈtaɪmˌlɪːf/</td><td>❌ /θiːmɪlɪːf/</td></tr><tr><td>tuple</td><td><a href="https://dict.youdao.com/dictvoice?audio=tuple&amp;type=1">🔊</a> /tjʊpəl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=tuple&amp;type=2">🔊</a> /tuːpəl/</td><td></td></tr><tr><td>typical</td><td><a href="https://dict.youdao.com/dictvoice?audio=typical&amp;type=1">🔊</a>  /‘tɪpɪkl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=typical&amp;type=2">🔊</a>  /ˈtɪpɪkl/</td><td>❌ /‘taɪpɪkəl/</td></tr><tr><td>Ubuntu</td><td><a href="http://upload.wikimedia.org/wikipedia/commons/b/b5/En-Ubuntu_pronunciation.oga">🔊</a>  /ʊ’bʊntʊ/</td><td><a href="http://upload.wikimedia.org/wikipedia/commons/b/b5/En-Ubuntu_pronunciation.oga">🔊</a>  /ʊ’bʊntʊ/</td><td>❌ /juː’bʊntʊ/</td></tr><tr><td>Vagrant</td><td><a href="https://dict.youdao.com/dictvoice?audio=Vagrant&amp;type=1">🔊</a> /ˈveɪɡrənt/</td><td><a href="https://dict.youdao.com/dictvoice?audio=Vagrant&amp;type=2">🔊</a> /ˈveɪɡrənt/</td><td>/ˈvagɹent/</td></tr><tr><td>variable</td><td><a href="https://dict.youdao.com/dictvoice?audio=variable&amp;type=1">🔊</a>  /‘veəriəbl/</td><td><a href="https://dict.youdao.com/dictvoice?audio=variable&amp;type=2">🔊</a>  /ˈveriəbl,ˈværiəbl/</td><td>❌ /və’raiəbl/</td></tr><tr><td>verbose</td><td><a href="https://dict.youdao.com/dictvoice?audio=verbose&amp;type=1">🔊</a>  /vɜːˈbəʊs/</td><td><a href="https://dict.youdao.com/dictvoice?audio=verbose&amp;type=2">🔊</a>  /vɜːrˈboʊs/</td><td>❌ /‘vɜːrboʊs/</td></tr><tr><td>vue</td><td><a href="https://dict.youdao.com/dictvoice?audio=vue&amp;type=1">🔊</a>  /v’ju:/</td><td><a href="https://dict.youdao.com/dictvoice?audio=vue&amp;type=2">🔊</a>  /v’ju:/</td><td>❌ /v’ju:i/</td></tr><tr><td>width</td><td><a href="https://dict.youdao.com/dictvoice?audio=width&amp;type=1">🔊</a>  /wɪdθ/</td><td><a href="https://dict.youdao.com/dictvoice?audio=width&amp;type=2">🔊</a>  /wɪdθ,wɪtθ/</td><td>❌ /waɪdθ/</td></tr><tr><td>YouTube</td><td><a href="https://dict.youdao.com/dictvoice?audio=youtube&amp;type=1">🔊</a>  /‘juː’tjuːb/</td><td><a href="https://dict.youdao.com/dictvoice?audio=youtube&amp;type=2">🔊</a>  /‘juː’tjuːb/</td><td>❌ /‘juː’tʊbɪ/</td></tr></tbody></table></div><h3 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h3><ul><li>当使用简名 ‘Kube’ 称呼 ‘Kubernetes’ 时, 发音则与 ‘cube’(/kjuːb/) 一致</li></ul><h3 id="其他相关链接"><a href="#其他相关链接" class="headerlink" title="其他相关链接"></a>其他相关链接</h3><ol><li>真人发音 <a href="https://www.bilibili.com/video/bv1nv411i7z3">https://www.bilibili.com/video/bv1nv411i7z3</a> (by @hailintao)</li><li>简洁的单词列表，正确读音不用再打开新网页 <a href="https://cpwp.netlify.app/">https://cpwp.netlify.app/</a> (by @antfu7)</li><li>国际音标严式记音（纽约音）<a href="https://github.com/b1f6c1c4/programming-pronunciations-en_US">https://github.com/b1f6c1c4/programming-pronunciations-en_US</a> (by @b1f6c1c4)</li></ol><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>本着简单的原则, 又为了避免程序猿们出现选择困难症, ‘正确音标’采用了最接近有道词典音频的英式 DJ 音标, 不代表其唯一性</li><li>专业在线英语词典请参考<a href="https://www.zhihu.com/question/19707759">知乎链接:在线英语词典哪个比较好?</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/19739907">https://www.zhihu.com/question/19739907</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.v2ex.com/t/131094">https://www.v2ex.com/t/131094</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.v2ex.com/t/309350">https://www.v2ex.com/t/309350</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.v2ex.com/t/63781">https://www.v2ex.com/t/63781</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.v2ex.com/t/246033">https://www.v2ex.com/t/246033</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://www.v2ex.com/t/342087">https://www.v2ex.com/t/342087</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://github.com/shimohq/chinese-programmer-wrong-pronunciation">中国程序员容易发音错误的单词</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序员</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本编程30分钟入门</title>
    <link href="/2021/01/15/Linux/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/15/Linux/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Shell脚本"><a href="#什么是Shell脚本" class="headerlink" title="什么是Shell脚本"></a>什么是Shell脚本</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>看个例子吧：</p><pre><code>#!/bin/shcd ~mkdir shell_tutcd shell_tutfor ((i=0; i&lt;10; i++)); do    touch test_$i.txtdone</code></pre><h3 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h3><ul><li>第1行：指定脚本解释器，这里是用/bin/sh做解释器的</li><li>第2行：切换到当前用户的home目录</li><li>第3行：创建一个目录shell_tut</li><li>第4行：切换到shell_tut目录</li><li>第5行：循环条件，一共循环10次</li><li>第6行：创建一个test_0…9.txt文件</li><li>第7行：循环体结束</li></ul><p>mkdir, touch都是系统自带的程序，一般在/bin或者/usr/bin目录下。for, do, done是sh脚本语言的关键字。</p><h3 id="shell和shell脚本的概念"><a href="#shell和shell脚本的概念" class="headerlink" title="shell和shell脚本的概念"></a>shell和shell脚本的概念</h3><p>shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p><p>shell脚本（shell script），是一种为shell编写的脚本程序。业界所说的shell通常都是指shell脚本，但读者朋友要知道，shell和shell script是两个不同的概念。由于习惯的原因，简洁起见，本文出现的“shell编程”都是指shell脚本编程，不是指开发shell自身（如Windows Explorer扩展开发）。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>shell编程跟java、php编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>当前主流的操作系统都支持shell编程，本文档所述的shell编程是指Linux下的shell，讲的基本都是POSIX标准下的功能，所以，也适用于Unix及BSD（如Mac OS）。</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Linux默认安装就带了shell解释器。</p><h4 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h4><p>Mac OS不仅带了sh、bash这两个最基础的解释器，还内置了ksh、csh、zsh等不常用的解释器。</p><h4 id="Windows上的模拟器"><a href="#Windows上的模拟器" class="headerlink" title="Windows上的模拟器"></a>Windows上的模拟器</h4><p>windows出厂时没有内置shell解释器，需要自行安装，为了同时能用grep, awk, curl等工具，最好装一个cygwin或者mingw来模拟linux环境。</p><ul><li><a href="http://www.cygwin.com">cygwin</a></li><li><a href="http://www.mingw.org">mingw</a></li></ul><h3 id="脚本解释器"><a href="#脚本解释器" class="headerlink" title="脚本解释器"></a>脚本解释器</h3><h4 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h4><p>即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。</p><p>本文讲的是sh，如果你使用其它语言用作shell编程，请自行参考相应语言的文档。</p><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><p>Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash。业界通常混用bash、sh、和shell，比如你会经常在招聘运维工程师的文案中见到：熟悉Linux Bash编程，精通Shell编程。</p><p>在CentOS里，/bin/sh是一个指向/bin/bash的符号链接:</p><pre><code>[root@centosraw ~]# ls -l /bin/*sh-rwxr-xr-x. 1 root root 903272 Feb 22 05:09 /bin/bash-rwxr-xr-x. 1 root root 106216 Oct 17  2012 /bin/dashlrwxrwxrwx. 1 root root      4 Mar 22 10:22 /bin/sh -&gt; bash</code></pre><p>但在Mac OS上不是，/bin/sh和/bin/bash是两个不同的文件，尽管它们的大小只相差100字节左右:</p><pre><code>iMac:~ wuxiao$ ls -l /bin/*sh-r-xr-xr-x  1 root  wheel  1371648  6 Nov 16:52 /bin/bash-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/csh-r-xr-xr-x  1 root  wheel  2180736  6 Nov 16:52 /bin/ksh-r-xr-xr-x  1 root  wheel  1371712  6 Nov 16:52 /bin/sh-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/tcsh-rwxr-xr-x  1 root  wheel  1103984  6 Nov 16:52 /bin/zsh</code></pre><h4 id="高级编程语言"><a href="#高级编程语言" class="headerlink" title="高级编程语言"></a>高级编程语言</h4><p>理论上讲，只要一门语言提供了解释器（而不仅是编译器），这门语言就可以胜任脚本编程，常见的解释型语言都是可以用作脚本编程的，如：Perl、Tcl、Python、PHP、Ruby。Perl是最老牌的脚本编程语言了，Python这些年也成了一些linux发行版的预置解释器。</p><p>编译型语言，只要有解释器，也可以用作脚本编程，如C shell是内置的（/bin/csh），Java有第三方解释器Jshell，Ada有收费的解释器AdaScript。</p><p>如下是一个PHP Shell Script示例（假设文件名叫test.php）：</p><pre><code>#!/usr/bin/php&lt;?phpfor ($i=0; $i &lt; 10; $i++)        echo $i . &quot;\n&quot;;</code></pre><p>执行：</p><pre><code>/usr/bin/php test.php</code></pre><p>或者：</p><pre><code>chmod +x test.php./test.php</code></pre><h2 id="如何选择shell编程语言"><a href="#如何选择shell编程语言" class="headerlink" title="如何选择shell编程语言"></a>如何选择shell编程语言</h2><h3 id="熟悉-vs-陌生"><a href="#熟悉-vs-陌生" class="headerlink" title="熟悉 vs 陌生"></a>熟悉 vs 陌生</h3><p>如果你已经掌握了一门编程语言（如PHP、Python、Java、JavaScript），建议你就直接使用这门语言编写脚本程序，虽然某些地方会有点啰嗦，但你能利用在这门语言领域里的经验（单元测试、单步调试、IDE、第三方类库）。</p><p>新增的学习成本很小，只要学会怎么使用shell解释器（Jshell、AdaScript）就可以了。</p><h3 id="简单-vs-高级"><a href="#简单-vs-高级" class="headerlink" title="简单 vs 高级"></a>简单 vs 高级</h3><p>如果你觉得自己熟悉的语言（如Java、C）写shell脚本实在太啰嗦，你只是想做一些备份文件、安装软件、下载数据之类的事情，学着使用sh，bash会是一个好主意。</p><p>shell只定义了一个非常简单的编程语言，所以，如果你的脚本程序复杂度较高，或者要操作的数据结构比较复杂，那么还是应该使用Python、Perl这样的脚本语言，或者是你本来就已经很擅长的高级语言。因为sh和bash在这方面很弱，比如说：</p><ul><li>它的函数只能返回字串，无法返回数组</li><li>它不支持面向对象，你无法实现一些优雅的设计模式</li><li>它是解释型的，一边解释一边执行，连PHP那种预编译都不是，如果你的脚本包含错误(例如调用了不存在的函数)，只要没执行到这一行，就不会报错</li></ul><h3 id="环境兼容性"><a href="#环境兼容性" class="headerlink" title="环境兼容性"></a>环境兼容性</h3><p>如果你的脚本是提供给别的用户使用，使用sh或者bash，你的脚本将具有最好的环境兼容性，perl很早就是linux标配了，python这些年也成了一些linux发行版的标配，至于mac os，它默认安装了perl、python、ruby、php、java等主流编程语言。</p><h2 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h2><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。</p><p>输入一些代码，第一行一般是这样：</p><pre><code>#!/bin/bash#!/usr/bin/php</code></pre><p>“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行Shell脚本有两种方法：</p><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><pre><code>chmod +x test.sh./test.sh</code></pre><p>注意，一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。</p><p>通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。</p><p>这里的”系统”，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。</p><h4 id="作为解释器参数"><a href="#作为解释器参数" class="headerlink" title="作为解释器参数"></a>作为解释器参数</h4><p>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：</p><pre><code>/bin/sh test.sh/bin/php test.php</code></pre><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量时，变量名不加美元符号（$），如：</p><pre><code>your_name=&quot;qinjx&quot;</code></pre><p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</p><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><pre><code>for file in `ls /etc`</code></pre><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><pre><code>your_name=&quot;qinjx&quot;echo $your_nameecho $&#123;your_name&#125;</code></pre><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre><code>for skill in Ada Coffe Action Java; do    echo &quot;I am good at $&#123;skill&#125;Script&quot;done</code></pre><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。IntelliJ IDEA编写shell script时，IDE就会提示加花括号。</p><h3 id="重定义变量"><a href="#重定义变量" class="headerlink" title="重定义变量"></a>重定义变量</h3><p>已定义的变量，可以被重新定义，如：</p><pre><code>your_name=&quot;qinjx&quot;echo $your_nameyour_name=&quot;alibaba&quot;echo $your_name</code></pre><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以“#”开头的行就是注释，会被解释器忽略。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>sh里没有多行注释，只能每一行加一个#号。就像这样：</p><pre><code>#--------------------------------------------# 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：https://github.com/webfrogs/xcode_shell/blob/master/ipa-build# 功能：自动为etao ios app打包，产出物为14个渠道的ipa包# 特色：全自动打包，不需要输入任何参数#--------------------------------------------##### 用户配置区 开始 ######## 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了# 应用名，确保和Xcode里Product下的target_name.app名字一致###### 用户配置区 结束  #####</code></pre><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><pre><code>str=&#39;this is a string&#39;</code></pre><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><pre><code>your_name=&#39;qinjx&#39;str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;</code></pre><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><pre><code>your_name=&quot;qinjx&quot;greeting=&quot;hello, &quot;$your_name&quot; !&quot;greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;echo $greeting $greeting_1</code></pre><h4 id="获取字符串长度："><a href="#获取字符串长度：" class="headerlink" title="获取字符串长度："></a>获取字符串长度：</h4><pre><code>string=&quot;abcd&quot;echo $&#123;#string&#125; #输出：4</code></pre><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><pre><code>string=&quot;alibaba is a great company&quot;echo $&#123;string:1:4&#125; #输出：liba</code></pre><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h4><pre><code>string=&quot;alibaba is a great company&quot;echo `expr index &quot;$string&quot; is`#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错</code></pre><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>参见本文档末尾的参考资料中<a href="http://tldp.org/LDP/abs/html/string-manipulation.html">Advanced Bash-Scripting Guid Chapter 10.1</a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如：</p><pre><code>&lt;?phpif (isset($_GET[&quot;q&quot;])) &#123;    search(q);&#125;else &#123;    //do nothing&#125;</code></pre><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>还要注意，sh里的if [ $foo -eq 0 ]，这个方括号跟Java/PHP里if后面的圆括号大不相同，它是一个可执行程序（和ls, grep一样），想不到吧？在CentOS上，它在/usr/bin目录下：</p><pre><code>ll /usr/bin/[-rwxr-xr-x. 1 root root 33408 6月  22 2012 /usr/bin/[</code></pre><p>正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成if [$foo -eq 0]</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code>if conditionthen    command1     command2    ...    commandN fi</code></pre><p>写成一行（适用于终端命令提示符）：</p><pre><code>if `ps -ef | grep ssh`;  then echo hello; fi</code></pre><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的</p><h4 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h4><pre><code>if conditionthen    command1     command2    ...    commandNelse    commandfi</code></pre><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h4><pre><code>if condition1then    command1elif condition2    command2else    commandNfi</code></pre><h3 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>在开篇的示例里演示过了：</p><pre><code>for var in item1 item2 ... itemNdo    command1    command2    ...    commandNdone</code></pre><p>写成一行：</p><pre><code>for var in item1 item2 ... itemN; do command1; command2… done;</code></pre><h4 id="C风格的for"><a href="#C风格的for" class="headerlink" title="C风格的for"></a>C风格的for</h4><pre><code>for (( EXP1; EXP2; EXP3 ))do    command1    command2    command3done</code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre><code>while conditiondo    commanddone</code></pre><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><pre><code>while :do    commanddone</code></pre><p>或者</p><pre><code>while truedo    commanddone</code></pre><p>或者</p><pre><code>for (( ; ; ))</code></pre><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><pre><code>until conditiondo    commanddone</code></pre><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><pre><code>case &quot;$&#123;opt&#125;&quot; in    &quot;Install-Puppet-Server&quot; )        install_master $1        exit    ;;    &quot;Install-Puppet-Client&quot; )        install_client $1        exit    ;;    &quot;Config-Puppet-Server&quot; )        config_puppet_master        exit    ;;    &quot;Config-Puppet-Client&quot; )        config_puppet_client        exit    ;;    &quot;Exit&quot; )        exit    ;;    * ) echo &quot;Bad option, please choose again&quot;esac</code></pre><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>可以使用source和.关键字，如：</p><pre><code>source ./function.sh. ./function.sh</code></pre><p>在bash里，source和.是等效的，他们都是读入function.sh的内容并执行其内容（类似PHP里的include），为了更好的可移植性，推荐使用第二种写法。</p><p>包含一个文件和执行一个文件一样，也要写这个文件的路径，不能光写文件名，比如上述例子中:</p><pre><code>. ./function.sh</code></pre><p>不可以写作：</p><pre><code>. function.sh</code></pre><p>如果function.sh是用户传入的参数，如何获得它的绝对路径呢？方法是：</p><pre><code>real_path=`readlink -f $1`#$1是用户输入的参数，如function.sh. $real_path</code></pre><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><h3 id="执行脚本时传入"><a href="#执行脚本时传入" class="headerlink" title="执行脚本时传入"></a>执行脚本时传入</h3><h3 id="脚本运行中输入"><a href="#脚本运行中输入" class="headerlink" title="脚本运行中输入"></a>脚本运行中输入</h3><h3 id="select菜单"><a href="#select菜单" class="headerlink" title="select菜单"></a>select菜单</h3><h2 id="stdin和stdout"><a href="#stdin和stdout" class="headerlink" title="stdin和stdout"></a>stdin和stdout</h2><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>sh脚本结合系统命令便有了强大的威力，在字符处理领域，有grep、awk、sed三剑客，grep负责找出特定的行，awk能将行拆分成多个字段，sed则可以实现更新插入删除等写操作。</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>查看进程列表</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h4 id="排除grep自身"><a href="#排除grep自身" class="headerlink" title="排除grep自身"></a>排除grep自身</h4><h4 id="查找与target相邻的结果"><a href="#查找与target相邻的结果" class="headerlink" title="查找与target相邻的结果"></a>查找与target相邻的结果</h4><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide</a>，非常详细，非常易读，大量example，既可以当入门教材，也可以当做工具书查阅<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.tutorialspoint.com/unix/unix-shell.htm">Unix Shell Programming</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://bash.cyberciti.biz/guide/Main_Page">Linux Shell Scripting Tutorial - A Beginner’s handbook</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md">覃健祥的学习笔记，各种几十分钟入门的文档:Shell脚本编程30分钟入门</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim 从入门到精通</title>
    <link href="/2021/01/15/Linux/Vim%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <url>/2021/01/15/Linux/Vim%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a><ul><li><a href="#什么是-vim">什么是 Vim？</a></li><li><a href="#vim-哲学">Vim 哲学</a></li><li><a href="#入门">入门</a></li><li><a href="#精简的-vimrc">精简的 vimrc</a><ul><li><a href="#windows-系统">Windows 系统</a></li><li><a href="#linux-或者-mac-os">Linux 或者 Mac OS</a></li></ul></li><li><a href="#我正在使用什么样的-vim">我正在使用什么样的 Vim</a></li><li><a href="#备忘录">备忘录</a></li></ul></li><li><a href="#基础">基础</a><ul><li><a href="#缓冲区窗口标签">缓冲区，窗口，标签</a></li><li><a href="#已激活已载入已列出已命名的缓冲区">已激活、已载入、已列出、已命名的缓冲区</a></li><li><a href="#参数列表">参数列表</a></li><li><a href="#按键映射">按键映射</a></li><li><a href="#映射前置键">映射前置键</a></li><li><a href="#寄存器">寄存器</a></li><li><a href="#范围">范围</a></li><li><a href="#标注">标注</a></li><li><a href="#补全">补全</a></li><li><a href="#动作操作符文本对象">动作，操作符，文本对象</a></li><li><a href="#自动命令">自动命令</a></li><li><a href="#变更历史跳转历史">变更历史，跳转历史</a></li><li><a href="#内容变更历史记录">内容变更历史记录</a></li><li><a href="#全局位置信息表局部位置信息表">全局位置信息表，局部位置信息表</a></li><li><a href="#宏">宏</a></li><li><a href="#颜色主题">颜色主题</a></li><li><a href="#折叠">折叠</a></li><li><a href="#会话">会话</a></li><li><a href="#局部化">局部化</a></li></ul></li><li><a href="#用法">用法</a><ul><li><a href="#获取离线帮助">获取离线帮助</a></li><li><a href="#获取离线帮助补充">获取离线帮助（补充）</a></li><li><a href="#获取在线帮助">获取在线帮助</a></li><li><a href="#执行自动命令">执行自动命令</a><ul><li><a href="#用户自定义事件">用户自定义事件</a></li><li><a href="#事件嵌套">事件嵌套</a></li></ul></li><li><a href="#剪切板">剪切板</a><ul><li><a href="#剪贴板的使用windows-osx">剪贴板的使用（Windows, OSX）</a></li><li><a href="#剪贴板的使用linux-bsd-">剪贴板的使用（Linux, BSD, …）</a></li></ul></li><li><a href="#打开文件时恢复光标位置">打开文件时恢复光标位置</a></li><li><a href="#临时文件">临时文件</a><ul><li><a href="#备份文件">备份文件</a></li><li><a href="#交换文件">交换文件</a></li><li><a href="#撤销文件">撤销文件</a></li><li><a href="#viminfo-文件">viminfo 文件</a></li><li><a href="#临时文件管理设置示例">临时文件管理设置示例</a></li></ul></li><li><a href="#编辑远程文件">编辑远程文件</a></li><li><a href="#插件管理">插件管理</a></li><li><a href="#多行编辑">多行编辑</a></li><li><a href="#使用外部程序和过滤器">使用外部程序和过滤器</a></li><li><a href="#cscope">Cscope</a><ul><li><a href="#1-构建数据库">1. 构建数据库</a></li><li><a href="#2-添加数据库">2. 添加数据库</a></li><li><a href="#3-查询数据库">3. 查询数据库</a></li></ul></li><li><a href="#matchit">MatchIt</a><ul><li><a href="#在-vim-8-中安装">在 Vim 8 中安装</a></li><li><a href="#在-vim-7-或者更早的版本中安装">在 Vim 7 或者更早的版本中安装</a></li><li><a href="#简短的介绍">简短的介绍</a></li></ul></li></ul></li><li><a href="#技巧">技巧</a><ul><li><a href="#跳至选择的区域另一端">跳至选择的区域另一端</a></li><li><a href="#聪明地使用-n-和-n">聪明地使用 n 和 N</a></li><li><a href="#聪明地使用命令行历史">聪明地使用命令行历史</a></li><li><a href="#智能-ctrl-l">智能 Ctrl-l</a></li><li><a href="#禁用错误报警声音和图标">禁用错误报警声音和图标</a></li><li><a href="#快速移动当前行">快速移动当前行</a></li><li><a href="#快速添加空行">快速添加空行</a><ul><li><a href="#运行时检测">运行时检测</a></li><li><a href="#查看启动时间">查看启动时间</a></li></ul></li><li><a href="#nul-符用新行表示">NUL 符用新行表示</a></li><li><a href="#快速编辑自定义宏">快速编辑自定义宏</a></li><li><a href="#快速跳转到源头文件">快速跳转到源(头)文件</a></li><li><a href="#在-gui-中快速改变字体大小">在 GUI 中快速改变字体大小</a></li><li><a href="#根据模式改变光标类型">根据模式改变光标类型</a></li><li><a href="#防止水平滑动的时候失去选择">防止水平滑动的时候失去选择</a></li><li><a href="#选择当前行至结尾排除换行符">选择当前行至结尾，排除换行符</a></li><li><a href="#重新载入保存文件">重新载入保存文件</a></li><li><a href="#更加智能的当前行高亮">更加智能的当前行高亮</a></li><li><a href="#更快的关键字补全">更快的关键字补全</a></li><li><a href="#改变颜色主题的默认外观">改变颜色主题的默认外观</a></li><li><a href="#命令">命令</a><ul><li><a href="#global-和-vglobal---在所有匹配行执行命令">:global 和 :vglobal - 在所有匹配行执行命令</a></li><li><a href="#normal-和-execute---脚本梦之队">:normal 和 :execute - 脚本梦之队</a></li><li><a href="#重定向消息">重定向消息</a></li></ul></li></ul></li><li><a href="#调试">调试</a><ul><li><a href="#常规建议">常规建议</a></li><li><a href="#调整日志等级">调整日志等级</a></li><li><a href="#查看启动日志">查看启动日志</a></li><li><a href="#查看运行时日志">查看运行时日志</a></li><li><a href="#vim-脚本调试">Vim 脚本调试</a></li><li><a href="#语法文件调试">语法文件调试</a></li></ul></li><li><a href="#杂项">杂项</a><ul><li><a href="#附加资源">附加资源</a></li><li><a href="#vim-配置集合">Vim 配置集合</a></li><li><a href="#常见问题">常见问题</a><ul><li><a href="#编辑小文件时很慢">编辑小文件时很慢</a></li><li><a href="#编辑大文件的时候很慢">编辑大文件的时候很慢</a></li><li><a href="#持续粘贴为什么我每次都要设置-paste-模式">持续粘贴（为什么我每次都要设置 ‘paste’ 模式）</a></li><li><a href="#在终端中按-esc-后有延时">在终端中按 ESC 后有延时</a></li><li><a href="#无法重复函数中执行的搜索">无法重复函数中执行的搜索</a></li></ul></li><li><a href="#进阶阅读">进阶阅读</a></li><li><a href="#参考资料">参考资料</a></li></ul></li></ul><!-- vim-markdown-toc --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是-Vim？"><a href="#什么是-Vim？" class="headerlink" title="什么是 Vim？"></a>什么是 Vim？</h2><p><a href="https://github.com/vim/vim">Vim</a> 是一个历史悠久的文本编辑器，可以追溯到<br><a href="https://en.wikipedia.org/wiki/QED_(text_editor">qed</a>&gt;)。<br><a href="https://en.wikipedia.org/wiki/Bram_Moolenaar">Bram Moolenaar</a> 于<br>1991 年发布初始版本。</p><p>Linux、Mac 用户，可以使用包管理器安装 Vim，对于 Windows 用户，可以从<br><a href="https://share.weiyun.com/da2be5937ac0e2bd3abc26355fad1204">我的网盘</a> 下载。<br>该版本可轻易添加 <code>python</code> 、<code>python3</code> 、<code>lua</code> 等支持，只需要安装 python、lua<br>即可。</p><p>项目在 <a href="https://github.com/vim/vim">Github</a> 上开发，项目讨论请订阅<br><a href="https://groups.google.com/forum/#!forum/vim_dev"><code>vim_dev</code></a> 邮件列表。</p><p>通过阅读 <a href="http://www.viemu.com/a-why-vi-vim.html">Why, oh WHY, do those #?@! nutheads use vi?</a><br>来对 Vim 进行大致的了解。</p><h2 id="Vim-哲学"><a href="#Vim-哲学" class="headerlink" title="Vim 哲学"></a>Vim 哲学</h2><p>Vim 采用模式编辑的理念，即它提供了多种模式，按键在不同的模式下作用不同。<br>你可以在<strong>普通模式</strong> 下浏览文件，在<strong>插入模式</strong>下插入文本，<br>在<strong>可视模式</strong>下选择行，在<strong>命令模式</strong>下执行命令等等。起初这听起来可能很复杂，<br>但是这有一个很大的优点：不需要通过同时按住多个键来完成操作，<br>大多数时候你只需要依次按下这些按键即可。越常用的操作，所需要的按键数量越少。</p><p>和模式编辑紧密相连的概念是 <strong>操作符</strong> 和 <strong>动作</strong>。<strong>操作符</strong> 指的是开始某个行为，<br>例如：修改、删除或者选择文本，之后你要用一个 <strong>动作</strong> 来指定需要操作的文本区域。<br>比如，要改变括号内的文本，需要执行 <code>ci(</code> （读做 <code>change inner parentheses</code>）；<br>删除整个段落的内容，需要执行 <code>dap</code> （读做：<code>delete around paragraph</code>）。</p><p>如果你能看见 Vim 老司机操作，你会发现他们使用 Vim 脚本语言就如同钢琴师弹钢琴一样。复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为<a href="https://en.wikipedia.org/wiki/Muscle_memory">肌肉记忆</a>了。这减少<a href="https://en.wikipedia.org/wiki/Cognitive_load">认识负荷</a>并帮助人们专注于实际任务。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>Vim 自带一个交互式的教程，内含你需要了解的最基础的信息，你可以通过终端运行以下命令打开教程：</p><pre><code>$ vimtutor</code></pre><p>不要因为这个看上去很无聊而跳过，按照此教程多练习。你以前用的 IDE 或者其他编辑器很少是有“模式”概念的，因此一开始你会很难适应模式切换。但是你 Vim 使用的越多，<a href="https://en.wikipedia.org/wiki/Muscle_memory">肌肉记忆</a> 将越容易形成。</p><p>Vim 基于一个 <a href="https://en.wikipedia.org/wiki/Vi">vi</a> 克隆，叫做 <a href="https://en.wikipedia.org/wiki/Stevie_(text_editor">Stevie</a>&gt;)，支持两种运行模式：”compatible” 和 “nocompatible”。在兼容模式下运行 Vim 意味着使用 vi 的默认设置，而不是 Vim 的默认设置。除非你新建一个用户的 <code>vimrc</code> 或者使用 <code>vim -N</code> 命令启动 Vim，否则就是在兼容模式下运行 Vim！请大家不要在兼容模式下运行 Vim。</p><p>下一步</p><ol><li>创建你自己的 <a href="#精简的-vimrc">vimrc</a>。</li><li>在第一周准备<a href="#备忘录">备忘录</a>。</li><li>通读<a href="#基础-1">基础</a>章节了解 Vim 还有哪些功能。</li><li>按需学习！Vim 是学不完的。如果你遇到了问题，先上网寻找解决方案，你的问题可能已经被解决了。Vim 拥有大量的参考文档，知道如何利用这些参考文档很有必要：<a href="#获取离线帮助">获取离线帮助</a>。</li><li>浏览<a href="#附加资源">附加资源</a>。</li></ol><p>最后一个建议：使用<a href="#插件管理">插件</a>之前，请先掌握 Vim 的基本操作。很多插件都只是对 Vim 自带功能的封装。</p><p>返回主目录 <a href="#简介">:arrow_heading_up:</a></p><h2 id="精简的-vimrc"><a href="#精简的-vimrc" class="headerlink" title="精简的 vimrc"></a>精简的 vimrc</h2><p>Vim 启动是会按照一定的优先顺序来搜索配置文件，这个顺序，可以通过 <code>:version</code> 命令查看。下面分 Windows 系统，<br>和 *niux 系统分别来说明 Vim 是如何载入配置文件的。</p><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><pre><code class="hljs routeros">  <span class="hljs-built_in"> system </span>vimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIM</span>\vimrc&quot;</span>    <span class="hljs-built_in"> user </span>vimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>\_vimrc&quot;</span> 2nd<span class="hljs-built_in"> user </span>vimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>\vimfiles\vimrc&quot;</span> 3rd<span class="hljs-built_in"> user </span>vimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIM</span>\_vimrc&quot;</span>     <span class="hljs-built_in"> user </span>exrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>\_exrc&quot;</span>  2nd<span class="hljs-built_in"> user </span>exrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIM</span>\_exrc&quot;</span> <span class="hljs-built_in"> system </span>gvimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIM</span>\gvimrc&quot;</span>   <span class="hljs-built_in"> user </span>gvimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>\_gvimrc&quot;</span>2nd<span class="hljs-built_in"> user </span>gvimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>\vimfiles\gvimrc&quot;</span>3rd<span class="hljs-built_in"> user </span>gvimrc file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIM</span>\_gvimrc&quot;</span>       defaults file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIMRUNTIME</span>\defaults.vim&quot;</span>   <span class="hljs-built_in"> system </span>menu file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIMRUNTIME</span>\menu.vim&quot;</span></code></pre><p>我们只看上面这一段，Vim 会优先读取 user vimrc file: <code>$HOME\_vimrc</code>, 当这一文件不存在是，<br>Vim 再去寻找 2nd user vimrc file: <code>$HOME\vimfiles\vimrc</code>; 倘若这个文件还是不存在，那么 Vim<br>会去继续寻找 3rd user vimrc file: <code>$VIM\_vimrc</code>。 了解以上顺序后，就不会再因为 Vim<br>总是不读取配置文件而感到烦恼了。</p><h3 id="Linux-或者-Mac-OS"><a href="#Linux-或者-Mac-OS" class="headerlink" title="Linux 或者 Mac OS"></a>Linux 或者 Mac OS</h3><p>同 Windows 系统类似，也可以使用 <code>:version</code> 命令查看 vim 载入配置的优先顺序。</p><pre><code class="hljs bash">    系统 vimrc 文件: <span class="hljs-string">&quot;/etc/vimrc&quot;</span>    用户 vimrc 文件: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.vimrc&quot;</span>第二用户 vimrc 文件: <span class="hljs-string">&quot;~/.vim/vimrc&quot;</span>     用户 exrc 文件: <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.exrc&quot;</span>      defaults file: <span class="hljs-string">&quot;<span class="hljs-variable">$VIMRUNTIME</span>/defaults.vim&quot;</span>        <span class="hljs-variable">$VIM</span> 预设值: <span class="hljs-string">&quot;/etc&quot;</span> <span class="hljs-variable">$VIMRUNTIME</span> 预设值: <span class="hljs-string">&quot;/usr/share/vim/vim81&quot;</span></code></pre><p>你可以在网上找到许多精简的 vimrc 配置文件，我的版本可能并不是最简单的版本，但是我的版本提供了一套我认为良好的，非常适合入门的设置。</p><p>最终你需要阅读完那些设置，然后自行决定需要使用哪些。:-)</p><p>精简的 vimrc 地址：<a href="contents/minimal-vimrc.vim">minimal-vimrc</a></p><p>如果你有兴趣，这里是我（原作者）的 <a href="https://github.com/mhinz/dotfiles/blob/master/.vim/vimrc">vimrc</a>。</p><p><strong>建议</strong>：大多数插件作者都维护不止一个插件并且将他们的 vimrc 放在 Github 上展示（通常放在叫做 “vim-config” 或者 “dotfiles” 的仓库中），所以当你发现你喜欢的插件时，去插件维护者的 Github 主页看看有没有这样的仓库。</p><p>返回主目录 <a href="#简介">:arrow_heading_up:</a></p><h2 id="我正在使用什么样的-Vim"><a href="#我正在使用什么样的-Vim" class="headerlink" title="我正在使用什么样的 Vim"></a>我正在使用什么样的 Vim</h2><p>使用 <code>:version</code> 命令将向你展示当前正在运行的 Vim 的所有相关信息，包括它是如何编译的。</p><p>第一行告诉你这个二进制文件的编译时间和版本号，比如：7.4。接下来的一行呈现 <code>Included patches: 1-1051</code>，这是补丁版本包。因此你 Vim 确切的版本号是 7.4.1051。</p><p>另一行显示着一些像 <code>Tiny version without GUI</code> 或者 <code>Huge version with GUI</code> 的信息。很显然这些信息告诉你当前的 Vim 是否支持 GUI，例如：从终端中运行 <code>gvim</code> 或者从终端模拟器中的 Vim 内运行 <code>:gui</code> 命令。另一个重要的信息是 <code>Tiny</code> 和 <code>Huge</code>。Vim 的特性集区分被叫做 <code>tiny</code>，<code>small</code>，<code>normal</code>，<code>big</code> and <code>huge</code>，所有的都实现不同的功能子集。</p><p><code>:version</code> 主要的输出内容是特性列表。<code>+clipboard</code> 意味这剪贴板功能被编译支持了，<code>-clipboard</code> 意味着剪贴板特性没有被编译支持。</p><p>一些功能特性需要编译支持才能正常工作。例如：为了让 <code>:prof</code> 工作，你需要使用 <code>huge</code> 模式编译的 Vim，因为那种模式启用了 <code>+profile</code> 特性。</p><p>如果你的输出情况并不是那样，并且你是从包管理器安装 Vim 的，确保你安装了 <code>vim-x</code>，<code>vim-x11</code>，<code>vim-gtk</code>，<code>vim-gnome</code> 这些包或者相似的，因为这些包通常都是 <code>huge</code> 模式编译的。</p><p>你也可以运行下面这段代码来测试 Vim 版本以及功能支持：</p><pre><code class="hljs vim"><span class="hljs-comment">&quot; Do something if running at least Vim 7.4.42 with +profile enabled.</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">v:version</span> &gt; <span class="hljs-number">704</span> || <span class="hljs-variable">v:version</span> == <span class="hljs-number">704</span> &amp;&amp; <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;patch42&#x27;</span>)) &amp;&amp; <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;profile&#x27;</span>)  <span class="hljs-comment">&quot; do stuff</span><span class="hljs-keyword">endif</span></code></pre><p>相关帮助：</p><pre><code>:h :version:h feature-list:h +feature-list:h has-patch</code></pre><p>返回主目录 <a href="#简介">:arrow_heading_up:</a></p><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><p>为了避免版权问题，我只贴出链接：</p><ul><li><a href="http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png">http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png</a></li><li><a href="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png">https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png</a></li><li><a href="http://www.nathael.org/Data/vi-vim-cheat-sheet.svg">http://www.nathael.org/Data/vi-vim-cheat-sheet.svg</a></li><li><a href="http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png">http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png</a></li><li><a href="http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png">http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png</a></li></ul><p>或者在 Vim 中快速打开备忘录：<a href="https://github.com/lifepillar/vim-cheat40">vim-cheat40</a>。</p><p>返回主目录 <a href="#简介">:arrow_heading_up:</a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="缓冲区，窗口，标签"><a href="#缓冲区，窗口，标签" class="headerlink" title="缓冲区，窗口，标签"></a>缓冲区，窗口，标签</h2><p>Vim 是一个文本编辑器。每次文本都是作为<strong>缓冲区</strong>的一部分显示的。每一份文件都是在他们自己独有的缓冲区打开的，插件显示的内容也在它们自己的缓冲区中。</p><p>缓冲区有很多属性，比如这个缓冲区的内容是否可以修改，或者这个缓冲区是否和文件相关联，是否需要同步保存到磁盘上。</p><p><strong>窗口</strong> 是缓冲区上一层的视窗。如果你想同时查看几个文件或者查看同一文件的不同位置，那样你会需要窗口。</p><p>请别把他们叫做 <em>分屏</em> 。你可以把一个窗口分割成两个，但是这并没有让这两个窗口完全 <em>分离</em> 。</p><p>窗口可以水平或者竖直分割并且现有窗口的高度和宽度都是可以被调节设置的，因此，如果你需要多种窗口布局，请考虑使用标签。</p><p><strong>标签页</strong> （标签）是窗口的集合。因此当你想使用多种窗口布局时候请使用标签。</p><p>简单的说，如果你启动 Vim 的时候没有附带任何参数，你会得到一个包含着一个呈现一个缓冲区的窗口的标签。</p><p>顺带提一下，缓冲区列表是全局可见的，你可以在任何标签中访问任何一个缓冲区。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="已激活、已载入、已列出、已命名的缓冲区"><a href="#已激活、已载入、已列出、已命名的缓冲区" class="headerlink" title="已激活、已载入、已列出、已命名的缓冲区"></a>已激活、已载入、已列出、已命名的缓冲区</h2><p>用类似 <code>vim file1</code> 的命令启动 Vim 。这个文件的内容将会被加载到缓冲区中，你现在有一个<strong>已载入的缓冲区</strong>。如果你在 Vim 中保存这个文件，缓冲区内容将会被同步到磁盘上（写回文件中）。</p><p>由于这个缓冲区也在一个窗口上显示，所以他也是一个<strong>已激活的缓冲区</strong>。如果你现在通过 <code>:e file2</code> 命令加载另一个文件，<code>file1</code> 将会变成一个<strong>隐藏的缓冲区</strong>，并且 <code>file2</code> 变成已激活缓冲区。</p><p>使用 <code>:ls</code> 我们能够列出所有可以列出的缓冲区。插件缓冲区和帮助缓冲区通常被标记为不可以列出的缓冲区，因为那并不是你经常需要在编辑器中编辑的常规文件。通过 <code>:ls!</code> 命令可以显示被放入缓冲区列表的和未被放入列表的缓冲区。</p><p><strong>未命名的缓冲区</strong>是一种没有关联特定文件的缓冲区，这种缓冲区经常被插件使用。比如 <code>:enew</code> 将会创建一个无名临时缓冲区。添加一些文本然后使用 <code>:w /tmp/foo</code> 将他写入到磁盘，这样这个缓冲区就会变成一个<strong>已命名的缓冲区</strong>。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p><a href="#缓冲区窗口标签">全局缓冲区列表</a>是 Vim 的特性。在这之前的 vi 中，仅仅只有参数列表，参数列表在 Vim 中依旧可以使用。</p><p>每一个通过 shell 命令传递给 Vim 的文件名都被记录在一个参数列表中。可以有多个参数列表：默认情况下所有参数都被放在全局参数列表下，但是你可以使用 <code>:arglocal</code> 命令去创建一个新的本地窗口的参数列表。</p><p>使用 <code>:args</code> 命令可以列出当前参数。使用 <code>:next</code>，<code>:previous</code>，<code>:first</code>，<code>:last</code> 命令可以在切换在参数列表中的文件。通过使用 <code>:argadd</code>，<code>:argdelete</code> 或者 <code>:args</code> 等命令加上一个文件列表可以改变参数列表。</p><p>偏爱缓冲区列表还是参数列表完全是个人选择，我的印象中大多数人都是使用缓冲区列表的。</p><p>然而参数列表在有些情况下被大量使用：批处理<br>使用 <code>:argdo</code>！ 一个简单的重构例子：</p><pre><code class="hljs vim">:<span class="hljs-keyword">args</span> **/*.[ch]:<span class="hljs-keyword">argdo</span> %s/foo/bar/ge | <span class="hljs-keyword">update</span></code></pre><p>这条命令将替换掉当前目录下以及当前目录的子目录中所有的 C 源文件和头文件中的“foo”，并用“bar”代替。</p><p>相关帮助：<code>:h argument-list</code></p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="按键映射"><a href="#按键映射" class="headerlink" title="按键映射"></a>按键映射</h2><p>使用 <code>:map</code> 命令家族你可以定义属于你自己的快捷键。该家族的每一个命令都限定在特定的模式下。从技术上来说 Vim 自带高达 12 中模式，其中 6 种可以被映射。另外一些命令作用于多种模式：</p><div class="table-container"><table><thead><tr><th>递归</th><th>非递归</th><th>模式</th></tr></thead><tbody><tr><td><code>:map</code></td><td><code>:noremap</code></td><td>normal, visual, operator-pending</td></tr><tr><td><code>:nmap</code></td><td><code>:nnoremap</code></td><td>normal</td></tr><tr><td><code>:xmap</code></td><td><code>:xnoremap</code></td><td>visual</td></tr><tr><td><code>:cmap</code></td><td><code>:cnoremap</code></td><td>command-line</td></tr><tr><td><code>:omap</code></td><td><code>:onoremap</code></td><td>operator-pending</td></tr><tr><td><code>:imap</code></td><td><code>:inoremap</code></td><td>insert</td></tr></tbody></table></div><p>例如：这个自定义的快捷键只在普通模式下工作。</p><pre><code class="hljs vim">:<span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;space&gt;</span> :<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-symbol">&lt;cr&gt;</span></code></pre><p>使用 <code>:nunmap &lt;space&gt;</code> 可以取消这个映射。</p><p>对于更少数，不常见的模式（或者他们的组合），查看 <code>:h map-modes</code>。</p><p>到现在为止还好，对新手而言有一个问题会困扰他们：<code>:nmap</code> 是<strong>递归执行</strong>的！结果是，右边执行可能的映射。</p><p>你自定义了一个简单的映射去输出“Foo”：</p><pre><code class="hljs vim">:<span class="hljs-keyword">nmap</span> <span class="hljs-keyword">b</span> :<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Foo&quot;</span><span class="hljs-symbol">&lt;cr&gt;</span></code></pre><p>但是如果你想要映射 <code>b</code> （回退一个单词）的默认功能到一个键上呢？</p><pre><code class="hljs vim">:<span class="hljs-keyword">nmap</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">b</span></code></pre><p>如果你敲击<kbd>a</kbd>，我们期望着光标回退到上一个单词，但是实际情况是“Foo”被输出到命令行里！因为在右边，<code>b</code> 已经被映射到别的行为上了，换句话说就是 <code>:echo &quot;Foo&quot;&lt;cr&gt;</code>。</p><p>解决此问题的正确方法是使用一种 <em>非递归</em> 的映射代替：</p><pre><code class="hljs vim">:<span class="hljs-keyword">nnoremap</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">b</span></code></pre><p>经验法则：除递归映射是必须的，否则总是使用非递归映射。</p><p>通过不给一个右值来检查你的映射。比如<code>:nmap</code> 显示所以普通模式下的映射，<code>:nmap &lt;leader&gt;</code> 显示所有以 <code>&lt;leader&gt;</code> 键开头的普通模式下的映射。</p><p>如果你想禁止用标准映射，把他们映射到特殊字符 <code>&lt;nop&gt;</code> 上，例如：<code>:noremap &lt;left&gt; &lt;nop&gt;</code>。</p><p>相关帮助：</p><pre><code class="hljs vim">:h key-notation:h mapping:h <span class="hljs-number">05.3</span></code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="映射前置键"><a href="#映射前置键" class="headerlink" title="映射前置键"></a>映射前置键</h2><p>映射前置键（Leader 键）本身就是一个按键映射，默认为 <kbd>\</kbd>。我们可以通过在 <code>map</code> 中调用 <code>&lt;leader&gt;</code> 来为把它添加到其他按键映射中。</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span>h :<span class="hljs-keyword">helpgrep</span><span class="hljs-symbol">&lt;space&gt;</span></code></pre><p>这样，我们只需要先按 <kbd>\</kbd> 然后按 <kbd>h</kbd> 就可以激活这个映射 <code>:helpgrep&lt;space&gt;</code>。如果你想通过先按 <kbd>空格</kbd> 键来触发，只需要这样做：</p><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mapleader</span> = <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span>h :<span class="hljs-keyword">helpgrep</span><span class="hljs-symbol">&lt;space&gt;</span></code></pre><p>此处建议使用 <code>g:mapleader</code>，因为在 Vim 脚本中，函数外的变量缺省的作用域是全局变量，但是在函数内缺省作用域是局部变量，而设置快捷键前缀需要修改全局变量 <code>g:mapleader</code> 的值。</p><p>另外，还有一个叫 <code>&lt;localleader&gt;</code> 的，可以把它理解为局部环境中的 <code>&lt;leader&gt;</code>，默认值依然为 <kbd>\</kbd>。当我们需要只对某一个条件下（比如，特定文件类型的插件）的缓冲区设置特别的 <code>&lt;leader&gt;</code> 键，那么我们就可以通过修改当前环境下的 <code>&lt;localleader&gt;</code> 来实现。</p><p><strong>注意</strong>：如果你打算设置 Leader 键，请确保在设置按键映射之前，先设置好 Leader 键。如果你先设置了含有 Leader 键的映射，然后又修改了 Leader 键，那么之前映射内的 Leader 键是不会因此而改变的。你可以通过执行 <code>:nmap &lt;leader&gt;</code> 来查看普通模式中已绑定给 Leader 键的所有映射。</p><p>请参阅 <code>:h mapleader</code> 与 <code>:h maploacalleader</code> 来获取更多帮助。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器就是存储文本的地方。我们常用的「复制」操作就是把文本存储到寄存器，「 粘贴」 操作就是把文本从寄存器中读出来。顺便，在 Vim 中复制的快捷键是 <kbd>y</kbd>，粘贴的快捷键是 <kbd>p</kbd>。</p><p>Vim 为我们提供了如下的寄存器：</p><div class="table-container"><table><thead><tr><th>类型</th><th>标识</th><th>读写者</th><th>是否为只读</th><th>包含的字符来源</th></tr></thead><tbody><tr><td>Unnamed</td><td><code>&quot;</code></td><td>vim</td><td>否</td><td>最近一次的复制或删除操作 (<code>d</code>, <code>c</code>, <code>s</code>, <code>x</code>, <code>y</code>)</td></tr><tr><td>Numbered</td><td><code>0</code>至<code>9</code></td><td>vim</td><td>否</td><td>寄存器 <code>0</code>: 最近一次复制。寄存器 <code>1</code>: 最近一次删除。寄存器 <code>2</code>: 倒数第二次删除，以此类推。对于寄存器 <code>1</code> 至 <code>9</code>，他们其实是只读的最多包含 9 个元素的队列。这里的队列即为数据类型 <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type">queue</a>&gt;)</td></tr><tr><td>Small delete</td><td><code>-</code></td><td>vim</td><td>否</td><td>最近一次行内删除</td></tr><tr><td>Named</td><td><code>a</code>至<code>z</code>, <code>A</code>至<code>Z</code></td><td>用户</td><td>否</td><td>如果你通过复制操作存储文本至寄存器 <code>a</code>，那么 <code>a</code> 中的文本就会被完全覆盖。如果你存储至 <code>A</code>，那么会将文本添加给寄存器 <code>a</code>，不会覆盖之前已有的文本</td></tr><tr><td>Read-only</td><td><code>:</code>与<code>.</code>和<code>%</code></td><td>vim</td><td>是</td><td><code>:</code>: 最近一次使用的命令，<code>.</code>: 最近一次添加的文本，<code>%</code>: 当前的文件名</td></tr><tr><td>Alternate buffer</td><td><code>#</code></td><td>vim</td><td>否</td><td>大部分情况下，这个寄存器是当前窗口中，上一次访问的缓冲区。请参阅 <code>:h alternate-file</code> 来获取更多帮助</td></tr><tr><td>Expression</td><td><code>=</code></td><td>用户</td><td>否</td><td>复制 VimL 代码时，这个寄存器用于存储代码片段的执行结果。比如，在插入模式下复制 <code>&lt;c-r&gt;=5+5&lt;cr&gt;</code>，那么这个寄存器就会存入 10</td></tr><tr><td>Selection</td><td><code>+</code>和<code>*</code></td><td>vim</td><td>否</td><td><code>*</code> 和 <code>+</code> 是 <a href="#剪贴板">剪贴板</a> 寄存器</td></tr><tr><td>Drop</td><td><code>~</code></td><td>vim</td><td>是</td><td>最后一次拖拽添加至 Vim 的文本（需要 “+dnd” 支持，暂时只支持 GTK GUI。请参阅 <code>:help dnd</code> 及 <code>:help quote~</code>）</td></tr><tr><td>Black hole</td><td><code>_</code></td><td>vim</td><td>否</td><td>一般称为黑洞寄存器。对于当前操作，如果你不希望在其他寄存器中保留文本，那就在命令前加上 <code>_</code>。比如，<code>&quot;_dd</code> 命令不会将文本放到寄存器 <code>&quot;</code>、<code>1</code>、<code>+</code> 或 <code>*</code> 中</td></tr><tr><td>Last search pattern</td><td><code>/</code></td><td>vim</td><td>否</td><td>最近一次通过 <code>/</code>、<code>?</code> 或 <code>:global</code> 等命令调用的匹配条件</td></tr></tbody></table></div><p>只要不是只读的寄存器，用户都有权限修改它的内容，比如：</p><pre><code class="hljs vim">:<span class="hljs-keyword">let</span> @/ = <span class="hljs-string">&#x27;register&#x27;</span></code></pre><p>这样，我们按 <kbd>n</kbd> 的时候就会跳转到单词”register” 出现的地方。</p><p>有些时候，你的操作可能已经修改了寄存器，而你没有察觉到。请参阅 <code>:h registers</code> 获取更多帮助。</p><p>上面提到过，复制的命令是 <kbd>y</kbd>，粘贴的命令是 <kbd>p</kbd> 或者 <kbd>P</kbd>。但请注意，Vim 会区分「字符选取」与「行选取」。请参阅 <code>:h linewise</code> 获取更多帮助。</p><p><strong>行选取</strong>：<br>命令 <code>yy</code> 或 <code>Y</code> 都是复制当前行。这时移动光标至其他位置，按下 <code>p</code> 就可以在光标下方粘贴复制的行，按下 <code>P</code> 就可以在光标上方粘贴至复制的行。</p><p><strong>字符选取</strong>：<br>命令 <code>0yw</code> 可以复制第一个单词。这时移动光标至其他位置，按下 <code>p</code> 就可以在当前行、光标后的位置粘贴单词，按下 <code>P</code> 就可以在当前行、光标前的位置粘贴单词。</p><p><strong>将文本存到指定的寄存器中</strong>：<br>命令 <code>&quot;aY</code> 可以将当前行复制，并存储到寄存器 <code>a</code> 中。这时移动光标至其他位置，通过命令 <code>&quot;AY</code> 就可以把这一行的内容扩展到寄存器 <code>a</code> 中，而之前存储的内容也不会丢失。</p><p>为了便于理解和记忆，建议大家现在就试一试上面提到的这些操作。操作过程中，你可以随时通过 <code>:reg</code> 来查看寄存器的变化。</p><p><strong>有趣的是</strong>：<br>在 Vim 中，<code>y</code> 是复制命令，源于单词 “yanking”。而在 Emacs 中，”yanking” 代表的是粘贴（或者说，重新插入刚才删掉的内容），而并不是复制。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>范围 (Ranges) 其实很好理解，但很多 Vim 用户的理解不到位。</p><ul><li>很多命令都可以加一个数字，用于指明操作范围</li><li>范围可以是一个行号，用于指定某一行</li><li>范围也可以是一对通过 <code>,</code> 或 <code>;</code> 分割的行号</li><li>大部分命令，默认只作用于当前行</li><li>只有 <code>:write</code> 和 <code>:global</code> 是默认作用于所有行的</li></ul><p>范围的使用是十分直观的。以下为一些例子（其中，<code>:d</code> 为 <code>:delete</code> 的缩写）：</p><div class="table-container"><table><thead><tr><th>命令</th><th>操作的行</th></tr></thead><tbody><tr><td><code>:d</code></td><td>当前行</td></tr><tr><td><code>:.d</code></td><td>当前行</td></tr><tr><td><code>:1d</code></td><td>第一行</td></tr><tr><td><code>:$d</code></td><td>最后一行</td></tr><tr><td><code>:1,$d</code></td><td>所有行</td></tr><tr><td><code>:%d</code></td><td>所有行（这是 <code>1,$</code> 的语法糖）</td></tr><tr><td><code>:.,5d</code></td><td>当前行至第 5 行</td></tr><tr><td><code>:,5d</code></td><td>同样是当前行至第 5 行</td></tr><tr><td><code>:,+3d</code></td><td>当前行及接下来的 3 行</td></tr><tr><td><code>:1,+3d</code></td><td>第一行至当前行再加 3 行</td></tr><tr><td><code>:,-3d</code></td><td>当前行及向上的 3 行（Vim 会弹出提示信息，因为这是一个保留的范围）</td></tr><tr><td><code>:3,&#39;xdelete</code></td><td>第三行至<a href="#标注">标注</a> 为 x 的那一行</td></tr><tr><td><code>:/^foo/,$delete</code></td><td>当前行以下，以字符 “foo” 开头的那一行至结尾</td></tr><tr><td><code>:/^foo/+1,$delete</code></td><td>当前行以下，以字符 “foo” 开头的那一行的下一行至结尾</td></tr></tbody></table></div><p>需要注意的是，<code>;</code> 也可以用于表示范围。区别在于，<code>a,b</code> 的 <code>b</code> 是以当前行作为参考的。而 <code>a;b</code> 的 <code>b</code> 是以 <code>a</code> 行作为参考的。举个例子，现在你的光标在第 5 行。这时 <code>:1,+1d</code> 会删除第 1 行至第 6 行，而 <code>:1;+1d</code> 会删除第 1 行和第 2 行。</p><p>如果你想设置多个寻找条件，只需要在条件前加上 <code>/</code>，比如：</p><pre><code class="hljs vim">:/foo//bar//quux/d</code></pre><p>这就会删除当前行之后的某一行。定位方式是，先在当前行之后寻找第一个包含 “foo” 字符的那一行，然后在找到的这一行之后寻找第一个包含 “bar” 字符的那一行，然后再在找到的这一行之后寻找第一个包含 “quux” 的那一行。删除的就是最后找到的这一行。</p><p>有时，Vim 会在命令前自动添加范围。举个例子，如果你先通过 <code>V</code> 命令进入行选取模式，选中一些行后按下 <code>:</code> 进入命令模式，这时候你会发现 Vim 自动添加了 <code>&#39;&lt;,&#39;&gt;</code> 范围。这表示，接下来的命令会使用之前选取的行号作为范围。但如果后续命令不支持范围，Vim 就会报错。为了避免这样的情况发生，有些人会设置这样的按键映射：<code>:vnoremap foo :&lt;c-u&gt;command</code>，组合键 <kbd>Ctrl + u</kbd> 可以清除当前命令行中的内容。</p><p>另一个例子是在普通模式中按下 <code>!!</code>，命令行中会出现 <code>:.!</code>。如果这时你如果输入一个外部命令，那么当前行的内容就会被这个外部命令的输出替换。你也可以通过命令 <code>:?^$?+1,/^$/-1!ls</code> 把当前段落的内容替换成外部命令 <code>ls</code> 的输出，原理是向前和向后各搜索一个空白行，删除这两个空白行之间的内容，并将外部命令 <code>ls</code> 的输出放到这两个空白行之间。</p><p>请参阅以下两个命令来获取更多帮助：</p><pre><code class="hljs vim">:h cmdline-ranges:h <span class="hljs-number">10.3</span></code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p>你可以使用标注功能来标记一个位置，也就是记录文件某行的某个位置。</p><div class="table-container"><table><thead><tr><th>标注</th><th>设置者</th><th>使用</th></tr></thead><tbody><tr><td><code>a</code>-<code>z</code></td><td>用户</td><td>仅对当前的一个文件生效，也就意味着只可以在当前文件中跳转</td></tr><tr><td><code>A</code>-<code>Z</code></td><td>用户</td><td>全局标注，可以作用于不同文件。大写标注也称为「文件标注」。跳转时有可能会切换到另一个缓冲区</td></tr><tr><td><code>0</code>-<code>9</code></td><td>viminfo</td><td><code>0</code> 代表 viminfo 最后一次被写入的位置。实际使用中，就代表 Vim 进程最后一次结束的位置。<code>1</code> 代表 Vim 进程倒数第二次结束的位置，以此类推</td></tr></tbody></table></div><p>如果想跳转到指定的标注，你可以先按下 <code>&#39;</code> / <code>g&#39;</code> 或者 <code>` </code> / <code>g` </code> 然后按下标注名。</p><p>如果你想定义当前文件中的标注，可以先按下 <code>m</code> 再按下标注名。比如，按下 <code>mm</code> 就可以把当前位置标注为 <code>m</code>。在这之后，如果你的光标切换到了文件的其他位置，只需要通过 <code>&#39;m</code> 或者 <code>`m</code>即可回到刚才标注的行。区别在于，<code>&#39;m</code>会跳转回被标记行的第一个非空字符，而<code>`m</code>会跳转回被标记行的被标记列。根据 viminfo 的设置，你可以在退出 Vim 的时候保留小写字符标注。请参阅<code>:h viminfo-&#39;</code> 来获取更多帮助。</p><p>如果你想定义全局的标注，可以先按下 <code>m</code> 再按下大写英文字符。比如，按下 <code>mM</code> 就可以把当前文件的当前位置标注为 <code>M</code>。在这之后，就算你切换到其他的缓冲区，依然可以通过 <code>&#39;M</code> 或 <code>`M</code> 跳转回来。</p><p>关于跳转，还有以下的方式：</p><div class="table-container"><table><thead><tr><th>按键</th><th>跳转至</th></tr></thead><tbody><tr><td><code>&#39;[</code> 与 <code>`[</code></td><td>上一次修改或复制的第一行或第一个字符</td></tr><tr><td><code>&#39;]</code> 与 <code>`]</code></td><td>上一次修改或复制的最后一行或最后一个字符</td></tr><tr><td><code>&#39;&lt;</code> 与 <code>`&lt;</code></td><td>上一次在可视模式下选取的第一行或第一个字符</td></tr><tr><td><code>&#39;&gt;</code> 与 <code>`&gt;</code></td><td>上一次在可视模式下选取的最后一行或最后一个字符</td></tr><tr><td><code>&#39;&#39;</code> 与 <code>`&#39;</code></td><td>上一次跳转之前的光标位置</td></tr><tr><td><code>&#39;&quot;</code> 与 <code>`&quot;</code></td><td>上一次关闭当前缓冲区时的光标位置</td></tr><tr><td><code>&#39;^</code> 与 <code>`^</code></td><td>上一次插入字符后的光标位置</td></tr><tr><td><code>&#39;.</code> 与 <code>`.</code></td><td>上一次修改文本后的光标位置</td></tr><tr><td><code>&#39;(</code> 与 <code>`(</code></td><td>当前句子的开头</td></tr><tr><td><code>&#39;)</code> 与 <code>`)</code></td><td>当前句子的结尾</td></tr><tr><td><code>&#39;&#123;</code> 与 <code>`&#123;</code></td><td>当前段落的开头</td></tr><tr><td><code>&#39;&#125;</code> 与 <code>`&#125;</code></td><td>当前段落的结尾</td></tr></tbody></table></div><p>标注也可以搭配 <a href="#范围">范围</a> 一起使用。前面提到过，如果你在可视模式下选取一些文本，然后按下 <code>:</code>，这时候你会发现命令行已经被填充了 <code>:&#39;&lt;,&#39;&gt;</code>。对照上面的表格，现在你应该明白了，这段代表的就是可视模式下选取的范围。</p><p>请使用 <code>:marks</code> 命令来显示所有的标注，参阅 <code>:h mark-motions</code> 来获取关于标注的更多帮助。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h2><p>Vim 在插入模式中为我们提供了多种补全方案。如果有多个补全结果，Vim 会弹出一个菜单供你选择。</p><p>常见的补全有标签、项目中引入的模块或库中的方法名、文件名、字典及当前缓冲区的字段。</p><p>针对不同的补全方案，Vim 为我们提供了不同的按键映射。这些映射都是在<strong>插入模式中</strong>通过 <kbd>Ctrl</kbd> + <kbd>x</kbd> 来触发：</p><div class="table-container"><table><thead><tr><th>映射</th><th>类型</th><th>帮助文档</th></tr></thead><tbody><tr><td><code>&lt;c-x&gt;&lt;c-l&gt;</code></td><td>整行</td><td><code>:h i^x^l</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-n&gt;</code></td><td>当前缓冲区中的关键字</td><td><code>:h i^x^n</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-k&gt;</code></td><td>字典（请参阅 <code>:h &#39;dictionary&#39;</code>）中的关键字</td><td><code>:h i^x^k</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-t&gt;</code></td><td>同义词字典（请参阅 <code>:h &#39;thesaurus&#39;</code>）中的关键字</td><td><code>:h i^x^t</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-i&gt;</code></td><td>当前文件以及包含的文件中的关键字</td><td><code>:h i^x^i</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-]&gt;</code></td><td>标签</td><td><code>:h i^x^]</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-f&gt;</code></td><td>文件名</td><td><code>:h i^x^f</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-d&gt;</code></td><td>定义或宏定义</td><td><code>:h i^x^d</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-v&gt;</code></td><td>Vim 命令</td><td><code>:h i^x^v</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-u&gt;</code></td><td>用户自定义补全（通过 <code>&#39;completefunc&#39;</code> 定义）</td><td><code>:h i^x^u</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-o&gt;</code></td><td>Omni Completion（通过 <code>&#39;omnifunc&#39;</code> 定义）</td><td><code>:h i^x^o</code></td></tr><tr><td><code>&lt;c-x&gt;s</code></td><td>拼写建议</td><td><code>:h i^Xs</code></td></tr></tbody></table></div><p>尽管用户自定义补全与 Omni Completion 是不同的，但他们做的事情基本一致。共同点在于，他们都是一个监听当前光标位置的函数，返回值为一系列的补全建议。用户自定义补全是由用户定义的，基于用户的个人用途，因此你可以根据自己的喜好和需求随意定制。而 Omni Completion 是针对文件类型的补全，比如在 C 语言中补全一个结构体（struct）的成员（members），或者补全一个类的方法，因而它通常都是由文件类型插件设置和调用的。</p><p>如果你设置了 <code>&#39;complete&#39;</code> 选项，那么你就可以在一次操作中采用多种补全方案。这个选项默认包含了多种可能性，因此请按照自己的需求来配置。你可以通过 <code>&lt;c-n&gt;</code> 来调用下一个补全建议，或通过 <code>&lt;c-p&gt;</code> 来调用上一个补全建议。当然，这两个映射同样可以直接调用补全函数。请参阅 <code>:h i^n</code> 与 <code>:h &#39;complete&#39;</code> 来获得更多帮助。</p><p>如果你想配置弹出菜单的行为，请一定要看一看 <code>:h &#39;completeopt&#39;</code> 这篇帮助文档。默认的配置已经不错了，但我个人（原作者）更倾向于把 “noselect” 加上。</p><p>请参阅以下文档获取更多帮助：</p><pre><code class="hljs vim">:h ins-completion:h popupmenu-<span class="hljs-built_in">keys</span>:h <span class="hljs-keyword">new</span>-omni-completion</code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="动作，操作符，文本对象"><a href="#动作，操作符，文本对象" class="headerlink" title="动作，操作符，文本对象"></a>动作，操作符，文本对象</h2><p><strong>动作</strong>也就是指移动光标的操作，你肯定很熟悉 <code>h</code>、<code>j</code>、<code>k</code> 和 <code>l</code>，以及 <code>w</code> 和 <code>b</code>。但其实，<code>/</code> 也是一个动作。他们都可以搭配数字使用，比如 <code>2?the&lt;cr&gt;</code> 可以将光标移动到倒数第二个 “the” 出现的位置。</p><p>以下会列出一些常用的动作。你也可以通过 <code>:h navigation</code> 来获取更多的帮助。</p><p><strong>操作符</strong>是对某个区域文本执行的操作。比如，<code>d</code>、<code>~</code>、<code>gU</code> 和 <code>&gt;</code> 都是操作符。这些操作符既可以在普通模式下使用，也可以在可视模式下使用。在普通模式中，顺序是先按操作符，再按动作指令，比如 <code>&gt;j</code>。在可视模式中，选中区域后直接按操作符就可以，比如 <code>Vjd</code>。</p><p>与动作一样，操作符也可以搭配数字使用，比如 <code>2gUw</code> 可以将当前单词以及下一个单词转成大写。由于动作和操作符都可以搭配数字使用，因此 <code>2gU2w</code> 与执行两次 <code>gU2w</code> 效果是相同的。</p><p>请参阅 <code>:h operator</code> 来查看所有的操作符。你也可以通过 <code>:set tildeop</code> 命令把 <code>~</code> 也变成一个操作符</p><p>值得注意的是，动作是单向的，而<strong>文本对象</strong>是双向的。文本对象不仅作用于符号（比如括号、中括号和大括号等）标记的范围内，也作用于整个单词、整个句子等其他情况。</p><p>文本对象不能用于普通模式中移动光标的操作，因为光标还没有智能到可以向两个方向同时跳转。但这个功能可以在可视模式中实现，因为在对象的一端选中的情况下，光标只需要跳转到另一端就可以了。</p><p>文本对象操作一般用 <code>i</code> 或 <code>a</code> 加上对象标识符操作，其中 <code>i</code> 表示在对象内（英文 inner）操作，<code>a</code> 表示对整个对象（英文 around）操作，这时开头和结尾的空格都会被考虑进来。举个例子，<code>diw</code> 可以删除当前单词，<code>ci(</code> 可以改变括号中的内容。</p><p>文本对象同样可以与数字搭配使用。比如，像 <code>((( )))</code> 这样的文本，假如光标位于最内层的括号上或最内层的括号内，那么 <code>d2a(</code> 将会删除从最内层开始的两对括号，以及他们之间的所有内容。其实，<code>d2a(</code> 这个操作等同于 <code>2da(</code>。在 Vim 的命令中，如果有两处都可以接收数字作为参数，那么最终结果就等同于两个数字相乘。在这里，<code>d</code> 与 <code>a(</code> 都是可以接收参数的，一个参数是 1，另一个是 2，我们可以把它们相乘然后放到最前面。</p><p>请参阅 <code>:h text-objects</code> 来获取更多关于文本对象的帮助。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="自动命令"><a href="#自动命令" class="headerlink" title="自动命令"></a>自动命令</h2><p>在特定的情况下，Vim 会传出事件。如果你想针对这些事件执行回调方法，那么就需要用到自动命令这个功能。</p><p>如果没有了自动命令，那你基本上是用不了 Vim 的。自动命令一直都在执行，只是很多时候你没有注意到。不信的话，可以执行命令 <code>:au</code> ，不要被结果吓到，这些是当前有效的所有自动命令。</p><p>请使用 <code>:h &#123;event&#125;</code> 来查看 Vim 中所有事件的列表，你也可以参考 <code>:h autocmd-events-abc</code> 来获取关于事件的更多帮助。</p><p>一个很常用的例子，就是针对文件类型执行某些设置：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">ruby</span> <span class="hljs-keyword">setlocal</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">2</span> softtabstop=<span class="hljs-number">2</span> comments-=:#</code></pre><p>但是缓冲区是如何知道当前的文件中包含 Ruby 代码呢？这其实是另一个自动命令检测的到的，然后把文件类型设置成为 Ruby，这样就触发了上面的 <code>FileType</code> 事件。</p><p>在配置 vimrc 的时候，一般第一行加进去的就是 <code>filetype on</code>。这就意味着，Vim 启动时会读取 <code>filetype.vim</code> 文件，然后根据文件类型来触发相应的自动命令。</p><p>如果你勇于尝试，可以查看下 <code>:e $VIMRUNTIME/filetype.vim</code>，然后在输出中搜索 “Ruby”。这样，你就会发现其实 Vim 只是通过文件扩展名 <code>.rb</code> 判断某个文件是不是 Ruby 的。</p><p><strong>注意</strong>：对于相同事件，如果有多个自动命令，那么自动命令会按照定义时的顺序执行。通过 <code>:au</code> 就可以查看它们的执行顺序。</p><pre><code class="hljs vim"><span class="hljs-keyword">au</span> BufNewFile,BufRead *.rb,*.rbw <span class="hljs-keyword">setf</span> <span class="hljs-keyword">ruby</span></code></pre><p><code>BufNewFile</code> 与 <code>BufRead</code> 事件是被写在 Vim 源文件中的。因此，每当你通过 <code>:e</code> 或者类似的命令打开文件，这两个事件都会触发。然后，就是读取 <code>filetype.vim</code> 文件来判断打开的文件类型。</p><p>简单来说，事件和自动命令在 Vim 中的应用十分广泛。而且，Vim 为我们留出了一些易用的接口，方便用户配置适合自己的事件驱动回调。</p><p>请参阅 <code>:h autocommand</code> 来获取更多帮助</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="变更历史，跳转历史"><a href="#变更历史，跳转历史" class="headerlink" title="变更历史，跳转历史"></a>变更历史，跳转历史</h2><p>在 Vim 中，用户最近 100 次的文字改动都会被保存在<strong>变更历史</strong>中。如果在同一行有多个小改动，那么 Vim 会把它们合并成一个。尽管内容改动会合并，但作用的位置还是会只记录下最后一次改动的位置。</p><p>在你移动光标或跳转的时候，每一次的移动或跳转前的位置会被记录到<strong>跳转历史</strong>中。类似地，跳转历史也可以最多保存 100 条记录。对于每个窗口，跳转记录是独立的。但当你分离窗口时（比如使用 <code>:split</code> 命令），跳转历史会被复制过去。</p><p>Vim 中的跳转命令，包括 <code>&#39;</code>、<code>` </code>、<code>G</code>、<code>/</code>、<code>?</code>、<code>n</code>、<code>N</code>、<code>%</code>、<code>(</code>、<code>)</code>、<code>[[</code>、<code>]]</code>、<code>&#123;</code>、<code>&#125;</code>、<code>:s</code>、<code>:tag</code>、<code>L</code>、<code>M</code>、<code>H</code> 以及开始编辑一个新文件的命令。</p><div class="table-container"><table><thead><tr><th>列表</th><th>显示所有条目</th><th>跳转到上一个位置</th><th>跳转到下一个位置</th></tr></thead><tbody><tr><td>跳转历史</td><td><code>:jumps</code></td><td><code>[count]&lt;c-o&gt;</code></td><td><code>[count]&lt;c-i&gt;</code></td></tr><tr><td>变更历史</td><td><code>:changes</code></td><td><code>[count]g;</code></td><td><code>[count]g,</code></td></tr></tbody></table></div><p>如果你执行第二列的命令显示所有条目，这时 Vim 会用 <code>&gt;</code> 标记来为你指示当前位置。通常这个标记位于 1 的下方，也就代表最后一次的位置。</p><p>如果你希望关闭 Vim 之后还保留这些条目，请参阅 <code>:h viminfo-&#39;</code> 来获取更多帮助。</p><p><strong>注意</strong>：上面提到过，最后一次跳转前的位置也会记录在<a href="#标注">标注</a>中，也可以通过连按 <kbd>``</kbd> 或 <kbd>‘’</kbd> 跳转到那个位置</p><p>请参阅以下两个命令来获取更多帮助：</p><pre><code class="hljs vim">:h changelist:h jumplist</code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="内容变更历史记录"><a href="#内容变更历史记录" class="headerlink" title="内容变更历史记录"></a>内容变更历史记录</h2><p>Vim 会记录文本改变之前的状态。因此，你可以使用「撤销」操作 <kbd>u</kbd> 来取消更改，也可以通过「重做」操作 <kbd>Ctrl + r</kbd> 来恢复更改。</p><p>值得注意的是，Vim 采用 <a href="https://en.wikipedia.org/wiki/Tree_(data_structure">tree</a>&gt;) 数据结构来存储内容变更的历史记录，而不是采用 <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type">queue</a>&gt;)。你的每次改动都会成为存储为树的节点。而且，除了第一次改动（根节点），之后的每次改动都可以找到一个对应的父节点。每一个节点都会记录改动的内容和时间。其中，「分支」代表从任一节点到根节点的路径。当你进行了撤销操作，然后又输入了新的内容，这时候就相当于创建了分支。这个原理和 git 中的 branch（分支）十分类似。</p><p>考虑以下这一系列按键操作：</p><pre><code class="hljs vim">ifoo<span class="hljs-symbol">&lt;esc&gt;</span>obar<span class="hljs-symbol">&lt;esc&gt;</span>obaz<span class="hljs-symbol">&lt;esc&gt;</span><span class="hljs-keyword">u</span>oquux<span class="hljs-symbol">&lt;exc&gt;</span></code></pre><p>那么现在，Vim 中会显示三行文本，分别是 “foo”、”bar” 和 “quux”。这时候，存储的树形结构如下：</p><pre><code>     foo(1)       /    bar(2)   /      \baz(3)   quux(4)</code></pre><p>这个树形结构共包含四次改动，括号中的数字就代表时间顺序。</p><p>现在，我们有两种方式遍历这个树结构。一种叫「按分支遍历」，一种叫「按时间遍历」。</p><p>撤销 <kbd>u</kbd> 与重做 <kbd>Ctrl + r</kbd> 操作是按分支遍历。对于上面的例子，现在我们有三行字符。这时候按 <kbd>u</kbd> 会回退到 “bar” 节点，如果再按一次 <kbd>u</kbd> 则会回退到 “foo” 节点。这时，如果我们按下 <kbd>Ctrl + r</kbd> 就会前进至 “bar” 节点，再按一次就回前进至 “quux” 节点。在这种方式下，我们无法访问到兄弟节点（即 “baz” 节点）。</p><p>与之对应的是按时间遍历，对应的按键是 <code>g-</code> 和 <code>g+</code>。对于上面的例子，按下 <code>g-</code> 会首先回退到 “baz” 节点。再次按下 <code>g-</code> 会回退到 “bar” 节点。</p><div class="table-container"><table><thead><tr><th>命令/按键</th><th>执行效果</th></tr></thead><tbody><tr><td><code>[count]u</code> 或 <code>:undo [count]</code></td><td>回退到 <code>[count]</code> 次改动之前</td></tr><tr><td><code>[count]&lt;c-r&gt;</code> 或 <code>:redo [count]</code></td><td>重做 <code>[count]</code> 次改动</td></tr><tr><td><code>U</code></td><td>回退至最新的改动</td></tr><tr><td><code>[count]g-</code> 或 <code>:earlier [count]?</code></td><td>根据时间回退到 <code>[count]</code> 次改动之前。”?” 为 “s”、”m”、”h”、”d” 或 “f”之一。例如，<code>:earlier 2d</code> 会回退到两天之前。<code>:earlier 1f</code> 则会回退到最近一次文件保存时的内容</td></tr><tr><td><code>[count]g+</code> 或 <code>:later [count]?</code></td><td>类似 <code>g-</code>，但方向相反</td></tr></tbody></table></div><p>内容变更记录会储存在内存中，当 Vim 退出时就会清空。如果需要持久化存储内容变更记录，请参阅<a href="#备份文件交换文件撤销文件以及viminfo文件的处理">备份文件，交换文件，撤销文件以及 viminfo 文件的处理</a>章节的内容。</p><p>如果你觉得这一部分的内容难以理解，请参阅 <a href="https://github.com/mbbill/undotree">undotree</a>，这是一个可视化管理内容变更历史记录的插件。类似的还有 <a href="https://github.com/simnalamburt/vim-mundo">vim-mundo</a>。</p><p>请参阅以下链接获取更多帮助：</p><pre><code class="hljs vim">:h <span class="hljs-keyword">undo</span>.txt:h usr_32</code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="全局位置信息表，局部位置信息表"><a href="#全局位置信息表，局部位置信息表" class="headerlink" title="全局位置信息表，局部位置信息表"></a>全局位置信息表，局部位置信息表</h2><p>在某一个动作返回一系列「位置」的时候，我们可以利用「全局位置信息表」和「局部位置信息表」来存储这些位置信息，方便以后跳转回对应的位置。每一个存储的位置包括文件名、行号和列号。</p><p>比如，编译代码是出现错误，这时候我们就可以把错误的位置直接显示在全局位置信息表，或者通过外部抓取工具使位置显示在局部位置信息表中。</p><p>尽管我们也可以把这些信息显示到一个空格缓冲区中，但用这两个信息表显示的好处在于接口调用很方便，而且也便于浏览输出。</p><p>Vim 中，全局位置信息表只能有一个，但每一个窗口都可以有自己的局部位置信息表。这两个信息表的外观看上去很类似，但在操作上会稍有不同。</p><p>以下为两者的操作比较：</p><div class="table-container"><table><thead><tr><th>动作</th><th>全局位置信息表</th><th>局部位置信息表</th></tr></thead><tbody><tr><td>打开窗口</td><td><code>:copen</code></td><td><code>:lopen</code></td></tr><tr><td>关闭窗口</td><td><code>:cclose</code></td><td><code>:lclose</code></td></tr><tr><td>下一个条目</td><td><code>:cnext</code></td><td><code>:lnext</code></td></tr><tr><td>上一个条目</td><td><code>:cprevious</code></td><td><code>:lprevious</code></td></tr><tr><td>第一个条目</td><td><code>:cfirst</code></td><td><code>:lfirst</code></td></tr><tr><td>最后一个条目</td><td><code>:clast</code></td><td><code>:llast</code></td></tr></tbody></table></div><p>请参阅 <code>:h :cc</code> 以及底下的内容，来获取更多命令的帮助。</p><p><strong>应用实例</strong>：<br>如果我们想用 <code>grep</code> 递归地在当前文件夹中寻找某个关键词，然后把输出结果放到全局位置信息表中，只需要这样：</p><pre><code class="hljs vim">:<span class="hljs-keyword">let</span> &amp;grepprg = <span class="hljs-string">&#x27;grep -Rn $* .&#x27;</span>:grep! foo&lt;<span class="hljs-keyword">grep</span> output - hit enter&gt;:<span class="hljs-keyword">copen</span></code></pre><p>执行了上面的代码，你就能看到所有包含字符串 “foo” 的文件名以及匹配到的相关字段都会显示在全局位置信息表中。</p><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>你可以在 Vim 中录制一系列按键，并把他们存储到<a href="#寄存器">寄存器</a>中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本来实现。</p><ul><li>首先，按下 <kbd>q</kbd>，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 <code>q</code> 这个寄存器中。按下 <code>qq</code>，你会发现命令行里已经显示了 “recording @q”。</li><li>如果你已经录制完成，那么只需要再按一次 <kbd>q</kbd> 就可以结束录制。</li><li>如果你想调用刚才录制的宏，只需要 <code>[count]@q</code></li><li>如果你想调用上一次使用的宏，只需要 <code>[count]@@</code></li></ul><p><strong>实例 1</strong>：</p><p>一个插入字符串 “abc” 后换行的宏，重复调用十次：</p><pre><code class="hljs vim">qq<span class="hljs-keyword">iabc</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;esc&gt;</span>q<span class="hljs-number">10</span>@q</code></pre><p>（对于上面这个功能，你同样可以通过如下的按键： <kbd>o</kbd><kbd>a</kbd><kbd>b</kbd><kbd>c</kbd> 然后 <kbd>ESC</kbd> 然后 <kbd>1</kbd><kbd>0</kbd><kbd>.</kbd> 来实现）。</p><p><strong>实例 2</strong>：</p><p>一个在每行前都加上行号的宏。从第一行开始，行号为 1，后面依次递增。我们可以通过 <kbd>Ctrl</kbd> + <kbd>a</kbd> 来实现递增的行号，在定义宏的时候，它会显示成 <code>^A</code>。</p><pre><code class="hljs vim">qq<span class="hljs-number">0</span>yf jP0^Aq<span class="hljs-number">1000</span> @q</code></pre><p>这里能实现功能，是因为我们假定了文件最多只有 1000 行。但更好的方式是使用「递归」宏，它会一直执行，知道不能执行为止：</p><pre><code class="hljs vim">qq<span class="hljs-number">0</span>yf jP0^A@qq@q</code></pre><p>（对于上面这个插入行号的功能，如果你不愿意使用宏，同样可以通过这段按键操作来实现：<code>:%s/^/\=line(&#39;.&#39;) . &#39;. &#39;</code>）。</p><p>这里向大家展示了如何不用宏来达到相应的效果，但要注意，这些不用宏的实现方式只适用于这些简单的示例。对于一些比较复杂的自动化操作，你确实应该考虑使用宏。</p><p>请参阅以下文档获取更多帮助：</p><pre><code class="hljs vim">:h recording:h <span class="hljs-string">&#x27;lazyredraw&#x27;</span></code></pre><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="颜色主题"><a href="#颜色主题" class="headerlink" title="颜色主题"></a>颜色主题</h2><p>颜色主题可以把你的 Vim 变得更漂亮。Vim 是由多个组件构成的，我们可以给每一个组件都设置不同的文字颜色、背景颜色以及文字加粗等等。比如，我们可以通过这个命令来设置背景颜色：</p><pre><code class="hljs vim">:<span class="hljs-keyword">highlight</span> Normal ctermbg=<span class="hljs-number">1</span> guibg=<span class="hljs-keyword">red</span></code></pre><p>执行后你会发现，现在背景颜色变成红色了。请参阅 <code>:h :highlight</code> 来获取更多帮助。</p><p>其实，颜色主题就是一系列的 <code>:highlight</code> 命令的集合。</p><p>事实上，大部分颜色主题都包含两套配置。一套适用于例如 xterm 和 iTerm 这样的终端环境（使用前缀 <code>cterm</code>），另一套适用于例如 gvim 和 MacVim 的图形界面环境（使用前缀 <code>gui</code>）。对于上面的例子，<code>ctermbg</code> 就是针对终端环境的，而 <code>guibg</code> 就是针对图形界面环境的。</p><p>如果你下载了一个颜色主题，并且在终端环境中打开了 Vim，然后发现显示的颜色与主题截图中差别很大，那很可能是配置文件只设置了图形界面环境的颜色。反之同理，如果你使用的是图形界面环境，发现显示颜色有问题，那就很可能是配置文件只设置了终端环境的颜色。</p><p>第二种情况（图形界面环境的显示问题）其实不难解决。如果你使用的是 Neovim 或者 Vim 7.4.1830 的后续版本，可以通过打开<a href="https://zh.wikipedia.org/wiki/真彩色">真彩色</a>设置来解决显示问题。这就可以让终端环境的 Vim 使用 GUI 的颜色定义，但首先，你要确认一下你的终端环境和环境内的组件（比如 tmux）是否都支持真彩色。可以看一下<a href="https://gist.github.com/XVilka/8346728">这篇文档</a>，描述的十分详细。</p><p>请参阅以下文档或链接来获取更多帮助：</p><ul><li><code>:h &#39;termguicolors&#39;</code></li><li><a href="#主题列表">主题列表</a></li><li><a href="#自定义主题中的颜色">自定义主题中的颜色</a></li></ul><p>返回主目录 <a href="#基础">:arrow_heading_up:</a></p><h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p>每一部分文字（或者代码）都会有特定的结构。对于存在结构的文字和代码，也就意味着它们可以按照一定的逻辑分割成不同区域。Vim 中的折叠功能，就是按照特定的逻辑把文字和代码折叠成一行，并显示一些简短的描述。折叠功能涉及到很多操作，而且折叠功能可以嵌套使用。</p><p>在 Vim 中，有以下 6 中折叠类型：</p><div class="table-container"><table><thead><tr><th>折叠方式</th><th>概述</th></tr></thead><tbody><tr><td>diff</td><td>在「比较窗口」中折叠未改变的文本</td></tr><tr><td>expr</td><td>使用 <code>&#39;foldexpr&#39;</code> 来创建新的折叠逻辑</td></tr><tr><td>indent</td><td>基于缩进折叠</td></tr><tr><td>manual</td><td>使用 <code>zf</code>、<code>zF</code> 或 <code>:fold</code> 来自定义折叠</td></tr><tr><td>marker</td><td>根据特定的文本标记折叠（通常用于代码注释）</td></tr><tr><td>syntax</td><td>根据语法折叠，比如折叠 <code>if</code> 代码块</td></tr></tbody></table></div><p><strong>注意</strong>：折叠功能可能会显著地影响性能。如果你在使用折叠功能的时候出现了打字卡顿之类的问题，请考虑使用 <a href="https://github.com/Konfekt/FastFold">FastFold 插件</a>。这个插件可以让 Vim 按需更新折叠内容，而不是一直调用。</p><p>请参阅以下文档获取更多帮助：</p><pre><code class="hljs vim">:h usr_28:h folds</code></pre><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>如果你保存了当前的「视图」（请参阅 <code>:h :mkview</code>），那么当前窗口、配置和按键映射都会被保存下来（请参阅 <code>:h :loadview</code>）。</p><p>「会话」就是存储所有窗口的相关设置，以及全局设置。简单来说，就是给当前的 Vim 运行实例拍个照，然后把相关信息存储到会话文件中。存储之后的改动就不会在会话文件中显示，你只需要在改动后更新一下会话文件就可以了。</p><p>你可以把当前工作的「项目」存储起来，然后可以在不同的「项目」之间切换。</p><p>现在就来试试吧。打开几个窗口和标签，然后执行 <code>:mksession Foo.vim</code>。如果你没有指定文件名，那就会默认保存为 <code>Session.vim</code>。这个文件会保存在当前的目录下，你可以通过 <code>:pwd</code> 来显示当前路径。重启 Vim 之后，你只需要执行 <code>:source Foo.vim</code>，就可以恢复刚才的会话了。所有的缓冲区、窗口布局、按键映射以及工作路径都会恢复到保存时的状态。</p><p>其实 Vim 的会话文件就只是 Vim 命令的集合。你可以通过命令 <code>:vs Foo.vim</code> 来看看会话文件中究竟有什么。</p><p>你可以决定 Vim 会话中究竟要保存哪些配置，只需要设置一下 <code>&#39;sessionoptions&#39;</code> 就可以了。</p><p>为了方便开发，Vim 把最后一次调用或写入的会话赋值给了一个内部变量 <code>v:this_session</code>。</p><p>请参阅以下文档来获取更多帮助：</p><pre><code class="hljs vim">:h Session:h <span class="hljs-string">&#x27;sessionoptions&#x27;</span>:h <span class="hljs-variable">v:this_session</span></code></pre><h2 id="局部化"><a href="#局部化" class="headerlink" title="局部化"></a>局部化</h2><p>以上提到的很多概念，都有一个局部化（非全局）的版本：</p><div class="table-container"><table><thead><tr><th>全局</th><th>局部</th><th>作用域</th><th>帮助文档</th></tr></thead><tbody><tr><td><code>:set</code></td><td><code>:setlocal</code></td><td>缓冲区或窗口</td><td><code>:h local-options</code></td></tr><tr><td><code>:map</code></td><td><code>:map &lt;buffer&gt;</code></td><td>缓冲区</td><td><code>:h :map-local</code></td></tr><tr><td><code>:autocmd</code></td><td><code>:autocmd * &lt;buffer&gt;</code></td><td>缓冲区</td><td><code>:h autocmd-buflocal</code></td></tr><tr><td><code>:cd</code></td><td><code>:lcd</code></td><td>窗口</td><td><code>:h :lcd</code></td></tr><tr><td><code>:&lt;leader&gt;</code></td><td><code>:&lt;localleader&gt;</code></td><td>缓冲区</td><td><code>:h maploacalleader</code></td></tr></tbody></table></div><p>变量也有不同的作用域，详细内容请参考 <a href="http://vimdoc.sourceforge.net/htmldoc/usr_41.html">Vim scripting 的文档</a>。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="获取离线帮助"><a href="#获取离线帮助" class="headerlink" title="获取离线帮助"></a>获取离线帮助</h2><p>Vim 自带了一套很完善的帮助文档，它们是一个个有固定排版格式的文本文件，通过标签可以访问这些文件的特定位置。</p><p>在开始之前先读一下这个章节：<code>:help :help</code>。执行这个命令以后会在新窗口打开 <code>$VIMRUNTIME/doc/helphelp.txt</code> 文件并跳转到这个文件中 <code>:help</code> 标签的位置。</p><p>一些关于帮助主题的简单规则：</p><ul><li>用单引号把文本包起来表示选项，如：<code>:h &#39;textwidth&#39;</code></li><li>以小括号结尾表示 VimL 函数，如：<code>:h reverse()</code></li><li>以英文冒号开头表示命令，如：<code>:h :echo</code></li></ul><p>使用快捷键 <code>&lt;c-d&gt;</code> （这是 <kbd>ctrl</kbd>+<kbd>d</kbd>）来列出所有包含你当前输入的内容的帮助主题。如：<code>:h tab&lt;c-d&gt;</code> 会列出所有包含 <code>tab</code> 主题，从 <code>softtabstop</code> 到 <code>setting-guitablabel</code> （译者注：根据安装的插件不同列出的选项也会不同）。</p><p>你想查看所有的 VimL 方法吗？很简单，只要输入：<code>:h ()&lt;c-d&gt;</code> 就可以了。你想查看所有与窗口相关的函数吗？输入 <code>:h win*()&lt;c-d&gt;</code>。</p><p>相信你很快就能掌握这些技巧，但是在刚开始的时候，你可能对于该通过什么进行查找一点线索都没有。这时你可以想象一些与要查找的内容相关的关键字，再让 <code>:helpgrep</code> 来帮忙。</p><pre><code class="hljs vim">:<span class="hljs-keyword">helpgrep</span> backwards</code></pre><p>上面的命令会在所有的帮助文件中搜索“backwards”，然后跳转到第一个匹配的位置。所有的匹配位置都会被添加到全局位置信息表，用 <code>:cp / :cn</code> 可以在匹配位置之间进行切换。或者用 <code>:copen</code> 命令来打开全局位置信息表，将光标定位到你想要的位置，再按 回车就可以跳转到该匹配项。详细说明请参考 <code>:h quickfix</code>。</p><h2 id="获取离线帮助（补充）"><a href="#获取离线帮助（补充）" class="headerlink" title="获取离线帮助（补充）"></a>获取离线帮助（补充）</h2><p>这个列表最初发表在 <a href="https://groups.google.com/forum/#!forum/vim_dev">vim_dev</a>，由 @chrisbra 编辑的，他是 Vim 开发人员中最活跃的一个。</p><p>经过一些微小的改动后，重新发布到了这里。</p><hr><p>如果你知道你想要找什么，使用帮助系统的搜索会更简单一些，因为搜索出的主题都带有固定的格式。</p><p>而且帮助系统中的主题包含了你当前使用的 Vim 版本的所特有特性，而网上那些已经过时或者是早期发布的话题是不会包含这些的。</p><p>因此学习使用帮助系统以及它所用的语言是很有必要的。这里是一些例子（不一定全，我有可能忘了一些什么）。</p><p>（译者注：下面列表中提及的都是如何指定搜索主题以便快速准确的找到你想要的帮助）</p><ol><li><p>选项要用单引号引起来。用 <code>:h &#39;list&#39;</code> 来查看列表选项帮助。只有你明确的知道你要找这么一个选项的时候才可以这么做，不然的话你可以用 <code>:h options.txt</code> 来打开所有选项的帮助页面，再用正则表达式进行搜索，如：<code>/width</code>。某些选项有它们自己的命名空间，如：<code>:h cpo-a</code>，<code>:h cpo-A</code>， <code>:h cpo-b</code> 等等。</p></li><li><p>普通模式的命令不能用冒号作为前缀。使用 <code>:h gt</code> 来转到“gt”命令的帮助页面。</p></li><li><p>正则表达式以“/”开头，所以 <code>:h /\+</code> 会带你到正则表达式中量词“+”的帮助页面。</p></li><li><p>组合键经常以一个字母开头表示它们可以在哪些模式中使用。如：<code>:h i_CTRL-X</code> 会带你到插入模式下的 CTRL-X 命令的用法帮助页面，这是一个自动完成类的组合键。需要注意的是某些键是有固定写法的，如 Control 键写成 CTRL。还有，查找普通模式下的组合键帮助时，可以省略开头的字母“n”，如：<code>:h CTRL-A</code>。而 <code>:h c_CTRL-A</code>（译者注：原文为 <code>:h c_CRTL-R</code>，感觉改为 A 更符合上下文语境）会解释 CTRL-A 在命令模式下输入命令时的作用；<code>:h v_CTRL-A</code> 说的是在可见模式下把光标所在处的数字加 1；<code>:h g_CTRL-A</code> 则说的是 g 命令（你需要先按 “g” 的命令）。这里的 “g” 代表一个普通的命令，这个命令总是与其它的按键组合使用才生效，与 “z” 开始的命令相似。</p></li><li><p>寄存器是以 “quote” 开头的。如：<code>:h quote:</code> （译者注：原文为<code>:h quote</code>，感觉作者想以”:”来举例）来查看关于”:”寄存器的说明。</p></li><li><p>关于 Vim 脚本（VimL）的帮助都在 <code>:h eval.txt</code> 里。而某些方面的语言可以使用 <code>:h expr-X</code> 获取帮助，其中的 ‘X’ 是一个特定的字符，如：<code>:h expr-!</code> 会跳转到描述 VimL 中’!’（非）的章节。另外一个重要提示，可以使用 <code>:h function-list</code> 来查看所有函数的简要描述，列表中包括函数名和一句话描述。</p></li><li><p>关于映射都可以在 <code>:h map.txt</code> 中找到。通过 <code>:h mapmode-i</code> 来查找 <code>:imap</code> 命令的相关信息；通过 <code>:h map-topic</code> 来查找专门针对映射的帮助（译者注：topic 为一个占位符，正如上面的字符 ‘X’ 一样，在实际使用中需要替换成相应的单词）（如：<code>:h :map-local</code> 查询本地 buffer 的映射，<code>:h map-bar</code> 查询如何在映射中处理’|’)。</p></li><li><p>命令定义用 “command-“ 开头，如用 <code>:h command-bar</code> 来查看自定义命令中’!’的作用。</p></li><li><p>窗口管理类的命令是以 “CTRL-W” 开头的，所以你可以用 <code>:h CTRL-W_*</code> 来查找相应的帮助（译者注：’*‘同样为占位符）（如：<code>:h CTRL-W_p</code> 查看切换到之前访问的窗口命令的解释）。如果你想找窗口处理的命令，还可以通过访问 <code>:h windows.txt</code> 并逐行向下浏览，所有窗口管理的命令都在这里了。</p></li><li><p>执行类的命令以”:”开头，即：<code>:h :s</code> 讲的是 “:s” 命令。</p></li><li><p>在输入某个话题时按 CTRL-D，让 Vim 列出所有的近似项辅助你输入。</p></li><li><p>用 <code>:helpgrep</code> 在所有的帮助页面（通常还包括了已安装的插件的帮助页面）中进行搜索。参考 <code>:h :helpgrep</code> 来了解如何使用。当你搜索了一个话题之后，所有的匹配结果都被保存到了全局位置信息表（或局部位置信息表）当中，可以通过 <code>:copen</code> 或 <code>:lopen</code> 打开。在打开的窗口中可能通过 <code>/</code> 对搜索结果进行进一步的过滤。</p></li><li><p><code>:h helphelp</code> 里介绍了如何使用帮助系统。</p></li><li><p>用户手册。它采用了一种对初学者更加友好的方式来展示帮助话题。用 <code>:h usr_toc.txt</code> 打开目录（你可能已经猜到这个命令的用处了）。浏览用户手册能帮助你找出某些你想了解的话题，如你可以在第 24 章看到关于“复合字符”以及“输入特殊字符”的讲解（用 <code>:h usr_24.txt</code> 可以快速打开相关章节）。</p></li><li><p>高亮分组的帮助以 <code>hl-</code> 开头。如：<code>:h hl-WarningMsg</code> 说的是警告信息分组的高亮。</p></li><li><p>语法高亮以<code>:syc-</code> 开头，如：<code>:h :syn-conceal</code> 讲的是 <code>:syn</code> 命令的对于隐藏字符是如何显示的。</p></li><li><p>快速修复命令以 <code>:c</code> 开头，而位置列表命令以 <code>:l</code> 开头。</p></li><li><p><code>:h BufWinLeave</code> 讲的是 BufWinLeave 自动命令。还有，<code>:h autocommand-events</code> （译者注：原文是 <code>:h autocommands-events</code>，但是没有该帮助）讲的是所有可用的事件。</p></li><li><p>启动参数都以“-”开头，如：<code>:h -f</code> 会告诉你 Vim 中 “-f” 参数的作用。</p></li><li><p>额外的特性都以“+”开头，如：<code>:h +conceal</code> 讲的是关于隐藏字符的支持。</p></li><li><p>错误代码可以在帮助系统中直接查到。<code>:h E297</code> 会带你到关于这一错误的详细解释。但是有时并没有转到错误描述，而是列出了经常导出这一错误的 Vim 命令，如 <code>:h E128</code> （译者注：原文为<code>:h hE128</code>，但是并没有该帮助）会直接跳转到 <code>:function</code> 命令。</p></li><li><p>关于包含的语法文件的文档的帮助话题格式是 <code>:h ft-*-syntax</code>。如：<code>:h ft-c-syntax</code> 说的就是 C 语言语法文件以及它所提供的选项。有的语法文件还会带有自动完成（<code>:h ft-php-omni</code>）或文件类型插件（<code>:h ft-tex-plugin</code>）相关的章节可以查看。</p></li></ol><p>另外在每个帮助页的顶端通常会包含一个用户文档链接（更多的从从用户的角度出发来主角命令的功能和用法，不涉及那么多细节）。如：<code>:h pattern.txt</code> 里包含了 <code>:h 03.9</code> 和 <code>:h usr_27</code> 两个章节的链接。</p><h2 id="获取在线帮助"><a href="#获取在线帮助" class="headerlink" title="获取在线帮助"></a>获取在线帮助</h2><p>如果你遇到了无法解决的问题，或者需要指引的话，可以参考 <a href="https://groups.google.com/forum/#!forum/vim_use">Vim 使用</a>邮件列表。 <a href="https://de.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> 也是一个很不错的资源。 <a href="https://freenode.net/">Freenode</a> 上的 <code>#vim</code> 频道很庞大，并且里面有许多乐于助人的人。</p><p>如果你想给 Vim 提交 Bug 的话，可以使用 <a href="https://groups.google.com/forum/#!forum/vim_dev">vim_dev</a> 邮件列表。</p><h2 id="执行自动命令"><a href="#执行自动命令" class="headerlink" title="执行自动命令"></a>执行自动命令</h2><p>你可以触发任何事件，如：<code>:doautocmd BufRead</code>。</p><h3 id="用户自定义事件"><a href="#用户自定义事件" class="headerlink" title="用户自定义事件"></a>用户自定义事件</h3><p>对于插件而言，创建你自己的自定义事件有时非常有用。</p><pre><code class="hljs vim"><span class="hljs-function"><span class="hljs-keyword">function</span>! <span class="hljs-title">Chibby</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">&quot; A lot of stuff is happening here.</span>    <span class="hljs-comment">&quot; And at last..</span>    <span class="hljs-keyword">doautocmd</span> User ChibbyExit<span class="hljs-keyword">endfunction</span></code></pre><p>现在你插件的用户可以在 Chibby 执行完成之后做任何他想做的事情：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> User ChibbyExit <span class="hljs-keyword">call</span> ChibbyCleanup()</code></pre><p>顺便提一句，如果在使用 <code>:autocmd</code> 或 <code>:doautocmd</code> 时没有捕捉异常，那么会输出 “No matching autocommands” 信息。这也是为什么许多插件用 <code>silent doautocmd ...</code> 的原因。但是这也会有不足，那就是你不能再在 :autocmd 中使用 <code>echo &quot;foo&quot;</code> 了，取而代之的是你要使用 <code>unsilent echo &quot;foo&quot;</code> 来输出。</p><p>这就是为什么要在触发事件之前先判断事件是否存在的原因，</p><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">exists</span>(<span class="hljs-string">&#x27;#User#ChibbyExit&#x27;</span>)  <span class="hljs-keyword">doautocmd</span> User ChibbyExit<span class="hljs-keyword">endif</span></code></pre><p>帮助文档：<code>:h User</code></p><h3 id="事件嵌套"><a href="#事件嵌套" class="headerlink" title="事件嵌套"></a>事件嵌套</h3><p>默认情况下，自动命令不能嵌套！如果某个自动命令执行了一个命令，这个命令再依次触发其它的事件，这是不可能的。</p><p>例如你想在每次启动 Vim 的时候自动打开你的 vimrc 文件：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> VimEnter * <span class="hljs-keyword">edit</span> $MYVIMRC</code></pre><p>当你启动 Vim 的时候，它会帮你打开你的 vimrc 文件，但是你很快会注意到这个文件没有任何的高亮，尽管平时它是正常可以高亮的。</p><p>问题在于你的非嵌套自动命令 <code>:edit</code> 不会触发“BufRead”事件，所以并不会把文件类型设置成“vim”，进而 <code>$VIMRUNTIME/syntax/vim.vim</code> 永远不会被引入。详细信息请参考：<code>:au BufRead *.vim</code>。要想完成上面所说的需求，使用下面这个命令：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> VimEnter * nested <span class="hljs-keyword">edit</span> $MYVIMRC</code></pre><p>帮助文档：<code>:h autocmd-nested</code></p><h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><p>如果你想在没有 GUI 支持的 Unix 系统中使用 Vim 的 <code>&#39;clipboard&#39;</code> 选项，则需要 <code>+clipboard</code> 以及可选的 <code>+xterm_clipboard</code> 两个<a href="#what-kind-of-vim-am-i-running">特性</a>支持。</p><p>帮助文档：</p><pre><code class="hljs vim">:h <span class="hljs-string">&#x27;clipboard&#x27;</span>:h <span class="hljs-keyword">gui</span>-clipboard:h <span class="hljs-keyword">gui</span>-selections</code></pre><p>另外请参考：<a href="#持续粘贴为什么我每次都要设置-paste-模式">持续粘贴（为什么我每次都要设置 ‘paste’ 模式</a></p><h3 id="剪贴板的使用（Windows-OSX）"><a href="#剪贴板的使用（Windows-OSX）" class="headerlink" title="剪贴板的使用（Windows, OSX）"></a>剪贴板的使用（Windows, OSX）</h3><p>Windows 自带了<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649012(v=vs.85">剪贴板</a>.aspx&gt;)，OSX 则带了一个<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PasteboardGuide106/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008100-SW1">粘贴板</a></p><p>在这两个系统中都可以用大家习惯用的 <code>ctrl+c / cmd+c</code> 复制选择的文本，然后在另外一个应用中用 <code>ctrl+v / cmd+v</code> 进行粘贴。</p><p>需要注意的是复制的文本已经被发送到了剪贴板，所以你在粘贴复制的内容之前关闭这个应用是没有任何问题的。</p><p>每次复制的时候，都会向剪贴板寄存器 <code>*</code> 中写入数据。 而在 Vim 中分别使用 <code>&quot;*y</code> 和 <code>&quot;*p</code> 来进行复制（yank) 和 粘贴（paste)。</p><p>如果你不想每次操作都要指定 <code>*</code> 寄存器，可以在你的 vimrc 中添加如下配置：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> clipboard=unnamed</code></pre><p>通常情况下复制/删除/放入操作会往 <code>&quot;</code> 寄存器中写入数据，而加上了上面的配置之后 <code>*</code> 寄存器也会被写入同样数据，因此简单的使用 <code>y</code> 和 <code>p</code> 就可以复制粘贴了。</p><p>我再说一遍：使用上面的选项意味着每一次的复制/粘贴，即使在同一个 Vim 窗口里，都会修改剪贴板的内容。你自己决定上面的选项是否适合。</p><p>如果你觉得输入 <code>y</code> 还是太麻烦的话，可以使用下面的设置把在可视模式下选择的内容发送到剪贴板：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> clipboard=unnamed,autoselect<span class="hljs-keyword">set</span> guioptions+=<span class="hljs-keyword">a</span></code></pre><p>帮助文档：</p><pre><code class="hljs vim">:h clipboard-unnamed:h autoselect:h <span class="hljs-string">&#x27;go_a&#x27;</span></code></pre><h3 id="剪贴板的使用（Linux-BSD-…）"><a href="#剪贴板的使用（Linux-BSD-…）" class="headerlink" title="剪贴板的使用（Linux, BSD, …）"></a>剪贴板的使用（Linux, BSD, …）</h3><p>如果你的系统使用了 <a href="http://www.x.org/wiki">X 图形界面</a>，事情会变得有一点不同。X 图形界面实现了 <a href="http://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html">X 窗口系统协议</a>, 这个协议在 1987 年发布的主版本 11，因此 X 也通常被称为 X11。</p><p>在 X10 版本中，<a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Cut_Buffers">剪贴缓冲区</a>被用来实现像 <em>clipboard</em> 一样由 X 来复制文本，并且可以被所有的程序访问。现在这个机制在 X 中还存在，但是已经过时了，很多程序都不再使用这一机制。</p><p>近年来数据在程序之间是通过<a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Selections">选择</a>进行传递的。一共有三种选择，经常用到的有两种：PRIMARY 和 CLIPBOARD。</p><p>选择的工作工模大致是这样的：</p><pre><code>Program A：&lt;ctrl+c&gt;Program A：声称对 CLIPBOARD 的所有权Program B：&lt;ctrl+v&gt;Program B：发现CLIPBOARD的所有权被Program A持有Program B：从Program A请求数据Program A：响应这个请求并发送数据给Program BProgram B：从Program A接收数据并插入到窗口中</code></pre><div class="table-container"><table><thead><tr><th>选择</th><th>何时使用</th><th>如何粘贴</th><th>如何在 Vim 中访问</th></tr></thead><tbody><tr><td>PRIMARY</td><td>选择文本</td><td>鼠标中键, shift+insert</td><td><code>*</code> 寄存器</td></tr><tr><td>CLIPBOARD</td><td>选择文本并按 <code>ctrl+c</code></td><td><code>ctrl+v</code></td><td><code>+</code>寄存器</td></tr></tbody></table></div><p><strong>注意</strong>：X 服务器并不会保存选择（不仅仅是 CLIPBOARD 选择）！因此在关闭了相应的程序后，你用 <code>ctrl+c</code> 复制的内容将丢失。</p><p>使用 <code>&quot;*p</code> 来贴粘 PRIMARY 选择中的内容，或者使用 <code>&quot;+y1G</code> 来将整个文件的内容复制到 CLIPBOARD 选择。</p><p>如果你需要经常访问这两个寄存器，可以考虑使用如下配置：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> clipboard^=unnamed          <span class="hljs-comment">&quot; * 寄存器</span><span class="hljs-comment">&quot; 或者</span><span class="hljs-keyword">set</span> clipboard^=unnamedplus      <span class="hljs-comment">&quot; + 寄存器</span></code></pre><p>（<code>^=</code> 用来将设置的值加到默认值之前，详见：<code>:h :set^=</code>）</p><p>这会使得所有复制/删除/放入操作使用 <code>*</code> 或 <code>+</code> 寄存器代替默认的未命令寄存器 <code>&quot;</code>。之后你就可以直接使用 <code>y</code> 或 <code>p</code> 访问你的 X 选择了。</p><p>帮助文档：</p><pre><code class="hljs vim">:h clipboard-unnamed:h clipboard-unnamedplus</code></pre><h2 id="打开文件时恢复光标位置"><a href="#打开文件时恢复光标位置" class="headerlink" title="打开文件时恢复光标位置"></a>打开文件时恢复光标位置</h2><p>如果没有这个设置，每次打开文件时光标都将定位在第一行。而加入了这个设置以后，你就可以恢复到上次关闭文件时光标所在的位置了。</p><p>将下面的配置添加到你的 vimrc 文件：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufReadPost *    \ <span class="hljs-keyword">if</span> <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;$&quot;</span>) |    \   <span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;normal! g`\&quot;&quot;</span> |    \ <span class="hljs-keyword">endif</span></code></pre><p>这是通过判断之前的光标位置是否存在（文件可能被其它程序修改而导致所记录的位置已经不存在了），如果存在的话就执行 <code>g`&quot;</code> （转到你离开时的光标位置但是不更改跳转列表）。</p><p>这需要使用 viminfo 文件：<code>:h viminfo-</code>。</p><h2 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h2><p>根据选项的不同， Vim 最多会创建 4 种工作文件。</p><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><p>你可以让 Vim 在将修改写入到文件之前先备份原文件。默认情况下， Vim 会保存一个备份文件但是当修改成功写入后会立即删除它（<code>:set writebackup</code>）。如果你想一直保留这个备份文件的话，可以使用 <code>:set backup</code>。而如果你想禁用备份功能的话，可以使用 <code>:set nobackup nowritebackup</code>。</p><p>咱们来看一下上次我在 vimrc 中改了什么：</p><pre><code class="hljs sh">$ diff ~/.vim/vimrc ~/.vim/files/backup/vimrc-vimbackup390d389&lt; <span class="hljs-built_in">command</span>! -bar -nargs=* -complete=<span class="hljs-built_in">help</span> H helpgrep &lt;args&gt;</code></pre><p>帮助文档：<code>:h backup</code></p><h3 id="交换文件"><a href="#交换文件" class="headerlink" title="交换文件"></a>交换文件</h3><p>假设你有一个非常棒的科幻小说的构思。在按照故事情节已经写了好几个小时几十万字的时候..忽然停电了！而那时你才想起来你上次保存 <code>~/来自外太空的邪恶入侵者.txt</code> 是在.. 好吧，你从来没有保存过。</p><p>但是并非没有希望了！在编辑某个文件的时候， Vim 会创建一个交换文件，里面保存的是对当前文件所有未保存的修改。自己试一下，打开任意的文件，并使用 <code>:swapname</code> 获得当前的交换文件的保存路径。你也可以将 <code>:set noswapfile</code> 加入到 vimrc 中来禁用交换文件。</p><p>默认情况下，交换文件会自动保存在被编辑文件所在的目录下，文件名以 <code>.file.swp</code> 后缀结尾，每当你修改了超过 200 个字符或是在之前 4 秒内没有任何动作时更新它的内容，在你不再编辑这个文件的时候会被删除。你可以自己修改这些数字，详见：<code>:h &#39;updatecount&#39;</code> 和 <code>:h &#39;updatetime&#39;</code>。</p><p>而在断电时，交换文件并不会被删除。当你再次打开 <code>vim ~/来自外太空的邪恶入侵者.txt</code> 时， Vim 会提示你恢复这个文件。</p><p>帮助文档：<code>:h swap-file</code> 和 <code>:h usr_11</code></p><h3 id="撤销文件"><a href="#撤销文件" class="headerlink" title="撤销文件"></a>撤销文件</h3><p><a href="#%E5%86%85%E5%AE%B9%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95">内容变更历史记录</a>是保存在内存中的，并且会在 Vim 退出时清空。如果你想让它持久化到磁盘中，可以设置 <code>:set undofile</code>。这会把文件 <code>~/foo.c</code> 的撤销文件保存在 <code>~/foo.c.un~</code>。</p><p>帮助文档：<code>:h &#39;undofile&#39;</code> 和 <code>:h undo-persistence</code></p><h3 id="viminfo-文件"><a href="#viminfo-文件" class="headerlink" title="viminfo 文件"></a>viminfo 文件</h3><p>备份文件、交换文件和撤销文件都是与文本状态相关的，而 viminfo 文件是用来保存在 Vim 退出时可能会丢失的其它的信息的。包括历史记录（命令历史、搜索历史、输入历史）、寄存器内容、标注、缓冲区列表、全局变量等等。</p><p>默认情况下，viminfo 被保存在 <code>~/.viminfo</code>。</p><p>帮助文档：<code>:h viminfo</code> 和 <code>:h &#39;viminfo&#39;</code></p><h3 id="临时文件管理设置示例"><a href="#临时文件管理设置示例" class="headerlink" title="临时文件管理设置示例"></a>临时文件管理设置示例</h3><p>如果你跟我一样，也喜欢把这些文件放到一个位置（如：<code>~/.vim/files</code>）的话，可以使用下面的配置：</p><pre><code class="hljs vim"><span class="hljs-comment">&quot; 如果文件夹不存在，则新建文件夹</span><span class="hljs-keyword">if</span> !isdirectory($HOME.<span class="hljs-string">&#x27;/.vim/files&#x27;</span>) &amp;&amp; <span class="hljs-built_in">exists</span>(<span class="hljs-string">&#x27;*mkdir&#x27;</span>)  <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>($HOME.<span class="hljs-string">&#x27;/.vim/files&#x27;</span>)<span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 备份文件</span><span class="hljs-keyword">set</span> backup<span class="hljs-keyword">set</span> backupdir   =$HOME/.<span class="hljs-keyword">vim</span>/<span class="hljs-keyword">files</span>/backup/<span class="hljs-keyword">set</span> backupext   =-vimbackup<span class="hljs-keyword">set</span> backupskip  =<span class="hljs-comment">&quot; 交换文件</span><span class="hljs-keyword">set</span> directory   =$HOME/.<span class="hljs-keyword">vim</span>/<span class="hljs-keyword">files</span>/swap//<span class="hljs-keyword">set</span> updatecount =<span class="hljs-number">100</span><span class="hljs-comment">&quot; 撤销文件</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">undofile</span><span class="hljs-keyword">set</span> undodir     =$HOME/.<span class="hljs-keyword">vim</span>/<span class="hljs-keyword">files</span>/<span class="hljs-keyword">undo</span>/<span class="hljs-comment">&quot; viminfo 文件</span><span class="hljs-keyword">set</span> viminfo     =<span class="hljs-string">&#x27;100,n$HOME/.vim/files/info/viminfo</span></code></pre><p>注意：如果你在一个多用户系统中编辑某个文件时， Vim 提示你交换文件已经存在的话，可能是因为有其他的用户此时正在编辑这个文件。而如果将交换文件放到自己的 home 目录的话，这个功能就失效了。因此服务器非常不建议将这些文件修改到 HOME 目录，避免多人同时编辑一个文件，却没有任何警告。</p><h2 id="编辑远程文件"><a href="#编辑远程文件" class="headerlink" title="编辑远程文件"></a>编辑远程文件</h2><p>Vim 自带的 netrw 插件支持对远程文件的编辑。实际上它将远程的文件通过 scp 复制到本地的临时文件中，再用那个文件打开一个缓冲区，然后在保存时把文件再复制回远程位置。</p><p>下面的命令在你本地的 VIM 配置与 SSH 远程服务器上管理员想让你使用的配置有冲突时尤其有用：</p><pre><code class="hljs vim">:<span class="hljs-keyword">e</span> scp://bram@awesome.site.<span class="hljs-keyword">com</span>/.vimrc</code></pre><p>如果你已经设置了 <code>~/.ssh/config</code>，SSH 会自动读取这里的配置：</p><pre><code>Host awesome    HostName awesome.site.com    Port 1234    User bram</code></pre><p>如果你的 <code>~/.ssh/config</code> 中有以上的内容，那么下面的命令就可以正常执行了：</p><pre><code class="hljs vim">:<span class="hljs-keyword">e</span> scp://awesome/.vimrc</code></pre><p>可以用同样的方法编辑 <code>~/.netrc</code>, 详见：<code>:h netrc-netrc</code>。</p><p>确保你已经看过了 <code>:h netrw-ssh-hack</code> 和 <code>:h g:netrw_ssh_cmd</code>。</p><p>另外一种编辑远程文件的方法是使用 <a href="https://wiki.archlinux.org/index.php/Sshfs">sshfs</a>，它会用 <a href="https://en.wikipedia.org/wiki/Filesystem_in_Userspace">FUSE</a> 来挂载远程的文件系统到你本地的系统当中。</p><h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><p><a href="https://github.com/tpope/vim-pathogen">Pathogen</a>是第一个比较流行的插件管理工具。实际上它只是修改了 <em>runtimepath</em> （<code>:h &#39;rtp&#39;</code>） 来引入所有放到该目录下的文件。你需要自己克隆插件的代码仓库到那个目录。</p><p>真正的插件管理工具会在 Vim 中提供帮助你安装或更新插件的命令。以下是一些常用的插件管理工具：</p><ul><li><a href="https://github.com/Shougo/dein.vim">dein</a></li><li><a href="https://github.com/junegunn/vim-plug">plug</a></li><li><a href="https://github.com/MarcWeber/vim-addon-manager">vim-addon-manager</a></li><li><a href="https://github.com/VundleVim/Vundle.vim">vundle</a></li></ul><h2 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h2><p>这是一种可以同时输入多行连续文本的技术。参考这个<a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/contents/images/content-block_insert.gif">示例</a>。</p><p>用 <code>&lt;c-v&gt;</code> 切换到可视块模式。然后向下选中几行，按 <code>I</code> 或 <code>A</code> （译者注：大写字母，即 shift+i 或 shift+a）然后开始输入你想要输入的文本。</p><p>在刚开始的时候可能会有些迷惑，因为文本只出现在了当前编辑的行，只有在当前的插入动作结束后，之前选中的其它行才会出现插入的文本。</p><p>举一个简单的例子：<code>&lt;c-v&gt;3jItext&lt;esc&gt;</code>。</p><p>如果你要编辑的行长度不同，但是你想在他们后面追加相同的内容的话，可以试一下这个：<code>&lt;c-v&gt;3j$Atext&lt;esc&gt;</code>。</p><p>有时你可能需要把光标放到当前行末尾之后，默认情况下你是不可能做到的，但是可能通过设置 <code>virtualedit</code> 选项达到目的：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> virtualedit=<span class="hljs-keyword">all</span></code></pre><p>设置之后 <code>$10l</code> 或 <code>90|</code> 都会生效，即使超过了行尾的长度。</p><p>详见 <code>:h blockwise-examples</code>。在开始的时候可能会觉得有些复杂，但是它很快就会成为你的第二天性的。</p><p>如果你想探索更有趣的事情，可以看看<a href="https://github.com/terryma/vim-multiple-cursors">多光标</a></p><h2 id="使用外部程序和过滤器"><a href="#使用外部程序和过滤器" class="headerlink" title="使用外部程序和过滤器"></a>使用外部程序和过滤器</h2><p>免责声明：Vim 是单线程的，因此在 Vim 中以前端进程执行其它的程序时会阻止其它的一切。当然你可以使用 Vim 程序接口，如 Lua，并且使用它的多线程支持，但是在那期间， Vim 的处理还是被阻止了。Neovim 添加了任务 API 解决了此问题。</p><p>（据说 Bram 正在考虑在 Vim 中也添加任务控制。如果你使用了较新版本的的 Vim ，可以看一下 <code>:helpgrep startjob</code>。）</p><p>使用 <code>:!</code> 启动一个新任务。如果你想列出当前工作目录下的所有文件，可以使用 <code>:!ls</code>。 用 <code>|</code> 来将结果通过管道重定向，如：<code>:!ls -l | sort | tail -n5</code>。</p><p>没有使用范围时（译者注：范围就是 <code>:</code> 和 <code>!</code> 之间的内容，<code>.</code> 表示当前行，<code>+4</code> 表示向下偏移 4 行，<script type="math/tex">` 表示最末行等，多行时用 `,` 将它们分开，如 `.,</script> 表示从当前行到末行），<code>:!</code> 会显示在一个可滚动的窗口中（译者注：在 GVim 和在终端里运行的结果稍有不同）。相反的，如果指定了范围，这些行会被<a href="https://en.wikipedia.org/wiki/Filter_(software">过滤</a>&gt;)。这意味着它们会通过管道被重定向到过滤程序的 <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29">stdin</a>，在处理后再通过过滤程序的 <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29">stdout</a> 输出，用输出结果替换范围内的文本。例如：为接下来的 5 行文本添加行号，可以使用：</p><pre><code class="hljs vim">:.,+<span class="hljs-number">4</span>!nl -<span class="hljs-keyword">ba</span> -w1 -s<span class="hljs-string">&#x27; &#x27;</span></code></pre><p>由于手动添加范围很麻烦， Vim 提供了一些辅助方法以方便的添加范围。如果需要经常带着范围的话，你可以在可见模式中先选择，然后再按 <code>:</code> （译者注：选中后再按 <code>!</code> 更方便）。还可以使用 <code>!</code> 来取用一个 motion 的范围，如 <code>!ipsort</code> （译者注：原文为 <code>!ip!sort</code> ，但经过实验发现该命令执行报错，可能是因为 Vim 版本的原因造成的，新版本使用 <code>ip</code> 选择当前段落后自动在命令后添加了 <code>!</code> ，按照作者的写法来看，可能之前的版本没有自动添加 <code>!</code> ）可以将当前段落的所有行按字母表顺序进行排序。</p><p>一个使用过滤器比较好的案例是<a href="https://golang.org/">Go 语言</a>。它的缩进语法非常个性，甚至还专门提供了一个名为 <code>gofmt</code> 的过滤器来对 Go 语言的源文件进行正确的缩进。Go 语言的插件通常会提供一个名为 <code>:Fmt</code> 的函数，这个函数就是执行了 <code>:%!gofmt</code> 来对整个文件进行缩进。</p><p>人们常用 <code>:r !prog</code> 将 prog 程序的插入放到当前行的下面，这对于脚本来说是很不错的选择，但是在使用的过程中我发现 <code>!!ls</code> 更加方便，它会用输出结果替换当前行的内容。（译者注：前面命令中的 <code>prog</code> 只是个占位符，在实际使用中需要替换成其它的程序，如 <code>:r !ls</code>，这就与后面的 <code>!!ls</code> 相对应了，两者唯一的不同是第一个命令不会覆盖当前行内容，但是第二个命令会）</p><p>帮助文档：</p><pre><code class="hljs vim">:h <span class="hljs-built_in">filter</span>:h :read!</code></pre><h2 id="Cscope"><a href="#Cscope" class="headerlink" title="Cscope"></a>Cscope</h2><p><a href="http://cscope.sourceforge.net/">Cscope</a> 的功能比 <a href="http://ctags.sourceforge.net/">ctags</a> 要完善，但是只支持 C（通过设置 cscope.files 后同样支持 C++以及 Java）。</p><p>鉴于 Tag 文件只是知道某个符号是在哪里定义的，cscope 的数据库里的数据信息就多的多了：</p><ul><li>符号是在哪里定义的？</li><li>符号是在哪里被使用的？</li><li>这个全局符号定义了什么？</li><li>这个变量是在哪里被赋值的？</li><li>这个函数在源文件的哪个位置？</li><li>哪些函数调用了这个函数？</li><li>这个函数调用了哪些函数？</li><li>“out of space”消息是从哪来的？</li><li>在目录结构中当前的源文件在哪个位置？</li><li>哪些文件引用了这个头文件？</li></ul><h3 id="1-构建数据库"><a href="#1-构建数据库" class="headerlink" title="1. 构建数据库"></a>1. 构建数据库</h3><p>在你项目的根目录执行下面的命令：</p><pre><code class="hljs sh">$ cscope -bqR</code></pre><p>这条命令会在当前目录下创建三个文件：<code>cscope&#123;,.in,.po&#125;.out</code> 。把它们想象成你的数据库。</p><p>不幸的时 <code>cscope</code> 默认只分析 <code>*.[c|h|y|l]</code> 文件。如果你想在 Java 项目中使用 cscope ，需要这样做：</p><pre><code class="hljs sh">$ find . -name <span class="hljs-string">&quot;*.java&quot;</span> &gt; cscope.files$ cscope -bq</code></pre><h3 id="2-添加数据库"><a href="#2-添加数据库" class="headerlink" title="2. 添加数据库"></a>2. 添加数据库</h3><p>打开你新创建的数据库连接：</p><pre><code class="hljs vim">:<span class="hljs-keyword">cs</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">cscope</span>.out</code></pre><p>检查连接已经创建成功：</p><pre><code class="hljs vim">:<span class="hljs-keyword">cs</span> show</code></pre><p>（当然你可以添加多个连接。）</p><h3 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3. 查询数据库"></a>3. 查询数据库</h3><pre><code class="hljs vim">:<span class="hljs-keyword">cs</span> <span class="hljs-keyword">find</span> <span class="hljs-symbol">&lt;kind&gt;</span> <span class="hljs-symbol">&lt;query&gt;</span></code></pre><p>如：<code>:cs find d foo</code> 会列出 <code>foo(...)</code> 调用的所有函数。</p><div class="table-container"><table><thead><tr><th>Kind</th><th>说明</th></tr></thead><tbody><tr><td>s</td><td><strong>s</strong>ymbol：查找使用该符号的引用</td></tr><tr><td>g</td><td><strong>g</strong>lobal：查找该全局符号的定义</td></tr><tr><td>c</td><td><strong>c</strong>alls：查找调用当前方法的位置</td></tr><tr><td>t</td><td><strong>t</strong>ext：查找出现该文本的位置</td></tr><tr><td>e</td><td><strong>e</strong>grep：使用 egrep 搜索当前单词</td></tr><tr><td>f</td><td><strong>f</strong>ile：打开文件名</td></tr><tr><td>i</td><td><strong>i</strong>ncludes：查询引入了当前文件的文件</td></tr><tr><td>d</td><td><strong>d</strong>epends：查找当前方法调用的方法</td></tr></tbody></table></div><p>推荐一些比较方便的映射，如：</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">cs</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> s  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">cg</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> g  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">cc</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">c</span>  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span>ct :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> t  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">ce</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">e</span>  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">cf</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> <span class="hljs-keyword">f</span>  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cfile&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span>ci :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> i ^<span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cfile&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span>$<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">cd</span> :<span class="hljs-keyword">cscope</span> <span class="hljs-keyword">find</span> d  <span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;&lt;cword&gt;&#x27;</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;cr&gt;</span></code></pre><p>所以 <code>:tag</code> （或 <code>&lt;c-]&gt;</code>）跳转到标签定义的文件，而 <code>:cstag</code> 可以达到同样的目的，同时还会打开 cscope 的数据库连接。<code>&#39;cscopetag&#39;</code> 选项使得 <code>:tag</code> 命令自动的像 <code>:cstag</code> 一样工作。这在你已经使用了基于标签的映射时会非常方便。</p><p>帮助文档：<code>:h cscope</code></p><h2 id="MatchIt"><a href="#MatchIt" class="headerlink" title="MatchIt"></a>MatchIt</h2><p>由于 Vim 是用 C 语言编写的，因此许多功能都假设使用类似 C 语言的语法。默认情况下，如果你的光标在 <code>&#123;</code> 或 <code>#endif</code> , 就可以使用 <code>%</code> 跳转到与之匹配的 <code>&#125;</code> 或 <code>#ifdef</code>。</p><p>Vim 自带了一个名为 matchit.vim 的插件，但是默认没有启用。启用后可以用 <code>%</code> 在 HTML 相匹配的标签或 VimL 的 if/else/endif 块之间进行跳转，它还带来了一些新的命令。</p><h3 id="在-Vim-8-中安装"><a href="#在-Vim-8-中安装" class="headerlink" title="在 Vim 8 中安装"></a>在 Vim 8 中安装</h3><pre><code class="hljs vim"><span class="hljs-comment">&quot; vimrc</span>packadd! matchit</code></pre><h3 id="在-Vim-7-或者更早的版本中安装"><a href="#在-Vim-7-或者更早的版本中安装" class="headerlink" title="在 Vim 7 或者更早的版本中安装"></a>在 Vim 7 或者更早的版本中安装</h3><pre><code class="hljs vim"><span class="hljs-comment">&quot;vimrc</span><span class="hljs-keyword">runtime</span> macros/matchit.<span class="hljs-keyword">vim</span></code></pre><p>由于 matchit 的文档很全面，我建议安装以后执行一次下面的命令：</p><pre><code class="hljs vim">:!mkdir -<span class="hljs-keyword">p</span> ~/.<span class="hljs-keyword">vim</span>/doc:!cp $VIMRUNTIME/macros/matchit.<span class="hljs-keyword">vim</span> ~/.<span class="hljs-keyword">vim</span>/doc:<span class="hljs-keyword">helptags</span> ~/.<span class="hljs-keyword">vim</span>/doc</code></pre><h3 id="简短的介绍"><a href="#简短的介绍" class="headerlink" title="简短的介绍"></a>简短的介绍</h3><p>至此这个插件已经可以使用了。 参考 <code>:h matchit-intro</code> 来获得支持的命令以及 <code>:h matchit-languages</code> 来获得支持的语言。</p><p>你可以很方便的定义自己的匹配对，如：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">b:match_words</span> = <span class="hljs-string">&#x27;\&lt;if\&gt;:\&lt;elif\&gt;:\&lt;else\&gt;&#x27;</span></code></pre><p>之后你就可以在任何的 Python 文件中使用 <code>%</code> （向前）或 <code>g%</code> （向后）在这三个片断之间跳转了。</p><p>帮助文档：</p><pre><code class="hljs vim">:h matchit-install:h matchit:h <span class="hljs-variable">b:match_words</span></code></pre><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="跳至选择的区域另一端"><a href="#跳至选择的区域另一端" class="headerlink" title="跳至选择的区域另一端"></a>跳至选择的区域另一端</h2><p>在使用 <code>v</code> 或者 <code>V</code> 选择某段文字后，可以用 <code>o</code> 或者 <code>O</code> 按键跳至选择区域的开头或者结尾。</p><pre><code class="hljs css"><span class="hljs-selector-pseudo">:h</span> <span class="hljs-selector-tag">v_o</span><span class="hljs-selector-pseudo">:h</span> <span class="hljs-selector-tag">v_O</span></code></pre><h2 id="聪明地使用-n-和-N"><a href="#聪明地使用-n-和-N" class="headerlink" title="聪明地使用 n 和 N"></a>聪明地使用 n 和 N</h2><p><kbd>n</kbd> 与 <kbd>N</kbd> 的实际跳转方向取决于使用 <code>/</code> 还是 <code>?</code> 来执行搜索，其中 <code>/</code> 是向后搜索，<code>?</code> 是向前搜索。一开始我（原作者）觉得这里很难理解。</p><p>如果你希望 <kbd>n</kbd> 始终为向后搜索，<kbd>N</kbd> 始终为向前搜索，那么只需要这样设置：</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;expr&gt;</span> n  <span class="hljs-string">&#x27;Nn&#x27;</span>[<span class="hljs-variable">v:searchforward</span>]<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;expr&gt;</span> <span class="hljs-keyword">N</span>  <span class="hljs-string">&#x27;nN&#x27;</span>[<span class="hljs-variable">v:searchforward</span>]</code></pre><h2 id="聪明地使用命令行历史"><a href="#聪明地使用命令行历史" class="headerlink" title="聪明地使用命令行历史"></a>聪明地使用命令行历史</h2><p>我（原作者）习惯用 <kbd>Ctrl</kbd> + <kbd>p</kbd> 和 <kbd>Ctrl</kbd> + <kbd>n</kbd> 来跳转到上一个/下一个条目。其实这个操作也可以用在命令行中，快速调出之前执行过的命令。</p><p>不仅如此，你会发现 <kbd>上</kbd> 和 <kbd>下</kbd> 其实更智能。如果命令行中已经存在了一些文字，我们可以通过按方向键来匹配已经存在的内容。比如，命令行中现在是 <code>:echo</code>，这时候我们按 <kbd>上</kbd>，就会帮我们补全成 <code>:echo &quot;Vim rocks!&quot;</code>（前提是，之前输入过这段命令）。</p><p>当然，Vim 用户都不愿意去按方向键，事实上我们也不需要去按，只需要设置这样的映射：</p><pre><code class="hljs vim"><span class="hljs-keyword">cnoremap</span> <span class="hljs-symbol">&lt;c-n&gt;</span> <span class="hljs-symbol">&lt;down&gt;</span><span class="hljs-keyword">cnoremap</span> <span class="hljs-symbol">&lt;c-p&gt;</span> <span class="hljs-symbol">&lt;up&gt;</span></code></pre><p>这个功能，我（原作者）每天都要用很多次。</p><h2 id="智能-Ctrl-l"><a href="#智能-Ctrl-l" class="headerlink" title="智能 Ctrl-l"></a>智能 Ctrl-l</h2><p><kbd>Ctrl</kbd> + <kbd>l</kbd> 的默认功能是清空并「重新绘制」当前的屏幕，就和 <code>:redraw!</code> 的功能一样。下面的这个映射就是执行重新绘制，并且取消通过 <code>/</code> 和 <code>?</code> 匹配字符的高亮，而且还可以修复代码高亮问题（有时候，由于多个代码高亮的脚本重叠，或者规则过于复杂，Vim 的代码高亮显示会出现问题）。不仅如此，还可以刷新「比较模式」（请参阅 <code>:help diff-mode</code>）的代码高亮：</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">l</span> :<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;cr&gt;</span>:<span class="hljs-keyword">diffupdate</span><span class="hljs-symbol">&lt;cr&gt;</span>:<span class="hljs-keyword">syntax</span> <span class="hljs-keyword">sync</span> fromstart<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;c-l&gt;</span></code></pre><h2 id="禁用错误报警声音和图标"><a href="#禁用错误报警声音和图标" class="headerlink" title="禁用错误报警声音和图标"></a>禁用错误报警声音和图标</h2><pre><code class="hljs vim"><span class="hljs-keyword">set</span> noerrorbells<span class="hljs-keyword">set</span> novisualbell<span class="hljs-keyword">set</span> t_vb=</code></pre><p>请参阅 <a href="http://vim.wikia.com/wiki/Disable_beeping">Vim Wiki: Disable beeping</a>。</p><h2 id="快速移动当前行"><a href="#快速移动当前行" class="headerlink" title="快速移动当前行"></a>快速移动当前行</h2><p>有时，我（原作者）想要快速把当前行上移或下移一行，只需要这样设置映射：</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> [<span class="hljs-keyword">e</span>  :<span class="hljs-symbol">&lt;c-u&gt;</span><span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;move -1-&#x27;</span>. <span class="hljs-variable">v:count1</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">nnoremap</span> ]<span class="hljs-keyword">e</span>  :<span class="hljs-symbol">&lt;c-u&gt;</span><span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;move +&#x27;</span>. <span class="hljs-variable">v:count1</span><span class="hljs-symbol">&lt;cr&gt;</span></code></pre><p>这个映射，同样可以搭配数字使用，比如连续按下 <kbd>2</kbd> <kbd>]</kbd> <kbd>e</kbd> 就可以把当前行向下移动两行。</p><h2 id="快速添加空行"><a href="#快速添加空行" class="headerlink" title="快速添加空行"></a>快速添加空行</h2><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> [<span class="hljs-symbol">&lt;space&gt;</span>  :<span class="hljs-symbol">&lt;c-u&gt;</span>put! =<span class="hljs-built_in">repeat</span>(<span class="hljs-built_in">nr2char</span>(<span class="hljs-number">10</span>), <span class="hljs-variable">v:count1</span>)<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-string">&#x27;[</span><span class="hljs-string">nnoremap ]&lt;space&gt;  :&lt;c-u&gt;put =repeat(nr2char(10), v:count1)&lt;cr&gt;</span></code></pre><p>设置之后，连续按下 <kbd>5</kbd> <kbd>[</kbd> <kbd>空格</kbd> 在当前行上方插入 5 个空行。</p><h3 id="运行时检测"><a href="#运行时检测" class="headerlink" title="运行时检测"></a>运行时检测</h3><p>需要的特性：+profile</p><p>Vim 提供了一个内置的运行时检查功能，能够找出运行慢的代码。</p><p><code>:profile</code> 命令后面跟着子命令来确定要查看什么。</p><p>如果你想查看所有的：</p><pre><code class="hljs Vim">:<span class="hljs-keyword">profile</span> start /tmp/<span class="hljs-keyword">profile</span>.<span class="hljs-built_in">log</span>:<span class="hljs-keyword">profile</span> <span class="hljs-keyword">file</span> *:<span class="hljs-keyword">profile</span> func *&lt;<span class="hljs-keyword">do</span> something in Vim&gt;&lt;<span class="hljs-keyword">quit</span> Vim&gt;</code></pre><p>Vim 不断地在内存中检查信息，只在退出的时候输出出来。（Neovim 已经解决了这个问题用 <code>:profile dump</code> 命令）</p><p>看一下 <code>/tmp/profile.log</code> 文件，检查时运行的所有代码都会被显示出来，包括每一行代码运行的频率和时间。</p><p>大多数代码都是用户不熟悉的插件代码，如果你是在解决一个确切的问题，<br>直接跳到这个日志文件的末尾，那里有 <code>FUNCTIONS SORTED ON TOTAL TIME</code> 和 <code>FUNCTIONS SORTED ON SELF TIME</code> 两个部分，如果某个 function 运行时间过长一眼就可以看到。</p><h3 id="查看启动时间"><a href="#查看启动时间" class="headerlink" title="查看启动时间"></a>查看启动时间</h3><p>感觉 Vim 启动的慢？到了研究几个数字的时候了：</p><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> --startuptime /tmp/startup.<span class="hljs-built_in">log</span> +q &amp;&amp; <span class="hljs-keyword">vim</span> /tmp/startup.<span class="hljs-built_in">log</span></code></pre><p>第一栏是最重要的因为它显示了<strong>绝对运行时间</strong>，如果在前后两行之间时间差有很大的跳跃，那么是第二个文件太大或者含有需要检查的错误的 VimL 代码。</p><h2 id="NUL-符用新行表示"><a href="#NUL-符用新行表示" class="headerlink" title="NUL 符用新行表示"></a>NUL 符用新行表示</h2><p>文件中的 NUL 符 （<code>\0</code>），在内存中被以新行（<code>\n</code>）保存，在缓存空间中显示为 <code>^@</code>。</p><p>更多信息请参看 <code>man 7 ascii</code> 和 <code>:h NL-used-for-Nul</code> 。</p><h2 id="快速编辑自定义宏"><a href="#快速编辑自定义宏" class="headerlink" title="快速编辑自定义宏"></a>快速编辑自定义宏</h2><p>这个功能真的很实用！下面的映射，就是在一个新的命令行窗口中读取某一个寄存器（默认为 <code>*</code>）。当你设置完成后，只需要按下 <kbd>回车</kbd> 即可让它生效。</p><p>在录制宏的时候，我经常用这个来更改拼写错误。</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">m</span>  :<span class="hljs-symbol">&lt;c-u&gt;</span><span class="hljs-symbol">&lt;c-r&gt;</span><span class="hljs-symbol">&lt;c-r&gt;</span>=<span class="hljs-string">&#x27;let @&#x27;</span>. <span class="hljs-variable">v:register</span> .<span class="hljs-string">&#x27; = &#x27;</span>. <span class="hljs-built_in">string</span>(<span class="hljs-built_in">getreg</span>(<span class="hljs-variable">v:register</span>))<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-symbol">&lt;c-f&gt;</span><span class="hljs-symbol">&lt;left&gt;</span></code></pre><p>只需要连续按下 <kbd>leader</kbd> <kbd>m</kbd> 或者 <kbd>“</kbd> <kbd>leader</kbd> <kbd>m</kbd> 就可以调用了。</p><p>请注意，这里之所以要写成 <code>&lt;c-r&gt;&lt;c-r&gt;</code> 是为了确保 <code>&lt;c-r&gt;</code> 执行了。请参阅 <code>:h c_^R^R</code></p><h2 id="快速跳转到源-头-文件"><a href="#快速跳转到源-头-文件" class="headerlink" title="快速跳转到源(头)文件"></a>快速跳转到源(头)文件</h2><p>这个技巧可以用在多种文件类型中。当你从源文件或者头文件中切换到其他文件的时候，这个技巧可以设置「文件标记」（请参阅 <code>:h marks</code>），然后你就可以通过连续按下 <kbd>‘</kbd> <kbd>C</kbd> 或者 <kbd>‘</kbd> <kbd>H</kbd> 快速跳转回去（请参阅 <code>:h &#39;A</code>）。</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufLeave *.&#123;<span class="hljs-keyword">c</span>,cpp&#125; <span class="hljs-keyword">mark</span> C<span class="hljs-keyword">autocmd</span> BufLeave *.h       <span class="hljs-keyword">mark</span> H</code></pre><p><strong>注意</strong>：由于这个标记是设置在 viminfo 文件中，因此请先确认 <code>:set viminfo?</code> 中包含了 <code>:h viminfo-&#39;</code>。</p><h2 id="在-GUI-中快速改变字体大小"><a href="#在-GUI-中快速改变字体大小" class="headerlink" title="在 GUI 中快速改变字体大小"></a>在 GUI 中快速改变字体大小</h2><p>印象中，我（原作者）记得一下代码是来自 tpope’s 的配置文件：</p><pre><code class="hljs vim">command! Bigger  :<span class="hljs-keyword">let</span> &amp;guifont = <span class="hljs-keyword">substitute</span>(&amp;guifont, <span class="hljs-string">&#x27;\d\+$&#x27;</span>, <span class="hljs-string">&#x27;\=submatch(0)+1&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)command! Smaller :<span class="hljs-keyword">let</span> &amp;guifont = <span class="hljs-keyword">substitute</span>(&amp;guifont, <span class="hljs-string">&#x27;\d\+$&#x27;</span>, <span class="hljs-string">&#x27;\=submatch(0)-1&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)</code></pre><h2 id="根据模式改变光标类型"><a href="#根据模式改变光标类型" class="headerlink" title="根据模式改变光标类型"></a>根据模式改变光标类型</h2><p>我（原作者）习惯在普通模式下用块状光标，在插入模式下用条状光标（形状类似英文 “I” 的样子），然后在替换模式中使用下划线形状的光标。</p><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">empty</span>($TMUX)  <span class="hljs-keyword">let</span> &amp;t_SI = <span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=1\x7&quot;</span>  <span class="hljs-keyword">let</span> &amp;t_EI = <span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=0\x7&quot;</span>  <span class="hljs-keyword">let</span> &amp;t_SR = <span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=2\x7&quot;</span><span class="hljs-keyword">else</span>  <span class="hljs-keyword">let</span> &amp;t_SI = <span class="hljs-string">&quot;\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=1\x7\&lt;Esc&gt;\\&quot;</span>  <span class="hljs-keyword">let</span> &amp;t_EI = <span class="hljs-string">&quot;\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=0\x7\&lt;Esc&gt;\\&quot;</span>  <span class="hljs-keyword">let</span> &amp;t_SR = <span class="hljs-string">&quot;\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=2\x7\&lt;Esc&gt;\\&quot;</span><span class="hljs-keyword">endif</span></code></pre><p>原理很简单，就是让 Vim 在进入和离开插入模式的时候，输出一些序列，请参考 <a href="https://en.wikipedia.org/wiki/Escape_sequence">escape sequence</a>。Vim 与终端之间的中间层，比如 <a href="https://tmux.github.io">tmux</a> 会处理并执行上面的代码。</p><p>但上面这个还是有一个缺点的。终端环境的内部原理不尽相同，对于序列的处理方式也稍有不同。因此，上面的代码可能无法在你的环境中运行。甚至，你的运行环境也有可能不支持其他光标形状，请参阅你的 Vim 运行环境的文档。</p><p>好消息是，上面这个代码，可以在 iTerm2 中完美运行。</p><h2 id="防止水平滑动的时候失去选择"><a href="#防止水平滑动的时候失去选择" class="headerlink" title="防止水平滑动的时候失去选择"></a>防止水平滑动的时候失去选择</h2><p>如果你选中了一行或多行，那么你可以用 <kbd>&lt;</kbd> 或 <kbd&gt;></kbd> 来调整他们的缩进。但在调整之后就不会保持选中状态了。</p><p>你可以连续按下 <kbd>g</kbd> <kbd>v</kbd> 来重新选中他们，请参考 <code>:h gv</code>。因此，你可以这样来配置映射：</p><pre><code class="hljs vim"><span class="hljs-keyword">xnoremap</span> &lt;  &lt;<span class="hljs-keyword">gv</span><span class="hljs-keyword">xnoremap</span> &gt;  &gt;<span class="hljs-keyword">gv</span></code></pre><p>设置好之后，在可视模式中使用 <code>&gt;&gt;&gt;&gt;&gt;</code> 就不会再出现上面提到的问题了。</p><h2 id="选择当前行至结尾，排除换行符"><a href="#选择当前行至结尾，排除换行符" class="headerlink" title="选择当前行至结尾，排除换行符"></a>选择当前行至结尾，排除换行符</h2><p>在 Vim 里，我们可以同过 <code>v$</code> 选择当前行至结尾，但此时会把最后一个换行符也选中，通常需要按额外的 <code>h</code> 来取消最后选中最后一个换行符号。<br>Vim 提供了一个 <code>g_</code> 快捷键，可以移动光标至最后一个非空字符。因此，为达到次效果，可以使用 <code>vg_</code>。当然，如果觉得按三个键比较麻烦，<br>可以添加一个映射：</p><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> L g_</code></pre><p>这样就可以通过 <code>vL</code> 达到一样的效果了。</p><h2 id="重新载入保存文件"><a href="#重新载入保存文件" class="headerlink" title="重新载入保存文件"></a>重新载入保存文件</h2><p>通过<a href="#自动命令">自动命令</a>，你可以在保存文件的同时触发一些其他功能。比如，如果这个文件是一个配置文件，那么就重新载入；或者你还可以对这个文件进行代码风格检查。</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufWritePost $MYVIMRC <span class="hljs-keyword">source</span> $MYVIMRC<span class="hljs-keyword">autocmd</span> BufWritePost ~/.Xdefaults <span class="hljs-keyword">call</span> <span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;xrdb ~/.Xdefaults&#x27;</span>)</code></pre><h2 id="更加智能的当前行高亮"><a href="#更加智能的当前行高亮" class="headerlink" title="更加智能的当前行高亮"></a>更加智能的当前行高亮</h2><p>我（原作者）很喜欢「当前行高亮」（请参阅 <code>:h cursorline</code>）这个功能，但我只想让这个效果出现在当前窗口，而且在插入模式中关闭这个效果：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> InsertLeave,WinEnter * <span class="hljs-keyword">set</span> cursorline<span class="hljs-keyword">autocmd</span> InsertEnter,WinLeave * <span class="hljs-keyword">set</span> nocursorline</code></pre><h2 id="更快的关键字补全"><a href="#更快的关键字补全" class="headerlink" title="更快的关键字补全"></a>更快的关键字补全</h2><p>关键字补全（<code>&lt;c-n&gt;</code> 或 <code>&lt;c-p&gt;</code>）功能的工作方式是，无论 <code>&#39;complete&#39;</code> 设置中有什么，它都会尝试着去补全。这样，一些我们用不到的标签也会出现在补全列表中。而且，它会扫描很多文件，有时候运行起来非常慢。如果你不需要这些，那么完全可以像这样把它们禁用掉：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> <span class="hljs-built_in">complete</span>-=i   <span class="hljs-comment">&quot; disable scanning included files</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">complete</span>-=t   <span class="hljs-comment">&quot; disable searching tags</span></code></pre><h2 id="改变颜色主题的默认外观"><a href="#改变颜色主题的默认外观" class="headerlink" title="改变颜色主题的默认外观"></a>改变颜色主题的默认外观</h2><p>如果你想让状态栏在颜色主题更改后依然保持灰色，那么只需要这样设置：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> ColorScheme * <span class="hljs-keyword">highlight</span> StatusLine ctermbg=darkgray cterm=NONE guibg=darkgray <span class="hljs-keyword">gui</span>=NONE</code></pre><p>同理，如果你想让某一个颜色主题（比如 “lucius”）的状态栏为灰色（请使用 <code>:echo color_name</code> 来查看当前可用的所有颜色主题）：</p><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> ColorScheme lucius <span class="hljs-keyword">highlight</span> StatusLine ctermbg=darkgray cterm=NONE guibg=darkgray <span class="hljs-keyword">gui</span>=NONE</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>下面的命令都比较有用，最好了解一下。用 <code>:h :&lt;command name&gt;</code> 来了解更多关于它们的信息，如：<code>:h :global</code>。</p><h3 id="global-和-vglobal-在所有匹配行执行命令"><a href="#global-和-vglobal-在所有匹配行执行命令" class="headerlink" title=":global 和 :vglobal - 在所有匹配行执行命令"></a>:global 和 :vglobal - 在所有匹配行执行命令</h3><p>在所有符合条件的行上执行某个命令。如： <code>:global /regexp/ print</code> 会在所有包含 “regexp” 的行上执行 <code>print</code> 命令（译者注：regexp 有正则表达式的意思，该命令同样支持正则表达式，在所有符合正则表达式的行上执行指定的命令）。</p><p>趣闻：你们可能都知道老牌的 grep 命令，一个由 Ken Thompson 编写的过滤程序。它是干什么用的呢？它会输出所有匹配指定正则表达式的行！现在猜一下 <code>:global /regexp/ print</code> 的简写形式是什么？没错！就是 <code>:g/re/p</code> 。 Ken Thompsom 在编写 grep 程序的时候是受了 vi <code>:global</code> 的启发。（译者注： <a href="https://robots.thoughtbot.com/how-grep-got-its-name）">https://robots.thoughtbot.com/how-grep-got-its-name）</a></p><p>既然它的名字是 <code>:global</code>，理应仅作用在所有行上，但是它也是可以带范围限制的。假设你想使用 <code>:delete</code> 命令删除从当前行到下一个空行（由正则表达式 <code>^$</code> 匹配）范围内所有包含 “foo” 的行：</p><pre><code class="hljs vim">:,/^$/g/foo/d</code></pre><p>如果要在所有 <em>不</em> 匹配的行上执行命令的话，可以使用 <code>:global!</code> 或是它的别名 <code>:vglobal</code> （ V 代表的是 inVerse ）。</p><h3 id="normal-和-execute-脚本梦之队"><a href="#normal-和-execute-脚本梦之队" class="headerlink" title=":normal 和 :execute - 脚本梦之队"></a>:normal 和 :execute - 脚本梦之队</h3><p>这两个命令经常在 Vim 的脚本里使用。</p><p>借助于 <code>:normal</code> 可以在命令行里进行普通模式的映射。如：<code>:normal! 4j</code> 会令光标下移 4 行（由于加了”!”，所以不会使用自定义的映射 “j”）。</p><p>需要注意的是 <code>:normal</code> 同样可以使用范围数（译者注：参考 <code>:h range</code> 和 <code>:h :normal-range</code> 了解更多），故 <code>:%norm! Iabc</code> 会在所有行前加上 “abc”。</p><p>借助于 <code>:execute</code> 可以将命令和表达式混合在一起使用。假设你正在编辑一个 C 语言的文件，想切换到它的头文件：</p><pre><code class="hljs vim">:<span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;edit&#x27;</span> <span class="hljs-built_in">fnamemodify</span>(<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;%&#x27;</span>), <span class="hljs-string">&#x27;:r&#x27;</span>) . <span class="hljs-string">&#x27;.h&#x27;</span></code></pre><p>（译者注：头文件为与与源文件同名但是扩展名为 <code>.h</code> 的文件。上面的命令中 expand 获得当前文件的名称，fnamemodify 获取不带扩展名的文件名，再连上 ‘.h’ 就是头文件的文件名了，最后在使用 edit 命令打开这个头文件。）</p><p>这两个命令经常一起使用。假设你想让光标下移 n 行：</p><pre><code class="hljs vim">:<span class="hljs-keyword">let</span> n = <span class="hljs-number">4</span>:<span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;normal!&#x27;</span> n . <span class="hljs-string">&#x27;j&#x27;</span></code></pre><h3 id="重定向消息"><a href="#重定向消息" class="headerlink" title="重定向消息"></a>重定向消息</h3><p>许多命令都会输出消息，<code>:redir</code> 用来重定向这些消息。它可以将消息输出到文件、<a href="#寄存器">寄存器</a>或是某个变量中。</p><pre><code class="hljs vim"><span class="hljs-comment">&quot; 将消息重定向到变量 `neatvar` 中</span>:<span class="hljs-keyword">redir</span> =&gt; neatvar<span class="hljs-comment">&quot; 打印所有寄存器的内容</span>:<span class="hljs-keyword">reg</span><span class="hljs-comment">&quot; 结束重定向</span>:<span class="hljs-keyword">redir</span> END<span class="hljs-comment">&quot; 输出变量</span>:<span class="hljs-keyword">echo</span> neatvar<span class="hljs-comment">&quot; 恶搞一下，我们把它输出到当前缓冲区</span>:<span class="hljs-keyword">put</span> =neatvar</code></pre><p>再 Vim 8 中，可以更简单的方式即位：</p><pre><code>:put =execute(&#39;reg&#39;)</code></pre><p>（译者注：原文最后一条命令是 <code>:put =nicevar</code> 但是实际会报变量未定义的错误）<br>（实测 neovim/vim8 下没问题）</p><p>帮助文档：<code>:h :redir</code></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="常规建议"><a href="#常规建议" class="headerlink" title="常规建议"></a>常规建议</h2><p>如果你遇到了奇怪的行为，尝试用这个命令重现它：</p><pre><code>vim -u NONE -N</code></pre><p>这样会在不引用 vimrc（默认设置）的情况下重启 vim，并且在 <strong>nocompatible</strong> 模式下（使用 vim 默认设置而不是 vi 的）。（搜索 <code>:h --noplugin</code> 命令了解更多启动加载方式）</p><p>如果仍旧能够出现该错误，那么这极有可能是 vim 本身的 bug，请给 <a href="&quot;https://groups.google.com/forum/#!forum/vim_dev&quot;">vim_dev</a> 发送邮件反馈错误，多数情况下问题不会立刻解决，你还需要进一步研究</p><p>许多插件经常会提供新的（默认的/自动的）操作。如果在保存的时候发生了，那么请用 <code>:verb au BufWritePost</code> 命令检查潜在的问题</p><p>如果你在使用一个插件管理工具，将插件行注释调，再进行调试。</p><p>问题还没有解决？如果不是插件的问题，那么肯定是你的自定义的设置的问题，可能是你的 options 或 autocmd 等等。</p><p>到了一行行代码检查的时候了，不断地排除缩小检查范围知道你找出错误，根据二分法的原理你不会花费太多时间的。</p><p>在实践过程中，可能就是这样，把 <code>:finish</code> 放在你的 <strong>vimrc</strong> 文件中间，Vim 会跳过它之后的设置。如果问题还在，那么问题就出在<code>:finish</code>之前的设置中，再把<code>:finish</code>放到前一部分设置的中间位置。否则问题就出现在它后面的半部分设置，那么就把<code>:finish</code>放到后半部分的中间位置。不断的重复即可找到。</p><h2 id="调整日志等级"><a href="#调整日志等级" class="headerlink" title="调整日志等级"></a>调整日志等级</h2><p>Vim 现在正在使用的另一个比较有用的方法是增加 debug 信息输出详细等级。现在 Vim 支持 9 个等级，可以用<code>:h &#39;verbose&#39;</code>命令查看。</p><pre><code class="hljs vim">:<span class="hljs-keyword">e</span> /tmp/foo:<span class="hljs-keyword">set</span> <span class="hljs-keyword">verbose</span>=<span class="hljs-number">2</span>:<span class="hljs-keyword">w</span>:<span class="hljs-keyword">set</span> <span class="hljs-keyword">verbose</span>=<span class="hljs-number">0</span></code></pre><p>这可以显示出所有引用的文件、没有变化的文件或者各种各样的作用于保存的插件。</p><p>如果你只是想用简单的命令来提高等级，也是用 <code>:verbose</code> ，放在其他命令之前，通过计数来指明等级，默认是 1.</p><pre><code class="hljs vim">:<span class="hljs-keyword">verb</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">verbose</span><span class="hljs-comment">&quot;  verbose=1</span>:<span class="hljs-number">10</span><span class="hljs-keyword">verb</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">verbose</span><span class="hljs-comment">&quot;  verbose=10</span></code></pre><p>通常用等级 1 来显示上次从哪里设置的选项</p><pre><code class="hljs vim">:<span class="hljs-keyword">verb</span> <span class="hljs-keyword">set</span> ai?<span class="hljs-comment">&quot;      Last set from ~/.vim/vimrc</span></code></pre><p>一般等级越高输出信息月详细。但是不要害怕，亦可以把输出导入到文件中：</p><pre><code class="hljs vim">:<span class="hljs-keyword">set</span> verbosefile=/tmp/foo | <span class="hljs-number">15</span><span class="hljs-keyword">verbose</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;foo&quot;</span> | <span class="hljs-keyword">vsplit</span> /tmp/foo</code></pre><p>你可以一开始的时候就打开 verbosity，用 <code>-V</code> 选项，它默认设置调试等级为 10。 例如：<code>vim -V5</code></p><h2 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h2><h2 id="查看运行时日志"><a href="#查看运行时日志" class="headerlink" title="查看运行时日志"></a>查看运行时日志</h2><h2 id="Vim-脚本调试"><a href="#Vim-脚本调试" class="headerlink" title="Vim 脚本调试"></a>Vim 脚本调试</h2><p>如果你以前使用过命令行调试器的话，对于<code>:debug</code>命令你很快就会感到熟悉。</p><p>只需要在任何其他命令之前加上<code>:debug</code>就会让你进入调试模式。也就是，被调试的 Vim 脚本会在第一行停止运行，同时该行会被显示出来。</p><p>想了解可用的 6 个调试命令，可以查阅<code>:h &gt;cont</code>和阅读下面内容。需要指出的是，类似 gdb 和其他相似调试器，调试命令可以使用它们的简短形式：<code>c</code>、 <code>q</code>、<code>n</code>、<code>s</code>、 <code>i</code>和 <code>f</code>。</p><p>除了上面的之外，你还可以自由地使用任何 Vim 的命令。比如，<code>:echo myvar</code>，该命令会在当前的脚本代码位置和上下文上被执行。</p><p>只需要简单使用<code>:debug 1</code>，你就获得了<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a>调试特性。</p><p>当然，调试模式下是可以定义断点的，不然的话每一行都去单步调试就会十分痛苦。（断点之所以被叫做断点，是因为运行到它们的时候，运行就会停止下来。因此，你可以利用断点跳过自己不感兴趣的代码区域）。请查阅<code>:h :breakadd</code>、 <code>:h :breakdel</code>和 <code>:h :breaklist</code>获取更多细节。</p><p>假设你需要知道你每次在保存一个文件的时候有哪些代码在运行：</p><pre><code class="hljs vim">:<span class="hljs-keyword">au</span> BufWritePost<span class="hljs-comment">&quot; signify  BufWritePost</span><span class="hljs-comment">&quot;     *         call sy#start()</span>:<span class="hljs-keyword">breakadd</span> func *start:<span class="hljs-keyword">w</span><span class="hljs-string">&quot; Breakpoint in &quot;</span>sy#start<span class="hljs-comment">&quot; line 1</span><span class="hljs-string">&quot; Entering Debug mode.  Type &quot;</span>cont<span class="hljs-comment">&quot; to continue.</span><span class="hljs-comment">&quot; function sy#start</span><span class="hljs-comment">&quot; line 1: if g:signify_locked</span>&gt;s<span class="hljs-comment">&quot; function sy#start</span><span class="hljs-comment">&quot; line 3: endif</span>&gt;<span class="hljs-comment">&quot; function sy#start</span><span class="hljs-comment">&quot; line 5: let sy_path = resolve(expand(&#x27;%:p&#x27;))</span>&gt;q:<span class="hljs-keyword">breakdel</span> *</code></pre><p>正如你所见，使用<code>&lt;cr&gt;</code>命令会重复之前的调试命令，也就是在该例子中的<code>s</code>命令。</p><p><code>:debug</code>命令可以和<a href="#verbosity">verbose</a>选项一起使用。</p><h2 id="语法文件调试"><a href="#语法文件调试" class="headerlink" title="语法文件调试"></a>语法文件调试</h2><p>语法文件由于包含错误的或者复制的正则表达式，常常会使得 Vim 的运行较慢。如果 Vim 在编译的时候包含了<code>+profile</code> <a href="#what-kind-of-vim-am-i-running">feature</a>特性，就可以给用户提供一个超级好用的<code>:syntime</code>命令。</p><pre><code class="hljs vim">:<span class="hljs-keyword">syntime</span> <span class="hljs-keyword">on</span><span class="hljs-comment">&quot; 多次敲击&lt;c-l&gt;来重绘窗口，这样的话就会使得相应的语法规则被重新应用一次</span>:<span class="hljs-keyword">syntime</span> off:<span class="hljs-keyword">syntime</span> report</code></pre><p>输出结果包含了很多的度量维度。比如，你可以通过结果知道哪些正则表达式耗时太久需要被优化；哪些正则表达式一直在别使用但重来没有一次成功匹配。</p><p>请查阅<code>:h :syntime</code>。</p><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="附加资源"><a href="#附加资源" class="headerlink" title="附加资源"></a>附加资源</h2><div class="table-container"><table><thead><tr><th>资源名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://www.moolenaar.net/habits.html">七个高效的文本编辑习惯</a></td><td>作者：Bram Moolenaar（即 Vim 的作者）</td></tr><tr><td><a href="http://www.moolenaar.net/habits_2007.pdf">七个高效的文本编辑习惯 2.0（PDF 版）</a></td><td>同上</td></tr><tr><td><a href="http://www.ibm.com/developerworks/views/linux/libraryview.jsp?sort_order=asc&amp;sort_by=Title&amp;search_by=scripting+the+vim+editor">IBM DeveloperWorks: 使用脚本编写 Vim 编辑器</a></td><td>Vim 脚本编写五辑</td></tr><tr><td><a href="http://learnvimscriptthehardway.stevelosh.com">《漫漫 Vim 路》</a></td><td>使用魔抓定制 Vim 插件</td></tr><tr><td><a href="http://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/">《 Vim 实践 (第 2 版)》</a></td><td>轻取 Vim 最佳书籍</td></tr><tr><td><a href="http://vimcasts.org/episodes/archive">Vimcasts.org</a></td><td>Vim 录屏演示</td></tr><tr><td><a href="http://www.viemu.com/a-why-vi-vim.html">为什么是个脚本都用 vi？</a></td><td>常见误区释疑</td></tr><tr><td><a href="http://stackoverflow.com/a/1220118">你不爱 vi，所以你不懂 Vim </a></td><td>简明,扼要,准确的干货</td></tr></tbody></table></div><h2 id="Vim-配置集合"><a href="#Vim-配置集合" class="headerlink" title="Vim 配置集合"></a>Vim 配置集合</h2><p>目前，网上有很多流行 Vim 配置集合，对于 Vim 配置集合，个人认为有利有弊。<br>对于维护的比较好的配置，比如 <a href="http://spacevim.org/cn/">SpaceVim</a> 还是值得尝试的，可以节省很多自行配置的时间。<br>当然，网上还有很多其他很流行的配置，比如：</p><ul><li><a href="https://github.com/wklken/k-vim">k-vim</a></li><li><a href="https://github.com/amix/vimrc">amix’s vimrc</a></li><li><a href="https://github.com/carlhuda/janus">janus</a></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="编辑小文件时很慢"><a href="#编辑小文件时很慢" class="headerlink" title="编辑小文件时很慢"></a>编辑小文件时很慢</h3><p>有两个因素对性能影响非常大：</p><ol><li><p>过于复杂的 <strong>正则表达式</strong> 。尤其是 Ruby 的语法文件，以前会造成性能下降。（见<a href="#debugging-syntax-files">调试语法文件</a>）</p></li><li><p><strong>屏幕重绘</strong> 。有一些功能会强制重绘所有行。</p></li></ol><div class="table-container"><table><thead><tr><th>典型肇事者</th><th>原因</th><th>解决方案</th></tr></thead><tbody><tr><td><code>:set cursorline</code></td><td>会导致所有行重绘</td><td><code>:set nocursorline</code></td></tr><tr><td><code>:set cursorcolumn</code></td><td>会导致所有行重绘</td><td><code>:set nocursorcolumn</code></td></tr><tr><td><code>:set relativenumber</code></td><td>会导致所有行重绘</td><td><code>:set norelativenumber</code></td></tr><tr><td><code>:set foldmethod=syntax</code></td><td>如果语法文件已经很慢了，这只会变得更慢</td><td><code>:set foldmethod=manual</code>，<code>:set foldmethod=marker</code> 或者使用<a href="https://github.com/Konfekt/FastFold">快速折叠</a>插件</td></tr><tr><td><code>:set synmaxcol=3000</code></td><td>由于内部表示法，Vim 处理比较长的行时会有问题。让它高亮到 3000 列……</td><td><code>:set synmaxcol=200</code></td></tr><tr><td>matchparen.vim</td><td>Vim 默认加载的插件，用正则表达式查找配对的括号</td><td>禁用插件：<code>:h matchparen</code></td></tr></tbody></table></div><p><strong>注意</strong>：只有在你真正遇到性能问题的时候才需要做上面的调整。在大多数情况下使用上面提到的选项是完全没有问题的。</p><h3 id="编辑大文件的时候很慢"><a href="#编辑大文件的时候很慢" class="headerlink" title="编辑大文件的时候很慢"></a>编辑大文件的时候很慢</h3><p>Vim 处理大文件最大的问题就是它会一次性读取整个文件。这么做是由于缓冲区的内部机理导致的（在 <a href="https://groups.google.com/forum/#!topic/vim_dev/oY3i8rqYGD4/discussion">vim_dev</a> 中讨论）。</p><p>如果只是想查看的话，<code>tail hugefile | vim -</code> 是一个不错的选择。</p><p>如果你能接受没有语法高亮，并且禁用所有插件和设置的话，使用：</p><pre><code class="hljs sh">$ vim -u NONE -N</code></pre><p>这将会使得跳转变快很多，尤其是省去了基于很耗费资源的正则表达式的语法高亮。你还可以告诉 Vim 不要使用交换文件和 viminfo 文件，以避免由于写这些文件而造成的延时：</p><pre><code class="hljs sh">$ vim -n -u NONE -i NONE -N</code></pre><p>简而言之，尽量避免使用 Vim 写过大的文件。</p><h3 id="持续粘贴（为什么我每次都要设置-‘paste’-模式）"><a href="#持续粘贴（为什么我每次都要设置-‘paste’-模式）" class="headerlink" title="持续粘贴（为什么我每次都要设置 ‘paste’ 模式）"></a>持续粘贴（为什么我每次都要设置 ‘paste’ 模式）</h3><p>持续粘贴模式让终端模拟器可以区分输入内容与粘贴内容。</p><p>你有没有遇到过往 Vim 里粘贴代码之后被搞的一团糟？</p><p>这在你使用 <code>cmd+v</code>、<code>shirt-insert</code>、<code>middle-click</code> 等进行粘贴的时候才会发生。<br>因为那样的话你只是向终端模拟器扔了一大堆的文本。<br>Vim 并不知道你刚刚是粘贴的文本，它以为你在飞速的输入。<br>于是它想缩进这些行但是失败了。</p><p>这明显不是个问题，如果你用 Vim 的寄存器粘贴，如：<code>&quot;+p</code> ，这时 Vim 就知道了你在粘贴，就不会导致格式错乱了。</p><p>使用 <code>:set paste</code> 就可以解决这个问题正常进行粘贴。见 <code>:h &#39;paste&#39;</code> 和 <code>:h &#39;pastetoggle&#39;</code> 获取更多信息。</p><p>如果你受够了每次都要设置 <code>&#39;paste&#39;</code> 的话，看看这个能帮你自动设置的插件：<a href="https://github.com/ConradIrwin/vim-bracketed-paste">bracketed-paste</a>。</p><p><a href="http://cirw.in/blog/bracketed-paste">点此</a>查看该作者对于这个插件的更多描述。</p><p>Neovim 尝试把这些变得更顺畅，如果终端支持的话，它会自动开启持续粘贴模式，无须再手动进行切换。</p><h3 id="在终端中按-ESC-后有延时"><a href="#在终端中按-ESC-后有延时" class="headerlink" title="在终端中按 ESC 后有延时"></a>在终端中按 ESC 后有延时</h3><p>如果你经常使用命令行，那么肯定要接触 <em>终端模拟器</em> ，如 xterm、gnome-terminal、iTerm2 等等（与实际的<a href="https://en.wikipedia.org/wiki/Computer_terminal">终端</a>不同）。</p><p>终端模拟器与他们的祖辈一样，使用 <a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97">转义序列</a> （也叫 <em>控制序列</em> ）来控制光标移动、改变文本颜色等。转义序列就是以转义字符开头的 ASCII 字符串（用<a href="https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6%E8%A1%A8%E7%A4%BA%E6%B3%95">脱字符表示法</a>表示成 <code>^[</code> ）。当遇到这样的字符串后，终端模拟器会从<a href="https://en.wikipedia.org/wiki/Terminfo">终端信息</a>数据库中查找对应的动作。</p><p>为了使用问题更加清晰，我会先来解释一下什么是映射超时。在映射存在歧义的时候就会产生映射超时：</p><pre><code class="hljs vim">:<span class="hljs-keyword">nnoremap</span> ,<span class="hljs-keyword">a</span> :<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;foo&#x27;</span><span class="hljs-symbol">&lt;cr&gt;</span>:<span class="hljs-keyword">nnoremap</span> ,<span class="hljs-keyword">ab</span> :<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;bar&#x27;</span><span class="hljs-symbol">&lt;cr&gt;</span></code></pre><p>上面的例子中两个映射都能正常工作，但是当输入 <code>,a</code> 之后，Vim 会延时 1 秒，因为它要确认用户是否还要输入那个 <code>b</code>。</p><p>转义序列会产生同样的问题：</p><ul><li><code>&lt;esc&gt;</code> 作为返回普通模式或取消某个动作的按键而被大量使用</li><li>光标键使用转义序列进行的编码</li><li>Vim 期望 <kbd>Alt</kbd> （也叫作 <em>Mate Key</em> ）会发送一个正确的 8-bit 编码的高位，但是许多终端模拟器并不支持这个（也可能默认没有启用），而只是发送一个转义序列作为代替。</li></ul><p>你可以这样测试上面所提到的事情： <code>vim -u NONE -N</code> 然后输入 <code>i&lt;c-v&gt;&lt;left&gt;</code> ，你会看到一个以 <code>^[</code> 开头的字符串，表明这是一个转义序列，<code>^[</code> 就是转义字符。</p><p>简而言之，Vim 在区分录入的 <code>&lt;esc&gt;</code> 和转义序列的时候需要一定的时间。</p><p>默认情况下，Vim 用 <code>:set timeout timeoutlen=1000</code>，就是说它会用 1 秒的时间来区分有歧义的映射 <em>以及</em> 按键编码。这对于映射来说是一个比较合理的值，但是你可以自行定义按键延时的长短，这是解决该问题最根本的办法：</p><pre><code class="hljs vim"><span class="hljs-keyword">set</span> timeout           <span class="hljs-comment">&quot; for mappings</span><span class="hljs-keyword">set</span> timeoutlen=<span class="hljs-number">1000</span>   <span class="hljs-comment">&quot; default value</span><span class="hljs-keyword">set</span> ttimeout          <span class="hljs-comment">&quot; for key codes</span><span class="hljs-keyword">set</span> ttimeoutlen=<span class="hljs-number">10</span>    <span class="hljs-comment">&quot; unnoticeable small value</span></code></pre><p>在 <code>:h ttimeout</code> 里你可以找到一个关于这些选项之间关系的小表格。</p><p>而如果你在 tmux 中使用 Vim 的话，别忘了把下面的配置加入到你的 <code>~/.tmux.conf</code>文件中：</p><pre><code>set -sg escape-time 0</code></pre><h3 id="无法重复函数中执行的搜索"><a href="#无法重复函数中执行的搜索" class="headerlink" title="无法重复函数中执行的搜索"></a>无法重复函数中执行的搜索</h3><ul><li>在命令中的搜索（<code>/</code>、<code>:substitute</code> 等）内容会改变“上次使用的搜索内容”。（它保存在<code>/</code>寄存器中，用 <code>:echo @/</code> 可以输出它里面的内容）</li><li>简单的文本变化可以通过 <code>.</code> 重做。（它保存在 <code>.</code> 寄存器，用 <code>:echo @.</code> 可以输出它的内容）</li></ul><p>而在你在函数中进行这些操作的时候，一切就会变得不同。因此你不能用 N/n 查找某个函数刚刚查找的内容，也不能重做函数中对文本的修改。</p><p>帮助文档：<code>:h function-search-undo</code>。</p><h2 id="进阶阅读"><a href="#进阶阅读" class="headerlink" title="进阶阅读"></a>进阶阅读</h2><ul><li><a href="https://github.com/wsdjeg/vim-plugin-dev-guide">Vim 插件开发指南</a></li><li><a href="PLUGINS.md">常用插件列表</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/">Nifty Little Nvim Techniques to Make My Life Easier — Series 1</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/wsdjeg/vim-galore-zh_cn">Vim 从入门到精通</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
      <tag>编程</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git的奇技淫巧</title>
    <link href="/2021/01/15/git/Git%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <url>/2021/01/15/git/Git%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p><p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：<code>Ctrl/Command+f</code>。</p><h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p><ol><li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li><li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li><li>统一概念：<ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li><li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li></ul></li><li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li></ol><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#展示帮助信息">展示帮助信息</a></li><li><a href="#回到远程仓库的状态">回到远程仓库的状态</a></li><li><a href="#重设第一个-commit">重设第一个commit</a></li><li><a href="#查看冲突文件列表">查看冲突文件列表</a></li><li><a href="#展示工作区和暂存区的不同">展示工作区和暂存区的不同</a></li><li><a href="#展示暂存区和最近版本的不同">展示暂存区和最近版本的不同</a></li><li><a href="#展示暂存区工作区和最近版本的不同">展示暂存区、工作区和最近版本的不同</a></li><li><a href="#快速切换到上一个分支">快速切换到上一个分支</a></li><li><a href="#删除已经合并到-master-的分支">删除已经合并到 master 的分支</a></li><li><a href="#展示本地分支关联远程仓库的情况">展示本地分支关联远程仓库的情况</a></li><li><a href="#关联远程分支">关联远程分支</a></li><li><a href="#列出所有远程分支">列出所有远程分支</a></li><li><a href="#列出本地和远程分支">列出本地和远程分支</a></li><li><a href="#查看远程分支和本地分支的对应关系">查看远程分支和本地分支的对应关系</a></li><li><a href="#远程删除了分支本地也想删除">远程删除了分支本地也想删除</a></li><li><a href="#创建并切换到本地分支">创建并切换到本地分支</a></li><li><a href="#从远程分支中创建并切换到本地分支">从远程分支中创建并切换到本地分支</a></li><li><a href="#删除本地分支">删除本地分支</a></li><li><a href="#删除远程分支">删除远程分支</a></li><li><a href="#重命名本地分支">重命名本地分支</a></li><li><a href="#查看标签">查看标签</a></li><li><a href="#查看标签详细信息">查看标签详细信息</a></li><li><a href="#本地创建标签">本地创建标签</a></li><li><a href="#推送标签到远程仓库">推送标签到远程仓库</a></li><li><a href="#删除本地标签">删除本地标签</a></li><li><a href="#删除远程标签">删除远程标签</a></li><li><a href="#切回到某个标签">切回到某个标签</a></li><li><a href="#放弃工作区的修改">放弃工作区的修改</a></li><li><a href="#恢复删除的文件">恢复删除的文件</a></li><li><a href="#以新增一个-commit-的方式还原某一个-commit-的修改">以新增一个 commit 的方式还原某一个 commit 的修改</a></li><li><a href="#回到某个-commit-的状态并删除后面的-commit">回到某个 commit 的状态，并删除后面的 commit</a></li><li><a href="#修改上一个-commit-的描述">修改上一个 commit 的描述</a></li><li><a href="#查看-commit-历史">查看 commit 历史</a></li><li><a href="#显示本地更新过-head-的-git-命令记录">显示本地更新过 HEAD 的 git 命令记录</a></li><li><a href="#修改作者名">修改作者名</a></li><li><a href="#修改远程仓库的-url">修改远程仓库的 url</a></li><li><a href="#增加远程仓库">增加远程仓库</a></li><li><a href="#列出所有远程仓库">列出所有远程仓库</a></li><li><a href="#查看两个星期内的改动">查看两个星期内的改动</a></li><li><a href="#把-A-分支的某一个-commit放到-B-分支上">把 A 分支的某一个 commit，放到 B 分支上</a></li><li><a href="#给-git-命令起别名">给 git 命令起别名</a></li><li><a href="#存储当前的修改但不用提交-commit">存储当前的修改，但不用提交 commit</a></li><li><a href="#保存当前状态包括-untracked-的文件">保存当前状态，包括 untracked 的文件</a></li><li><a href="#展示所有-stashes">展示所有 stashes</a></li><li><a href="#回到某个-stash-的状态">回到某个 stash 的状态</a></li><li><a href="#回到最后一个-stash-的状态并删除这个-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li><li><a href="#删除所有的-stash">删除所有的 stash</a></li><li><a href="#从-stash-中拿出某个文件的修改">从 stash 中拿出某个文件的修改</a></li><li><a href="#展示所有-tracked-的文件">展示所有 tracked 的文件</a></li><li><a href="#展示所有-untracked-的文件">展示所有 untracked 的文件</a></li><li><a href="#展示所有忽略的文件">展示所有忽略的文件</a></li><li><a href="#强制删除-untracked-的文件">强制删除 untracked 的文件</a></li><li><a href="#强制删除-untracked-的目录">强制删除 untracked 的目录</a></li><li><a href="#展示简化的-commit-历史">展示简化的 commit 历史</a></li><li><a href="#查看某段代码是谁写的">查看某段代码是谁写的</a></li><li><a href="#把某一个分支到导出成一个文件">把某一个分支到导出成一个文件</a></li><li><a href="#从包中导入分支">从包中导入分支</a></li><li><a href="#执行-rebase-之前自动-stash">执行 rebase 之前自动 stash</a></li><li><a href="#从远程仓库根据-ID-拉下某一状态-到本地分支">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li><li><a href="#详细展示一行中的修改">详细展示一行中的修改</a></li><li><a href="#清除-gitignore-文件中记录的文件">清除 <code>.gitignore</code> 文件中记录的文件</a></li><li><a href="#展示所有-alias-和-configs">展示所有 alias 和 configs</a></li><li><a href="#展示忽略的文件">展示忽略的文件</a></li><li><a href="#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li><li><a href="#在-commit-log-中显示-GPG-签名">在 commit log 中显示 GPG 签名</a></li><li><a href="#删除全局设置">删除全局设置</a></li><li><a href="#新建并切换到新分支上同时这个分支没有任何-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li><li><a href="#展示任意分支某一文件的内容">展示任意分支某一文件的内容</a></li><li><a href="#clone-下来指定的单一分支">clone 下来指定的单一分支</a></li><li><a href="#clone-最新一次提交">clone 最新一次提交</a></li><li><a href="#忽略某个文件的改动">忽略某个文件的改动</a></li><li><a href="#忽略文件的权限变化">忽略文件的权限变化</a></li><li><a href="#以最后提交的顺序列出所有-Git-分支">以最后提交的顺序列出所有 Git 分支</a></li><li><a href="#在-commit-log-中查找相关内容">在 commit log 中查找相关内容</a></li><li><a href="#把暂存区的指定-file-放到工作区中">把暂存区的指定 file 放到工作区中</a></li><li><a href="#强制推送">强制推送</a></li><li><a href="#git-配置-http-和-socks-代理">git 配置 http 和 socks 代理</a></li><li><a href="#git-配置-ssh-代理">git 配置 ssh 代理</a></li><li><a href="#一图详解">一图详解</a></li><li><a href="#优雅的提交Commit信息">优雅的提交Commit信息</a></li><li><a href="#联系我">联系我</a></li></ul><h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><pre><code class="hljs sh">git <span class="hljs-built_in">help</span> -g</code></pre><p>The command output as below:</p><pre><code class="hljs stata">The common Git guides are:   attributes          Defining attributes per path   <span class="hljs-keyword">cli</span>                 Git command-<span class="hljs-keyword">line</span> interface and conventions   core-<span class="hljs-keyword">tutorial</span>       A Git core <span class="hljs-keyword">tutorial</span> <span class="hljs-keyword">for</span> developers   cvs-migration       Git <span class="hljs-keyword">for</span> CVS users   diffcore            Tweaking diff output   everyday            A useful minimum <span class="hljs-keyword">set</span> of commands <span class="hljs-keyword">for</span> Everyday Git   glossary            A Git Glossary   hooks               Hooks used <span class="hljs-keyword">by</span> Git   ignore              Specifies intentionally untracked files to ignore   modules             Defining submodule properties   namespaces          Git namespaces   repository-layout    Git Repository Layout   revisions           Specifying revisions and ranges <span class="hljs-keyword">for</span> Git   <span class="hljs-keyword">tutorial</span>            A <span class="hljs-keyword">tutorial</span> introduction to Git   <span class="hljs-keyword">tutorial</span>-2          A <span class="hljs-keyword">tutorial</span> introduction to Git: part <span class="hljs-keyword">two</span>   workflows           <span class="hljs-keyword">An</span> overview of recommended workflows with Git&#x27;git <span class="hljs-keyword">help</span> -a&#x27; and &#x27;git <span class="hljs-keyword">help</span> -<span class="hljs-keyword">g</span>&#x27; <span class="hljs-keyword">list</span> available subcommands and some concept guides. See &#x27;git <span class="hljs-keyword">help</span> &lt;command&gt;&#x27; or &#x27;git <span class="hljs-keyword">help</span> &lt;concept&gt;&#x27; to <span class="hljs-keyword">read</span> <span class="hljs-keyword">about</span> a specific subcommand or concept.</code></pre><h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。<br><pre><code class="hljs sh">git fetch --all &amp;&amp; git reset --hard origin/master</code></pre></p><h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p><pre><code class="hljs sh">git update-ref -d HEAD</code></pre><h2 id="查看冲突文件列表"><a href="#查看冲突文件列表" class="headerlink" title="查看冲突文件列表"></a>查看冲突文件列表</h2><p>展示工作区的冲突文件列表<br><pre><code class="hljs sh">git diff --name-only --diff-filter=U</code></pre></p><h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p><pre><code class="hljs sh">git diff</code></pre><p>还可以展示本地仓库中任意两个 commit 之间的文件变动：<br><pre><code class="hljs sh">git diff &lt;commit-id&gt; &lt;commit-id&gt;</code></pre></p><h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。<br><pre><code class="hljs sh">git diff --cached</code></pre></p><h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p><pre><code class="hljs sh">git diff HEAD</code></pre><h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><pre><code class="hljs sh">git checkout -</code></pre><h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><pre><code class="hljs sh">git branch --merged master | grep -v <span class="hljs-string">&#x27;^\*\|  master&#x27;</span> | xargs -n 1 git branch -d</code></pre><h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><pre><code class="hljs sh">git branch -vv</code></pre><h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。<br><pre><code class="hljs sh">git branch -u origin/mybranch</code></pre></p><p>或者在 push 时加上 <code>-u</code> 参数<br><pre><code class="hljs sh">git push origin/mybranch -u</code></pre></p><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote<br><pre><code class="hljs sh">git branch -r</code></pre></p><h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all<br><pre><code class="hljs sh">git branch -a</code></pre></p><h2 id="查看远程分支和本地分支的对应关系"><a href="#查看远程分支和本地分支的对应关系" class="headerlink" title="查看远程分支和本地分支的对应关系"></a>查看远程分支和本地分支的对应关系</h2><pre><code class="hljs sh">git remote show origin</code></pre><h2 id="远程删除了分支本地也想删除"><a href="#远程删除了分支本地也想删除" class="headerlink" title="远程删除了分支本地也想删除"></a>远程删除了分支本地也想删除</h2><pre><code class="hljs sh">git remote prune origin</code></pre><h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt;</code></pre><h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></pre><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><pre><code class="hljs sh">git branch -d &lt;local-branchname&gt;</code></pre><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><pre><code class="hljs sh">git push origin --delete &lt;remote-branchname&gt;</code></pre><p>或者</p><pre><code class="hljs sh">git push origin :&lt;remote-branchname&gt;</code></pre><h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><pre><code class="hljs sh">git branch -m &lt;new-branch-name&gt;</code></pre><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><pre><code class="hljs sh">git tag</code></pre><p>展示当前分支的最近的 tag</p><pre><code class="hljs sh">git describe --tags --abbrev=0</code></pre><h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><pre><code class="hljs sh">git tag -ln</code></pre><h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><pre><code class="hljs sh">git tag &lt;version-number&gt;</code></pre><p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：<br><pre><code class="hljs sh">$ git tag -a &lt;version-number&gt; -m <span class="hljs-string">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</code></pre></p><h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p><pre><code class="hljs sh">git push origin &lt;local-version-number&gt;</code></pre><p>一次性推送所有标签，同步到远程仓库：</p><pre><code class="hljs sh">git push origin --tags</code></pre><h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><pre><code class="hljs sh">git tag -d &lt;tag-name&gt;</code></pre><h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><pre><code class="hljs sh">git push origin --delete tag &lt;tagname&gt;</code></pre><h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：<br><pre><code class="hljs sh">git checkout -b branch_name tag_name</code></pre></p><h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><pre><code class="hljs sh">git checkout &lt;file-name&gt;</code></pre><p>放弃所有修改：<br><pre><code class="hljs sh">git checkout .</code></pre></p><h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><pre><code class="hljs sh">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="hljs-comment">#得到 deleting_commit</span>git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="hljs-comment">#回到删除文件 deleting_commit 之前的状态</span></code></pre><h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><pre><code class="hljs sh">git revert &lt;commit-id&gt;</code></pre><h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p><pre><code class="hljs sh">git reset &lt;commit-id&gt;  <span class="hljs-comment">#默认就是-mixed参数。</span>git reset --mixed HEAD^  <span class="hljs-comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span>git reset --soft HEAD~3  <span class="hljs-comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span>git reset --hard &lt;commit-id&gt;  <span class="hljs-comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></code></pre><h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p><pre><code class="hljs sh">git commit --amend</code></pre><h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><pre><code class="hljs sh">git <span class="hljs-built_in">log</span></code></pre><h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p><pre><code class="hljs sh">git blame &lt;file-name&gt;</code></pre><h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p><pre><code class="hljs sh">git reflog</code></pre><h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><pre><code class="hljs sh">git commit --amend --author=<span class="hljs-string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></code></pre><h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><pre><code class="hljs sh">git remote set-url origin &lt;URL&gt;</code></pre><h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><pre><code class="hljs sh">git remote add origin &lt;remote-url&gt;</code></pre><h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><pre><code class="hljs sh">git remote</code></pre><h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><pre><code class="hljs sh">git whatchanged --since=<span class="hljs-string">&#x27;2 weeks ago&#x27;</span></code></pre><h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p><pre><code class="hljs sh">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</code></pre><h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p><pre><code class="hljs sh">git config --global <span class="hljs-built_in">alias</span>.&lt;handle&gt; &lt;<span class="hljs-built_in">command</span>&gt;比如：git status 改成 git st，这样可以简化命令git config --global alias.st status</code></pre><h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a><br><pre><code class="hljs sh">git stash</code></pre></p><h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件<br><pre><code class="hljs sh">git stash -u</code></pre></p><h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><pre><code class="hljs sh">git stash list</code></pre><h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><pre><code class="hljs sh">git stash apply &lt;stash@&#123;n&#125;&gt;</code></pre><h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><pre><code class="hljs sh">git stash pop</code></pre><h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><pre><code class="hljs sh">git stash clear</code></pre><h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><pre><code class="hljs sh">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</code></pre><h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><pre><code class="hljs sh">git ls-files -t</code></pre><h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><pre><code class="hljs sh">git ls-files --others</code></pre><h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><pre><code class="hljs sh">git ls-files --others -i --exclude-standard</code></pre><h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p><ol><li>clean 后，删除的文件无法找回</li><li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li></ol><pre><code class="hljs sh">git clean &lt;file-name&gt; -f</code></pre><h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p><pre><code class="hljs sh">git clean &lt;directory-name&gt; -df</code></pre><h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --pretty=oneline --graph --decorate --all</code></pre><h2 id="把某一个分支到导出成一个文件"><a href="#把某一个分支到导出成一个文件" class="headerlink" title="把某一个分支到导出成一个文件"></a>把某一个分支到导出成一个文件</h2><pre><code class="hljs sh">git bundle create &lt;file&gt; &lt;branch-name&gt;</code></pre><h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</code></pre><h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><pre><code class="hljs sh">git rebase --autostash</code></pre><h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><pre><code class="hljs sh">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</code></pre><h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><pre><code class="hljs sh">git diff --word-diff</code></pre><h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><pre><code class="hljs sh">git clean -X -f</code></pre><h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p><pre><code class="hljs sh">git config --<span class="hljs-built_in">local</span> --list (当前目录)git config --global --list (全局)</code></pre><h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><pre><code class="hljs sh">git status --ignored</code></pre><h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> Branch1 ^Branch2</code></pre><h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --show-signature</code></pre><h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><pre><code class="hljs sh">git config --global --<span class="hljs-built_in">unset</span> &lt;entry-name&gt;</code></pre><h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p><pre><code class="hljs sh">git checkout --orphan &lt;branch-name&gt;</code></pre><h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><pre><code class="hljs sh">git show &lt;branch-name&gt;:&lt;file-name&gt;</code></pre><h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</code></pre><h2 id="clone-最新一次提交"><a href="#clone-最新一次提交" class="headerlink" title="clone 最新一次提交"></a>clone 最新一次提交</h2><p>只会 clone 最近一次提交，将减少 clone 时间</p><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/user/repo.git</code></pre><h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p><pre><code class="hljs sh">git update-index --assume-unchanged path/to/file</code></pre><p>恢复 track 指定文件的改动</p><pre><code class="hljs sh">git update-index --no-assume-unchanged path/to/file</code></pre><h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p><pre><code class="hljs sh">git config core.fileMode <span class="hljs-literal">false</span></code></pre><h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p><pre><code class="hljs sh">git for-each-ref --sort=-committerdate --format=<span class="hljs-string">&#x27;%(refname:short)&#x27;</span> refs/heads/</code></pre><h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --all --grep=<span class="hljs-string">&#x27;&lt;given-text&gt;&#x27;</span></code></pre><h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p><pre><code class="hljs sh">git reset &lt;file-name&gt;</code></pre><h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><pre><code class="hljs sh">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</code></pre><h2 id="git-配置-http-和-socks-代理"><a href="#git-配置-http-和-socks-代理" class="headerlink" title="git 配置 http 和 socks 代理"></a>git 配置 http 和 socks 代理</h2><pre><code class="hljs sh">git config --global https.proxy <span class="hljs-string">&#x27;http://127.0.0.1:8001&#x27;</span>   <span class="hljs-comment"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span>git config --global http.proxy <span class="hljs-string">&#x27;http://127.0.0.1:8001&#x27;</span>git config --global socks.proxy <span class="hljs-string">&quot;127.0.0.1:1080&quot;</span></code></pre><h2 id="git-配置-ssh-代理"><a href="#git-配置-ssh-代理" class="headerlink" title="git 配置 ssh 代理"></a>git 配置 ssh 代理</h2><pre><code class="hljs sh">$ cat ~/.ssh/configHost gitlab.comProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    <span class="hljs-comment"># 直接使用 shadowsocks 提供的 socks5 代理端口</span>Host github.comProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p</code></pre><h2 id="一图详解"><a href="#一图详解" class="headerlink" title="一图详解"></a>一图详解</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/git.png" alt=""></p><h2 id="优雅的提交Commit信息"><a href="#优雅的提交Commit信息" class="headerlink" title="优雅的提交Commit信息"></a>优雅的提交Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p><p>主要有以下组成</p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><p>常用的修改项</p><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述</li><li>body: commit 具体修改内容, 可以分为多行</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h3 id="使用Commitizen代替-git-commit"><a href="#使用Commitizen代替-git-commit" class="headerlink" title="使用Commitizen代替 git commit"></a>使用<code>Commitizen</code>代替 git commit</h3><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p><p>全局安装</p><pre><code class="hljs shell">npm install -g commitizen cz-conventional-changelogecho &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</code></pre><p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/gitcz.png" alt=""></p><h2 id="Fork地址"><a href="#Fork地址" class="headerlink" title="Fork地址"></a>Fork地址</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/git-tips/tips">Git常用命令集合</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/521xueweihan/git-tips#%E7%9B%AE%E5%BD%95">Git的奇技淫巧🙈</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令</title>
    <link href="/2021/01/12/git/git%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/01/12/git/git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）  </p><h2 id="Remote：远程仓库"><a href="#Remote：远程仓库" class="headerlink" title="Remote：远程仓库  "></a>Remote：远程仓库  </h2><h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> 在当前目录新建一个Git代码库  </span><span class="hljs-meta">$</span><span class="bash"> git init</span><span class="hljs-meta">$</span><span class="bash"> 新建一个目录，将其初始化为Git代码库  </span><span class="hljs-meta">$</span><span class="bash"> git init [project-name]</span><span class="hljs-meta">$</span><span class="bash"> 下载一个项目和它的整个代码历史  </span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> [url]  </span></code></pre><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre><code class="hljs routeros">$ 显示当前的Git配置   $ git<span class="hljs-built_in"> config </span>--list$ 编辑Git配置文件  $ git<span class="hljs-built_in"> config </span>-e [--global]$ 设置提交代码时的用户信息  $ git<span class="hljs-built_in"> config </span>[--global] user.name <span class="hljs-string">&quot;[name]&quot;</span>$ git<span class="hljs-built_in"> config </span>[--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span></code></pre><h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><pre><code class="hljs gams"><span class="hljs-symbol">$</span> 添加指定文件到暂存区<span class="hljs-symbol">$</span> git add [file1] [file2] ...<span class="hljs-symbol">$</span> 添加指定目录到暂存区，包括子目录<span class="hljs-symbol">$</span> git add [dir]<span class="hljs-symbol">$</span> 添加当前目录的所有文件到暂存区<span class="hljs-symbol">$</span> git add .<span class="hljs-symbol">$</span> 添加每个变化前，都会要求确认<span class="hljs-symbol">$</span> 对于同一个文件的多处变化，可以实现分次提交<span class="hljs-symbol">$</span> git add -p<span class="hljs-symbol">$</span> 删除工作区文件，并且将这次删除放入暂存区<span class="hljs-symbol">$</span> git rm [file1] [file2] ...<span class="hljs-symbol">$</span> 停止追踪指定文件，但该文件会保留在工作区<span class="hljs-symbol">$</span> git rm --cached [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 改名文件，并且将这个改名放入暂存区<span class="hljs-symbol">$</span> git mv [<span class="hljs-keyword">file</span>-original] [<span class="hljs-keyword">file</span>-renamed]</code></pre><h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><pre><code class="hljs powershell"><span class="hljs-variable">$</span> 提交暂存区到仓库区<span class="hljs-variable">$</span> git commit <span class="hljs-literal">-m</span> [<span class="hljs-type">message</span>]<span class="hljs-variable">$</span> 提交暂存区的指定文件到仓库区<span class="hljs-variable">$</span> git commit [<span class="hljs-type">file1</span>] [<span class="hljs-type">file2</span>] ... <span class="hljs-literal">-m</span> [<span class="hljs-type">message</span>]<span class="hljs-variable">$</span> 提交工作区自上次commit之后的变化，直接到仓库区<span class="hljs-variable">$</span> git commit <span class="hljs-literal">-a</span><span class="hljs-variable">$</span> 提交时显示所有<span class="hljs-built_in">diff</span>信息<span class="hljs-variable">$</span> git commit <span class="hljs-literal">-v</span><span class="hljs-variable">$</span> 使用一次新的commit，替代上一次提交<span class="hljs-variable">$</span> 如果代码没有任何新变化，则用来改写上一次commit的提交信息<span class="hljs-variable">$</span> git commit -<span class="hljs-literal">-amend</span> <span class="hljs-literal">-m</span> [<span class="hljs-type">message</span>]<span class="hljs-variable">$</span> 重做上一次commit，并包括指定文件的新变化<span class="hljs-variable">$</span> git commit -<span class="hljs-literal">-amend</span> [<span class="hljs-type">file1</span>] [<span class="hljs-type">file2</span>] ...</code></pre><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>列出所有本地分支<span class="hljs-variable">$ </span>git branch<span class="hljs-variable">$ </span>列出所有远程分支<span class="hljs-variable">$ </span>git branch -r<span class="hljs-variable">$ </span>列出所有本地分支和远程分支<span class="hljs-variable">$ </span>git branch -a<span class="hljs-variable">$ </span>新建一个分支，但依然停留在当前分支<span class="hljs-variable">$ </span>git branch [branch-name]<span class="hljs-variable">$ </span>新建一个分支，并切换到该分支<span class="hljs-variable">$ </span>git checkout -b [branch]<span class="hljs-variable">$ </span>新建一个分支，指向指定commit<span class="hljs-variable">$ </span>git branch [branch] [commit]<span class="hljs-variable">$ </span>新建一个分支，与指定的远程分支建立追踪关系<span class="hljs-variable">$ </span>git branch --track [branch] [remote-branch]<span class="hljs-variable">$ </span>切换到指定分支，并更新工作区<span class="hljs-variable">$ </span>git checkout [branch-name]<span class="hljs-variable">$ </span>切换到上一个分支<span class="hljs-variable">$ </span>git checkout -<span class="hljs-variable">$ </span>建立追踪关系，在现有分支与指定的远程分支之间<span class="hljs-variable">$ </span>git branch --set-upstream [branch] [remote-branch]<span class="hljs-variable">$ </span>合并指定分支到当前分支<span class="hljs-variable">$ </span>git merge [branch]<span class="hljs-variable">$ </span>选择一个commit，合并进当前分支<span class="hljs-variable">$ </span>git cherry-pick [commit]<span class="hljs-variable">$ </span>删除分支<span class="hljs-variable">$ </span>git branch -d [branch-name]<span class="hljs-variable">$ </span>删除远程分支<span class="hljs-variable">$ </span>git push origin --delete [branch-name]<span class="hljs-variable">$ </span>git branch -dr [remote/branch]</code></pre><h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><pre><code class="hljs crmsh">$ 列出所有<span class="hljs-keyword">tag</span>$ git <span class="hljs-keyword">tag</span>$ 新建一个<span class="hljs-keyword">tag</span>在当前commit$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]$ 新建一个<span class="hljs-keyword">tag</span>在指定commit$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]$ 删除本地<span class="hljs-keyword">tag</span>$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]$ 删除远程<span class="hljs-keyword">tag</span>$ git push origin :refs/tags/[tagName]$ 查看<span class="hljs-keyword">tag</span>信息$ git show [<span class="hljs-keyword">tag</span>]$ 提交指定<span class="hljs-keyword">tag</span>$ git push [remote] [<span class="hljs-keyword">tag</span>]$ 提交所有<span class="hljs-keyword">tag</span>$ git push [remote] --tags$ 新建一个分支，指向某个<span class="hljs-keyword">tag</span>$ git checkout -b [branch] [<span class="hljs-keyword">tag</span>]</code></pre><h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><pre><code class="hljs gams"><span class="hljs-symbol">$</span> 显示有变更的文件<span class="hljs-symbol">$</span> git status<span class="hljs-symbol">$</span> 显示当前分支的版本历史<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span><span class="hljs-symbol">$</span> 显示commit历史，以及每次commit发生变更的文件<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> --stat<span class="hljs-symbol">$</span> 搜索提交历史，根据关键词<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> -S [keyword]<span class="hljs-symbol">$</span> 显示某个commit之后的所有变动，每个commit占据一行<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s<span class="hljs-symbol">$</span> 显示某个commit之后的所有变动，其<span class="hljs-string">&quot;提交说明&quot;</span>必须符合搜索条件<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature<span class="hljs-symbol">$</span> 显示某个文件的版本历史，包括文件改名<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> --follow [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> git whatchanged [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 显示指定文件相关的每一次diff<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> -p [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 显示过去<span class="hljs-number">5</span>次提交<span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span> <span class="hljs-number">-5</span> --pretty --oneline<span class="hljs-symbol">$</span> 显示所有提交过的用户，按提交次数排序<span class="hljs-symbol">$</span> git shortlog -sn<span class="hljs-symbol">$</span> 显示指定文件是什么人在什么时间修改过<span class="hljs-symbol">$</span> git blame [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 显示暂存区和工作区的差异<span class="hljs-symbol">$</span> git diff<span class="hljs-symbol">$</span> 显示暂存区和上一个commit的差异<span class="hljs-symbol">$</span> git diff --cached [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 显示工作区与当前分支最新commit之间的差异<span class="hljs-symbol">$</span> git diff HEAD<span class="hljs-symbol">$</span> 显示两次提交之间的差异<span class="hljs-symbol">$</span> git diff [first-branch]...[second-branch]<span class="hljs-symbol">$</span> 显示今天你写了多少行代码<span class="hljs-symbol">$</span> git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><span class="hljs-symbol">$</span> 显示某次提交的元数据和内容变化<span class="hljs-symbol">$</span> git show [commit]<span class="hljs-symbol">$</span> 显示某次提交发生变化的文件<span class="hljs-symbol">$</span> git show --name-only [commit]<span class="hljs-symbol">$</span> 显示某次提交时，某个文件的内容<span class="hljs-symbol">$</span> git show [commit]:[filename]<span class="hljs-symbol">$</span> 显示当前分支的最近几次提交<span class="hljs-symbol">$</span> git reflog</code></pre><h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><pre><code class="hljs gams"><span class="hljs-symbol">$</span> 下载远程仓库的所有变动<span class="hljs-symbol">$</span> git fetch [remote]<span class="hljs-symbol">$</span> 显示所有远程仓库<span class="hljs-symbol">$</span> git remote -v<span class="hljs-symbol">$</span> 显示某个远程仓库的信息<span class="hljs-symbol">$</span> git remote show [remote]<span class="hljs-symbol">$</span> 增加一个新的远程仓库，并命名<span class="hljs-symbol">$</span> git remote add [shortname] [url]<span class="hljs-symbol">$</span> 取回远程仓库的变化，并与本地分支合并<span class="hljs-symbol">$</span> git pull [remote] [branch]<span class="hljs-symbol">$</span> 上传本地指定分支到远程仓库<span class="hljs-symbol">$</span> git push [remote] [branch]<span class="hljs-symbol">$</span> 强行推送当前分支到远程仓库，即使有冲突<span class="hljs-symbol">$</span> git push [remote] --force<span class="hljs-symbol">$</span> 推送所有分支到远程仓库<span class="hljs-symbol">$</span> git push [remote] --<span class="hljs-keyword">all</span></code></pre><h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><pre><code class="hljs gams"><span class="hljs-symbol">$</span> 恢复暂存区的指定文件到工作区<span class="hljs-symbol">$</span> git checkout [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 恢复某个commit的指定文件到暂存区和工作区<span class="hljs-symbol">$</span> git checkout [commit] [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 恢复暂存区的所有文件到工作区<span class="hljs-symbol">$</span> git checkout .<span class="hljs-symbol">$</span> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<span class="hljs-symbol">$</span> git reset [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> 重置暂存区与工作区，与上一次commit保持一致<span class="hljs-symbol">$</span> git reset --hard<span class="hljs-symbol">$</span> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<span class="hljs-symbol">$</span> git reset [commit]<span class="hljs-symbol">$</span> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<span class="hljs-symbol">$</span> git reset --hard [commit]<span class="hljs-symbol">$</span> 重置当前HEAD为指定commit，但保持暂存区和工作区不变<span class="hljs-symbol">$</span> git reset --keep [commit]<span class="hljs-symbol">$</span> 新建一个commit，用来撤销指定commit<span class="hljs-symbol">$</span> 后者的所有变化都将被前者抵消，并且应用到当前分支<span class="hljs-symbol">$</span> git revert [commit]<span class="hljs-symbol">$</span> 暂时将未提交的变化移除，稍后再移入<span class="hljs-symbol">$</span> git stash<span class="hljs-symbol">$</span> git stash pop</code></pre><h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>生成一个可供发布的压缩包<span class="hljs-variable">$ </span>git archive</code></pre><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/TsumugiWenders/GitHub">GitHub快速入门</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github标签管理</title>
    <link href="/2021/01/12/git/github%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/"/>
    <url>/2021/01/12/git/github%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：<br><pre><code class="hljs crmsh">$ git branch  * dev    <span class="hljs-keyword">master</span>  <span class="hljs-title"></span><span class="hljs-title">$</span> git checkout <span class="hljs-keyword">master</span>    <span class="hljs-title"></span><span class="hljs-title">Switched</span> to branch &#x27;<span class="hljs-literal">master</span>&#x27;</code></pre><br>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p><p><code>$ git tag v1.0</code><br>可以用命令git tag查看所有标签：</p><p><code>$ git tag</code><br><code>v1.0</code><br>默认标签是打在最新提交的<code>commit</code>上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p><p>方法是找到历史提交的<code>commit id</code>，然后打上就可以了：</p><pre><code class="hljs routeros">$ git log <span class="hljs-attribute">--pretty</span>=oneline --abbrev-commit  12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101  4c805e2 fix bug 101  e1e9c68 merge with no-ff  f52c633 <span class="hljs-builtin-name">add</span> merge  cf810e4 conflict fixed  5dc6824 &amp;<span class="hljs-built_in"> simple </span> 14096d0 <span class="hljs-keyword">AND</span><span class="hljs-built_in"> simple </span> b17d20e branch test  d46f35e <span class="hljs-builtin-name">remove</span> test.txt  b84166e <span class="hljs-builtin-name">add</span> test.txt  519219b git tracks changes  e43a48b understand how stage works  1094adb append GPL  e475afc <span class="hljs-builtin-name">add</span> distributed  eaadf4e wrote a readme file  比方说要对<span class="hljs-builtin-name">add</span> merge这次提交打标签，它对应的commit id是f52c633，敲入命令：  $ git tag v0.9 f52c633  再用命令git tag查看标签：$ git tag  v0.9  v1.0</code></pre><p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：</p><pre><code class="hljs angelscript">$ git show v0<span class="hljs-number">.9</span>commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0<span class="hljs-number">.9</span>)Author: Michael Liao &lt;<span class="hljs-symbol">askxuefeng@</span>gmail.com&gt;Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">56</span>:<span class="hljs-number">54</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span>    add mergediff --git a/readme.txt b/readme.txt</code></pre><p>可以看到，v0.9确实打在add merge这次提交上。</p><p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：<br><pre><code class="hljs angelscript">$ git tag -a v0<span class="hljs-number">.1</span> -m <span class="hljs-string">&quot;version 0.1 released&quot;</span> <span class="hljs-number">1094</span>adb用命令git show &lt;tagname&gt;可以看到说明文字：$ git show v0<span class="hljs-number">.1</span>tag v0<span class="hljs-number">.1</span>Tagger: Michael Liao &lt;<span class="hljs-symbol">askxuefeng@</span>gmail.com&gt;Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">22</span>:<span class="hljs-number">48</span>:<span class="hljs-number">43</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span>version <span class="hljs-number">0.1</span> releasedcommit <span class="hljs-number">1094</span>adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0<span class="hljs-number">.1</span>)Author: Michael Liao &lt;<span class="hljs-symbol">askxuefeng@</span>gmail.com&gt;Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">15</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span>    append GPLdiff --git a/readme.txt b/readme.txt</code></pre></p><blockquote><p>注意：标签总是和某个<code>commit</code>挂钩。如果这个<code>commit</code>既出现在<code>master</code>分支，又出现在<code>dev</code>分支，那么在这两个分支上都可以看到这个标签。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个<code>commit id</code>；</p><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p><p>命令<code>git tag</code>可以查看所有标签。</p><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><p>如果标签打错了，也可以删除：</p><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v0.<span class="hljs-number">1</span>Deleted <span class="hljs-keyword">tag</span> <span class="hljs-title">&#x27;v0</span>.<span class="hljs-number">1</span>&#x27; (was f15b0dd)</code></pre><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p><pre><code class="hljs angelscript">$ git push origin v1<span class="hljs-number">.0</span>Total <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)To github.com:michaelliao/learngit.git * [new tag]         v1<span class="hljs-number">.0</span> -&gt; v1<span class="hljs-number">.0</span></code></pre><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><pre><code class="hljs angelscript">$ git push origin --tagsTotal <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)To github.com:michaelliao/learngit.git * [new tag]         v0<span class="hljs-number">.9</span> -&gt; v0<span class="hljs-number">.9</span></code></pre><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v0.<span class="hljs-number">9</span>Deleted <span class="hljs-keyword">tag</span> <span class="hljs-title">&#x27;v0</span>.<span class="hljs-number">9</span>&#x27; (was f52c633)</code></pre><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git push origin <span class="hljs-symbol">:refs/tags/v0</span>.<span class="hljs-number">9</span>To <span class="hljs-symbol">github.com:</span>michaelliao/learngit.git - [deleted]         v0.<span class="hljs-number">9</span></code></pre><p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/TsumugiWenders/GitHub">GitHub快速入门</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github分支</title>
    <link href="/2021/01/12/git/github%E5%88%86%E6%94%AF/"/>
    <url>/2021/01/12/git/github%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>创建一个叫做“feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：<br><code>git push origin &lt;branch&gt;</code>  </p><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：<br><code>git merge &lt;branch&gt;</code><br>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，你可以使用如下命令预览差异：<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code>  </p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>如果你想了解本地仓库的历史记录，最简单的命令就是使用:<br><code>git log</code><br>你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:<br><code>git log --author=bob</code><br>一个压缩后的每一条提交记录只占一行的输出:<br><code>git log --pretty=oneline</code><br>或者你想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签:<br><code>git log --graph --oneline --decorate --all</code><br>看看哪些文件改变了:<br><code>git log --name-status</code><br>这些只是你可以使用的参数中很小的一部分。更多的信息，参考：<br><code>git log --help</code> </p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br><code>git checkout -- &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。  </p><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code>  </p><h2 id="实用小贴士"><a href="#实用小贴士" class="headerlink" title="实用小贴士"></a>实用小贴士</h2><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，每个提交的信息只显示一行：<br><code>git config format.pretty oneline</code><br>交互式添加文件到暂存区：<br><code>git add -i</code>  </p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/TsumugiWenders/GitHub">GitHub快速入门</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git入门</title>
    <link href="/2021/01/12/git/git%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/12/git/git%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>（1）在 <a href="https://github.com">https://github.com</a> 网站上注册一个账号并设置用户名、密码，新建一个repository</p><p>（2）在网站 <a href="http://msysgit.github.io/">http://msysgit.github.io/</a> 上下载git，并安装</p><h2 id="二、设置SSH"><a href="#二、设置SSH" class="headerlink" title="二、设置SSH"></a>二、设置SSH</h2><h3 id="1、首先在本地创建ssh-key，使用下面的命令："><a href="#1、首先在本地创建ssh-key，使用下面的命令：" class="headerlink" title="1、首先在本地创建ssh key，使用下面的命令："></a>1、首先在本地创建ssh key，使用下面的命令：</h3><p><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code><br>后面的参数<code>your_email@youremail.com</code>改为你在github网站上注册的邮箱，之后要求确认路径和输入密码（密码就是网站上自己设置的密码），之后一路默认。成功之后可以在<code>C://Users/.ssh</code>下找到<code>id_rsa.pub</code>文件，打开全部复制。</p><p>回到github网页版，点击头像 <code>--&gt; Settings --&gt; SSH和GPG keys --&gt; New SSH key</code>，粘贴上之前复制的密钥内容。如下图：</p><p>为了验证是够成功，在git bash下输入下面的命令：</p><p><code>$ ssh -T git@github.com</code><br>第一次会提示是够<code>continue</code>，输入“yes”，接着会看到“<code>You&#39;ve successfully authenticated, but GitHub does not provide shell access</code>”，表示连接成功。</p><h3 id="2、设置username和email，github每次commit都会记录他们。使用下面的命令："><a href="#2、设置username和email，github每次commit都会记录他们。使用下面的命令：" class="headerlink" title="2、设置username和email，github每次commit都会记录他们。使用下面的命令："></a>2、设置username和email，github每次commit都会记录他们。使用下面的命令：</h3><pre><code class="hljs routeros">$ git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;your name&quot;</span>  $ git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;your_email@youremail.com&quot;</span></code></pre><p><code>yourname</code>是网页上的用户名，<code>your_email@youremail.com</code>是用户注册的邮箱。</p><h2 id="三、上传本地文件到远程仓库"><a href="#三、上传本地文件到远程仓库" class="headerlink" title="三、上传本地文件到远程仓库"></a>三、上传本地文件到远程仓库</h2><p>这里只讲述最简单的上传，所以采用了一种比较固定的模式，其他再多些的用法可自行搜索，只是成功上传了的一个流程（弄了好久，终于成功了..^_^..），说明：下面的内容几乎来自<a href="http://blog.csdn.net/sinat_33366020/article/details/73732769，非常感谢作者！！">http://blog.csdn.net/sinat_33366020/article/details/73732769，非常感谢作者！！</a></p><h3 id="1、先进入项目文件夹"><a href="#1、先进入项目文件夹" class="headerlink" title="1、先进入项目文件夹"></a>1、先进入项目文件夹</h3><p>比如我想把python下面的test文件夹及test文件夹下的文件上传，则进入python文件夹内（如上传python下面的文件及文件夹，则需要进入python的上一级目录），使用cd命令。</p><h3 id="2、通过git-init把当前目录变成git可以管理的仓库"><a href="#2、通过git-init把当前目录变成git可以管理的仓库" class="headerlink" title="2、通过git init把当前目录变成git可以管理的仓库"></a>2、通过git init把当前目录变成git可以管理的仓库</h3><p>使用如下命令：</p><p><code>git init</code><br>可以使用<code>ls -a</code>查看当前文件夹下是否包括一个<code>.git</code>的文件夹，若包含，则成功。</p><h3 id="3、把文件添加到本地版本库"><a href="#3、把文件添加到本地版本库" class="headerlink" title="3、把文件添加到本地版本库"></a>3、把文件添加到本地版本库</h3><p>使用命令<code>git add</code>添加文件；添加到暂存区里面去，如果add后面加入的是“.”，则意味着需要添加当前文件夹下的所有文件，若只想添加<code>/python/test/note.txt</code>这个文件，则只需要将”.”改成当前路径（/test/note.txt）即可，命令如下：</p><p><code>git add .</code>  </p><h3 id="4、用命令git-commit把文件提交到仓库"><a href="#4、用命令git-commit把文件提交到仓库" class="headerlink" title="4、用命令git commit把文件提交到仓库"></a>4、用命令<code>git commit</code>把文件提交到仓库</h3><p>如下命令：</p><p><code>git commit -m &#39;note&#39;</code><br>引号里面的是提交的说明，如果忘记带参数-m，则会自动打开vim编辑器。</p><h3 id="5、关联到远程仓库"><a href="#5、关联到远程仓库" class="headerlink" title="5、关联到远程仓库"></a>5、关联到远程仓库</h3><p>使用下面的命令：</p><p><code>git remote add origin 你的远程库地址</code><br>如：</p><p><code>git remote add origin https://github.com/nnaa/helloworld.git</code><br><code>nnaa</code>是你的用户名，<code>helloworld</code>是新建的仓库名称。<br>如果发现上面步骤写错了，则使用下面的命令：</p><p><code>git remote rm origin   //删除origin</code><br><code>git remote add origin https://github.com/nana/demo.git   //重新添加origin</code>  </p><h3 id="6、远程库与本地同步合并"><a href="#6、远程库与本地同步合并" class="headerlink" title="6、远程库与本地同步合并"></a>6、远程库与本地同步合并</h3><p>（如果远程库不为空必须做这一步，否则后面的提交会失败）</p><p><code>git pull --rebase origin master</code>  </p><h3 id="7、将最新的修改推送到远程仓库"><a href="#7、将最新的修改推送到远程仓库" class="headerlink" title="7、将最新的修改推送到远程仓库"></a>7、将最新的修改推送到远程仓库</h3><p>使用下面的命令：<br><code>git push -u origin master</code><br>其中，<code>origin</code>是远程仓库名字; <code>master</code>是远程仓库所属分支</p><p>注意: 我们第一次push的时候,加上<code>-u</code>参数,Git就会把本地的master分支和远程的master分支进行关联起来,我们以后的push操作就不再需要加上<code>-u</code>参数了</p><p>如果出现类似下面内容：</p><pre><code>Username for &#39;https://github.com&#39;: shiren1118  Password for &#39;https://shiren1118@github.com&#39;:  To https://github.com/shiren1118/iOS_code_agile.git   ![rejected]        master -&gt; master(non-fast-forward)  error: failed to push some refs to&#39;https://github.com/shiren1118/iOS_code_agile.git&#39;  hint: Updates were rejected because the tip of yourcurrent branch is behind  hint: its remote counterpart. Merge the remote changes(e.g. &#39;git pull&#39;)  hint: before pushing again.  hint: See the &#39;Note about fast-forwards&#39; in &#39;git push--help&#39; for details.</code></pre><p>则输入命令下列命令即可：</p><p><code>git push -u origin master -f</code>     </p><h2 id="四、拷贝其他git文件"><a href="#四、拷贝其他git文件" class="headerlink" title="四、拷贝其他git文件"></a>四、拷贝其他git文件</h2><p>如果从在git服务器所在主机上的其他账户获取git服务器上面文件，则直接用gitclone + git仓库的路径，即：</p><p><code>git clone /nnaa/sample.git</code>（将仓库地址复制）  </p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/TsumugiWenders/GitHub">GitHub快速入门</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages 和 Hexo 搭建自己的博客</title>
    <link href="/2021/01/09/hexo/Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/01/09/hexo/Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><blockquote><p>一直以来想整理一下 hexo + github pages 个人博客搭建的教程，刚好考完试闲下来无事，便整理（水）出本篇博客。</p></blockquote><p><strong>参(转)考(载)链接🔗:</strong></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/82121420">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p><ul><li>Github Pages</li></ul><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><ul><li>Hexo</li></ul><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="二-软件安装"><a href="#二-软件安装" class="headerlink" title="二.软件安装"></a>二.软件安装</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p><a href="https://nodejs.org/en/download/">点击此处</a>访问官网，按需下载相应版本，默认安装可以了</p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><p><a href="https://git-scm.com/download/win">点击此处</a>访问官网，按需下载相应版本，默认安装即可</p><h3 id="3-检验安装"><a href="#3-检验安装" class="headerlink" title="3. 检验安装"></a>3. 检验安装</h3><pre><code class="hljs shell">git --version  node -v  npm -v</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202021158-QQ%E6%88%AA%E5%9B%BE20210109221956.png" alt=""></p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>选择一个目录位置，博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装。</p><pre><code class="hljs shell">npm install hexo-cli -g   #第一个命令表示安装 hexo，npm install hexo-deployer-git --save  #第二个命令表示安装 hexo 部署到 git page 的 deployer</code></pre><h2 id="三-Hexo-初始化配置"><a href="#三-Hexo-初始化配置" class="headerlink" title="三.Hexo 初始化配置"></a>三.Hexo 初始化配置</h2><p>在刚才新建的文件夹里面再次新建一个 Hexo 文件夹，输入以下命令安装成功</p><pre><code class="hljs shell">hexo init</code></pre><h2 id="四-本地查看效果"><a href="#四-本地查看效果" class="headerlink" title="四.本地查看效果"></a>四.本地查看效果</h2><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p><pre><code class="hljs shell">hexo generate  hexo server</code></pre><p>显示以下信息说明操作成功：</p><pre><code class="hljs shell">INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><h2 id="五-将博客部署到-Github-Pages-上"><a href="#五-将博客部署到-Github-Pages-上" class="headerlink" title="五.将博客部署到 Github Pages 上"></a>五.将博客部署到 Github Pages 上</h2><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><h3 id="1-注册-Github-账户"><a href="#1-注册-Github-账户" class="headerlink" title="1. 注册 Github 账户"></a>1. 注册 Github 账户</h3><p><a href="https://github.com/">点击此处</a>访问 Github 官网，点击 Sign Up 注册账户</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202106804-QQ%E6%88%AA%E5%9B%BE20210109222125.png" alt=""></p><h3 id="2-创建项目代码库"><a href="#2-创建项目代码库" class="headerlink" title="2. 创建项目代码库"></a>2. 创建项目代码库</h3><p>点击 New repository 开始创建，步骤及注意事项见下图：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202186007-QQ%E6%88%AA%E5%9B%BE20210109222246.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202374845-QQ%E6%88%AA%E5%9B%BE20210109222556.png" alt=""></p><h3 id="3-配置-SSH-密钥"><a href="#3-配置-SSH-密钥" class="headerlink" title="3. 配置 SSH 密钥"></a>3. 配置 SSH 密钥</h3><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面输入以下命令：</p><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;your email@example.com&quot;  //引号里面填写你的邮箱地址</code></pre><p>之后会出现：</p><pre><code class="hljs shell">Generating public/private rsa key pair.  Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  //到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>然后会出现：</p><pre><code class="hljs shell">Enter passphrase (empty for no passphrase):  //这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again:</code></pre><p>接下来屏幕会显示：</p><pre><code class="hljs shell">Your identification has been saved in /c/Users/you/.ssh/id_rsa.  Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.  The key fingerprint is:  这里是各种字母数字组成的字符串，结尾是你的邮箱  The key&#x27;s randomart image is:  这里也是各种字母数字符号组成的字符串 ``` 运行以下命令，将公钥的内容复制到系统粘贴板上```shellclip &lt; ~/.ssh/id_rsa.pub</code></pre><h3 id="4-在-GitHub-账户中添加你的公钥"><a href="#4-在-GitHub-账户中添加你的公钥" class="headerlink" title="4. 在 GitHub 账户中添加你的公钥"></a>4. 在 GitHub 账户中添加你的公钥</h3><h4 id="①-登陆-GitHub，进入-Settings："><a href="#①-登陆-GitHub，进入-Settings：" class="headerlink" title="① 登陆 GitHub，进入 Settings："></a>① 登陆 GitHub，进入 Settings：</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202613715-QQ%E6%88%AA%E5%9B%BE20210109222957.png" alt=""></p><h4 id="②-点击-SSH-and-GPG-Keys："><a href="#②-点击-SSH-and-GPG-Keys：" class="headerlink" title="② 点击 SSH and GPG Keys："></a>② 点击 SSH and GPG Keys：</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202758147-QQ%E6%88%AA%E5%9B%BE20210109223154.png" alt=""></p><h4 id="③-选择-New-SSH-key："><a href="#③-选择-New-SSH-key：" class="headerlink" title="③ 选择 New SSH key："></a>③ 选择 New SSH key：</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610202828863-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2M2ViMWFiMi5wbmc.png" alt=""></p><h4 id="④-粘贴密钥"><a href="#④-粘贴密钥" class="headerlink" title="④ 粘贴密钥"></a>④ 粘贴密钥</h4><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><p>输入以下命令：注意：git@github.com不要做任何更改！</p><pre><code class="hljs shell">ssh -T git@github.com</code></pre><p>之后会显示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203007527-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2ZTNiNDgwMy5wbmc.png" alt=""></p><p>输入 yes 后会显示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203017000-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3MDJjNDZkNi5wbmc.png" alt=""></p><p>此时表示设置正确</p><h3 id="6-配置-Git-个人信息"><a href="#6-配置-Git-个人信息" class="headerlink" title="6. 配置 Git 个人信息"></a>6. 配置 Git 个人信息</h3><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><pre><code class="hljs shell">git config --global user.name &quot;此处填你的用户名&quot;  git config --global user.email  &quot;此处填你的邮箱&quot;</code></pre><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h3 id="7-将本地的-Hexo-文件更新到-Github-的库中"><a href="#7-将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="7. 将本地的 Hexo 文件更新到 Github 的库中"></a>7. 将本地的 Hexo 文件更新到 Github 的库中</h3><h4 id="①-登录-Github-打开自己的项目-your-name-github-io"><a href="#①-登录-Github-打开自己的项目-your-name-github-io" class="headerlink" title="① 登录 Github 打开自己的项目 your name.github.io"></a>① 登录 Github 打开自己的项目 your name.github.io</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203121737-QQ%E6%88%AA%E5%9B%BE20210109223830.png" alt=""></p><h4 id="②-鼠标移到-Clone-or-download-按钮，选择-Use-SSH"><a href="#②-鼠标移到-Clone-or-download-按钮，选择-Use-SSH" class="headerlink" title="② 鼠标移到 Clone or download 按钮，选择 Use SSH"></a>② 鼠标移到 Clone or download 按钮，选择 Use SSH</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203168598-QQ%E6%88%AA%E5%9B%BE20210109223916.png" alt=""></p><h4 id="③-一键复制地址"><a href="#③-一键复制地址" class="headerlink" title="③ 一键复制地址"></a>③ 一键复制地址</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203209119-QQ%E6%88%AA%E5%9B%BE20210109223957.png" alt=""></p><h4 id="④-打开你创建的-Hexo-文件夹，右键用记事本（Notepad-或者VS-code等都可以）打开该文件夹下的-config-yml-文件"><a href="#④-打开你创建的-Hexo-文件夹，右键用记事本（Notepad-或者VS-code等都可以）打开该文件夹下的-config-yml-文件" class="headerlink" title="④ 打开你创建的 Hexo 文件夹，右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 文件"></a>④ 打开你创建的 Hexo 文件夹，右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 文件</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203268126-QQ%E6%88%AA%E5%9B%BE20210109224055.png" alt=""></p><h4 id="⑤-按下图修改-config-yml-文件并保存"><a href="#⑤-按下图修改-config-yml-文件并保存" class="headerlink" title="⑤ 按下图修改 _config.yml 文件并保存"></a>⑤ 按下图修改 _config.yml 文件并保存</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203302581-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3ZTExZWVkNy5wbmc.png" alt=""></p><h4 id="⑥-在-Hexo-文件夹下分别执行以下命令"><a href="#⑥-在-Hexo-文件夹下分别执行以下命令" class="headerlink" title="⑥ 在 Hexo 文件夹下分别执行以下命令"></a>⑥ 在 Hexo 文件夹下分别执行以下命令</h4><pre><code class="hljs shell">hexo g  hexo d</code></pre><p>或者直接执行<br><pre><code class="hljs shell">hexo g -d</code></pre><br>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><pre><code class="hljs shell">ERROR Deployer not found: git</code></pre><p>需要执行以下命令再安装一次：</p><pre><code class="hljs shell">npm install hexo-deployer-git --save</code></pre><p>再执行 <code>hexo g -d</code>，你的博客就会部署到 Github 上了</p><h3 id="⑦-访问博客"><a href="#⑦-访问博客" class="headerlink" title="⑦ 访问博客"></a>⑦ 访问博客</h3><p>你的博客地址：<a href="https://你的用户名.github.io，比如我的是：https://baixf-xyz.github.io">https://你的用户名.github.io，比如我的是：https://baixf-xyz.github.io</a> ,现在每个人都可以通过此链接访问。</p><h3 id="8-在博客上发表文章"><a href="#8-在博客上发表文章" class="headerlink" title="8. 在博客上发表文章"></a>8. 在博客上发表文章</h3><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><h4 id="①-新建一个空文章，输入以下命令，会在项目-Hexo-source-posts-中生成-文章标题-md-文件，文章标题根据需要命名"><a href="#①-新建一个空文章，输入以下命令，会在项目-Hexo-source-posts-中生成-文章标题-md-文件，文章标题根据需要命名" class="headerlink" title="① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名"></a>① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名</h4><pre><code class="hljs shell">hexo n &quot;文章标题&quot;</code></pre><p>也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><h4 id="②-用编辑器编写文章"><a href="#②-用编辑器编写文章" class="headerlink" title="② 用编辑器编写文章"></a>② 用编辑器编写文章</h4><p>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</p><p>推荐 Windows 上使用 MarkdownPad2 或者小书匠 编辑器，macOS 上使用 Mou 编辑器，Linux 上使用 Remarkable编辑器，Web 端上使用CSDN ，其他编辑器推荐可以参考我的另一篇文章：《最新主流 Markdown 编辑器推荐》</p><p>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</p><pre><code class="hljs shell">---layout: 页面布局（配合主题文档使用）title: 文章名称date: 文章日期comments: 文章是否开启评论photos: 文章封面图（仅部分主题支持）tags:   - 文章标签一  - 文章标签二categories: 文章分类description: 文章描述，即要在首页显示的摘要（仅部分主题支持）---这里是摘要&lt;!-- more --&gt;这里是正文</code></pre><p>注意：description 和 <!-- more --> 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</p><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><pre><code class="hljs shell">hexo g  hexo d</code></pre><p>或者将两个命令合二为一输入以下命令：</p><pre><code class="hljs shell">hexo d -g</code></pre><p>现在访问你的博客就可以看见写好的文章啦！</p><h2 id="六-为博客更换自己喜欢的主题"><a href="#六-为博客更换自己喜欢的主题" class="headerlink" title="六.为博客更换自己喜欢的主题"></a>六.为博客更换自己喜欢的主题</h2><p>博客也搭建好了，文章也会写了，但是！！！默认的主题并不喜欢怎么办？现在，我们就来为自己的博客更换自己喜欢的主题</p><p><a href="https://hexo.io/themes/">点击此处</a>进入 Hexo 官网的主题专栏，我们可以看见有许多的主题供我们选择。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203482133-QQ%E6%88%AA%E5%9B%BE20210109224408.png" alt=""></p><p>我们要做的就是把主题克隆过来，在此我们以主题 Aero-Dual 为例，点进去我们就可以看见该主题作者的博客，鼠标滑到底，我们可以看见 Theme By Levblanc 的字样（其他主题类似），点击作者 Levblanc ，页面就会跳转到该主题所有的相关文件在 Github 上的地址，复制该地址</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203522092-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY4MjNmMTI3NS5wbmc.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203522094-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY4NDE0Y2VjNi5wbmc.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203522096-aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY4NWRiZGYyMy5wbmc.png" alt=""></p><p>再打开 Hexo 文件夹下的 themes 目录（如：E:\TRHX_Blog\Hexo\themes），右键 Git Bash Here，输入以下命令：</p><pre><code class="hljs shell">git clone 此处填写你刚才复制的主题地址</code></pre><p>比如要安装 Aero-Dual 主题，则输入命令：</p><pre><code class="hljs shell">git clone https://github.com/levblanc/hexo-theme-aero-dual</code></pre><p>等待下载完成后即可在 themes 目录下生成 hexo-theme-aero-dual 文件夹，然后打开 Hexo 文件夹下的配置文件 _config.yml ，找到关键字 theme，修改参数为：theme：hexo-theme-aero-dual （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！</p><p>返回 Hexo 目录，右键 Git Bash Here ，输入以下命令开始部署主题：</p><pre><code class="hljs shell">hexo g   hexo s</code></pre><p>此时打开浏览器，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可看见我们的主题已经更换了，如果感觉效果满意，我们就可以把它部署到Github上了</p><p>打开 Hexo 文件夹，右键 Git Bash Here ，输入以下命令：</p><pre><code class="hljs shell">hexo clean   //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题hexo g -d</code></pre><p>此时访问自己的博客即可看见更换后的主题，但我们仍然需要对主题的相关配置进行修改，比如网站标题，图标等等，Hexo 中有两份主要的配置文件，名称都是 _config.yml ，它们均是用于站点配置使用的。其中，一份位于站点根目录下，主要包含 Hexo 本身整站的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项，一般 _config.yml 文件里都有相关注释，按需修改即可</p><h2 id="七-为你的-Hexo-博客配置个性域名"><a href="#七-为你的-Hexo-博客配置个性域名" class="headerlink" title="七.为你的 Hexo 博客配置个性域名"></a>七.为你的 Hexo 博客配置个性域名</h2><h4 id="1-首先我们要购买域名（freenom可以白嫖哦）。"><a href="#1-首先我们要购买域名（freenom可以白嫖哦）。" class="headerlink" title="1. 首先我们要购买域名（freenom可以白嫖哦）。"></a>1. 首先我们要购买域名（freenom可以白嫖哦）。</h4><h4 id="2-添加记录值。"><a href="#2-添加记录值。" class="headerlink" title="2. 添加记录值。"></a>2. 添加记录值。</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203725131-QQ%E6%88%AA%E5%9B%BE20210109224829.png" alt=""></p><h4 id="3-在博客的根目录下添加一个名为-CNAME-的文件，这个文件放到-Hexo-文件夹的-source-里面。"><a href="#3-在博客的根目录下添加一个名为-CNAME-的文件，这个文件放到-Hexo-文件夹的-source-里面。" class="headerlink" title="3. 在博客的根目录下添加一个名为 CNAME 的文件，这个文件放到 Hexo 文件夹的 source 里面。"></a>3. 在博客的根目录下添加一个名为 CNAME 的文件，这个文件放到 Hexo 文件夹的 source 里面。</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2021-1-9/1610203821624-QQ%E6%88%AA%E5%9B%BE20210109225002.png" alt=""></p><h2 id="八-小结"><a href="#八-小结" class="headerlink" title="八.小结"></a>八.小结</h2><ul><li><p>关于 hexo 还有很多插件可以探索，大家可以自行探索。</p></li><li><p>关于gitee pages,基本步骤和github pages差不多，但是有一个区别就是gitee中你需要建的仓库名为<code>你的用户名</code>，没有后面的<code>.gitee.io</code>。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_36759224/article/details/82121420">转载：使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>git</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
      <tag>github pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新闻信息抓取及数据分析</title>
    <link href="/2020/12/29/python/%E6%96%B0%E9%97%BB%E4%BF%A1%E6%81%AF%E6%8A%93%E5%8F%96%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2020/12/29/python/%E6%96%B0%E9%97%BB%E4%BF%A1%E6%81%AF%E6%8A%93%E5%8F%96%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一-数据抓取"><a href="#一-数据抓取" class="headerlink" title="一.数据抓取"></a>一.数据抓取</h1><p>本次爬虫目标网站是中国社会组织公共服务平台。</p><p><strong>第一步 分析网站</strong></p><p>通过浏览器“审查元素”查看源代码并获取新闻的标题、URL、时间等。不同网站有不同分析方法，本文重点是文本挖掘分析。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609246729599-image.png" alt=""></p><p><strong>第二步，进入具体的新闻页面抓取相关的文本信息。</strong></p><ul><li>article_title = text_html.xpath(’//*[@id=“fontinfo”]/p[2]/b[1]//text()’)</li><li>publish_time = text_html.xpath(’/html/body/div[2]/div/ul[1]/li[3]/strong/text()’)[0][5:]</li><li>source_text = text_html.xpath(’//*[@id=“fontinfo”]/p[last()]//text()’)[0]</li><li>text_list = text_html.xpath(’//*[@id=“fontinfo”]//text()’)</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609246808313-image.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609246797376-image.png" alt=""></p><p><strong>第三步，本爬虫存在一个技巧，每条新闻的URL非常相似，这里仅变换参数来抓取新闻。</strong></p><ul><li>最初一篇新闻（2020-10-13）URL：<a href="http://www.chinanpo.gov.cn/1944/128010/index.html">http://www.chinanpo.gov.cn/1944/128010/index.html</a></li><li>最后一篇新闻（2020-01-26）URL：<a href="http://www.chinanpo.gov.cn/1944/123496/nextindex.html">http://www.chinanpo.gov.cn/1944/123496/nextindex.html</a></li></ul><p>我们只需要每次抓取数据时，通过“下一页”定位下次需要抓取的URL即可，核心代码为：</p><ul><li>next_url = “<a href="http://www.chinanpo.gov.cn”">http://www.chinanpo.gov.cn”</a> + text_html.xpath(’/html/body/div[2]/div/ul[1]/li[2]/a[2]/@href’)[0]</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609246850596-image.png" alt=""></p><p><strong>第四步，数据抓取完整代码如下所示。</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests,re, csv, sys, time<span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<span class="hljs-comment"># 记录起始时间</span>startTime = time.time()<span class="hljs-comment"># 创建CSV文件，并写入表头信息</span>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;中国社会组织_疫情防控.csv&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,newline=<span class="hljs-string">&#x27;&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>)writer = csv.writer(fp)writer.writerow((<span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-string">&quot;时间&quot;</span>, <span class="hljs-string">&quot;URL&quot;</span>, <span class="hljs-string">&quot;正文内容&quot;</span>, <span class="hljs-string">&quot;来源&quot;</span>))<span class="hljs-comment">#----------------------------------------------抓取数据----------------------------------------------</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spider_html_info</span>(<span class="hljs-params">url</span>):</span>    <span class="hljs-keyword">try</span>:        headers = &#123;            <span class="hljs-string">&quot;User-Agent&quot;</span> : UserAgent().chrome <span class="hljs-comment">#chrome浏览器随机代理</span>        &#125;        response = requests.get(url=url, headers=headers).text        text_html = html.fromstring(response)                <span class="hljs-comment"># 获取下一页链接,先其他元素获取一页链接，保证程序的强壮性</span>        next_url = <span class="hljs-string">&quot;http://www.chinanpo.gov.cn&quot;</span> + text_html.xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div/ul[1]/li[2]/a[2]/@href&#x27;</span>)[<span class="hljs-number">0</span>]        print(<span class="hljs-string">&quot;next_url&quot;</span>, next_url)            <span class="hljs-comment"># 获取文章标题</span>        article_title = text_html.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;fontinfo&quot;]/p[2]/b[1]//text()&#x27;</span>)        title = <span class="hljs-string">&quot;&quot;</span>.join(article_title)        <span class="hljs-keyword">if</span> title == <span class="hljs-string">&quot;&quot;</span>:            title = <span class="hljs-string">&quot;&quot;</span>.join(text_html.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;fontinfo&quot;]/p[3]/b[1]//text()&#x27;</span>))        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;title = &quot;</span>,title)                <span class="hljs-comment"># 获取发布时间</span>        publish_time = text_html.xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div/ul[1]/li[3]/strong/text()&#x27;</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>:]        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;publish_time = &quot;</span>, publish_time)        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;url = &quot;</span>, url)                <span class="hljs-comment"># 获取来源</span>        source_text = text_html.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;fontinfo&quot;]/p[last()]//text()&#x27;</span>)[<span class="hljs-number">0</span>]        source = source_text[<span class="hljs-number">3</span>:]                <span class="hljs-comment"># 爬取文本</span>        text_list = text_html.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;fontinfo&quot;]//text()&#x27;</span>)        article_text = <span class="hljs-string">&quot;&quot;</span>.join(text_list).replace(<span class="hljs-string">&#x27;\r\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;\xa0&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(source_text,<span class="hljs-string">&quot;&quot;</span>).replace(title, <span class="hljs-string">&quot;&quot;</span>)            <span class="hljs-comment"># print (&quot;article_text&quot;, article_text)</span>        <span class="hljs-comment"># print (&quot;source = &quot;, source)</span>        writer.writerow((title, publish_time, url, article_text, source))    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">pass</span>        <span class="hljs-keyword">if</span> url == <span class="hljs-string">&#x27;http://www.chinanpo.gov.cn/1944/123496/index.html&#x27;</span>:        fp.close()        <span class="hljs-comment"># 获取结束时的时间</span>        endTime =time.time()                   useTime =(endTime-startTime)/<span class="hljs-number">60</span>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;该次所获的信息一共使用%s分钟&quot;</span>%useTime)        <span class="hljs-comment"># 正常退出程序</span>        sys.exit(<span class="hljs-number">0</span>)           <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> next_url<span class="hljs-comment">#----------------------------------------------主函数----------------------------------------------</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    url = <span class="hljs-string">&quot;http://www.chinanpo.gov.cn/1944/125177/nextindex.html&quot;</span> <span class="hljs-comment"># 125177第一篇文章</span>    count = <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;正在爬取第%s篇：&quot;</span>%count, url)        next_url = spider_html_info(url)        url = next_url        count = count + <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><p>1.爬取运行截图</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229213018.png" alt=""></p><p>可能需要安装扩展包lxml和fake_useragent。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247009230-20200306180836316.png" alt=""></p><h1 id="二-导入MongoDB"><a href="#二-导入MongoDB" class="headerlink" title="二.导入MongoDB"></a>二.导入MongoDB</h1><p>python中csv文件中数据添加到MongoDB数据库,使用csv中的DictReader函数读取。</p><h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<span class="hljs-keyword">import</span> csv<span class="hljs-comment"># 创建连接MongoDB数据库函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connection</span>():</span>    <span class="hljs-comment"># 1:连接本地MongoDB数据库服务</span>    conn=MongoClient(<span class="hljs-string">&quot;mongodb://localhost:27017/&quot;</span>)    <span class="hljs-comment"># 2:连接本地数据库(guazidata)。没有时会自动创建</span>    db=conn.cncovdf    <span class="hljs-comment"># 3:创建集合</span>    set1=db.data    <span class="hljs-comment"># 4:看情况是否选择清空(两种清空方式，第一种不行的情况下，选择第二种)</span>    <span class="hljs-comment">#第一种直接remove</span>    set1.remove(<span class="hljs-literal">None</span>)    <span class="hljs-comment">#第二种remove不好用的时候</span>    <span class="hljs-comment"># set1.delete_many(&#123;&#125;)</span>    <span class="hljs-keyword">return</span> set1<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertToMongoDB</span>(<span class="hljs-params">set1</span>):</span>    <span class="hljs-comment"># 打开文件中国社会组织_疫情防控.csv</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;中国社会组织_疫情防控.csv&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<span class="hljs-keyword">as</span> csvfile:        <span class="hljs-comment"># 调用csv中的DictReader函数直接获取数据为字典形式</span>        reader=csv.DictReader(csvfile)        <span class="hljs-comment"># 创建一个counts计数一下 看自己一共添加了了多少条数据</span>        counts=<span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> reader:            set1.insert(each)            counts+=<span class="hljs-number">1</span>            print(<span class="hljs-string">&#x27;成功添加了&#x27;</span>+<span class="hljs-built_in">str</span>(counts)+<span class="hljs-string">&#x27;条数据 &#x27;</span>)<span class="hljs-comment"># 创建主函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    set1=connection()    insertToMongoDB(set1)<span class="hljs-comment"># 判断是不是调用的main函数。这样以后调用的时候就可以防止不会多次调用 或者函数调用错误</span><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><h2 id="2-运行截图"><a href="#2-运行截图" class="headerlink" title="2.运行截图"></a>2.运行截图</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-30/1609294320527-QQ%E6%88%AA%E5%9B%BE20201230100504.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-30/1609294320525-QQ%E6%88%AA%E5%9B%BE20201230100447.png" alt=""></p><h1 id="三-中文分词及高频词统计"><a href="#三-中文分词及高频词统计" class="headerlink" title="三.中文分词及高频词统计"></a>三.中文分词及高频词统计</h1><h2 id="1-结巴分词"><a href="#1-结巴分词" class="headerlink" title="1.结巴分词"></a>1.结巴分词</h2><p>数据预处理是指在进行数据分析之前，对数据进行的一些初步处理，包括缺失值填写、噪声处理、不一致数据修正、中文分词等，其目标是得到更标准、高质量的数据，纠正错误异常数据，从而提升分析的结果。中文文本预处理的基本步骤，包括中文分词、词性标注、数据清洗、特征提取（向量空间模型存储）、权重计算（TF-IDF）等。</p><p>“结巴”（Jieba）工具是最常用的中文文本分词和处理的工具之一，它能实现中文分词、词性标注、关键词抽取、获取词语位置等功能。其在Github网站上的介绍及下载地址为：<a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></p><p>调用命令“pip install jieba”安装jieba中文分词包如下图所示。<br><pre><code class="hljs python">pip install jieba</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247076049-image.png" alt=""></p><p>Jieba具有以下特点：</p><ul><li>支持三种分词模式，包括精确模式、全模式和搜索引擎模式</li><li>支持繁体分词</li><li>支持自定义词典</li><li>代码对Python2和Python3均兼容</li><li>支持多种编程语言，包括Java、C++、Rust、PHP、R、Node.js等</li></ul><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h2><p>首先读者看一段简单的结巴分词代码，主要调用两个函数实现。</p><ul><li>jieba.cut(text, cut_all=True)<br>分词函数，第一个参数是需要分词的字符串，第二个参数表示是否为全模式。分词返回的结果是一个可迭代的生成器（generator），可使用for循环来获取分词后的每个词语，更推荐读者转换为list列表再使用。</li><li>jieba.cut_for_search(text)<br>搜索引擎模式分词，参数为分词的字符串，该方法适合用于搜索引擎构造倒排索引的分词，粒度比较细。<pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8  </span><span class="hljs-keyword">import</span> jieba    text = <span class="hljs-string">&quot;小杨毕业于北京理工大学，从事Python人工智能相关工作。&quot;</span>  <span class="hljs-comment">#全模式</span>data = jieba.cut(text,cut_all=<span class="hljs-literal">True</span>)print(<span class="hljs-built_in">type</span>(data))print(<span class="hljs-string">u&quot;[全模式]: &quot;</span>, <span class="hljs-string">&quot;/&quot;</span>.join(data))<span class="hljs-comment">#精确模式  </span>data = jieba.cut(text,cut_all=<span class="hljs-literal">False</span>)print(<span class="hljs-string">u&quot;[精确模式]: &quot;</span>, <span class="hljs-string">&quot;/&quot;</span>.join(data))<span class="hljs-comment">#默认是精确模式 </span>data = jieba.cut(text)  print(<span class="hljs-string">u&quot;[默认模式]: &quot;</span>, <span class="hljs-string">&quot;/&quot;</span>.join(data))<span class="hljs-comment">#搜索引擎模式 </span>data = jieba.cut_for_search(text)    print(<span class="hljs-string">u&quot;[搜索引擎模式]: &quot;</span>, <span class="hljs-string">&quot;/&quot;</span>.join(data))<span class="hljs-comment">#返回列表</span>seg_list = jieba.lcut(text, cut_all=<span class="hljs-literal">False</span>)print(<span class="hljs-string">&quot;[返回列表]: &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(seg_list))</code></pre>输出结果如下图所示：</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229213350.png" alt=""></p><h2 id="3-获取疫情文本高频词"><a href="#3-获取疫情文本高频词" class="headerlink" title="3.获取疫情文本高频词"></a>3.获取疫情文本高频词</h2><p>接着我们将新闻正文文本“C-class.txt”数据进行中文分词，每行代表一条新闻，并生成对应的内容。<br><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-comment">#------------------------------------中文分词------------------------------------</span>cut_words = <span class="hljs-string">&quot;&quot;</span>all_words = <span class="hljs-string">&quot;&quot;</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class-fenci.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span> , encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):    line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)    seg_list = jieba.cut(line,cut_all=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># print(&quot; &quot;.join(seg_list))</span>    cut_words = (<span class="hljs-string">&quot; &quot;</span>.join(seg_list))    f.write(cut_words)    all_words += cut_words<span class="hljs-keyword">else</span>:    f.close()<span class="hljs-comment"># 输出结果</span>all_words = all_words.split()print(all_words)<span class="hljs-comment"># 词频统计</span>c = Counter()<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> all_words:    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x)&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> x != <span class="hljs-string">&#x27;\r\n&#x27;</span>:        c[x] += <span class="hljs-number">1</span><span class="hljs-comment"># 输出词频最高的前10个词</span>print(<span class="hljs-string">&#x27;\n词频统计结果：&#x27;</span>)<span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-number">10</span>):    print(<span class="hljs-string">&quot;%s:%d&quot;</span>%(k,v))<span class="hljs-comment"># 存储数据</span>name = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>) + <span class="hljs-string">&quot;-fc.csv&quot;</span>fw = <span class="hljs-built_in">open</span>(name, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)i = <span class="hljs-number">1</span><span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-built_in">len</span>(c)):    fw.write(<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(k)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(v)+<span class="hljs-string">&#x27;\n&#x27;</span>)    i = i + <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&quot;Over write file!&quot;</span>)    fw.close()</code></pre><br>输出结果如下图所示，采用空格连接的分词结果。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229214051.png" alt=""></p><p>同时生成高频特征词，并保存至CSV文件中。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229214255.png" alt=""></p><p>对应的特征词及词频排序如表“2020-12-29-fc.csv”所示，如果我们撰写图情论文，可以尝试建立Top50的特征词表。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229214815.png" alt=""></p><h1 id="四-WordCloud可视化分析"><a href="#四-WordCloud可视化分析" class="headerlink" title="四.WordCloud可视化分析"></a>四.WordCloud可视化分析</h1><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h2><p>词云分析主要包括两种方法：</p><ul><li>调用WordCloud扩展包画图（兼容性极强，之前介绍过）</li><li>调用PyEcharts中的WordCloud子包画图（本文推荐新方法）</li></ul><p>这里使用PyEcharts可视化，需要通过它来绘制词云，基础代码如下：<br><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> WordCloud<span class="hljs-keyword">from</span> pyecharts.<span class="hljs-built_in">globals</span> <span class="hljs-keyword">import</span> SymbolType<span class="hljs-comment"># 数据</span>words = [    (<span class="hljs-string">&#x27;背包问题&#x27;</span>, <span class="hljs-number">10000</span>),    (<span class="hljs-string">&#x27;大整数&#x27;</span>, <span class="hljs-number">6181</span>),    (<span class="hljs-string">&#x27;Karatsuba乘法算法&#x27;</span>, <span class="hljs-number">4386</span>),    (<span class="hljs-string">&#x27;穷举搜索&#x27;</span>, <span class="hljs-number">4055</span>),    (<span class="hljs-string">&#x27;傅里叶变换&#x27;</span>, <span class="hljs-number">2467</span>),    (<span class="hljs-string">&#x27;状态树遍历&#x27;</span>, <span class="hljs-number">2244</span>),    (<span class="hljs-string">&#x27;剪枝&#x27;</span>, <span class="hljs-number">1868</span>),    (<span class="hljs-string">&#x27;Gale-shapley&#x27;</span>, <span class="hljs-number">1484</span>),    (<span class="hljs-string">&#x27;最大匹配与匈牙利算法&#x27;</span>, <span class="hljs-number">1112</span>),    (<span class="hljs-string">&#x27;线索模型&#x27;</span>, <span class="hljs-number">865</span>),    (<span class="hljs-string">&#x27;关键路径算法&#x27;</span>, <span class="hljs-number">847</span>),    (<span class="hljs-string">&#x27;最小二乘法曲线拟合&#x27;</span>, <span class="hljs-number">582</span>),    (<span class="hljs-string">&#x27;二分逼近法&#x27;</span>, <span class="hljs-number">555</span>),    (<span class="hljs-string">&#x27;牛顿迭代法&#x27;</span>, <span class="hljs-number">550</span>),    (<span class="hljs-string">&#x27;Bresenham算法&#x27;</span>, <span class="hljs-number">462</span>),    (<span class="hljs-string">&#x27;粒子群优化&#x27;</span>, <span class="hljs-number">366</span>),    (<span class="hljs-string">&#x27;Dijkstra&#x27;</span>, <span class="hljs-number">360</span>),    (<span class="hljs-string">&#x27;A*算法&#x27;</span>, <span class="hljs-number">282</span>),    (<span class="hljs-string">&#x27;负极大极搜索算法&#x27;</span>, <span class="hljs-number">273</span>),    (<span class="hljs-string">&#x27;估值函数&#x27;</span>, <span class="hljs-number">265</span>)]<span class="hljs-comment"># 渲染图</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wordcloud_base</span>() -&gt; WordCloud:</span>    c = (        WordCloud()        .add(<span class="hljs-string">&quot;&quot;</span>, words, word_size_range=[<span class="hljs-number">20</span>, <span class="hljs-number">100</span>], shape=<span class="hljs-string">&#x27;diamond&#x27;</span>)  <span class="hljs-comment"># SymbolType.ROUND_RECT</span>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&#x27;WordCloud词云&#x27;</span>))    )    <span class="hljs-keyword">return</span> c<span class="hljs-comment"># 生成图</span>wordcloud_base().render(<span class="hljs-string">&#x27;词云图.html&#x27;</span>)</code></pre><br>输出结果如下图所示，出现词频越高显示越大。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247309429-image.png" alt=""></p><p>核心代码为：</p><p><strong>add(name, attr, value, shape=“circle”, word_gap=20, word_size_range=None, rotate_step=45)</strong></p><ul><li>name -&gt; str: 图例名称</li><li>attr -&gt; list: 属性名称</li><li>value -&gt; list: 属性所对应的值</li><li>shape -&gt; list: 词云图轮廓，有’circle’, ‘cardioid’, ‘diamond’, ‘triangleforward’, ‘triangle’, ‘pentagon’, ‘star’可选</li><li>word_gap -&gt; int: 单词间隔,默认为20</li><li>word_size_range -&gt; list: 单词字体大小范围,默认为[12,60]</li><li>rotate_step -&gt; int: 旋转单词角度,默认为45</li></ul><h2 id="2-疫情词云"><a href="#2-疫情词云" class="headerlink" title="2.疫情词云"></a>2.疫情词云</h2><p>接着我们显示经过中文分词的疫情新闻文本信息，前1000个高频词的词云绘制代码如下：<br><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-comment"># coding=utf-8</span><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-comment">#------------------------------------中文分词------------------------------------</span>cut_words = <span class="hljs-string">&quot;&quot;</span>all_words = <span class="hljs-string">&quot;&quot;</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class-fenci.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span> , encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):    line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)    seg_list = jieba.cut(line,cut_all=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># print(&quot; &quot;.join(seg_list))</span>    cut_words = (<span class="hljs-string">&quot; &quot;</span>.join(seg_list))    f.write(cut_words)    all_words += cut_words<span class="hljs-keyword">else</span>:    f.close()<span class="hljs-comment"># 输出结果</span>all_words = all_words.split()print(all_words)<span class="hljs-comment"># 词频统计</span>c = Counter()<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> all_words:    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x)&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> x != <span class="hljs-string">&#x27;\r\n&#x27;</span>:        c[x] += <span class="hljs-number">1</span><span class="hljs-comment"># 输出词频最高的前10个词</span>print(<span class="hljs-string">&#x27;\n词频统计结果：&#x27;</span>)<span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-number">10</span>):    print(<span class="hljs-string">&quot;%s:%d&quot;</span>%(k,v))<span class="hljs-comment"># 存储数据</span>name = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>) + <span class="hljs-string">&quot;-fc.csv&quot;</span>fw = <span class="hljs-built_in">open</span>(name, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)i = <span class="hljs-number">1</span><span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-built_in">len</span>(c)):    fw.write(<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(k)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(v)+<span class="hljs-string">&#x27;\n&#x27;</span>)    i = i + <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&quot;Over write file!&quot;</span>)    fw.close()<span class="hljs-comment">#------------------------------------词云分析------------------------------------</span><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> WordCloud<span class="hljs-keyword">from</span> pyecharts.<span class="hljs-built_in">globals</span> <span class="hljs-keyword">import</span> SymbolType<span class="hljs-comment"># 生成数据 word = [(&#x27;A&#x27;,10), (&#x27;B&#x27;,9), (&#x27;C&#x27;,8)] 列表+Tuple</span>words = []<span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-number">1000</span>):    <span class="hljs-comment"># print(k, v)</span>    words.append((k,v))<span class="hljs-comment"># 渲染图</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wordcloud_base</span>() -&gt; WordCloud:</span>    c = (        WordCloud()        .add(<span class="hljs-string">&quot;&quot;</span>, words, word_size_range=[<span class="hljs-number">20</span>, <span class="hljs-number">100</span>], shape=SymbolType.ROUND_RECT)        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&#x27;全国新型冠状病毒疫情词云图&#x27;</span>))    )    <span class="hljs-keyword">return</span> c<span class="hljs-comment"># 生成图</span>wordcloud_base().render(<span class="hljs-string">&#x27;疫情词云图.html&#x27;</span>)</code></pre><br>运行结果如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229220342.png" alt=""></p><p>输出结果如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609250448650-QQ截图20201229215841.png" alt=""></p><h1 id="五-TF-IDF计算及KMeans文本聚类"><a href="#五-TF-IDF计算及KMeans文本聚类" class="headerlink" title="五.TF-IDF计算及KMeans文本聚类"></a>五.TF-IDF计算及KMeans文本聚类</h1><h2 id="1-TF-IDF计算"><a href="#1-TF-IDF计算" class="headerlink" title="1.TF-IDF计算"></a>1.TF-IDF计算</h2><p>TF-IDF（Term Frequency-InversDocument Frequency）是一种常用于信息处理和数据挖掘的加权技术。该技术采用一种统计方法，根据字词的在文本中出现的次数和在整个语料中出现的文档频率来计算一个字词在整个语料中的重要程度。它的优点是能过滤掉一些常见的却无关紧要本的词语，同时保留影响整个文本的重要字词。计算方法如下面公式所示：</p><script type="math/tex; mode=display">T F − I D F = T F ∗ I D F TF-IDF = TF* IDFTF−IDF=TF∗IDF</script><p>TF（Term Frequency）表示某个关键词在整篇文章中出现的频率。IDF（InversDocument Frequency）表示计算倒文本频率。文本频率是指某个关键词在整个语料所有文章中出现的次数。倒文档频率又称为逆文档频率，它是文档频率的倒数，主要用于降低所有文档中一些常见却对文档影响不大的词语的作用。</p><p>TF-IDF统计可视化完整代码如下：<br><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8 </span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> jieba.analyse<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> matplotlib.font_manager <span class="hljs-keyword">import</span> FontProperties<span class="hljs-comment">#------------------------------------中文分词------------------------------------</span>cut_words = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):    line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)    seg_list = jieba.cut(line,cut_all=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># print(&quot; &quot;.join(seg_list))</span>    cut_words += (<span class="hljs-string">&quot; &quot;</span>.join(seg_list))<span class="hljs-comment"># jieba.load_userdict(&quot;userdict.txt&quot;)              # 自定义词典</span><span class="hljs-comment"># jieba.analyse.set_stop_words(&#x27;stop_words.txt&#x27;)   # 停用词词典</span><span class="hljs-comment"># 提取主题词 返回的词频其实就是TF-IDF</span>keywords = jieba.analyse.extract_tags(cut_words,                                      topK=<span class="hljs-number">50</span>,                                      withWeight=<span class="hljs-literal">True</span>,                                      allowPOS=(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;nr&#x27;</span>,<span class="hljs-string">&#x27;ns&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>)) <span class="hljs-comment">#词性 形容词 叹词 名词 动词</span><span class="hljs-comment"># 以列表形式返回</span>print(keywords)<span class="hljs-comment"># 数据存储</span>pd.DataFrame(keywords, columns=[<span class="hljs-string">&#x27;词语&#x27;</span>,<span class="hljs-string">&#x27;重要性&#x27;</span>]).to_excel(<span class="hljs-string">&#x27;TF_IDF关键词前50.xlsx&#x27;</span>)<span class="hljs-comment"># keyword本身包含两列数据</span>ss = pd.DataFrame(keywords,columns = [<span class="hljs-string">&#x27;词语&#x27;</span>,<span class="hljs-string">&#x27;重要性&#x27;</span>])     <span class="hljs-comment"># print(ss)</span><span class="hljs-comment">#------------------------------------数据可视化------------------------------------</span>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))plt.title(<span class="hljs-string">&#x27;TF-IDF Ranking&#x27;</span>)fig = plt.axes()plt.barh(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ss.重要性[:<span class="hljs-number">25</span>][::<span class="hljs-number">-1</span>])),ss.重要性[:<span class="hljs-number">25</span>][::<span class="hljs-number">-1</span>])fig.set_yticks(np.arange(<span class="hljs-built_in">len</span>(ss.重要性[:<span class="hljs-number">25</span>][::<span class="hljs-number">-1</span>])))font = FontProperties(fname=<span class="hljs-string">r&#x27;c:\windows\fonts\simsun.ttc&#x27;</span>)fig.set_yticklabels(ss.词语[:<span class="hljs-number">25</span>][::<span class="hljs-number">-1</span>],fontproperties=font)fig.set_xlabel(<span class="hljs-string">&#x27;Importance&#x27;</span>)plt.show()</code></pre><br>输出结果如下图所示，可以看到“疫情”、“组织”、“企业”、“复工”、“社会”、“新冠”、“慈善”等都是高频词，也是大众普遍关心的主题。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/TF_IDF%20Ranking.png" alt=""></p><p>注意：可能需要安装openpyxl扩展包，to_excel()函数要用到。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247490320-20200306204609322.png" alt=""></p><h2 id="2-文本聚类"><a href="#2-文本聚类" class="headerlink" title="2.文本聚类"></a>2.文本聚类</h2><p>同样，在Scikit-Learn包中也能计算TF-IDF权重值，此时需要用到两个类：CountVectorizer和TfidfTransformer。</p><p><strong>(1) CountVectorizer</strong></p><p>CountVectorizer类会将文本中的词语转换为词频矩阵，例如矩阵中包含一个元素<code>a[i][j]</code>，它表示j词在i类文本下的词频。它通过fit_transform函数计算各个词语出现的次数，通过get_feature_names()可获取词袋中所有文本的关键字，通过toarray()可看到词频矩阵的结果。</p><p><strong>(2) TfidfTransformer</strong></p><p>TfidfTransformer用于统计vectorizer中每个词语的TF-IDF值。具体用法如下：</p><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> CountVectorizer <span class="hljs-comment">#语料</span>corpus = [    <span class="hljs-string">&#x27;This is the first document.&#x27;</span>,    <span class="hljs-string">&#x27;This is the second second document.&#x27;</span>,    <span class="hljs-string">&#x27;And the third one.&#x27;</span>,    <span class="hljs-string">&#x27;Is this the first document?&#x27;</span>,]<span class="hljs-comment">#将文本中的词语转换为词频矩阵</span>vectorizer = CountVectorizer()<span class="hljs-comment">#计算个词语出现的次数</span>X = vectorizer.fit_transform(corpus)<span class="hljs-comment">#获取词袋中所有文本关键词</span>word = vectorizer.get_feature_names()<span class="hljs-built_in">print</span> word<span class="hljs-comment">#查看词频结果</span><span class="hljs-built_in">print</span> X.toarray() <span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfTransformer <span class="hljs-comment">#类调用</span>transformer = TfidfTransformer()<span class="hljs-built_in">print</span> transformer<span class="hljs-comment">#将词频矩阵X统计成TF-IDF值</span>tfidf = transformer.fit_transform(X)<span class="hljs-comment">#查看数据结构 tfidf[i][j]表示i类文本中的tf-idf权重</span><span class="hljs-built_in">print</span> tfidf.toarray()</code></pre><p>输出结果入下所示，从结果中可以看到，总共包括9个特征词，即：<br>[u’and’, u’document’, u’first’, u’is’, u’one’, u’second’, u’the’, u’third’, u’this’]</p><p>同时在输出每个句子中包含特征词的个数。例如，第一句“This is the first document.”，它对应的词频为[0, 1, 1, 1, 0, 0, 1, 0, 1]，假设初始序号从1开始计数，则该词频表示存在第2个位置的单词“document”共1次、第3个位置的单词“first”共1次、第4个位置的单词“is”共1次、第9个位置的单词“this”共1词。所以，每个句子都会得到一个词频向量，TF-IDF对应向量类似。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247570945-image.png" alt=""></p><p><strong>(3) 文本聚类</strong><br><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8  </span><span class="hljs-keyword">import</span> time          <span class="hljs-keyword">import</span> re          <span class="hljs-keyword">import</span> os  <span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> codecs<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib<span class="hljs-keyword">import</span> scipy<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> feature_extraction  <span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfTransformer  <span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> CountVectorizer<span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> HashingVectorizer <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-comment">#########################################################################</span>    <span class="hljs-comment">#                           第一步 计算TFIDF</span>        <span class="hljs-comment"># 文档预料 空格连接</span>    corpus = []        <span class="hljs-comment"># 读取预料 一行预料为一个文档</span>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class-fenci.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).readlines():        corpus.append(line.strip())        <span class="hljs-comment"># 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频</span>    vectorizer = CountVectorizer()     <span class="hljs-comment"># 该类会统计每个词语的tf-idf权值</span>    transformer = TfidfTransformer()     <span class="hljs-comment"># 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</span>    tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))     <span class="hljs-comment"># 获取词袋模型中的所有词语  </span>    word = vectorizer.get_feature_names()        <span class="hljs-comment"># 将tf-idf矩阵抽取出来 元素w[i][j]表示j词在i类文本中的tf-idf权重</span>    weight = tfidf.toarray()     <span class="hljs-comment"># 打印特征向量文本内容</span>    print(<span class="hljs-string">&#x27;Features length: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(word)))        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    # 输出单词</span><span class="hljs-string">    for j in range(len(word)):</span><span class="hljs-string">        print(word[j] + &#x27; &#x27;)</span><span class="hljs-string">        </span><span class="hljs-string">    # 打印每类文本的tf-idf词语权重 第一个for遍历所有文本 第二个for便利某一类文本下的词语权重  </span><span class="hljs-string">    for i in range(len(weight)):</span><span class="hljs-string">        print u&quot;-------这里输出第&quot;, i, u&quot;类文本的词语tf-idf权重------&quot;  </span><span class="hljs-string">        for j in range(len(word)):</span><span class="hljs-string">            print weight[i][j],</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment">########################################################################</span>    <span class="hljs-comment">#                               第二步 聚类Kmeans</span>     print(<span class="hljs-string">&#x27;Start Kmeans:&#x27;</span>)    <span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans    clf = KMeans(n_clusters=<span class="hljs-number">2</span>)    print(clf)    pre = clf.fit_predict(weight)    print(pre)    <span class="hljs-comment">#中心点</span>    print(clf.cluster_centers_)    print(clf.inertia_)        <span class="hljs-comment">########################################################################</span>    <span class="hljs-comment">#                               第三步 图形输出 降维</span>     <span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA    pca = PCA(n_components=<span class="hljs-number">2</span>)             <span class="hljs-comment">#输出两维</span>    newData = pca.fit_transform(weight)   <span class="hljs-comment">#载入N维</span>    print(newData)        x = [n[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> newData]    y = [n[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> newData]        plt.scatter(x, y, c=pre, s=<span class="hljs-number">100</span>)    plt.legend()    plt.title(<span class="hljs-string">&quot;Cluster with Text Mining&quot;</span>)    plt.show()</code></pre><br>输出结果如下图所示。需要注意，简单的聚类我们无法进行深入的分析，你可以理解为积极主题的一类（黄色）、消极主题的一类（黑色），也可以有其他理解，需要结合具体数据集进行分析，但其解释性始终不是很好。而真实的数据分析中会引入类标或标注，所以接着我们引入主题关键词聚类和LDA主题模型的分析，更能帮助大家理解文本挖掘和主题分析。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/cluster%20with%20text%20mining.png" alt=""></p><h1 id="六-主题词层次聚类分析"><a href="#六-主题词层次聚类分析" class="headerlink" title="六.主题词层次聚类分析"></a>六.主题词层次聚类分析</h1><h2 id="1-层次聚类"><a href="#1-层次聚类" class="headerlink" title="1.层次聚类"></a>1.层次聚类</h2><p>层次聚类算法又称为树聚类算法，它根据数据之间的距离，透过一种层次架构方式，反复将数据进行聚合，创建一个层次以分解给定的数据集。主题词层次聚类主要调用scipy.cluster.hierarchy实现，推荐文章：层次聚类。</p><ul><li>scipy.cluster.hierarchy.linkage(y, method=‘single’, metric=‘euclidean’, optimal_ordering=False)</li></ul><p>层次聚类编码为一个linkage矩阵。假设代码如下，Z共有四列组成，第一字段与第二字段分别为聚类簇的编号，在初始距离前每个初始值被从0~n-1进行标识，每生成一个新的聚类簇就在此基础上增加一对新的聚类簇进行标识，第三个字段表示前两个聚类簇之间的距离，第四个字段表示新生成聚类簇所包含的元素的个数。<br><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.cluster.hierarchy <span class="hljs-keyword">import</span> dendrogram, linkage,fcluster<span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> pltX = [[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]]print(X)Z = linkage(X, <span class="hljs-string">&#x27;ward&#x27;</span>)f = fcluster(Z, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;distance&#x27;</span>)fig = plt.figure(figsize=(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))dn = dendrogram(Z)plt.show()</code></pre><br>下面是聚类结果的可视化聚类树：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247655632-image.png" alt=""></p><p>下面是返回值的解析：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247662789-image.png" alt=""></p><h2 id="2-疫情分析"><a href="#2-疫情分析" class="headerlink" title="2.疫情分析"></a>2.疫情分析</h2><p>由于层次聚类绘制的树状图主题词太多，所以这里采用中文分词提取每条新闻（对应一行数据）的Top100特征词，再存储至TXT中进行层次聚类分析。完整代码如下：<br><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-keyword">from</span> sklearn.metrics.pairwise <span class="hljs-keyword">import</span> cosine_similarity<span class="hljs-keyword">from</span> scipy.cluster.hierarchy <span class="hljs-keyword">import</span> ward, dendrogram<span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> CountVectorizer, TfidfTransformermpl.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<span class="hljs-comment">#------------------------------ 第一步 计算TOP100 ------------------------------</span><span class="hljs-comment"># 计算中文分词词频TOP100</span>cut_words = <span class="hljs-string">&quot;&quot;</span>all_words = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):    line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)    seg_list = jieba.cut(line,cut_all=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># print(&quot; &quot;.join(seg_list))</span>    cut_words = (<span class="hljs-string">&quot; &quot;</span>.join(seg_list))    all_words += cut_words    <span class="hljs-comment"># 输出结果</span>all_words = all_words.split()print(all_words)<span class="hljs-comment"># 词频统计</span>c = Counter()<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> all_words:    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x)&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> x != <span class="hljs-string">&#x27;\r\n&#x27;</span>:        c[x] += <span class="hljs-number">1</span><span class="hljs-comment"># 输出词频最高的前10个词</span>top_word = []print(<span class="hljs-string">&#x27;\n词频统计结果：&#x27;</span>)<span class="hljs-keyword">for</span> (k,v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-number">100</span>):    print(<span class="hljs-string">&quot;%s:%d&quot;</span>%(k,v))    top_word.append(k)print(top_word)<span class="hljs-comment"># [&#x27;疫情&#x27;, &#x27;防控&#x27;, &#x27;组织&#x27;, &#x27;工作&#x27;...]</span><span class="hljs-comment">#------------------------------ 第二步 中文分词过滤 ------------------------------</span><span class="hljs-comment"># 过滤</span>cut_words = <span class="hljs-string">&quot;&quot;</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-key.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):    line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)    seg_list = jieba.cut(line,cut_all=<span class="hljs-literal">False</span>)    final = <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> seg_list:        <span class="hljs-keyword">if</span> seg <span class="hljs-keyword">in</span> top_word:            final += seg + <span class="hljs-string">&quot;|&quot;</span>    cut_words += final    f.write(final+<span class="hljs-string">&quot;\n&quot;</span>)print(cut_words)f.close<span class="hljs-comment">#------------------------------ 第三步 相相关计算 ------------------------------ </span>text = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-key.txt&#x27;</span>).read()list1 = text.split(<span class="hljs-string">&quot;\n&quot;</span>)print(list1)<span class="hljs-comment"># 数据第一行、第二行数据</span><span class="hljs-comment"># print(list1[0])</span><span class="hljs-comment"># print(list1[1])</span>mytext_list = list1<span class="hljs-comment"># min_df用于删除不经常出现的术语</span><span class="hljs-comment"># max_df用于删除过于频繁出现的术语,也称为语料库特定的停用词</span><span class="hljs-comment"># count_vec = CountVectorizer(min_df=3, max_df=3)</span>count_vec = CountVectorizer(min_df=<span class="hljs-number">3</span>)xx1 = count_vec.fit_transform(list1).toarray()word = count_vec.get_feature_names() print(<span class="hljs-string">&quot;word feature length: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(word)))print(word)print(xx1.shape)print(xx1[<span class="hljs-number">0</span>])titles = word<span class="hljs-comment">#------------------------------ 第四步 相似度计算 ------------------------------ </span>df = pd.DataFrame(xx1)print(df.corr())print(df.corr(<span class="hljs-string">&#x27;spearman&#x27;</span>))print(df.corr(<span class="hljs-string">&#x27;kendall&#x27;</span>))dist = df.corr()print(dist)print(<span class="hljs-built_in">type</span>(dist))print(dist.shape)<span class="hljs-comment">#------------------------------ 第五步 可视化分析 ------------------------------ </span><span class="hljs-comment"># define the linkage_matrix using ward clustering pre-computed distances</span>linkage_matrix = ward(dist)fig, ax = plt.subplots(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>)) <span class="hljs-comment"># set size</span>ax = dendrogram(linkage_matrix, orientation=<span class="hljs-string">&quot;right&quot;</span>, labels=titles);<span class="hljs-comment"># how plot with tight layout</span>plt.tight_layout() <span class="hljs-comment"># save figure as ward_clusters</span>plt.savefig(<span class="hljs-string">&#x27;Tree_word.png&#x27;</span>, dpi=<span class="hljs-number">200</span>)</code></pre><br>最终生成图像如下所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/Tree_word.png" alt=""></p><p>运行结果如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229221902.png" alt=""></p><p>注意：该方法更推荐大家在进行论文关键词共现分析、主题词聚类分析等领域。</p><h1 id="七-LDA主题分布分析"><a href="#七-LDA主题分布分析" class="headerlink" title="七.LDA主题分布分析"></a>七.LDA主题分布分析</h1><h2 id="1-LDA主题模型"><a href="#1-LDA主题模型" class="headerlink" title="1.LDA主题模型"></a>1.LDA主题模型</h2><p>文档主题生成模型（Latent Dirichlet Allocation，简称LDA）通常由包含词、主题和文档三层结构组成。LDA模型属于无监督学习技术，它是将一篇文档的每个词都以一定概率分布在某个主题上，并从这个主题中选择某个词语。文档到主题的过程是服从多项分布的，主题到词的过程也是服从多项分布的。</p><p>文档主题生成模型（Latent Dirichlet Allocation，简称LDA）又称为盘子表示法（Plate Notation），下图是模型的标示图，其中双圆圈表示可测变量，单圆圈表示潜在变量，箭头表示两个变量之间的依赖关系，矩形框表示重复抽样，对应的重复次数在矩形框的右下角显示。LDA模型的具体实现步骤如下：</p><ul><li>从每篇网页D对应的多项分布θ中抽取每个单词对应的一个主题z。</li><li>从主题z对应的多项分布φ中抽取一个单词w。</li><li>重复步骤1和2，共计Nd次，直至遍历网页中每一个单词。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247835654-image.png" alt=""></p><p>可以从gensim中下载ldamodel扩展包安装，也可以使用Sklearn机器学习包的LDA子扩展包，亦可从github中下载开源的LDA工具。下载地址详见列表所示。</p><div class="table-container"><table><thead><tr><th>来源</th><th>下载地址</th></tr></thead><tbody><tr><td>gensim</td><td><a href="https://radimrehurek.com/gensim/models/ldamodel.html">https://radimrehurek.com/gensim/models/ldamodel.html</a></td></tr><tr><td>scikit-learn</td><td>利用pip install sklearn命令安装扩展包，LatentDirichletAllocation函数即LDA原型</td></tr><tr><td>github</td><td><a href="https://github.com/ariddell/lda">https://github.com/ariddell/lda</a></td></tr></tbody></table></div><p>本文和之前介绍的LDA算法略有不同，它主要采用sklearn中的LatentDirichletAllocation包实现主题分布研究，并调用pyLDAvis绘制相关图形。安装过程如下所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-29/1609247970659-20200306204609322.png" alt=""></p><h2 id="2-完整代码"><a href="#2-完整代码" class="headerlink" title="2.完整代码"></a>2.完整代码</h2><pre><code class="hljs python"><span class="hljs-comment">#coding: utf-8</span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfVectorizer, CountVectorizer<span class="hljs-comment">#---------------------  第一步 读取数据(已分词)  ----------------------</span>corpus = []<span class="hljs-comment"># 读取预料 一行预料为一个文档</span><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C-class-fenci.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).readlines():    corpus.append(line.strip())        <span class="hljs-comment">#-----------------------  第二步 计算TF-IDF值  ----------------------- </span><span class="hljs-comment"># 设置特征数</span>n_features = <span class="hljs-number">2000</span>tf_vectorizer = TfidfVectorizer(strip_accents = <span class="hljs-string">&#x27;unicode&#x27;</span>,                                max_features=n_features,                                stop_words=[<span class="hljs-string">&#x27;的&#x27;</span>,<span class="hljs-string">&#x27;或&#x27;</span>,<span class="hljs-string">&#x27;等&#x27;</span>,<span class="hljs-string">&#x27;是&#x27;</span>,<span class="hljs-string">&#x27;有&#x27;</span>,<span class="hljs-string">&#x27;之&#x27;</span>,<span class="hljs-string">&#x27;与&#x27;</span>,<span class="hljs-string">&#x27;可以&#x27;</span>,<span class="hljs-string">&#x27;还是&#x27;</span>,<span class="hljs-string">&#x27;比较&#x27;</span>,<span class="hljs-string">&#x27;这里&#x27;</span>,                                            <span class="hljs-string">&#x27;一个&#x27;</span>,<span class="hljs-string">&#x27;和&#x27;</span>,<span class="hljs-string">&#x27;也&#x27;</span>,<span class="hljs-string">&#x27;被&#x27;</span>,<span class="hljs-string">&#x27;吗&#x27;</span>,<span class="hljs-string">&#x27;于&#x27;</span>,<span class="hljs-string">&#x27;中&#x27;</span>,<span class="hljs-string">&#x27;最&#x27;</span>,<span class="hljs-string">&#x27;但是&#x27;</span>,<span class="hljs-string">&#x27;图片&#x27;</span>,<span class="hljs-string">&#x27;大家&#x27;</span>,                                            <span class="hljs-string">&#x27;一下&#x27;</span>,<span class="hljs-string">&#x27;几天&#x27;</span>,<span class="hljs-string">&#x27;200&#x27;</span>,<span class="hljs-string">&#x27;还有&#x27;</span>,<span class="hljs-string">&#x27;一看&#x27;</span>,<span class="hljs-string">&#x27;300&#x27;</span>,<span class="hljs-string">&#x27;50&#x27;</span>,<span class="hljs-string">&#x27;哈哈哈哈&#x27;</span>,                                             <span class="hljs-string">&#x27;“&#x27;</span>,<span class="hljs-string">&#x27;”&#x27;</span>,<span class="hljs-string">&#x27;。&#x27;</span>,<span class="hljs-string">&#x27;，&#x27;</span>,<span class="hljs-string">&#x27;？&#x27;</span>,<span class="hljs-string">&#x27;、&#x27;</span>,<span class="hljs-string">&#x27;；&#x27;</span>,<span class="hljs-string">&#x27;怎么&#x27;</span>,<span class="hljs-string">&#x27;本来&#x27;</span>,<span class="hljs-string">&#x27;发现&#x27;</span>,                                             <span class="hljs-string">&#x27;and&#x27;</span>,<span class="hljs-string">&#x27;in&#x27;</span>,<span class="hljs-string">&#x27;of&#x27;</span>,<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;我们&#x27;</span>,<span class="hljs-string">&#x27;一直&#x27;</span>,<span class="hljs-string">&#x27;真的&#x27;</span>,<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;一次&#x27;</span>,                                           <span class="hljs-string">&#x27;了&#x27;</span>,<span class="hljs-string">&#x27;有些&#x27;</span>,<span class="hljs-string">&#x27;已经&#x27;</span>,<span class="hljs-string">&#x27;不是&#x27;</span>,<span class="hljs-string">&#x27;这么&#x27;</span>,<span class="hljs-string">&#x27;一一&#x27;</span>,<span class="hljs-string">&#x27;一天&#x27;</span>,<span class="hljs-string">&#x27;这个&#x27;</span>,<span class="hljs-string">&#x27;这种&#x27;</span>,                                           <span class="hljs-string">&#x27;一种&#x27;</span>,<span class="hljs-string">&#x27;位于&#x27;</span>,<span class="hljs-string">&#x27;之一&#x27;</span>,<span class="hljs-string">&#x27;天空&#x27;</span>,<span class="hljs-string">&#x27;没有&#x27;</span>,<span class="hljs-string">&#x27;很多&#x27;</span>,<span class="hljs-string">&#x27;有点&#x27;</span>,<span class="hljs-string">&#x27;什么&#x27;</span>,<span class="hljs-string">&#x27;五个&#x27;</span>,                                           <span class="hljs-string">&#x27;特别&#x27;</span>],                                max_df = <span class="hljs-number">0.99</span>,                                min_df = <span class="hljs-number">0.002</span>) <span class="hljs-comment">#去除文档内出现几率过大或过小的词汇</span>tf = tf_vectorizer.fit_transform(corpus)print(tf.shape)print(tf)<span class="hljs-comment">#-------------------------  第三步 LDA分析  ------------------------ </span><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> LatentDirichletAllocation<span class="hljs-comment"># 设置主题数</span>n_topics = <span class="hljs-number">2</span>lda = LatentDirichletAllocation(n_components=n_topics,                                max_iter=<span class="hljs-number">100</span>,                                learning_method=<span class="hljs-string">&#x27;online&#x27;</span>,                                learning_offset=<span class="hljs-number">50</span>,                                random_state=<span class="hljs-number">0</span>)lda.fit(tf)<span class="hljs-comment"># 显示主题数 model.topic_word_</span>print(lda.components_)<span class="hljs-comment"># 几个主题就是几行 多少个关键词就是几列 </span>print(lda.components_.shape)                         <span class="hljs-comment"># 计算困惑度</span>print(<span class="hljs-string">u&#x27;困惑度：&#x27;</span>)print(lda.perplexity(tf,sub_sampling = <span class="hljs-literal">False</span>))<span class="hljs-comment"># 主题-关键词分布</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_top_words</span>(<span class="hljs-params">model, tf_feature_names, n_top_words</span>):</span>    <span class="hljs-keyword">for</span> topic_idx,topic <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(model.components_):  <span class="hljs-comment"># lda.component相当于model.topic_word_</span>        print(<span class="hljs-string">&#x27;Topic #%d:&#x27;</span> % topic_idx)        print(<span class="hljs-string">&#x27; &#x27;</span>.join([tf_feature_names[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> topic.argsort()[:-n_top_words<span class="hljs-number">-1</span>:<span class="hljs-number">-1</span>]]))        print(<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment"># 定义好函数之后 暂定每个主题输出前20个关键词</span>n_top_words = <span class="hljs-number">20</span>                                       tf_feature_names = tf_vectorizer.get_feature_names()<span class="hljs-comment"># 调用函数</span>print_top_words(lda, tf_feature_names, n_top_words)<span class="hljs-comment">#------------------------  第四步 可视化分析  ------------------------- </span><span class="hljs-keyword">import</span> pyLDAvis<span class="hljs-keyword">import</span> pyLDAvis.sklearn<span class="hljs-comment">#pyLDAvis.enable_notebook()</span>data = pyLDAvis.sklearn.prepare(lda,tf,tf_vectorizer)print(data)<span class="hljs-comment">#显示图形</span>pyLDAvis.show(data)<span class="hljs-comment">#pyLDAvis.save_json(data,&#x27; fileobj.html&#x27;)</span></code></pre><p>困惑度及各个主题下的关键词通过for循环显示如下，Topic1是疫情相关的主题词，Topic0是其他相关的主题。<br><pre><code class="hljs python">D:\桌面\新建文件夹&gt;python blog03_08_lda.py(<span class="hljs-number">138</span>, <span class="hljs-number">2000</span>)  (<span class="hljs-number">0</span>, <span class="hljs-number">403</span>)      <span class="hljs-number">1.0</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">914</span>)      <span class="hljs-number">0.03179002916835669</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">916</span>)      <span class="hljs-number">0.0234264095629235</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">965</span>)      <span class="hljs-number">0.03491201537733099</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">873</span>)      <span class="hljs-number">0.02309606736903826</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1475</span>)     <span class="hljs-number">0.032712252841322786</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">959</span>)      <span class="hljs-number">0.030194163252955503</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">158</span>)      <span class="hljs-number">0.027145424577929348</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1473</span>)     <span class="hljs-number">0.024499551271543872</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1144</span>)     <span class="hljs-number">0.058987094186498806</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">436</span>)      <span class="hljs-number">0.023769709611473348</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">273</span>)      <span class="hljs-number">0.030194163252955503</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1662</span>)     <span class="hljs-number">0.027145424577929348</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">912</span>)      <span class="hljs-number">0.02160893613426232</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1612</span>)     <span class="hljs-number">0.03491201537733099</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1942</span>)     <span class="hljs-number">0.03491201537733099</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">331</span>)      <span class="hljs-number">0.027145424577929348</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">712</span>)      <span class="hljs-number">0.02884487784700509</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">696</span>)      <span class="hljs-number">0.03374321119491412</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1375</span>)     <span class="hljs-number">0.03491201537733099</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">431</span>)      <span class="hljs-number">0.02247058496874336</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1295</span>)     <span class="hljs-number">0.03491201537733099</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">210</span>)      <span class="hljs-number">0.017702572081147446</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">979</span>)      <span class="hljs-number">0.027145424577929348</span>  (<span class="hljs-number">1</span>, <span class="hljs-number">1323</span>)     <span class="hljs-number">0.03491201537733099</span>  :     :  (<span class="hljs-number">137</span>, <span class="hljs-number">233</span>)    <span class="hljs-number">0.032457418878176596</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">282</span>)    <span class="hljs-number">0.02615992004194761</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">70</span>)     <span class="hljs-number">0.052619347740271036</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">21</span>)     <span class="hljs-number">0.04204615129757714</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">559</span>)    <span class="hljs-number">0.05879281708622848</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1065</span>)   <span class="hljs-number">0.030850260311284926</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1910</span>)   <span class="hljs-number">0.02615992004194761</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">5</span>)      <span class="hljs-number">0.0376578782866175</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1098</span>)   <span class="hljs-number">0.02154895843261173</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1847</span>)   <span class="hljs-number">0.022401353249301426</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">575</span>)    <span class="hljs-number">0.023491381002374374</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1866</span>)   <span class="hljs-number">0.03969475253942053</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1896</span>)   <span class="hljs-number">0.07915772355142488</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">919</span>)    <span class="hljs-number">0.023872748317938564</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1500</span>)   <span class="hljs-number">0.07728468461982171</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">753</span>)    <span class="hljs-number">0.043373413973474426</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">235</span>)    <span class="hljs-number">0.036290943551754246</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1043</span>)   <span class="hljs-number">0.02885156855169558</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1576</span>)   <span class="hljs-number">0.08423794621227862</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">240</span>)    <span class="hljs-number">0.09461262585467081</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1908</span>)   <span class="hljs-number">0.12539855047313608</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1435</span>)   <span class="hljs-number">0.1301998889606912</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">854</span>)    <span class="hljs-number">0.08359903364875737</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1484</span>)   <span class="hljs-number">0.09174653065996949</span>  (<span class="hljs-number">137</span>, <span class="hljs-number">1044</span>)   <span class="hljs-number">0.02885156855169558</span>[[<span class="hljs-number">1.47998182</span> <span class="hljs-number">1.1938479</span>  <span class="hljs-number">0.93516535</span> ... <span class="hljs-number">0.64108976</span> <span class="hljs-number">0.91951438</span> <span class="hljs-number">0.71990474</span>] [<span class="hljs-number">0.50918993</span> <span class="hljs-number">0.56496607</span> <span class="hljs-number">0.50559418</span> ... <span class="hljs-number">0.50385102</span> <span class="hljs-number">0.50605441</span> <span class="hljs-number">0.50574252</span>]](<span class="hljs-number">2</span>, <span class="hljs-number">2000</span>)困惑度：<span class="hljs-number">4095.2085280249858</span>Topic <span class="hljs-comment">#0:</span>企业 疫情 防控 服务 复工 协会 工作 社会 复产 组织 会员 心理 抗疫 及时 提供 饲料 社区 积极 就业 行业协会Topic <span class="hljs-comment">#1:</span>内容 美国 饭店 球队 赛区 酒店 客源 希腊 雅典 实验室 中超联赛 转会 广州 开幕式 猛犸 民众 日期 赛季 大连 苏州PreparedData(topic_coordinates=              x    y  topics  cluster      Freqtopic<span class="hljs-number">0</span>      <span class="hljs-number">0.024078</span>  <span class="hljs-number">0.0</span>       <span class="hljs-number">1</span>        <span class="hljs-number">1</span>  <span class="hljs-number">89.66411</span><span class="hljs-number">1</span>     <span class="hljs-number">-0.024078</span>  <span class="hljs-number">0.0</span>       <span class="hljs-number">2</span>        <span class="hljs-number">1</span>  <span class="hljs-number">10.33589</span>, topic_info=     Term      Freq     Total Category  logprob  loglift<span class="hljs-number">403</span>    内容  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  Default  <span class="hljs-number">30.0000</span>  <span class="hljs-number">30.0000</span><span class="hljs-number">1604</span>   美国  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  Default  <span class="hljs-number">29.0000</span>  <span class="hljs-number">29.0000</span><span class="hljs-number">1975</span>   饭店  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  Default  <span class="hljs-number">28.0000</span>  <span class="hljs-number">28.0000</span><span class="hljs-number">1865</span>   酒店  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  Default  <span class="hljs-number">27.0000</span>  <span class="hljs-number">27.0000</span><span class="hljs-number">1404</span>   球队  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  Default  <span class="hljs-number">26.0000</span>  <span class="hljs-number">26.0000</span><span class="hljs-meta">... </span>  ...       ...       ...      ...      ...      ...<span class="hljs-number">1403</span>   球员  <span class="hljs-number">0.093992</span>  <span class="hljs-number">0.367312</span>   Topic2  <span class="hljs-number">-7.2237</span>   <span class="hljs-number">0.9065</span><span class="hljs-number">886</span>    平等  <span class="hljs-number">0.089363</span>  <span class="hljs-number">0.349664</span>   Topic2  <span class="hljs-number">-7.2742</span>   <span class="hljs-number">0.9053</span><span class="hljs-number">895</span>    广州  <span class="hljs-number">0.104099</span>  <span class="hljs-number">0.468188</span>   Topic2  <span class="hljs-number">-7.1215</span>   <span class="hljs-number">0.7660</span><span class="hljs-number">1529</span>   窗口  <span class="hljs-number">0.096892</span>  <span class="hljs-number">0.421790</span>   Topic2  <span class="hljs-number">-7.1933</span>   <span class="hljs-number">0.7986</span><span class="hljs-number">1304</span>   民众  <span class="hljs-number">0.099578</span>  <span class="hljs-number">0.576540</span>   Topic2  <span class="hljs-number">-7.1659</span>   <span class="hljs-number">0.5134</span>[<span class="hljs-number">94</span> rows x <span class="hljs-number">6</span> columns], token_table=      Topic      Freq  Termterm<span class="hljs-number">134</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.810396</span>    中国<span class="hljs-number">241</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.023200</span>    企业<span class="hljs-number">255</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.017123</span>    会员<span class="hljs-number">324</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.898946</span>    做好<span class="hljs-number">528</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.054671</span>    协会<span class="hljs-number">565</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.055105</span>    及时<span class="hljs-number">715</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.000085</span>    复产<span class="hljs-number">717</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.927915</span>    复工<span class="hljs-number">736</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.886561</span>   大学生<span class="hljs-number">800</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.942634</span>    宣传<span class="hljs-number">833</span>       <span class="hljs-number">1</span>  <span class="hljs-number">1.133821</span>    就业<span class="hljs-number">854</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.886084</span>    工作<span class="hljs-number">919</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.872452</span>    开展<span class="hljs-number">954</span>       <span class="hljs-number">1</span>  <span class="hljs-number">0.917835</span>    心理<span class="hljs-number">1044</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.030462</span>    抗疫<span class="hljs-number">1098</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.068630</span>    提供<span class="hljs-number">1161</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.929940</span>    新冠<span class="hljs-number">1229</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.078302</span>    服务<span class="hljs-number">1383</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.851659</span>    物业<span class="hljs-number">1386</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.894247</span>    物资<span class="hljs-number">1435</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.981779</span>    疫情<span class="hljs-number">1484</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.977973</span>    社会<span class="hljs-number">1491</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.099239</span>    社区<span class="hljs-number">1512</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.128643</span>    积极<span class="hljs-number">1576</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.006787</span>    组织<span class="hljs-number">1637</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.923467</span>    肺炎<span class="hljs-number">1685</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.825705</span>    行业<span class="hljs-number">1686</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.797830</span>  行业协会<span class="hljs-number">1780</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.125439</span>    赛事<span class="hljs-number">1908</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.065603</span>    防控<span class="hljs-number">1910</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0.941367</span>    防疫<span class="hljs-number">1976</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1.075012</span>    饲料, R=<span class="hljs-number">30</span>, lambda_step=<span class="hljs-number">0.01</span>, plot_opts=&#123;<span class="hljs-string">&#x27;xlab&#x27;</span>: <span class="hljs-string">&#x27;PC1&#x27;</span>, <span class="hljs-string">&#x27;ylab&#x27;</span>: <span class="hljs-string">&#x27;PC2&#x27;</span>&#125;, topic_order=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])Serving to http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8888</span>/    [Ctrl-C to exit]<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">43</span>] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span>] <span class="hljs-string">&quot;GET /LDAvis.css HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span>] <span class="hljs-string">&quot;GET /d3.js HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span>] <span class="hljs-string">&quot;GET /LDAvis.js HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span>] code <span class="hljs-number">404</span>, message Not Found<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> - - [<span class="hljs-number">29</span>/Dec/<span class="hljs-number">2020</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span>] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> <span class="hljs-number">404</span> -</code></pre><br>生成对应的图形浏览器会打开，如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229222500.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229222450.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/QQ%E6%88%AA%E5%9B%BE20201229222441.png" alt=""></p><p>注意：LDA主题分布分析需要设置不同的主题值，这里是2，也可以是3、4、5等等。那么如何确定最佳主题数呢？困惑数又有什么用呢？如果存在语义知识又怎么处理呢？主题如何能更加准确定位呢？读者可以带着这些思考去探索。加油~</p><h1 id="八-总结"><a href="#八-总结" class="headerlink" title="八.总结"></a>八.总结</h1><ul><li>实时数据爬取</li><li>中文文本分词及高频词提取</li><li>词云可视化分析</li><li>TF-IDF权重计算和文本聚类分析</li><li>层次聚类分析</li><li>LDA主题模型分布</li></ul><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/64438407"> [python数据挖掘课程] 十三.WordCloud词云配置过程及词频分析 - Eastmount</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/50824215">[python] LDA处理文档主题分布代码入门笔记 - Eastmount</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/50545937">[python] Kmeans文本聚类算法+PAC降维+Matplotlib显示聚类图像 - Eastmount</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/50256163">[python] 使用Jieba工具中文分词及文本聚类概念 - Eastmount</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://bbs.pinggu.org/thread-7016858-1-1.html">[原创博文] 教你使用Pyecharts绘制词云图 - 浮世若离</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/qq_42379006/article/details/80839464">用pyecharts绘制词云WordCloud - pennyyangpei</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/shineych/article/details/104225239">用Python pyecharts v1.x 绘制图形（二）:折线图、折线面积图、散点图、雷达图、箱线图、词云图 - 蒜泥的冬天</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/91380607">[python数据挖掘课程] 二十八.基于LDA和pyLDAvis的主题挖掘及可视化分析 - Eastmount</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://blog.csdn.net/tan_handsome/article/details/79371076">Python层次聚类sci.cluster.hierarchy.linkage函数详解 - tan_handsome</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://blog.csdn.net/Eastmount/article/details/104698926">[Pyhon疫情大数据分析] 三.新闻信息抓取及词云可视化、文本聚类和LDA主题模型文本挖掘</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://blog.csdn.net/qq_43389959/article/details/83240988">python中csv文件中数据添加到MongoDB数据库</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>疫情分析</tag>
      
      <tag>数据爬取</tag>
      
      <tag>数据挖掘</tag>
      
      <tag>数据处理</tag>
      
      <tag>新闻信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK实时日志分析平台</title>
    <link href="/2020/12/22/elk/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    <url>/2020/12/22/elk/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、ELK"><a href="#一、ELK" class="headerlink" title="一、ELK"></a>一、ELK</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287127236-image.png" alt=""></p><h2 id="1-ELK-简介"><a href="#1-ELK-简介" class="headerlink" title="1.ELK  简介"></a>1.ELK  简介</h2><ul><li><p>Elasticsearch 是一个搜索和分析引擎。</p></li><li><p>Logstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等存储库中。</p></li><li><p>Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。</p></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608286874599-v2-892fdabc5a34aea398a14956ff94d6e3_720w.jpg" alt=""></p><p>事实上Elasticsearch的完整栈有如下的几个：</p><ul><li>Beats</li></ul><p>Filebeat是本地文件的日志数据采集器。 作为服务器上的代理安装，Filebeat监视日志目录或特定日志文件，tail file，并将它们转发给Elasticsearch或Logstash进行索引、kafka 等。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287482176-image.png" alt=""></p><ul><li>APM Server</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288332934-image.png" alt=""></p><ul><li>Elasticsearch</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287377112-image.png" alt=""></p><ul><li>Elasticsearch Hadoop</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288413802-image.png" alt=""></p><ul><li>Logstash</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287714262-image.png" alt=""></p><ul><li>Kibana</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287322225-image.png" alt=""></p><h2 id="2-ELK日志系统数据流图"><a href="#2-ELK日志系统数据流图" class="headerlink" title="2.ELK日志系统数据流图"></a>2.ELK日志系统数据流图</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287005820-v2-8aafc73492e4e1c6b2f910bba5824377_720w.jpg" alt=""></p><h2 id="3-Elasticsearch"><a href="#3-Elasticsearch" class="headerlink" title="3.Elasticsearch"></a>3.Elasticsearch</h2><p>简单地说， Elaaticsearch 是一个分布式的使用REST接口的搜索引擎。Elasticsearch 是一个分布式的基于 REST 接口的为云而设计的搜索引擎，它的功能包括：</p><p>Elasticsearch是一个基于Apache Lucene (TM)的开源搜索引擎，无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。但是，Lucene 只是一个库。Lucene 本身并不提供高可用性及分布式部署。想要发挥其强大的作用，你需使用 Java 并要将其集成到你的应用中。Lucene 非常复杂，你需要深入的了解检索相关知识来理解它是如何工作的。 </p><p>Elasticsearch 也是使用 Java 编写并使用 Lucene 来建立索引并实现搜索功能，但是它的目的是通过简单连贯的 RESTful API 让全文搜索变得简单并隐藏 Lucene 的复杂性。 </p><p>不过，Elasticsearch 不仅仅是 Lucene 和全文搜索引擎，它还提供：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>实时分析的分布式搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><p>而且，所有的这些功能被集成到一台服务器，你的应用可以通过简单的 RESTful API、各种语言的客户端甚至命令行与之交互。上手 Elasticsearch 非常简单，它提供了许多合理的缺省值，并对初学者隐藏了复杂的搜索引擎理论。它开箱即用（安装即可使用），只需很少的学习既可在生产环境中使用。Elasticsearch 在 Apache 2 license 下许可使用，可以免费下载、使用和修改。<br>随着知识的积累，你可以根据不同的问题领域定制 Elasticsearch 的高级特性，这一切都是可配置的，并且配置非常灵活。</p><p>Elasticsearch 的特点是它提供了一个极速的搜索体验。这源于它的高速（speed）。相比较其它的一些大数据引擎，Elasticsearch 可以实现秒级的搜索，但是对于它们来说，可能需要数小时才能完成。Elasticsearch 的 cluster 是一种分布式的部署，极易扩展（scale)。这样很容易使它处理 petabytes 的数据库容量。最重要的是 Elasticsearch 是它搜索的结果可以按照分数进行排序，它能提供我们最相关的搜索结果（relevance)。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289599682-20190909144042553.png" alt=""></p><h2 id="4-Elasticsearch中的一些重要概念"><a href="#4-Elasticsearch中的一些重要概念" class="headerlink" title="4.Elasticsearch中的一些重要概念"></a>4.Elasticsearch中的一些重要概念</h2><h3 id="1-Cluster"><a href="#1-Cluster" class="headerlink" title="1.Cluster"></a>1.Cluster</h3><p>Cluster 也就是集群的意思。Elasticsearch 集群由一个或多个节点组成，可通过其集群名称进行标识。通常这个 Cluster 的名字是可以在 Elasticsearch 里的配置文件中设置的。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290738034-20190813160721443.png" alt=""></p><p>云上的集群如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291521040-image.png" alt=""></p><h3 id="2-node"><a href="#2-node" class="headerlink" title="2.node"></a>2.node</h3><p>在大多数环境中，每个节点都在单独的盒子或虚拟机上运行。一个集群由一个或多个 node 组成。在测试模拟集群的环境中，我可以把多个 node 运行在一个 server 上。但是在实际的部署中，大多数情况还是需要一个 server 上运行一个 node。</p><p>如图所示，云里面的每个白色正方形的盒子代表一个节点——Node。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291502260-image.png" alt=""></p><h3 id="3-Document"><a href="#3-Document" class="headerlink" title="3.Document"></a>3.Document</h3><p>Elasticsearch 是面向文档的，这意味着您索引或搜索的最小数据单元是文档。</p><p>文档通常是数据的 JSON 表示形式。JSON over HTTP 是与 Elasticsearch 进行通信的最广泛使用的方式，它是我们在本书中使用的方法。例如，聚会网站中的事件可以在以下文档中表示：<br><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Elasticsearch Denver&quot;</span>,  <span class="hljs-attr">&quot;organizer&quot;</span>: <span class="hljs-string">&quot;Lee&quot;</span>,  <span class="hljs-attr">&quot;location&quot;</span>: <span class="hljs-string">&quot;Denver, Colorado, USA&quot;</span>&#125;</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290504555-20200418074457143.png" alt=""></p><h3 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h3><p>类型是文档的逻辑容器，类似于表是行的容器。 您将具有不同结构（模式）的文档放在不同类型中。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290204987-20190923220747401.png" alt=""></p><h3 id="5-index"><a href="#5-index" class="headerlink" title="5.index"></a>5.index</h3><p>在 Elasticsearch 中，索引是文档的集合。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290366176-20190813164839888.png" alt=""></p><p>在一个或者多个节点之间，多个绿色小方块组合在一起形成一个 ElasticSearch 的索引。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291536992-image.png" alt=""></p><h3 id="6-shard"><a href="#6-shard" class="headerlink" title="6.shard"></a>6.shard</h3><p>在一个索引下，分布在多个节点里的绿色小方块称为分片——Shard。</p><p>一个索引可以存储超出单个结点硬件限制的大量数据，但是在处理搜索请求时，响应太慢。为了解决这个问题，Elasticsearch 提供了将索引划分成多份的能力，这些份就叫做分片（shard）。由于 Elasticsearch 是一个分布式搜索引擎，当你创建一个索引的时候，你可以指定你想要的分片(shard)的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291284909-20200624114427449.png" alt=""></p><p>在一个索引下，分布在多个节点里的绿色小方块称为分片——Shard。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291560506-image.png" alt=""></p><h3 id="7-replica"><a href="#7-replica" class="headerlink" title="7.replica"></a>7.replica</h3><p>默认情况下，Elasticsearch 为每个索引创建一个主分片和一个副本。这意味着每个索引将包含一个主分片，每个分片将具有一个副本。</p><p>分配多个分片和副本是分布式搜索功能设计的本质，提供高可用性和快速访问索引中的文档。主副本和副本分片之间的主要区别在于只有主分片可以接受索引请求。副本和主分片都可以提供查询请求。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291077338-20190814211710327.png" alt=""></p><h1 id="二、实验操作步骤"><a href="#二、实验操作步骤" class="headerlink" title="二、实验操作步骤"></a>二、实验操作步骤</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608648053326-1608647917408-image.png" alt=""></p><h2 id="1-从命令运行-Elasticsearch"><a href="#1-从命令运行-Elasticsearch" class="headerlink" title="1.从命令运行 Elasticsearch"></a>1.从命令运行 Elasticsearch</h2><h3 id="1-启动elasticsearch"><a href="#1-启动elasticsearch" class="headerlink" title="1.启动elasticsearch"></a>1.启动elasticsearch</h3><p>进入elasticsearch安装目录，输入如下命令：<br><pre><code class="hljs shell">bin/elasticsearch</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289504124-%E5%90%AF%E5%8A%A8elasticsearch.PNG" alt=""></p><p>如图所示，浏览器输入<a href="http://192.168.154.135:9200/即可看到elasticsearch启动成功。">http://192.168.154.135:9200/即可看到elasticsearch启动成功。</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289488877-elasticsearch%E5%90%AF%E5%8A%A8.PNG" alt=""></p><h3 id="2-查看集群状况"><a href="#2-查看集群状况" class="headerlink" title="2.查看集群状况"></a>2.查看集群状况</h3><p>在浏览器输入如下命令：</p><pre><code class="hljs shell">http://192.168.154.135:9200/_cat</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288620392-%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81.PNG" alt=""></p><pre><code class="hljs shell">首先，我们需要了解ES中以下几个名词，是做什么的：集群(cluster):由一个或多个节点组成, 并通过集群名称与其他集群进行区分节点(node):单个ElasticSearch实例. 通常一个节点运行在一个隔离的容器或虚拟机中索引(index):在ES中, 索引是一组文档的集合（就是我们所说的一个日志）分片(shard):因为ES是个分布式的搜索引擎, 所以索引通常都会分解成不同部分, 而这些分布在不同节点的数据就是分片. ES自动管理和组织分片, 并在必要的时候对分片数据进行再平衡分配, 所以用户基本上不用担心分片的处理细节，一个分片默认最大文档数量是20亿.副本(replica):ES默认为一个索引创建5个主分片, 并分别为其创建一个副本分片. 也就是说每个索引都由5个主分片成本, 而每个主分片都相应的有一个copy.</code></pre><h2 id="2-从命令运行-Kibana"><a href="#2-从命令运行-Kibana" class="headerlink" title="2.从命令运行 Kibana"></a>2.从命令运行 Kibana</h2><h3 id="1-通过-config-配置Kibana"><a href="#1-通过-config-配置Kibana" class="headerlink" title="1.通过 config 配置Kibana"></a>1.通过 config 配置Kibana</h3><pre><code class="hljs shell">server.port: 5601server.host: &quot;192.168.154.135&quot;server.name: &quot;kibana_1&quot;elasticsearch.hosts: [&quot;http://192.168.154.135:9200&quot;]</code></pre><p>将Kibana 的界面设置为中文的界面，在 kibana.yml 中进行如下的设置：<br><pre><code class="hljs shell">i18n.locale: &quot;zh-CN&quot;</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289399293-kia%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.PNG" alt=""></p><h3 id="2-启动Kibana"><a href="#2-启动Kibana" class="headerlink" title="2.启动Kibana"></a>2.启动Kibana</h3><p>可以从命令行启动 Kibana，如下所示：<br><pre><code class="hljs shell">./bin/kibana</code></pre><br>默认情况下，Kibana 在前台运行，将其日志打印到标准输出（stdout），按 Ctrl-C 可以停止。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289413489-%E5%90%AF%E5%8A%A8kia.PNG" alt=""></p><p>在我们的浏览器中，我们输入地址 <a href="http://192.168.154.135:5601。我们可以看到上面的界面。我们可以利用这个界面来对我们的数据进行接下来的分析，展示等。">http://192.168.154.135:5601。我们可以看到上面的界面。我们可以利用这个界面来对我们的数据进行接下来的分析，展示等。</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288103241-ki%E7%95%8C%E9%9D%A2.PNG" alt=""></p><h2 id="3-将本地日志上传到linux主机"><a href="#3-将本地日志上传到linux主机" class="headerlink" title="3.将本地日志上传到linux主机"></a>3.将本地日志上传到linux主机</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289337927-file.PNG" alt=""></p><h2 id="4-Filebeat读取log日志文件"><a href="#4-Filebeat读取log日志文件" class="headerlink" title="4.Filebeat读取log日志文件"></a>4.Filebeat读取log日志文件</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608647361317-image.png" alt=""></p><h3 id="1-编写filebeat配置文件app-yml"><a href="#1-编写filebeat配置文件app-yml" class="headerlink" title="1.编写filebeat配置文件app.yml"></a>1.编写filebeat配置文件app.yml</h3><p>在filebeat目录执行如下命令<br><pre><code class="hljs shell">vi app.yml</code></pre><br>添加以下内容信息至app.yml</p><pre><code class="hljs shell">filebeat.inputs:- type: log  enabled: true  paths:   - /home/elastic/*.logsetup.template.settings:  index.number_of_shards: 3output.elasticsearch:  hosts: [&quot;192.168.154.135:5044&quot;]</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289288243-filebeat%20app.yml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.PNG" alt=""></p><h3 id="2-将filebeat读取文件提交至elasticsearch"><a href="#2-将filebeat读取文件提交至elasticsearch" class="headerlink" title="2.将filebeat读取文件提交至elasticsearch"></a>2.将filebeat读取文件提交至elasticsearch</h3><p>在filebeat目录下执行如下命令</p><pre><code class="hljs shell">./filebeat -e -c app.yml</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289302846-filebeat%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%97%A5%E5%BF%97%E5%88%B0logstash.PNG" alt=""></p><h2 id="5-kibana添加dashboard"><a href="#5-kibana添加dashboard" class="headerlink" title="5.kibana添加dashboard"></a>5.kibana添加dashboard</h2><h3 id="1-添加索引到Kibana中："><a href="#1-添加索引到Kibana中：" class="headerlink" title="1.添加索引到Kibana中："></a>1.添加索引到Kibana中：</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643629278-%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95.PNG" alt=""></p><h3 id="2-设置配置"><a href="#2-设置配置" class="headerlink" title="2.设置配置"></a>2.设置配置</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643762860-%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE.PNG" alt=""></p><h3 id="3-查看索引模式"><a href="#3-查看索引模式" class="headerlink" title="3.查看索引模式"></a>3.查看索引模式</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643699176-%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%BC%8F.PNG" alt=""></p><h3 id="4-查看discover界面"><a href="#4-查看discover界面" class="headerlink" title="4.查看discover界面"></a>4.查看discover界面</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643646126-%E6%9F%A5%E7%9C%8Bdiscover%E9%A1%B5.PNG" alt=""></p><h3 id="5-添加总访问人数"><a href="#5-添加总访问人数" class="headerlink" title="5.添加总访问人数"></a>5.添加总访问人数</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643842722-%E6%B7%BB%E5%8A%A0%E6%80%BB%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0.PNG" alt=""></p><h3 id="6-添加访问面积图"><a href="#6-添加访问面积图" class="headerlink" title="6.添加访问面积图"></a>6.添加访问面积图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643892580-%E5%88%9B%E5%BB%BA%E8%AE%BF%E9%97%AE%E9%9D%A2%E7%A7%AF%E5%9B%BE.PNG" alt=""></p><h3 id="7-添加访问设备系统饼图"><a href="#7-添加访问设备系统饼图" class="headerlink" title="7.添加访问设备系统饼图"></a>7.添加访问设备系统饼图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643947403-%E5%88%9B%E5%BB%BA%E8%AE%BF%E9%97%AE%E8%AE%BE%E5%A4%87%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%9E%8B%E9%A5%BC%E5%9B%BE.PNG" alt=""></p><h3 id="8-添加访问次数前十ip数据表格"><a href="#8-添加访问次数前十ip数据表格" class="headerlink" title="8.添加访问次数前十ip数据表格"></a>8.添加访问次数前十ip数据表格</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608643999779-%E8%AE%BE%E7%BD%AE%E5%89%8D%E5%8D%81%E8%AE%BF%E9%97%AEip%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC.PNG" alt=""></p><h3 id="9-添加requst方法标签词云"><a href="#9-添加requst方法标签词云" class="headerlink" title="9.添加requst方法标签词云"></a>9.添加requst方法标签词云</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644038309-%E8%AE%BE%E7%BD%AErequst%E6%96%B9%E6%B3%95%E6%A0%87%E7%AD%BE%E8%AF%8D%E4%BA%91.PNG" alt=""></p><h3 id="10-添加每天不同时间访问热力图"><a href="#10-添加每天不同时间访问热力图" class="headerlink" title="10.添加每天不同时间访问热力图"></a>10.添加每天不同时间访问热力图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644078829-%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E6%97%B6%E9%97%B4%E6%AE%B5%E7%83%AD%E5%8A%9B%E5%9B%BE.PNG" alt=""></p><h3 id="11-添加访问网站途径饼图"><a href="#11-添加访问网站途径饼图" class="headerlink" title="11.添加访问网站途径饼图"></a>11.添加访问网站途径饼图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644135578-%E8%AE%BE%E7%BD%AE%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E9%80%94%E5%BE%84%E9%A5%BC%E5%9B%BE.PNG" alt=""></p><h3 id="12-添加用户访问详细信息"><a href="#12-添加用户访问详细信息" class="headerlink" title="12.添加用户访问详细信息"></a>12.添加用户访问详细信息</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644205517-%E5%B1%95%E7%A4%BA%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.PNG" alt=""></p><h3 id="13-添加访问用户城市表格"><a href="#13-添加访问用户城市表格" class="headerlink" title="13.添加访问用户城市表格"></a>13.添加访问用户城市表格</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644262051-%E8%AE%BE%E7%BD%AE%E8%AE%BF%E9%97%AE%E5%9F%8E%E5%B8%82%E6%95%B0%E6%8D%AE%E8%A1%A8.PNG" alt=""></p><h3 id="14-添加用户城市分布地图"><a href="#14-添加用户城市分布地图" class="headerlink" title="14.添加用户城市分布地图"></a>14.添加用户城市分布地图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608644298906-%E8%AE%BE%E7%BD%AE%E8%AE%BF%E9%97%AE%E5%9F%8E%E5%B8%82map%E5%88%86%E5%B8%83%E5%9B%BE.PNG" alt=""></p><h2 id="6-可视化总效果图"><a href="#6-可视化总效果图" class="headerlink" title="6.可视化总效果图"></a>6.可视化总效果图</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/111-恢复的 00_00_00-00_00_30.gif" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608646231208-001.gif" alt=""></p><p><a href="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608646231208-001.gif">https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-22/1608646231208-001.gif</a></p><iframe width=100% height=100%  src='https://player.youku.com/embed/XNTAyMTA1MjkzMg==' frameborder=0  'allowfullscreen'></iframe><h1 id="三、拓展-head插件"><a href="#三、拓展-head插件" class="headerlink" title="三、拓展-head插件"></a>三、拓展-head插件</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>ElasticSearch-head就是一款能连接ElasticSearch搜索引擎，并提供可视化的操作页面对ElasticSearch搜索引擎进行各种设置和数据检索功能的管理插件，如在head插件页面编写RESTful接口风格的请求，就可以对ElasticSearch中的数据进行增删改查、创建或者删除索引等操作。类似于使用navicat工具连接MySQL这种关系型数据库，对数据库做操作。</p><p>在登陆和访问head插件地址和ElasticSearch前需要事先在服务器上安装和配置好ElasticSearch以及head插件。安装完后，默认head插件的web端口为9100，ElasticSearch服务的端口为9200，使用浏览器访问head地址，如<a href="http://IP地址:9100/，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，如http://IP地址:9200/">http://IP地址:9100/，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，如http://IP地址:9200/</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>下载并解压</p><pre><code class="hljs crmsh">cd /usr/localwget https://npm.taobao.org/mirrors/<span class="hljs-keyword">node</span><span class="hljs-title">/v14</span>.<span class="hljs-number">4.0</span>/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64.tar.xztar -xvf <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64.tar.xzcd <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64</code></pre><p>将nodejs的命令node、npm等添加到PATH环境变量中<br><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">NODE_HOME</span>=/usr/local/node-v14.4.0-linux-x64<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$&#123;NODE_HOME&#125;/bin</code></pre><br>创建软链接<br><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/node /u</span>sr<span class="hljs-regexp">/bin/</span>node ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/npm /u</span>sr<span class="hljs-regexp">/bin/</span>npm</code></pre><br>验证安装</p><pre><code class="hljs crmsh">npm -v<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>cnpm -v</code></pre><h3 id="2-安装git并拉取ElasticSearch-head代码"><a href="#2-安装git并拉取ElasticSearch-head代码" class="headerlink" title="2.安装git并拉取ElasticSearch-head代码"></a>2.安装git并拉取ElasticSearch-head代码</h3><pre><code class="hljs awk">yum install –y git <span class="hljs-comment">#安装git 安装过则更新</span>git --version <span class="hljs-comment">#查看是否安装成功</span>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mobz/</span>elasticsearch-head.git<span class="hljs-comment">#从github上拉取elasticsearch-head代码</span>cd elasticsearch-head <span class="hljs-comment">#进入elasticsearch-head文件夹</span>npm install cnpm -g --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <span class="hljs-comment">#因为npm安装非常非常慢，所以在这里先安装淘宝源地址</span>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/cnpm /u</span>sr<span class="hljs-regexp">/local/</span>bin/cnpm <span class="hljs-comment">#创建cnpm软链接，不然执行下面执行命令会报错</span>cnpm install <span class="hljs-comment">#使用cnpm命令下载安装项目所需要的插件</span></code></pre><h3 id="3-配置ElasticSearch-head"><a href="#3-配置ElasticSearch-head" class="headerlink" title="3.配置ElasticSearch-head"></a>3.配置ElasticSearch-head</h3><p>修改elasticsearch.yml<br><pre><code class="hljs stylus">cd software/elasticsearch-<span class="hljs-number">7.8</span>.<span class="hljs-number">1</span>/configvim elasticsearch.yml修改以下内容：http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">//允许跨域访问</span></code></pre></p><p>修改Gruntfile.js<br><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> elasticSearch-head<span class="hljs-keyword">vim</span> Gruntfile.js在此添加 <span class="hljs-built_in">hostname</span>=<span class="hljs-string">&quot;*&quot;</span></code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/14.jpg" alt=""></p><h3 id="4-启动ElasticSearch-head"><a href="#4-启动ElasticSearch-head" class="headerlink" title="4.启动ElasticSearch-head"></a>4.启动ElasticSearch-head</h3><pre><code class="hljs routeros">grunt<span class="hljs-built_in"> server </span>&amp;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/15.jpg" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/12.jpg" alt=""></p><h2 id="3-实验中的具体应用"><a href="#3-实验中的具体应用" class="headerlink" title="3.实验中的具体应用"></a>3.实验中的具体应用</h2><p>在这次实验当中，我们用head插件可以很方便的查看到logsearch以及kibana所创建的索引。从而，我们能够清晰的判断出程序是否向elasticsearch中正确写入了数据。以便我们后边数据可视化的构建以及dashboard的构造。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/10.jpg" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://www.elastic.co/cn/">Elasticsearch官网</a></p><p><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/98871531">Elasticsearch 简介</a></p><p><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/102728604">Elastic：菜鸟上手指南</a></p><p><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://www.zhihu.com/question/338932215/answer/777380560">ELK可以干什么呢？</a></p><p><sup><a href="#fn_5" id="reffn_5">5</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/99443042">Elasticsearch中的一些重要概念:cluster, node, index, document, shards及replica</a></p><p><sup><a href="#fn_6" id="reffn_6">6</a></sup> <a href="https://elasticstack.blog.csdn.net/article/details/99433732">Kibana：如何在 Linux，MacOS 及 Windows 上安装 Elastic 栈中的 Kibana</a></p><p><sup><a href="#fn_7" id="reffn_7">7</a></sup> <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1608288309&amp;ver=2774&amp;signature=u7YvT9ss9ztVI9kt8i6b4Z33LGTmymhkdrX7y1sZmWIOZS-TTHNI1bCbZ*UKRGPd1XDY54HGEKcMYuykx6oghiUaDhS9KzmJjGroDV8xGCbXHaNbNwkKm5AqLOlEUg08&amp;new=1">多语言应用性能监控系统：Elastic APM</a></p><p><sup><a href="#fn_8" id="reffn_8">8</a></sup> <a href="https://blog.csdn.net/vkingnew/article/details/92433598">Elasticsearch-Hadoop 介绍</a></p><p><sup><a href="#fn_9" id="reffn_9">9</a></sup> <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1608291430&amp;ver=2774&amp;signature=qMPp5kevq*OIUMs7tcdRTL1Rg8s9nh-yXY9a0T0cMN0IbUohSewrapky8wD0-1vcZt70cRGv2TuK4u6p5jvG*8tTRFrG6VLToMvSS2I30VeGtIcsQx8xsFZvhxMO0HGH&amp;new=1">图解ElasticSearch原理，你可收好了!</a></p><p><sup><a href="#fn_10" id="reffn_10">10</a></sup> <a href="https://www.cnblogs.com/tdp0108/p/11105848.html">ElasticSearch-head插件使用小结</a></p><p><sup><a href="#fn_11" id="reffn_11">11</a></sup> <a href="https://blog.csdn.net/huwei2003/article/details/40581143">ElasticSearch-head插件用法</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>elastic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elastic</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>kibana</tag>
      
      <tag>logstash</tag>
      
      <tag>filebeat</tag>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK实时日志分析平台-案例</title>
    <link href="/2020/12/18/elk/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0-%E6%A1%88%E4%BE%8B/"/>
    <url>/2020/12/18/elk/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0-%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、ELK"><a href="#一、ELK" class="headerlink" title="一、ELK"></a>一、ELK</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287127236-image.png" alt=""></p><h2 id="1-ELK-简介"><a href="#1-ELK-简介" class="headerlink" title="1.ELK  简介"></a>1.ELK  简介</h2><ul><li><p>Elasticsearch 是一个搜索和分析引擎。</p></li><li><p>Logstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等存储库中。</p></li><li><p>Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。</p></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608286874599-v2-892fdabc5a34aea398a14956ff94d6e3_720w.jpg" alt=""></p><p>事实上Elasticsearch的完整栈有如下的几个：</p><ul><li>Beats</li></ul><p>Filebeat是本地文件的日志数据采集器。 作为服务器上的代理安装，Filebeat监视日志目录或特定日志文件，tail file，并将它们转发给Elasticsearch或Logstash进行索引、kafka 等。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287482176-image.png" alt=""></p><ul><li>APM Server</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288332934-image.png" alt=""></p><ul><li>Elasticsearch</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287377112-image.png" alt=""></p><ul><li>Elasticsearch Hadoop</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288413802-image.png" alt=""></p><ul><li>Logstash</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287714262-image.png" alt=""></p><ul><li>Kibana</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287322225-image.png" alt=""></p><h2 id="2-ELK日志系统数据流图"><a href="#2-ELK日志系统数据流图" class="headerlink" title="2.ELK日志系统数据流图"></a>2.ELK日志系统数据流图</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608287005820-v2-8aafc73492e4e1c6b2f910bba5824377_720w.jpg" alt=""></p><h2 id="3-Elasticsearch"><a href="#3-Elasticsearch" class="headerlink" title="3.Elasticsearch"></a>3.Elasticsearch</h2><p>简单地说， Elaaticsearch 是一个分布式的使用REST接口的搜索引擎。Elasticsearch 是一个分布式的基于 REST 接口的为云而设计的搜索引擎，它的功能包括：</p><p>Elasticsearch是一个基于Apache Lucene (TM)的开源搜索引擎，无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。但是，Lucene 只是一个库。Lucene 本身并不提供高可用性及分布式部署。想要发挥其强大的作用，你需使用 Java 并要将其集成到你的应用中。Lucene 非常复杂，你需要深入的了解检索相关知识来理解它是如何工作的。 </p><p>Elasticsearch 也是使用 Java 编写并使用 Lucene 来建立索引并实现搜索功能，但是它的目的是通过简单连贯的 RESTful API 让全文搜索变得简单并隐藏 Lucene 的复杂性。 </p><p>不过，Elasticsearch 不仅仅是 Lucene 和全文搜索引擎，它还提供：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>实时分析的分布式搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><p>而且，所有的这些功能被集成到一台服务器，你的应用可以通过简单的 RESTful API、各种语言的客户端甚至命令行与之交互。上手 Elasticsearch 非常简单，它提供了许多合理的缺省值，并对初学者隐藏了复杂的搜索引擎理论。它开箱即用（安装即可使用），只需很少的学习既可在生产环境中使用。Elasticsearch 在 Apache 2 license 下许可使用，可以免费下载、使用和修改。<br>随着知识的积累，你可以根据不同的问题领域定制 Elasticsearch 的高级特性，这一切都是可配置的，并且配置非常灵活。</p><p>Elasticsearch 的特点是它提供了一个极速的搜索体验。这源于它的高速（speed）。相比较其它的一些大数据引擎，Elasticsearch 可以实现秒级的搜索，但是对于它们来说，可能需要数小时才能完成。Elasticsearch 的 cluster 是一种分布式的部署，极易扩展（scale)。这样很容易使它处理 petabytes 的数据库容量。最重要的是 Elasticsearch 是它搜索的结果可以按照分数进行排序，它能提供我们最相关的搜索结果（relevance)。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289599682-20190909144042553.png" alt=""></p><h2 id="4-Elasticsearch中的一些重要概念"><a href="#4-Elasticsearch中的一些重要概念" class="headerlink" title="4.Elasticsearch中的一些重要概念"></a>4.Elasticsearch中的一些重要概念</h2><h3 id="1-Cluster"><a href="#1-Cluster" class="headerlink" title="1.Cluster"></a>1.Cluster</h3><p>Cluster 也就是集群的意思。Elasticsearch 集群由一个或多个节点组成，可通过其集群名称进行标识。通常这个 Cluster 的名字是可以在 Elasticsearch 里的配置文件中设置的。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290738034-20190813160721443.png" alt=""></p><p>云上的集群如下图所示：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291521040-image.png" alt=""></p><h3 id="2-node"><a href="#2-node" class="headerlink" title="2.node"></a>2.node</h3><p>在大多数环境中，每个节点都在单独的盒子或虚拟机上运行。一个集群由一个或多个 node 组成。在测试模拟集群的环境中，我可以把多个 node 运行在一个 server 上。但是在实际的部署中，大多数情况还是需要一个 server 上运行一个 node。</p><p>如图所示，云里面的每个白色正方形的盒子代表一个节点——Node。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291502260-image.png" alt=""></p><h3 id="3-Document"><a href="#3-Document" class="headerlink" title="3.Document"></a>3.Document</h3><p>Elasticsearch 是面向文档的，这意味着您索引或搜索的最小数据单元是文档。</p><p>文档通常是数据的 JSON 表示形式。JSON over HTTP 是与 Elasticsearch 进行通信的最广泛使用的方式，它是我们在本书中使用的方法。例如，聚会网站中的事件可以在以下文档中表示：<br><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Elasticsearch Denver&quot;</span>,  <span class="hljs-attr">&quot;organizer&quot;</span>: <span class="hljs-string">&quot;Lee&quot;</span>,  <span class="hljs-attr">&quot;location&quot;</span>: <span class="hljs-string">&quot;Denver, Colorado, USA&quot;</span>&#125;</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290504555-20200418074457143.png" alt=""></p><h3 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h3><p>类型是文档的逻辑容器，类似于表是行的容器。 您将具有不同结构（模式）的文档放在不同类型中。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290204987-20190923220747401.png" alt=""></p><h3 id="5-index"><a href="#5-index" class="headerlink" title="5.index"></a>5.index</h3><p>在 Elasticsearch 中，索引是文档的集合。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608290366176-20190813164839888.png" alt=""></p><p>在一个或者多个节点之间，多个绿色小方块组合在一起形成一个 ElasticSearch 的索引。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291536992-image.png" alt=""></p><h3 id="6-shard"><a href="#6-shard" class="headerlink" title="6.shard"></a>6.shard</h3><p>在一个索引下，分布在多个节点里的绿色小方块称为分片——Shard。</p><p>一个索引可以存储超出单个结点硬件限制的大量数据，但是在处理搜索请求时，响应太慢。为了解决这个问题，Elasticsearch 提供了将索引划分成多份的能力，这些份就叫做分片（shard）。由于 Elasticsearch 是一个分布式搜索引擎，当你创建一个索引的时候，你可以指定你想要的分片(shard)的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291284909-20200624114427449.png" alt=""></p><p>在一个索引下，分布在多个节点里的绿色小方块称为分片——Shard。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291560506-image.png" alt=""></p><h3 id="7-replica"><a href="#7-replica" class="headerlink" title="7.replica"></a>7.replica</h3><p>默认情况下，Elasticsearch 为每个索引创建一个主分片和一个副本。这意味着每个索引将包含一个主分片，每个分片将具有一个副本。</p><p>分配多个分片和副本是分布式搜索功能设计的本质，提供高可用性和快速访问索引中的文档。主副本和副本分片之间的主要区别在于只有主分片可以接受索引请求。副本和主分片都可以提供查询请求。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608291077338-20190814211710327.png" alt=""></p><h1 id="二、实验操作步骤"><a href="#二、实验操作步骤" class="headerlink" title="二、实验操作步骤"></a>二、实验操作步骤</h1><h2 id="1-从命令运行-Elasticsearch"><a href="#1-从命令运行-Elasticsearch" class="headerlink" title="1.从命令运行 Elasticsearch"></a>1.从命令运行 Elasticsearch</h2><h3 id="1-启动elasticsearch"><a href="#1-启动elasticsearch" class="headerlink" title="1.启动elasticsearch"></a>1.启动elasticsearch</h3><p>进入elasticsearch安装目录，输入如下命令：<br><pre><code class="hljs shell">bin/elasticsearch</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289504124-%E5%90%AF%E5%8A%A8elasticsearch.PNG" alt=""></p><p>如图所示，浏览器输入<a href="http://192.168.154.135:9200/即可看到elasticsearch启动成功。">http://192.168.154.135:9200/即可看到elasticsearch启动成功。</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289488877-elasticsearch%E5%90%AF%E5%8A%A8.PNG" alt=""></p><h3 id="2-查看集群状况"><a href="#2-查看集群状况" class="headerlink" title="2.查看集群状况"></a>2.查看集群状况</h3><p>在浏览器输入如下命令：</p><pre><code class="hljs shell">http://192.168.154.135:9200/_cat</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288620392-%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81.PNG" alt=""></p><pre><code class="hljs shell">首先，我们需要了解ES中以下几个名词，是做什么的：集群(cluster):由一个或多个节点组成, 并通过集群名称与其他集群进行区分节点(node):单个ElasticSearch实例. 通常一个节点运行在一个隔离的容器或虚拟机中索引(index):在ES中, 索引是一组文档的集合（就是我们所说的一个日志）分片(shard):因为ES是个分布式的搜索引擎, 所以索引通常都会分解成不同部分, 而这些分布在不同节点的数据就是分片. ES自动管理和组织分片, 并在必要的时候对分片数据进行再平衡分配, 所以用户基本上不用担心分片的处理细节，一个分片默认最大文档数量是20亿.副本(replica):ES默认为一个索引创建5个主分片, 并分别为其创建一个副本分片. 也就是说每个索引都由5个主分片成本, 而每个主分片都相应的有一个copy.</code></pre><h2 id="2-从命令运行-Kibana"><a href="#2-从命令运行-Kibana" class="headerlink" title="2.从命令运行 Kibana"></a>2.从命令运行 Kibana</h2><h3 id="1-通过-config-配置Kibana"><a href="#1-通过-config-配置Kibana" class="headerlink" title="1.通过 config 配置Kibana"></a>1.通过 config 配置Kibana</h3><pre><code class="hljs shell">server.port: 5601server.host: &quot;192.168.154.135&quot;server.name: &quot;kibana_1&quot;elasticsearch.hosts: [&quot;http://192.168.154.135:9200&quot;]</code></pre><p>将Kibana 的界面设置为中文的界面，在 kibana.yml 中进行如下的设置：<br><pre><code class="hljs shell">i18n.locale: &quot;zh-CN&quot;</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289399293-kia%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.PNG" alt=""></p><h3 id="2-启动Kibana"><a href="#2-启动Kibana" class="headerlink" title="2.启动Kibana"></a>2.启动Kibana</h3><p>可以从命令行启动 Kibana，如下所示：<br><pre><code class="hljs shell">./bin/kibana</code></pre><br>默认情况下，Kibana 在前台运行，将其日志打印到标准输出（stdout），按 Ctrl-C 可以停止。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289413489-%E5%90%AF%E5%8A%A8kia.PNG" alt=""></p><p>在我们的浏览器中，我们输入地址 <a href="http://192.168.154.135:5601。我们可以看到上面的界面。我们可以利用这个界面来对我们的数据进行接下来的分析，展示等。">http://192.168.154.135:5601。我们可以看到上面的界面。我们可以利用这个界面来对我们的数据进行接下来的分析，展示等。</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608288103241-ki%E7%95%8C%E9%9D%A2.PNG" alt=""></p><h2 id="3-启动本地app实时生成并存储日志"><a href="#3-启动本地app实时生成并存储日志" class="headerlink" title="3.启动本地app实时生成并存储日志"></a>3.启动本地app实时生成并存储日志</h2><ol><li>将java项目打包成jar包并用filezilla传到linux上</li></ol><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289337927-file.PNG" alt=""></p><ol><li>进入jar包目录，执行如下命令：</li></ol><pre><code class="hljs shell">java -jar app-0.0.2-SNAPSHOT.jar &gt; app2.log</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289324194-%E6%A8%A1%E6%8B%9F%E7%BD%91%E9%A1%B5%E6%97%A5%E5%BF%97%E7%94%9F%E6%88%90.PNG" alt=""></p><h2 id="4-Filebeat读取log日志文件"><a href="#4-Filebeat读取log日志文件" class="headerlink" title="4.Filebeat读取log日志文件"></a>4.Filebeat读取log日志文件</h2><h3 id="1-编写filebeat配置文件app-yml"><a href="#1-编写filebeat配置文件app-yml" class="headerlink" title="1.编写filebeat配置文件app.yml"></a>1.编写filebeat配置文件app.yml</h3><p>在filebeat目录执行如下命令<br><pre><code class="hljs shell">vi app.yml</code></pre><br>添加以下内容信息至app.yml</p><pre><code class="hljs shell">filebeat.inputs:- type: log  enabled: true  paths:   - /home/elastic/*.logsetup.template.settings:  index.number_of_shards: 3output.logstash:  hosts: [&quot;192.168.154.135:5044&quot;]</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289288243-filebeat%20app.yml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.PNG" alt=""></p><h3 id="2-将filebeat读取文件提交至logstash"><a href="#2-将filebeat读取文件提交至logstash" class="headerlink" title="2.将filebeat读取文件提交至logstash"></a>2.将filebeat读取文件提交至logstash</h3><p>在filebeat目录下执行如下命令</p><pre><code class="hljs shell">./filebeat -e -c app.yml</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289302846-filebeat%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%97%A5%E5%BF%97%E5%88%B0logstash.PNG" alt=""></p><h2 id="5-Logstash处理信息并上传至elasticsearch"><a href="#5-Logstash处理信息并上传至elasticsearch" class="headerlink" title="5.Logstash处理信息并上传至elasticsearch"></a>5.Logstash处理信息并上传至elasticsearch</h2><h3 id="1-编写Logstash配置文件app-yml"><a href="#1-编写Logstash配置文件app-yml" class="headerlink" title="1.编写Logstash配置文件app.yml"></a>1.编写Logstash配置文件app.yml</h3><p>进入logstash目录执行如下命令</p><pre><code class="hljs shell">vi app.conf</code></pre><p>添加以下内容至app.conf</p><pre><code class="hljs shell">input &#123; beats &#123;  port =&gt; &quot;5044&quot; &#125;&#125; filter &#123;   mutate &#123;     split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;   &#125;   mutate &#123;     add_field =&gt; &#123;      &quot;userId&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;      &quot;visit&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;      &quot;date&quot; =&gt; &quot;%&#123;[message][3]&#125;&quot;  &#125; &#125; mutate &#123;  convert =&gt; &#123;   &quot;userId&quot; =&gt; &quot;integer&quot;   &quot;visit&quot; =&gt; &quot;string&quot;   &quot;date&quot; =&gt; &quot;string&quot; &#125; &#125; &#125;<span class="hljs-meta"> #</span><span class="bash">output &#123;</span><span class="hljs-meta"> #</span><span class="bash"> stdout &#123; codec =&gt; rubydebug &#125;</span><span class="hljs-meta"> #</span><span class="bash">&#125;</span> output &#123;   elasticsearch &#123;     hosts =&gt; [ &quot;192.168.154.135:9200&quot;] &#125; &#125;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289270574-logstash%20app.conf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.PNG" alt=""></p><h3 id="2-将logstash筛选信息上传至elasticsearch"><a href="#2-将logstash筛选信息上传至elasticsearch" class="headerlink" title="2.将logstash筛选信息上传至elasticsearch"></a>2.将logstash筛选信息上传至elasticsearch</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289256954-logstash%E4%B8%8A%E4%BC%A0%E5%88%B0elasticsearch.PNG" alt=""></p><h2 id="6-kibana"><a href="#6-kibana" class="headerlink" title="6.kibana"></a>6.kibana</h2><h3 id="1-添加Logstash索引到Kibana中："><a href="#1-添加Logstash索引到Kibana中：" class="headerlink" title="1.添加Logstash索引到Kibana中："></a>1.添加Logstash索引到Kibana中：</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608298345107-QQ%E5%9B%BE%E7%89%8720201218213210.png" alt=""></p><h3 id="2-查看discover界面"><a href="#2-查看discover界面" class="headerlink" title="2.查看discover界面"></a>2.查看discover界面</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289145798-%E6%9F%A5%E7%9C%8Bdiscove%E5%85%A8%E9%83%A8%E4%BF%A1%E6%81%AF.PNG" alt=""></p><h3 id="3-添加折线图"><a href="#3-添加折线图" class="headerlink" title="3.添加折线图"></a>3.添加折线图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289118195-%E5%88%B6%E4%BD%9C%E6%8A%98%E7%BA%BF%E5%9B%BE.PNG" alt=""></p><h3 id="4-添加各个操作的饼图"><a href="#4-添加各个操作的饼图" class="headerlink" title="4.添加各个操作的饼图"></a>4.添加各个操作的饼图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289097844-%E5%88%B6%E4%BD%9C%E6%93%8D%E4%BD%9C%E9%A5%BC%E5%9B%BE.PNG" alt=""></p><h3 id="5-添加表格数据"><a href="#5-添加表格数据" class="headerlink" title="5.添加表格数据"></a>5.添加表格数据</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289082408-%E7%AD%9B%E9%80%89%E8%A1%A8%E6%A0%BC%E4%BF%A1%E6%81%AF.PNG" alt=""></p><h3 id="6-生成最终dashboard"><a href="#6-生成最终dashboard" class="headerlink" title="6.生成最终dashboard"></a>6.生成最终dashboard</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-18/1608289056767-%E6%95%88%E6%9E%9C%E5%9B%BE.PNG" alt=""></p><h1 id="三、拓展-head插件"><a href="#三、拓展-head插件" class="headerlink" title="三、拓展-head插件"></a>三、拓展-head插件</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>ElasticSearch-head就是一款能连接ElasticSearch搜索引擎，并提供可视化的操作页面对ElasticSearch搜索引擎进行各种设置和数据检索功能的管理插件，如在head插件页面编写RESTful接口风格的请求，就可以对ElasticSearch中的数据进行增删改查、创建或者删除索引等操作。类似于使用navicat工具连接MySQL这种关系型数据库，对数据库做操作。</p><p>在登陆和访问head插件地址和ElasticSearch前需要事先在服务器上安装和配置好ElasticSearch以及head插件。安装完后，默认head插件的web端口为9100，ElasticSearch服务的端口为9200，使用浏览器访问head地址，如<a href="http://IP地址:9100/，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，如http://IP地址:9200/">http://IP地址:9100/，推荐使用Chrome浏览器，head插件对Chrome浏览器兼容更佳。进入head页面后将ElasticSearch连接输入框中填写正确的ElasticSearch服务地址，如http://IP地址:9200/</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>下载并解压</p><pre><code class="hljs crmsh">cd /usr/localwget https://npm.taobao.org/mirrors/<span class="hljs-keyword">node</span><span class="hljs-title">/v14</span>.<span class="hljs-number">4.0</span>/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64.tar.xztar -xvf <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64.tar.xzcd <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">4.0</span>-linux-x64</code></pre><p>将nodejs的命令node、npm等添加到PATH环境变量中<br><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">NODE_HOME</span>=/usr/local/node-v14.4.0-linux-x64<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$&#123;NODE_HOME&#125;/bin</code></pre><br>创建软链接<br><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/node /u</span>sr<span class="hljs-regexp">/bin/</span>node ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/npm /u</span>sr<span class="hljs-regexp">/bin/</span>npm</code></pre><br>验证安装</p><pre><code class="hljs crmsh">npm -v<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>cnpm -v</code></pre><h3 id="2-安装git并拉取ElasticSearch-head代码"><a href="#2-安装git并拉取ElasticSearch-head代码" class="headerlink" title="2.安装git并拉取ElasticSearch-head代码"></a>2.安装git并拉取ElasticSearch-head代码</h3><pre><code class="hljs awk">yum install –y git <span class="hljs-comment">#安装git 安装过则更新</span>git --version <span class="hljs-comment">#查看是否安装成功</span>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mobz/</span>elasticsearch-head.git<span class="hljs-comment">#从github上拉取elasticsearch-head代码</span>cd elasticsearch-head <span class="hljs-comment">#进入elasticsearch-head文件夹</span>npm install cnpm -g --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <span class="hljs-comment">#因为npm安装非常非常慢，所以在这里先安装淘宝源地址</span>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nodejs/</span>bin<span class="hljs-regexp">/cnpm /u</span>sr<span class="hljs-regexp">/local/</span>bin/cnpm <span class="hljs-comment">#创建cnpm软链接，不然执行下面执行命令会报错</span>cnpm install <span class="hljs-comment">#使用cnpm命令下载安装项目所需要的插件</span></code></pre><h3 id="3-配置ElasticSearch-head"><a href="#3-配置ElasticSearch-head" class="headerlink" title="3.配置ElasticSearch-head"></a>3.配置ElasticSearch-head</h3><p>修改elasticsearch.yml<br><pre><code class="hljs stylus">cd software/elasticsearch-<span class="hljs-number">7.8</span>.<span class="hljs-number">1</span>/configvim elasticsearch.yml修改以下内容：http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">//允许跨域访问</span></code></pre></p><p>修改Gruntfile.js<br><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> elasticSearch-head<span class="hljs-keyword">vim</span> Gruntfile.js在此添加 <span class="hljs-built_in">hostname</span>=<span class="hljs-string">&quot;*&quot;</span></code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/14.jpg" alt=""></p><h3 id="4-启动ElasticSearch-head"><a href="#4-启动ElasticSearch-head" class="headerlink" title="4.启动ElasticSearch-head"></a>4.启动ElasticSearch-head</h3><pre><code class="hljs routeros">grunt<span class="hljs-built_in"> server </span>&amp;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/15.jpg" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/12.jpg" alt=""></p><h2 id="3-实验中的具体应用"><a href="#3-实验中的具体应用" class="headerlink" title="3.实验中的具体应用"></a>3.实验中的具体应用</h2><p>在这次实验当中，我们用head插件可以很方便的查看到logsearch以及kibana所创建的索引。从而，我们能够清晰的判断出程序是否向elasticsearch中正确写入了数据。以便我们后边数据可视化的构建以及dashboard的构造。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/10.jpg" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://www.elastic.co/cn/">Elasticsearch官网</a></p><p><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/98871531">Elasticsearch 简介</a></p><p><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/102728604">Elastic：菜鸟上手指南</a></p><p><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://www.zhihu.com/question/338932215/answer/777380560">ELK可以干什么呢？</a></p><p><sup><a href="#fn_5" id="reffn_5">5</a></sup> <a href="https://blog.csdn.net/UbuntuTouch/article/details/99443042">Elasticsearch中的一些重要概念:cluster, node, index, document, shards及replica</a></p><p><sup><a href="#fn_6" id="reffn_6">6</a></sup> <a href="https://elasticstack.blog.csdn.net/article/details/99433732">Kibana：如何在 Linux，MacOS 及 Windows 上安装 Elastic 栈中的 Kibana</a></p><p><sup><a href="#fn_7" id="reffn_7">7</a></sup> <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1608288309&amp;ver=2774&amp;signature=u7YvT9ss9ztVI9kt8i6b4Z33LGTmymhkdrX7y1sZmWIOZS-TTHNI1bCbZ*UKRGPd1XDY54HGEKcMYuykx6oghiUaDhS9KzmJjGroDV8xGCbXHaNbNwkKm5AqLOlEUg08&amp;new=1">多语言应用性能监控系统：Elastic APM</a></p><p><sup><a href="#fn_8" id="reffn_8">8</a></sup> <a href="https://blog.csdn.net/vkingnew/article/details/92433598">Elasticsearch-Hadoop 介绍</a></p><p><sup><a href="#fn_9" id="reffn_9">9</a></sup> <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1608291430&amp;ver=2774&amp;signature=qMPp5kevq*OIUMs7tcdRTL1Rg8s9nh-yXY9a0T0cMN0IbUohSewrapky8wD0-1vcZt70cRGv2TuK4u6p5jvG*8tTRFrG6VLToMvSS2I30VeGtIcsQx8xsFZvhxMO0HGH&amp;new=1">图解ElasticSearch原理，你可收好了!</a></p><p><sup><a href="#fn_10" id="reffn_10">10</a></sup> <a href="https://www.cnblogs.com/tdp0108/p/11105848.html">ElasticSearch-head插件使用小结</a></p><p><sup><a href="#fn_11" id="reffn_11">11</a></sup> <a href="https://blog.csdn.net/huwei2003/article/details/40581143">ElasticSearch-head插件用法</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>elastic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elastic</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>kibana</tag>
      
      <tag>logstash</tag>
      
      <tag>filebeat</tag>
      
      <tag>ELK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遥感期末复习</title>
    <link href="/2020/12/16/%E6%9D%82%E8%B0%88/%E9%81%A5%E6%84%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2020/12/16/%E6%9D%82%E8%B0%88/%E9%81%A5%E6%84%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算："><a href="#计算：" class="headerlink" title="计算："></a>计算：</h1><ol><li>4邻域、8邻域标注</li><li>卷积计算</li><li>2位量化灰度化</li><li>腐蚀、膨胀、开、闭运算</li><li>混淆矩阵误差（运行误差、结果误差）精度（用户精度、生产者精度）计算</li></ol><h1 id="大题："><a href="#大题：" class="headerlink" title="大题："></a>大题：</h1><ol><li>什么情况下需要进行大气校正</li></ol><ul><li>大气透明度差而且不均一</li><li>大气中的水汽含量高</li><li>低海拔地区应该进行校正，3000米以上的地区可以不考虑</li><li>相对高差变化大的地形区域</li><li>不同时段图像的联合处理</li></ul><ol><li>直方图的性质：</li></ol><ul><li>反映了图像中的灰度分布规律</li><li>任何图像都有唯一的直方图与之对应，但不同的图像可以有相同的直方图。</li><li>如果一幅图像仅包括两个不相连通的区域，并且每个区域的直方图己知，则整幅图像的直方图是这两个区域的直方图之和。</li><li>由于遥感图像数据的随机性，在图像像素数足够多且地物类型差异不是非常悬殊的情况下，遥感图像数据服从或接近于正态分布</li></ul><ol><li>直方图均衡化改变了：</li></ol><ul><li>①图像的灰度级；</li><li>②原有灰度级中的像素比例。</li></ul><ol><li>全域线性拉伸和直方图均衡化的区别：</li></ol><ul><li>灰度拉伸只是线性的拉宽对比度，对图像的整体影响不大。</li><li>而灰度直方图均衡化却对图像的整体效果有影响，对直方图的改变也比较大</li></ul><ol><li>图像校正中辐射失真与几何畸变的原因？</li></ol><ul><li>辐射失真：<br>遥感传感器本身特性、地物光照条件、大气作用、其他</li><li>几何畸变：<br>传感器不稳定、遥感平台、地球</li></ul><ol><li>辐射校正的目的是</li></ol><ul><li>尽可能消除传感器自身、大气、太阳及某些不可避免的噪声引起的传感器的测量值与目标物的光谱反射率或光谱辐亮度等物理量之间的差异，尽可能恢复图像的本来信息，为遥感图像分割、分类、解译等后续工作提供更好质量的图像。</li></ul><ol><li>用户辐射校正的内容</li></ol><ul><li>传感器端的辐射校正-》大气校正-》地标辐射校正</li></ul><ol><li>辐射传输过程中的干扰因素</li></ol><ul><li>大气分子及气溶胶的瑞利散射和米氏散射</li><li>地区表面因素的贡献：不理想朗伯体、邻近像素的反射</li><li>地形因素的贡献：目标的高度和坡向</li><li>太阳辐射光谱的影响：普朗克定律</li></ul><ol><li>传感器接收的太阳辐射包括</li></ol><ul><li>太阳光直射到地表后地表的反射辐射</li><li>被大气散射辐射的太阳光在地表的反射辐射</li><li>大气的上行散射辐射（程辐射，也称为路径辐射）</li></ul><ol><li>在介质中的某特定点，当电磁波沿方向（θ,φ）越过距离dz时，强度I（z, θ,φ ）的变化包括：</li></ol><ul><li>由于气体及悬浮粒子吸收引起的衰减，对应电磁波的能量转换为热量，导致辐射强度损失。(-)</li><li>部分电磁波的能量被粒子散射，总能量不变，但沿（θ,φ）方向有强度损失。 (-)</li><li>由于介质热发热，能量增加到电磁波上。 (+)</li><li>由于其他方向入射波的散射，在（ θ,φ ）方向上能量增加（大气程辐射效应）。 (+)</li></ul><ol><li>大气校正方式：</li></ol><ul><li>相对大气校正</li><li>基于模型的校正</li><li>绝对大气校正</li></ul><ol><li>图像变换的目的</li></ol><ul><li>简化图像处理</li><li>构建图像特征</li><li>图像压缩</li><li>增强图像信息</li></ul><ol><li>傅里叶变换具有的<strong>对称性</strong>，频率域图像往往<strong>以图像中心为坐标原点，左上一右下、右上一左下对称</strong>。<strong>图像中心为原始图像的平均亮度值，频率为0；从图像中心向外，频率增高，图像中的高亮度表明该处频率特征明显。此外，频率域图像中明显的频率变化方向与原始图像中的地物分布方向相垂直</strong>。也就是说，如果原始图像中有多种水平分布的地物，那么频率域图像中在垂直方向的频率变化比较明显。如果原始图像中地物左下一右上分布，那么频率域图像中在左上一右下方向频率变化比较明显，反之亦然。<strong>频率域图像中暗的越多，表明原图像中面越多；亮点或亮条带越多，则表明原图像中边比较多</strong>。</li><li>K-L变换的目的</li></ol><ul><li>K-L变换的目的是去除图像中的噪声和干扰，进行数据压缩和信息增强。</li></ul><ol><li>K-L变换融合与彩色交换融合比较<br>1）K-L变换融合先对图像进行K-L正变换，然后用高空间分辨率图像替换第一主成分，再进行图像逆变换即得到融合后的图像。优点是可以对多个波段进行融合增强，空间信息较好，缺点是被替换掉的第一主成分包含最大的信息，使得全色波段的信息被最大化，弱化了色彩信息。<br>2）彩色变换融合是选择三个波段进行RGB合成，然后进行彩色变换为HSI，用高空间分辨率图像替换 I 成分，再进行彩色逆变换即得到融合后的图像。缺点是只能对三个波段进行融合增强，且容易导致色彩失真。在融合前可先对全色波段和 I 图像进行直方图匹配，对色调H和饱和度S进行必要的拉伸增强。</li><li>什么是图像滤波<br>图像滤波：基于像素的空间邻域关系使用卷积计算或频率解析的方法进行计算，以达到抑制图像噪声、增加图像对比度、增强图像边缘、提取图像特征的图像处理方法</li><li>均值滤波的特点？</li></ol><ul><li>优点：算法简单、计算速度快</li><li>缺点：造成图像模糊、削弱了边缘和细节信息</li></ul><ol><li>图像分割的目的</li></ol><ul><li>是将一幅图像分为几个区域，这几个区域之间具有不同的属性，而同一区域中各像素具有某些相同的性质。</li></ul><ol><li>图像分割的原则：</li></ol><ul><li>依据像素灰度值的不连续性进行分割   </li><li>依据同一区域内部像素的灰度值具有相似性进行分割 </li></ul><ol><li>如何选择最佳阈值：</li></ol><ul><li>基于直方图的谷</li><li>使用OTSU方法（最优阈值）</li><li>人工确定</li></ul><ol><li>区域生长过程</li></ol><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608115268036-image.png" alt=""></p><ol><li>分水岭算法的原理<br>假定图像中目标的灰度值低，而背景的灰度值高。</li><li>图像分类的流程</li></ol><ul><li>分类准备工作-》图像判读-》特征选取-》图像分类-》分类后处理-》分类结果评价-》结果输出</li></ul><ol><li>在图像分类中，虽然可以笼统地说特征变量多、维数高，有利于分类精度的提高，但是，因为地表覆盖的可分离性不同，太多的变量和太高的维数，不仅增加了分类算法的复杂性与计算量，而且变量之间往往有较高的相关性，在分类判决过程中会造成更多的混淆与不确定性，反而会降低分类精度。所以在进行分类之前，既要考虑增加新的特征，又要从己经形成的多维特征变量中进行正确选择，选出一些有良好分类效果的特征变量，才能有效地提高分类精度。</li><li>选择训练区时应注意 </li></ol><ul><li>（1）训练区必须具有典型性和代表性</li><li>（2）使用的图件时间和空间上要保持一致性 </li><li>（3）训练区的选取方式有按坐标输入式和人机对话式两类</li><li>（4）训练样本的数目 （至少需要K+1个样本，K是多光谱空间的维数或经过选择的特征数）</li></ul><ol><li>Kappa系数值的意义</li></ol><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608115814819-image.png" alt=""></p><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><ol><li>遥感特点：<strong>大面积同步观测；时效性；数据的综合性和可比性；经济性；局限性；多波段性；多时相性。</strong></li><li>电磁波常见波段：<strong>可见光（0.4-0.7）、蓝（0.4-0.5）、绿（0.5-0.6）、红（0.6-0.7）、远红外（8-15）【微米】</strong></li><li>遥感工作的一个重要内容是通过<strong>选择波段或建立波段组合将特定的地物与其他地物分离开来</strong>。</li><li><strong>热红外</strong>能够用来<strong>测量表面温度</strong>，而且能在夜间获取数据。<strong>微波数据</strong>（有源和无源）与某些<strong>水文变量</strong>。</li><li>谱分辨力：<strong>能谱、波谱、光谱</strong>。</li><li>波长范围越<strong>窄</strong>，波段数越<strong>多</strong>，谱分辨力越<strong>高</strong>。</li><li>时间分辨力：重复周期（卫星不经过侧摆再次拍摄同一地点所经过的时间）、重访周期。</li><li>量化<strong>级数越大</strong>，量化后的图像越接近于“真实”，但图像占用的<strong>存储空间也越大</strong>   </li><li>量化影响着图像细节的可分辨程度，量化位数越高，细节的可分辨程度越高；保持图像大小不变，降低量化位数减少了灰度级会导致假的轮廓。</li><li>元数据是<strong>关于数据的数据；重要的信息源；元数据与图像数据同时分发，或者嵌入到图像文件中，或者是单独的文件。</strong> </li><li>多源图像：<strong>多波段图像、多时相图像、多极化图像</strong>。</li><li>图像的确定性表示：<strong>矩阵表示、向量表示</strong>。</li><li>反映像素值变化信息的统计参数：<strong>方差、变差、反差、对比度。</strong></li><li><strong>协方差和相关系数</strong>是两个基本的统计量，表明了两个波段图像之间的关系。</li><li>传统的纹理特征描述方法则主要包括<strong>统计方法（灰度共生矩阵）和结构方法</strong>两类。</li><li>GLCM是性能很好的方法，不但适用于纹理识别，而且用于图像分割时的效果也很好。</li><li>特征提取与特征选择：<strong>光谱特征、几何特征、结构特征。</strong></li><li>图像彩色合成增加了图像的可视化程度；</li><li>图像拉伸突出了地物之间的差异，进一步增强显示感兴趣的地物信息。</li><li>常用的颜色空间：<strong>RGB、HSI、LAB和CMYK。</strong></li><li>最常用的色彩模型是<strong>RGB、HSI模型</strong>。</li><li>彩色合成包括<strong>伪彩色合成（密度分割）、真彩色合成、假彩色合成和模拟真彩色合成</strong>四种方法。 </li><li>假彩色合成用于<strong>突出不同的地物信息</strong>，<strong>植被为红色、水体为黑色或蓝色、城镇为深色</strong>。</li><li>在遥感图像处理软件中，常用<strong>2％</strong>拉伸方法来增强图像的显示效果。</li><li>直方图均衡化对于<strong>背景和前景都太亮或者太暗的图像</strong>非常有用。</li><li>直方图均衡化改变了：<strong>①图像的灰度级；②原有灰度级中的像素比例。</strong></li><li>现实的遥感图像特点：存在畸变，无法不歪曲地反映地物的<strong>辐射能量分布</strong>和<strong>几何特征</strong>。</li><li>图像校正包括两部分内容：<strong>图像像素位置的校正</strong>和<strong>图像像素值的校正</strong>。</li><li>辐射校正包括<strong>系统辐射校正</strong>和<strong>用户实施的辐射校正</strong>。</li><li>由于空气分子和悬浮颗粒的散射，可见光在大气中传输时会被削弱。传感器接收的由大气散射产生的电磁波称为<strong>程辐射</strong>。</li><li>影响大气透射的物质包括以下两种。①大气分子：二氧化碳、臭氧、水蒸气等气体分子。这些成分导致的散射称为<strong>瑞利散射</strong>。②气溶胶：雾霭、水滴、烟尘等粒径较大的悬浮颗粒。这些成分导致的散射称为<strong>米氏散射</strong>。</li><li>在进行辐射校正的各因素中，首先要考虑<strong>大气</strong>的影响。</li><li><strong>散射作用</strong>所增加的<strong>亮度</strong>值不含有任何地面信息，但却降低了<strong>图像的反差</strong>，反差降低则降低了<strong>图像的分辨率</strong>，因此必须进行校正。</li><li>低空间分辨率图像由于所覆盖的<strong>空间范围大</strong>，散射在图像中的分布是不均匀的，图像中各像素的大气散射程度不同，往往需要进行<strong>分区校正</strong>。</li><li>地面辐射校正包括：<strong>太阳辐射校正</strong>和<strong>地形校正</strong>。</li><li>K-T变换的前3个分量：<strong>亮度、绿度、湿度</strong></li><li>图像融合的目的是用来增强图像的<strong>空间分辨率</strong>或<strong>光谱分辨率</strong>。</li><li>遥感图像中常见的噪声：随机噪声（高斯噪声、脉冲噪声）和周期噪声</li><li>卷积的关键点：<strong>邻域定义、邻域大小、卷积核价值</strong></li><li>图像平滑目的：<strong>抑制噪声、改善图像质量</strong>、<strong>突出图像主体</strong>、<strong>增强面的信息</strong></li><li>对于<strong>椒盐噪声</strong>，<strong>中值滤波</strong>效果比均值滤波效果好。</li><li>对于<strong>高斯噪声</strong>，<strong>均值滤波</strong>效果比均值滤波效果好。</li><li>原始图像减去低通图像：<strong>梯度图像=原始图像-均值滤波的图像</strong></li><li>在Prewitt和模板中，<strong>h1突出水平方向的地物</strong>，<strong>h2突出垂直方向的地物</strong>。在图像分割中，经常使用<strong>sobel模板</strong>。</li><li>卷积运算常用模板：<strong>检测垂直线、检测水平线、检测对角线</strong></li><li>使用波段运算产生锐化图像基本规则：<strong>锐化图像=原图像（或平滑后图像(如果有噪声)）+/-(由梯度的计算方式决定)梯度图像</strong></li><li>滤波的关键是<strong>正确选择了滤波器并且确定了合适的通或阻的频率</strong>。</li><li>分水岭算法对于分布在背景中的<strong>点状地物</strong>，总能得到良好的分割效果。</li><li>遥感图像和普通图像的<strong>相同</strong>：都是图像;<strong>不同</strong>：包含的信息不同（空间位置，几何属性，严格的坐标）。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="#">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期末</tag>
      
      <tag>遥感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos安装mysql</title>
    <link href="/2020/12/16/Linux/centos%E5%AE%89%E8%A3%85mysql/"/>
    <url>/2020/12/16/Linux/centos%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="1、先检查系统是否装有mysql"><a href="#1、先检查系统是否装有mysql" class="headerlink" title="1、先检查系统是否装有mysql"></a>1、先检查系统是否装有mysql</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> rpm -qa | grep mysql</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608085441323-1.PNG" alt=""></p><p>这里返回空值，说明没有安装</p><h2 id="2、下载mysql的repo源"><a href="#2、下载mysql的repo源" class="headerlink" title="2、下载mysql的repo源"></a>2、下载mysql的repo源</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608085441323-1.PNG" alt=""></p><h2 id="3、安装mysql-community-release-el7-5-noarch-rpm包"><a href="#3、安装mysql-community-release-el7-5-noarch-rpm包" class="headerlink" title="3、安装mysql-community-release-el7-5.noarch.rpm包"></a>3、安装mysql-community-release-el7-5.noarch.rpm包</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090458325-3.PNG" alt=""></p><h2 id="4、开始安装mysql"><a href="#4、开始安装mysql" class="headerlink" title="4、开始安装mysql"></a>4、开始安装mysql</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> sudo yum install mysql-server</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090337159-2.PNG" alt=""><br>缺少组件，解决办法：<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install glibc.i686</span><span class="hljs-meta">#</span><span class="bash"> yum list libstdc++*</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090545000-4.PNG" alt=""></p><h2 id="5、重置密码"><a href="#5、重置密码" class="headerlink" title="5、重置密码"></a>5、重置密码</h2><p>重置密码前，首先无密码登录<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mysql -u root</span></code></pre><br>登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090582470-5.PNG" alt=""><br>原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> sudo chown -R openscanner:openscanner /var/lib/mysql</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090614886-6.PNG" alt=""><br>如果报chown: 无效的用户: “openscanner:openscanner”错误，更换命令<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> chown root /var/lib/mysql/</span></code></pre><br>然后，重启服务：<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> service mysqld restart</span></code></pre><br>接下来登录：<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> mysql -u root -p</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090672590-7.PNG" alt=""><br><pre><code class="hljs shell">mysql &gt; use mysql;mysql &gt; update user set password=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;mysql &gt; exit;</code></pre><br>重启mysql服务后才生效<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> service mysqld restart</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608090733302-8.PNG" alt=""></p><h2 id="6、查询数据库编码格式，确保是-UTF-8"><a href="#6、查询数据库编码格式，确保是-UTF-8" class="headerlink" title="6、查询数据库编码格式，确保是 UTF-8"></a>6、查询数据库编码格式，确保是 UTF-8</h2><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show variables like <span class="hljs-string">&quot;%char%&quot;</span>;</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-12-16/1608094836881-1.PNG" alt=""></p><p>需要修改编码格式为UTF-8，</p><h2 id="7、导入数据库sql"><a href="#7、导入数据库sql" class="headerlink" title="7、导入数据库sql"></a>7、导入数据库sql</h2><p>请确保sql文件为utf8编码<br>进入mysql命令行后 输入<br><pre><code class="hljs shell">set names utf8</code></pre><br>（测试数据库数据）<br>再进入数据库<br><pre><code class="hljs shell">use test;</code></pre><br>在导入sql脚本<br><pre><code class="hljs shell">source test.sql;</code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[NULL]<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>linux</tag>
      
      <tag>centos</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 7 参营总结与感想</title>
    <link href="/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%20ECS%207%E5%A4%A9%E5%AE%9E%E8%B7%B5%E8%AE%AD%E7%BB%83%E8%90%A5%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    <url>/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%20ECS%207%E5%A4%A9%E5%AE%9E%E8%B7%B5%E8%AE%AD%E7%BB%83%E8%90%A5%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127203249.png" alt=""></p><h1 id="一、课程知识点概览"><a href="#一、课程知识点概览" class="headerlink" title="一、课程知识点概览"></a>一、课程知识点概览</h1><p><a href="https://blog.baixf.tk/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E5%9F%BA%E4%BA%8EECS%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1/">Class 1 基于ECS搭建FTP服务</a></p><p><a href="https://blog.baixf.tk/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E5%9F%BA%E4%BA%8EECS%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADocker%E7%8E%AF%E5%A2%83/">Class 2 快速搭建Docker环境</a></p><p><a href="https://blog.baixf.tk/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20SLB%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E8%B7%B5/">Class 3 ECS+SLB 负载均衡实践</a></p><p><a href="https://blog.baixf.tk/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E4%BD%BF%E7%94%A8PolarDB%E5%92%8CECS%E6%90%AD%E5%BB%BA%E9%97%A8%E6%88%B7%E7%BD%91%E7%AB%99/">Class 4 使用ECS和PolarDB搭建门户网站</a></p><p><a href="https://blog.baixf.tk/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BALeanote%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/">Class 5 搭建个人Leanote云笔记本</a></p><p><a href="https://blog.baixf.tk/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E2%80%9C%E9%92%89%E9%92%89%E2%80%9D/">Class 6 案例分享——钉钉</a></p><p><a href="https://blog.baixf.tk/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3%20/">Class 7 参营总结与感想</a></p><h1 id="二、参营感想"><a href="#二、参营感想" class="headerlink" title="二、参营感想"></a>二、参营感想</h1><p>　　七天转瞬即逝，有不小的收获。“7天，每天30分钟，云计算技能全方位提升，为升学就业加分！但是我们不能只是一味的粘贴复制。不仅要知其然，更要知其所以然。每一个命令，我都会反复查阅，查阅其其他参数的用途，不断丰富自己的linux水平与视野。<br>　　关于笔记，自己在整理上传到开发者社区的同时，也上传到了自己的博客，顺便“水了”自己的博客内容。感觉十分有成就感。<br>　　总而言之，这次7天训练营过的还挺有意义的，收获颇丰，个人比较满意。以后也会多多关注这种活动，在课余可以提升一下自我。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>进阶班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 7 参营总结与感想</title>
    <link href="/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%20%E8%A7%86%E8%A7%89AI%E8%AE%AD%E7%BB%83%E8%90%A5%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    <url>/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%20%E8%A7%86%E8%A7%89AI%E8%AE%AD%E7%BB%83%E8%90%A5%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201203180331.jpg" alt=""></p><h1 id="一、课程知识点概览"><a href="#一、课程知识点概览" class="headerlink" title="一、课程知识点概览"></a>一、课程知识点概览</h1><p><a href="https://blog.baixf.tk/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E8%BE%BE%E6%91%A9%E9%99%A2%E8%A7%86%E8%A7%89AI%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E6%8E%A2%E7%B4%A2/">Class 1 达摩院视觉AI技术应用探索</a></p><p><a href="https://blog.baixf.tk/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/">Class 2 身份证识别系统搭建</a></p><p><a href="https://blog.baixf.tk/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%BA%E8%84%B8%E3%80%81%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB%EF%BC%89/">Class 3 电子相册搭建（人脸、表情识别）</a></p><p><a href="https://blog.baixf.tk/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E8%BD%A6%E8%BE%86%E4%BF%9D%E9%99%A9%E5%BA%94%E7%94%A8/">Class 4 车辆保险应用</a></p><p><a href="https://blog.baixf.tk/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E8%AF%86%E5%88%AB/">Class 5 垃圾分类识别</a></p><p><a href="https://blog.baixf.tk/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%EF%BC%88%E5%9B%BE%E7%89%87%E9%89%B4%E9%BB%84%EF%BC%89/">Class 6 图片内容安全（图片鉴黄）</a></p><p><a href="https://blog.baixf.tk/2020/12/03/%E9%98%BF%E9%87%8C%E4%BA%91/Class%207%20%E8%A7%86%E8%A7%89AI%E8%AE%AD%E7%BB%83%E8%90%A5%E5%8F%82%E8%90%A5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%84%9F%E6%83%B3/">Class 7 参营总结与感想</a></p><h1 id="二、参营感想"><a href="#二、参营感想" class="headerlink" title="二、参营感想"></a>二、参营感想</h1><p>   五天时间完成身份证识别、人脸+表情识别、车辆保险等云上项目，快速入门视觉AI，AI第一课，是阿里云陪我完成的。<br>　　关于笔记，自己在整理上传到开发者社区的同时，也上传到了自己的博客，顺便“水了”自己的博客内容。感觉十分有成就感。<br>　　总而言之，这次7天训练营过的还挺有意义的，收获颇丰，个人比较满意。以后也会多多关注这种活动，在课余时间提升一下自我。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>oss存储</tag>
      
      <tag>API</tag>
      
      <tag>车辆部件识别</tag>
      
      <tag>车辆损伤识别</tag>
      
      <tag>车险图片分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 6 图片内容安全（图片鉴黄）</title>
    <link href="/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%EF%BC%88%E5%9B%BE%E7%89%87%E9%89%B4%E9%BB%84%EF%BC%89/"/>
    <url>/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%EF%BC%88%E5%9B%BE%E7%89%87%E9%89%B4%E9%BB%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>ScanImage可以检测图片中的违规内容，实时返回检测结果。</p><h2 id="支持检测的场景"><a href="#支持检测的场景" class="headerlink" title="支持检测的场景"></a>支持检测的场景</h2><p>图片智能鉴黄、图片涉恐涉政识别、图片风险人物识别、图片垃圾广告识别、图片不良场景识别、图片logo识别。</p><p>在图片审核中，对应关系如下：</p><ul><li>porn:图片智能鉴黄：适用于图片涉及色情、低俗内容检测。</li></ul><p>normal（正常图片）、sexy（性感图片）、porn（色情图片）</p><ul><li><p>terrorism:图片涉恐涉政识别：适用于图片涉及政治敏感、暴力、武器、恐怖、血腥、爆炸等内容识别。</p></li><li><p>图片风险人物识别：适用于图片涉及敏感政治人物、明星的识别。</p></li></ul><p>normal（正常图片）、bloody（血腥）、explosion（爆炸烟光）、outfit（特殊装束）、logo（特殊标识）、weapon（武器）、politics（涉政）、violence（打斗）、crowd（聚众）、parade（游行）、carcrash（车祸现场）、flag（旗帜）、location（地标）、others（其他）</p><ul><li>ad:图片垃圾广告识别：适用于图片中含有广告信息的识别，特別是针对于类似牛皮癣的文字广告有较好的识别效果。</li></ul><p>normal（正常图片）、politics（文字含涉政内容）、porn（文字含涉黄内容）、abuse（文字含辱骂内容）、terrorism（文字含涉恐内容）、contraband（文字含违禁内容）、spam（文字含其他垃圾内容）、npx（牛皮癣广告）、qrcode（包含二维码）、programCode（包含小程序码）、ad（其他广告）</p><ul><li>live:图片不良场景识别：适用于图片中涉及毒品、赌博、画中画等内容的识别。</li></ul><p>normal（正常图片）、meaningless（无意义图片）、PIP（画中画）、smoking（吸烟）、drivelive（车内直播）</p><ul><li>logo:图片logo识别：适用于图片中含有台标、水印、商标等内容的检测。</li></ul><p>normal（正常图片）、TV（带有管控logo的图片）、trademark（商标）</p><h2 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h2><ul><li>图片格式：PNG、JPG、JPEG、BMP、GIF、WEBP。</li><li>图片大小：图片大小不超过10MB。如果您有大图需求， 请提工单申请。</li><li>图片像素：建议大于256×256像素，像素过低可能会影响识别效果。</li><li>URL地址中不能包含中文字符。</li></ul><h2 id="检测说明"><a href="#检测说明" class="headerlink" title="检测说明"></a>检测说明</h2><p>最长检测时间是6秒，如果在该时间范围内没有完成检测，系统会返回超时错误码。<br>图片下载时间限制为3秒，如果下载时间超过3秒，则会返回下载超时。<br>图片检测接口响应时间依赖图片的下载时间。请确保被检测图片所在的存储服务稳定可靠，建议您使用阿里云OSS存储或者CDN缓存。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">from</span> aliyunsdkcore.client <span class="hljs-keyword">import</span> AcsClient<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ClientException<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ServerException<span class="hljs-keyword">from</span> aliyunsdkimageaudit.request.v20191230.IdentifyPornRequest <span class="hljs-keyword">import</span> IdentifyPornRequestclient = AcsClient(<span class="hljs-string">&#x27;&lt;accessKeyId&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;accessSecret&gt;&#x27;</span>, <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>)request = IdentifyPornRequest()request.set_accept_format(<span class="hljs-string">&#x27;json&#x27;</span>)request.set_Scenes([<span class="hljs-string">&quot;porn&quot;</span>])request.set_Tasks([  &#123;    <span class="hljs-string">&quot;ImageURL&quot;</span>: <span class="hljs-string">&quot;http://viapi-test.oss-cn-shanghai.aliyuncs.com/sanjiye-meizi/%E5%9B%BE%E7%89%87%E6%99%BA%E8%83%BD%E9%89%B4%E9%BB%84.jpg&quot;</span>  &#125;])response = client.do_action_with_exception(request)<span class="hljs-comment"># python2:  print(response) </span>print(<span class="hljs-built_in">str</span>(response, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))</code></pre><h2 id="在线调试"><a href="#在线调试" class="headerlink" title="在线调试"></a>在线调试</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606731135088-QQ%E6%88%AA%E5%9B%BE20201130181139.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606731135084-QQ%E6%88%AA%E5%9B%BE20201130181117.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606731135096-QQ%E6%88%AA%E5%9B%BE20201130181157.png" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>oss存储</tag>
      
      <tag>图片安全内容</tag>
      
      <tag>图片识别</tag>
      
      <tag>图片鉴黄</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 6-案例分析“钉钉”</title>
    <link href="/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E2%80%9C%E9%92%89%E9%92%89%E2%80%9D/"/>
    <url>/2020/12/02/%E9%98%BF%E9%87%8C%E4%BA%91/Class%206%20%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E2%80%9C%E9%92%89%E9%92%89%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="总结感受"><a href="#总结感受" class="headerlink" title="总结感受"></a>总结感受</h1><h2 id="钉钉背后的技术架构，与阿里云服务之间的关联"><a href="#钉钉背后的技术架构，与阿里云服务之间的关联" class="headerlink" title="钉钉背后的技术架构，与阿里云服务之间的关联"></a>钉钉背后的技术架构，与阿里云服务之间的关联</h2><p>使用了热门的平台技术SaaS（平台即服务，能够将自己积累起来的各种经验用在自己的企业上，帮助企业解决问题。）<br>很多设计都是面向云去设计，可以随着云的建设更快的部署，使用，这是很大的优势，自适应程度高<br>使用了阿里云ECS，OSS，OTS，OpenSearch技术，很多数据都部署在阿里云上，数据存储在RDS上，数据就与阿里云强相关。阿里云服务对这些数据的可靠性，安全性，可用性，提供了很大保障。</p><h2 id="云计算为钉钉解决的问题或者带来的价值"><a href="#云计算为钉钉解决的问题或者带来的价值" class="headerlink" title="云计算为钉钉解决的问题或者带来的价值"></a>云计算为钉钉解决的问题或者带来的价值</h2><p>钉钉上深受用户喜欢的应用—日志，员工可以通过日志发日报，周报，月报。模板也可以根据用户需求定制化。阿里云再次为钉钉的数据安全，架构的稳定性，以及未来的伸缩性提供保障</p><h2 id="钉钉如何借助阿里云保障企业信息安全"><a href="#钉钉如何借助阿里云保障企业信息安全" class="headerlink" title="钉钉如何借助阿里云保障企业信息安全"></a>钉钉如何借助阿里云保障企业信息安全</h2><ul><li>安全是钉钉的重要设计和保障</li><li>信息的存储和传输，都采用最高的加密程序</li><li>依托阿里云基础设施安全，使企业信息安全更加能得到保障（防黑客攻击，防DDoS），保障服务和网站的平稳运行，让用户省时省心。</li></ul><h2 id="术语查询及解释"><a href="#术语查询及解释" class="headerlink" title="术语查询及解释"></a>术语查询及解释</h2><p> 首先在钉钉案例的视频中，提到了一些名词，如SaaS，OSS，OTS…这些都是什么？我抱着这样的疑问查询了相关资料并进行了记录。只有知道了这些是什么,才能够真正的去理解和把握整个视频的内容。</p><h3 id="什么是SaaS"><a href="#什么是SaaS" class="headerlink" title="什么是SaaS"></a>什么是SaaS</h3><p> SaaS即Software-as-a-Service（软件即服务）是随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。传统模式下，厂商通过License将软件产品部署到企业内部多个客户终端实现交付。SaaS定义了一种新的交付方式，也使得软件进一步回归服务本质。企业部署信息化软件的本质是为了自身的运营管理服务，软件的表象是一种业务流程的信息化，本质还是第一种服务模式，SaaS改变了传统软件服务的提供方式，减少本地部署所需的大量前期投入，进一步突出信息化软件的服务属性，或成为未来信息化软件市场的主流交付模式。</p><h3 id="什么是OSS"><a href="#什么是OSS" class="headerlink" title="什么是OSS"></a>什么是OSS</h3><p>阿里云对象存储服务，简称 OSS，是一种面向海量数据规模的分布式存储服务，具有稳定、可靠、安全、低成本的特点，能够提供十一个九的数据可靠性。OSS提供与平台无关的RESTful API接口，您可以在互联网任何位置存储和访问。OSS的容量和处理能力弹性扩展，并提供多种存储类型供您选择，全面优化存储成本。</p><h3 id="什么是OTS"><a href="#什么是OTS" class="headerlink" title="什么是OTS"></a>什么是OTS</h3><p> OTS 是Open Table Service的简称，现在已更名为表格存储Table Store，官网对它的解释为：OTS是构建在阿里云飞天分布式系统之上的 NoSQL 数据库服务，提供海量结构化数据的存储和实时访问。OTS 以实例和表的形式组织数据，通过数据分片和负载均衡技术，达到规模的无缝扩展。OTS 向应用程序屏蔽底层硬件平台的故障和错误，能自动从各类错误中快速恢复，提供非常高的服务可用性。OTS 管理的数据全部存储在 SSD 中并具有多个备份，提供了快速的访问性能和极高的数据可靠性。用户在使用 OTS 服务时，只需要按照预留和使用的资源进行付费，无需关心数据库的软硬件升级维护、集群缩容扩容等复杂问题。</p><h3 id="什么是Open-Search"><a href="#什么是Open-Search" class="headerlink" title="什么是Open Search"></a>什么是Open Search</h3><p> 开放搜索（OpenSearch）是阿里巴巴自主研发的大规模分布式搜索引擎平台，其核心引擎HA3（问天3）系统为包括淘宝、天猫在内的阿里集团核心业务提供搜索服务支持。通过集成智能查询语义理解、机器学习排序算法等能力，旨在为企业提供高搜索质量的一站式内容智能搜索服务。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上云将成为市场主流模式，教育，制造、金融、零售等行业都将会完成传统形式的转变。在这个互联网时代，任何一个行业都离不开与互联网的交互。有了交互，就会产生数据，数据的清洗，分析，存储，可视化。大数据+云将展现它的威力。云上处理，云上分析，云上共享更加迎合互联网快速迭代的理念。未来云服务将会无处不在。视频中多次提到，阿里云是一个云服务的提供商，阿里云可以为开发者提供安全可靠的基础设施，从而能够让我们能够将更多的精力和时间来考虑和打磨我们自己开发的产品和项目，而不用去操心底层的设施问题。也就是能够为我们更高效的开发提供了基础服务。</p><p> 至于钉钉这款软件，我个人是参加这个训练营才用上了钉钉，钉钉有几项我用上的功能感觉还是挺方便的，比如已读功能，可以快速的了解到谁已经看过通知了，谁还没看通知，从而去及时联系以免错过了某项任务。可以共同编辑群文件，做了修改后可以选择通知其他人去查看。自己遇到的一个比较麻烦的问题就是，不添加好友就不能成功发送消息，一旦想主动的联系某个人却又没有添加好友，那么会出现联系不上的情况。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>进阶班</tag>
      
      <tag>钉钉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 5 垃圾分类识别</title>
    <link href="/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E8%AF%86%E5%88%AB/"/>
    <url>/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>ClassifyingRubbish可以对图片中的物品垃圾进行分类，并给出具体的物品名称。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>请确保您已开通图像识别服务，若未开通服务请立即开通。</p><p>图片限制</p><ul><li>图片类型：JPEG、JPG、PNG。</li><li>图片大小：图片小于等于3M。</li><li>图片分辨率：不限制图片分辨率，但图片分辨率太高可能会导致API识别超时，超时时间为5秒。<br>URL地址中不能包含中文字符。</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在OpenAPI Explorer中直接运行该接口。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">from</span> aliyunsdkcore.client <span class="hljs-keyword">import</span> AcsClient<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ClientException<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ServerException<span class="hljs-keyword">from</span> aliyunsdkimagerecog.request.v20190930.ClassifyingRubbishRequest <span class="hljs-keyword">import</span> ClassifyingRubbishRequestclient = AcsClient(<span class="hljs-string">&#x27;&lt;accessKeyId&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;accessSecret&gt;&#x27;</span>, <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>)request = ClassifyingRubbishRequest()request.set_accept_format(<span class="hljs-string">&#x27;json&#x27;</span>)request.set_ImageURL(<span class="hljs-string">&quot;http://viapi-test.oss-cn-shanghai.aliyuncs.com/demo-center/imagerecog/ClassifyingRubbish2.jpg&quot;</span>)response = client.do_action_with_exception(request)<span class="hljs-comment"># python2:  print(response) </span>print(<span class="hljs-built_in">str</span>(response, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))</code></pre><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>ImageURL    String    图片URL地址</p><h2 id="常见垃圾输出列举值如下："><a href="#常见垃圾输出列举值如下：" class="headerlink" title="常见垃圾输出列举值如下："></a>常见垃圾输出列举值如下：</h2><p>1.可回收物</p><p>废纸张：纸板箱、报纸、废弃书本、快递纸袋、打印纸、信封、广告单、纸塑铝复合包装（利乐包）。</p><p>废塑料：食品与日用品塑料瓶罐及瓶盖（饮料瓶、奶瓶、洗发水瓶、乳液罐）、食用油桶、塑料碗（盆）、塑料盒子（食品保鲜盒、收纳盒）、塑料玩具（塑料积木、塑料模型）、塑料衣架、施工安全帽、PE塑料、pvc、亚克力板、塑料卡片、密胺餐具、kt板、泡沫（泡沫塑料、水果网套）。</p><p>废玻璃制品：食品及日用品玻璃瓶罐（调料瓶、酒瓶、化妆品瓶）、玻璃杯、窗玻璃、玻璃制品（放大镜、玻璃摆件）、碎玻璃。</p><p>废金属：金属瓶罐（易拉罐、食品罐/桶）、金属厨具（菜刀、锅）、金属工具（刀片、指甲剪、螺丝刀）、金属制品（铁钉、铁皮、铝箔）。</p><p>废织物：旧衣服、床单、枕头、棉被、皮鞋、毛绒玩具（布偶）、棉袄、包、皮带、丝绸制品。</p><p>其它：电路板（主板、内存条）、充电宝、电线、插头、木制品（积木、砧板）。</p><p>2.有害垃圾</p><p>废镍镉电池和废氧化汞电池：充电电池、镉镍电池、铅酸电池、蓄电池、纽扣电池。</p><p>废荧光灯管：荧光（日光）灯管、卤素灯。</p><p>废药品及其包装物：过期药物、药物胶囊、药片、药品内包装。</p><p>废油漆和溶剂及其包装物：废油漆桶、染发剂壳、过期的指甲油、洗甲水。</p><p>废矿物油及其包装物。</p><p>废含汞温度计、废含汞血压计：水银血压计、水银体温计、水银温度计。</p><p>废杀虫剂及其包装：老鼠药（毒鼠强）、杀虫喷雾罐。</p><p>废胶片及废相纸：x光片等感光胶片、相片底片。</p><p>3.厨余垃圾（湿垃圾）</p><p>食材废料：谷物及其加工食品（米、米饭、面、面包、豆类）、肉蛋及其加工食品（鸡、鸭、猪、牛、羊肉、蛋、动物内脏、腊肉、午餐肉、蛋壳）、水产及其加工食品（鱼、鱼鳞、虾、虾壳、鱿鱼）、蔬菜（绿叶菜、根茎蔬菜、菌菇）、调料、酱料。</p><p>剩菜剩饭：火锅汤底（沥干后的固体废弃物）、鱼骨、碎骨、茶叶渣、咖啡渣。</p><p>过期食品：糕饼、糖果、风干食品（肉干、红枣、中药材）、粉末类食品（冲泡饮料、面粉）、宠物饲料。</p><p>瓜皮果核：水果果肉（椰子肉）、水果果皮（西瓜皮、桔子皮、苹果皮）、水果茎枝（葡萄枝）、果实（西瓜籽）。</p><p>花卉植物：家养绿植、花卉、花瓣、枝叶。</p><p>中药药渣。</p><p>4.其他垃圾（干垃圾）</p><p>餐巾纸、卫生间用纸、尿不湿、猫砂、狗尿垫、污损纸张、烟蒂、干燥剂、污损塑料、尼龙制品、编织袋、防碎气泡膜、大骨头、硬贝壳、硬果壳（椰子壳、榴莲壳、核桃壳、玉米衣、甘蔗皮）、硬果实（榴莲核、菠萝蜜核）、毛发、灰土、炉渣、橡皮泥、太空沙、带胶制品（胶水、胶带）、花盆、毛巾、一次性餐具、镜子、陶瓷制品、竹制品（竹篮、竹筷、牙签）、成分复杂的制品（伞、笔、眼镜、打火机）。</p><h2 id="在线调试实例"><a href="#在线调试实例" class="headerlink" title="在线调试实例"></a>在线调试实例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606728735335-%E6%8D%95%E8%8E%B7.PNG" alt=""></p><p>至于下面这个药品。这个嘛？算法看来还待优化~</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606728735342-%E6%8D%95%E8%8E%B700.PNG" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>oss存储</tag>
      
      <tag>垃圾分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 5 搭建个人Leanote云笔记本</title>
    <link href="/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BALeanote%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    <url>/2020/12/01/%E9%98%BF%E9%87%8C%E4%BA%91/Class%205%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BALeanote%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="一、创建资源"><a href="#一、创建资源" class="headerlink" title="一、创建资源"></a>一、创建资源</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127193126.png" alt=""></p><h1 id="二、连接ECS服务器"><a href="#二、连接ECS服务器" class="headerlink" title="二、连接ECS服务器"></a>二、连接ECS服务器</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127193316.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127193348.png" alt=""></p><h1 id="三、MongoDB简介"><a href="#三、MongoDB简介" class="headerlink" title="三、MongoDB简介"></a>三、MongoDB简介</h1><p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本。</p><p>MongoDB是专为可扩展性，高性能和高可用性而设计的数据库。它可以从单服务器部署扩展到大型、复杂的多数据中心架构。利用内存计算的优势，MongoDB能够提供高性能的数据读写操作。 MongoDB的本地复制和自动故障转移功能使您的应用程序具有企业级的可靠性和操作灵活性。</p><h1 id="四、安装MongoDB"><a href="#四、安装MongoDB" class="headerlink" title="四、安装MongoDB"></a>四、安装MongoDB</h1><p>Leanote云笔记使用MongoDB作为后端数据库，安装MongoDB数据库。</p><h2 id="1-执行以下命令，安装MongoDB。"><a href="#1-执行以下命令，安装MongoDB。" class="headerlink" title="1.  执行以下命令，安装MongoDB。"></a>1.  执行以下命令，安装MongoDB。</h2><pre><code class="hljs shell">yum -y install mongodb mongodb-server.x86_64 mariadb-devel.i686</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127193711.png" alt=""></p><h2 id="2-执行以下命令，启动MongoDB服务。"><a href="#2-执行以下命令，启动MongoDB服务。" class="headerlink" title="2.  执行以下命令，启动MongoDB服务。"></a>2.  执行以下命令，启动MongoDB服务。</h2><pre><code class="hljs shell">systemctl start mongod</code></pre><p>启动遇到如图所示问题：<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127194402.png" alt=""></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><pre><code class="hljs markdown">1.配置MongoDB的yum源复制代码复制代码vim /etc/yum.repos.d/mongodb-org-3.4.repo<span class="hljs-section">#添加以下内容：</span>[mongodb-org-3.4]  name=MongoDB Repository  baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86<span class="hljs-emphasis">_64/  </span><span class="hljs-emphasis">gpgcheck=1  </span><span class="hljs-emphasis">enabled=1  </span><span class="hljs-emphasis">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><span class="hljs-emphasis">#这里可以修改 gpgcheck=0, 省去gpg验证</span><span class="hljs-emphasis">[root@localhost ~]# yum makecache      </span><span class="hljs-emphasis">复制代码</span><span class="hljs-emphasis">复制代码</span><span class="hljs-emphasis">2.安装MongoDB</span><span class="hljs-emphasis">安装命令：</span><span class="hljs-emphasis">yum -y install mongodb-org</span></code></pre><p>如图所示，启动成功，如下图所示：<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127194610.png" alt=""></p><h2 id="3-查看MongoDB运行状态。"><a href="#3-查看MongoDB运行状态。" class="headerlink" title="3.  查看MongoDB运行状态。"></a>3.  查看MongoDB运行状态。</h2><pre><code class="hljs shell">systemctl status mongod</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127194657.png" alt=""></p><h1 id="五、安装Leanote"><a href="#五、安装Leanote" class="headerlink" title="五、安装Leanote"></a>五、安装Leanote</h1><h2 id="1-下载Leanote二进制安装包。"><a href="#1-下载Leanote二进制安装包。" class="headerlink" title="1.  下载Leanote二进制安装包。"></a>1.  下载Leanote二进制安装包。</h2><pre><code class="hljs shell">wget https://nchc.dl.sourceforge.net/project/leanote-bin/2.6.1/leanote-linux-amd64-v2.6.1.bin.tar.gz</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195301.png" alt=""></p><h2 id="2-解压安装包。"><a href="#2-解压安装包。" class="headerlink" title="2.  解压安装包。"></a>2.  解压安装包。</h2><pre><code class="hljs shell">tar -zxvf leanote-linux-amd64-v2.6.1.bin.tar.gz</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195302.png" alt=""></p><h2 id="3-编辑文件leanote-conf-app-conf，在文件中找到app-secret项，将该项的值改为任意字符串。（如不修改将会有安全风险）。"><a href="#3-编辑文件leanote-conf-app-conf，在文件中找到app-secret项，将该项的值改为任意字符串。（如不修改将会有安全风险）。" class="headerlink" title="3.  编辑文件leanote/conf/app.conf，在文件中找到app.secret项，将该项的值改为任意字符串。（如不修改将会有安全风险）。"></a>3.  编辑文件leanote/conf/app.conf，在文件中找到app.secret项，将该项的值改为任意字符串。（如不修改将会有安全风险）。</h2><p>说明： 根据Leanote官方文档，如不修改app.secret项的值，将会有安全隐患。</p><pre><code class="hljs shell">vim leanote/conf/app.conf</code></pre><p>输入:/app.secret=并按下回车查找app.secret位置。修改该项的值为任意字符串。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195303.png" alt=""></p><h2 id="4-初始化数据库。"><a href="#4-初始化数据库。" class="headerlink" title="4.  初始化数据库。"></a>4.  初始化数据库。</h2><pre><code class="hljs shell">mongorestore -h localhost -d leanote --dir /root/leanote/mongodb_backup/leanote_install_data/</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195408.png" alt=""></p><h2 id="5-启动服务。"><a href="#5-启动服务。" class="headerlink" title="5.  启动服务。"></a>5.  启动服务。</h2><pre><code class="hljs shell">nohup bash /root/leanote/bin/run.sh &gt; /root/leanote/run.log 2&gt;&amp;1 &amp;</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195436.png" alt=""></p><h2 id="6-访问云笔记。"><a href="#6-访问云笔记。" class="headerlink" title="6.  访问云笔记。"></a>6.  访问云笔记。</h2><p>在浏览器中访问<a href="http://101.132.44.137:9000">http://101.132.44.137:9000</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195528.png" alt=""></p><p>默认管理用户为admin，密码为abc123。登录成功后如下图所示。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127195635.png" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>进阶班</tag>
      
      <tag>云笔记本</tag>
      
      <tag>Leanote，网站搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 4 使用PolarDB和ECS搭建门户网站</title>
    <link href="/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E4%BD%BF%E7%94%A8PolarDB%E5%92%8CECS%E6%90%AD%E5%BB%BA%E9%97%A8%E6%88%B7%E7%BD%91%E7%AB%99/"/>
    <url>/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E4%BD%BF%E7%94%A8PolarDB%E5%92%8CECS%E6%90%AD%E5%BB%BA%E9%97%A8%E6%88%B7%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="一、创建资源"><a href="#一、创建资源" class="headerlink" title="一、创建资源"></a>一、创建资源</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127173814.png" alt=""></p><h1 id="二、创建PolarDB数据库账号"><a href="#二、创建PolarDB数据库账号" class="headerlink" title="二、创建PolarDB数据库账号"></a>二、创建PolarDB数据库账号</h1><p>1.一键复制登录url。<br>2.依次单击 产品与服务 &gt; 云数据库PolarDB ，进入 云数据库PolarDB管理控制台 。<br>3.单击左侧 集群列表 ，然后选择云产品资源提供的地域。<br>4.创建数据库账号。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127175709.png" alt=""></p><p>5.创建数据库。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127175828.png" alt=""></p><p>6.设置数据库白名单。<br>在白名单界面将默认的白名单地址127.0.0.1更改为 0.0.0.0/0，然后点击 [确定] 使白名单地址生效。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127180018.png" alt=""></p><h1 id="三、连接ECS服务器"><a href="#三、连接ECS服务器" class="headerlink" title="三、连接ECS服务器"></a>三、连接ECS服务器</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127180305.png" alt=""></p><h1 id="四、安装LAMP环境"><a href="#四、安装LAMP环境" class="headerlink" title="四、安装LAMP环境"></a>四、安装LAMP环境</h1><p>LAMP是指运行在Linux下的Apache、MySQL和PHP的环境。</p><h2 id="1-安装Apache服务及其扩展包。"><a href="#1-安装Apache服务及其扩展包。" class="headerlink" title="1.安装Apache服务及其扩展包。"></a>1.安装Apache服务及其扩展包。</h2><pre><code class="hljs shell">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127180804.png" alt=""></p><h2 id="2-PbootCMS是使用PHP语言开发的CMS系统。"><a href="#2-PbootCMS是使用PHP语言开发的CMS系统。" class="headerlink" title="2. PbootCMS是使用PHP语言开发的CMS系统。"></a>2. PbootCMS是使用PHP语言开发的CMS系统。</h2><p>执行以下命令，安装PHP。</p><pre><code class="hljs shell">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127180904.png" alt=""></p><h2 id="3-执行以下命令下载并安装MySQL。"><a href="#3-执行以下命令下载并安装MySQL。" class="headerlink" title="3.执行以下命令下载并安装MySQL。"></a>3.执行以下命令下载并安装MySQL。</h2><pre><code class="hljs shell">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmyum -y install mysql57-community-release-el7-10.noarch.rpmyum -y install mysql-community-server</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127181158.png" alt=""></p><h2 id="4-执行以下命令启动MySQL数据库。"><a href="#4-执行以下命令启动MySQL数据库。" class="headerlink" title="4. 执行以下命令启动MySQL数据库。"></a>4. 执行以下命令启动MySQL数据库。</h2><pre><code class="hljs shell">systemctl start mysqld</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127181237.png" alt=""></p><h1 id="五、搭建门户网站"><a href="#五、搭建门户网站" class="headerlink" title="五、搭建门户网站"></a>五、搭建门户网站</h1><h2 id="1-安装Git。"><a href="#1-安装Git。" class="headerlink" title="1.安装Git。"></a>1.安装Git。</h2><pre><code class="hljs shell">yum -y install git</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127182251.png" alt=""></p><h2 id="2-下载PbootCMS源码文件。"><a href="#2-下载PbootCMS源码文件。" class="headerlink" title="2.下载PbootCMS源码文件。"></a>2.下载PbootCMS源码文件。</h2><pre><code class="hljs shell">cd ~ &amp;&amp; git clone https://gitee.com/hnaoyun/PbootCMS.git</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127182405.png" alt=""></p><h2 id="3-将安装包拷贝到Apache的wwwroot目录下。"><a href="#3-将安装包拷贝到Apache的wwwroot目录下。" class="headerlink" title="3.将安装包拷贝到Apache的wwwroot目录下。"></a>3.将安装包拷贝到Apache的wwwroot目录下。</h2><pre><code class="hljs shell">cp -r PbootCMS/* /var/www/html/</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127182439.png" alt=""></p><h2 id="4-执行以下命令修改站点根目录文件权限。"><a href="#4-执行以下命令修改站点根目录文件权限。" class="headerlink" title="4.  执行以下命令修改站点根目录文件权限。"></a>4.  执行以下命令修改站点根目录文件权限。</h2><pre><code class="hljs shell">chmod -R a+w /var/www/html</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127182507.png" alt=""></p><h1 id="六、向数据库中导入CMS的初始数据"><a href="#六、向数据库中导入CMS的初始数据" class="headerlink" title="六、向数据库中导入CMS的初始数据"></a>六、向数据库中导入CMS的初始数据</h1><h2 id="1-初始化数据库pbootcms的表结构和数据。"><a href="#1-初始化数据库pbootcms的表结构和数据。" class="headerlink" title="1.初始化数据库pbootcms的表结构和数据。"></a>1.初始化数据库pbootcms的表结构和数据。</h2><pre><code class="hljs shell">sql_file=&quot;/var/www/html/static/backup/sql/&quot;$(ls /var/www/html/static/backup/sql/) &amp;&amp;mysql -hpc-uf6489kn437r57p59.mysql.polardb.rds.aliyuncs.com -utest_user -pPassword1213 -Dpbootcms &lt; $sql_file</code></pre><p>经过一番周折，终于可以了。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127185258.png" alt=""></p><h2 id="2-修改CMS系统数据库配置。"><a href="#2-修改CMS系统数据库配置。" class="headerlink" title="2.修改CMS系统数据库配置。"></a>2.修改CMS系统数据库配置。</h2><pre><code class="hljs shell">cat &gt; /var/www/html/config/database.php &lt;&lt; EOF&lt;?phpreturn array(    &#x27;database&#x27; =&gt; array(        &#x27;type&#x27; =&gt; &#x27;mysqli&#x27;, // 数据库连接驱动类型: mysqli,sqlite,pdo_mysql,pdo_sqlite        &#x27;host&#x27; =&gt; &#x27;pc-uf6489kn437r57p59.mysql.polardb.rds.aliyuncs.com&#x27;, // PolarDB数据库链接地址        &#x27;user&#x27; =&gt; &#x27;test_user&#x27;, // PolarDB数据库的用户名        &#x27;passwd&#x27; =&gt; &#x27;Password1213&#x27;, // PolarDB数据库的密码        &#x27;port&#x27; =&gt; &#x27;3306&#x27;, // 数据库端口        &#x27;dbname&#x27; =&gt; &#x27;pbootcms&#x27; //数据库名称    ));EOF</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127185432.png" alt=""></p><h2 id="3-查看安全组"><a href="#3-查看安全组" class="headerlink" title="3.查看安全组"></a>3.查看安全组</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127185800.png" alt=""><br>本实验使用的ECS默认是打开所有的端口，-1/-1 ，故不用单独设置。</p><h2 id="4-访问程序。"><a href="#4-访问程序。" class="headerlink" title="4.访问程序。"></a>4.访问程序。</h2><p>执行以下命令重启 Apache服务。</p><pre><code class="hljs shell">systemctl restart httpd</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127190023.png" alt=""></p><h1 id="七、进入门户网站首页"><a href="#七、进入门户网站首页" class="headerlink" title="七、进入门户网站首页"></a>七、进入门户网站首页</h1><p>访问：<a href="http://139.224.165.163/">http://139.224.165.163/</a><br>如图所示，访问成功。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127190022.png" alt=""></p><p>/admin.php。默认账号为admin，密码为123456。</p><p>至此已完成门户网站的搭建，如此就可以根据公司的需求自定义门户网站的内容。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127190158.png" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
      <tag>git</tag>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>进阶班</tag>
      
      <tag>网站搭建</tag>
      
      <tag>Apache</tag>
      
      <tag>PHP</tag>
      
      <tag>PolarDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 4 车辆保险应用</title>
    <link href="/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E8%BD%A6%E8%BE%86%E4%BF%9D%E9%99%A9%E5%BA%94%E7%94%A8/"/>
    <url>/2020/11/30/%E9%98%BF%E9%87%8C%E4%BA%91/Class%204%20%E8%BD%A6%E8%BE%86%E4%BF%9D%E9%99%A9%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="实施前准备工作"><a href="#实施前准备工作" class="headerlink" title="实施前准备工作"></a>实施前准备工作</h1><h2 id="一、本地图片上传为OSS"><a href="#一、本地图片上传为OSS" class="headerlink" title="一、本地图片上传为OSS"></a>一、本地图片上传为OSS</h2><p>1.开通oss<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606722326491-2020061516095134.png" alt=""></p><p>2.创建Bucket</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606722343394-20200615160951329.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606722363856-20200615160951505.png" alt=""></p><h2 id="二、开通目标检测服务"><a href="#二、开通目标检测服务" class="headerlink" title="二、开通目标检测服务"></a>二、开通目标检测服务</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-30/1606722388611-20200615160952519.png" alt=""></p><h2 id="三、查看所需API"><a href="#三、查看所需API" class="headerlink" title="三、查看所需API"></a>三、查看所需API</h2><p>这里我们用到阿里云视觉智能开放平台提供的三个功能：</p><ul><li>车辆部件识别</li><li>车辆损伤识别</li><li>车险图片分类</li></ul><p>1.车辆部件识别<br>检测图片中车辆部件的位置以及名称。</p><p>2.车辆损伤识别<br>针对常见小汽车车型，识别车辆外观受损部件及损伤类型，可识别数十种车辆部件、五大类外观损伤。（刮擦、凹陷、开裂、褶皱、穿孔）</p><p>3.车险图片分类<br>对输入的车险图片进行分类。</p><h1 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h1><h2 id="一、本地图片上传至OSS的upload-py"><a href="#一、本地图片上传至OSS的upload-py" class="headerlink" title="一、本地图片上传至OSS的upload.py"></a>一、本地图片上传至OSS的upload.py</h2><p>1.示例代码</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> oss2<span class="hljs-comment"># 以下代码展示了文件上传的高级用法，如断点续传、分片上传等。</span><span class="hljs-comment"># 基本的文件上传如上传普通文件、追加文件，请参见object_basic.py</span><span class="hljs-comment"># 首先初始化AccessKeyId、AccessKeySecret、Endpoint等信息。</span><span class="hljs-comment"># 通过环境变量获取，或者把诸如“&lt;你的AccessKeyId&gt;”替换成真实的AccessKeyId等。</span><span class="hljs-comment">#</span><span class="hljs-comment"># 以杭州区域为例，Endpoint可以是：</span><span class="hljs-comment">#   http://oss-cn-hangzhou.aliyuncs.com</span><span class="hljs-comment">#   https://oss-cn-hangzhou.aliyuncs.com</span><span class="hljs-comment"># 分别以HTTP、HTTPS协议访问。</span>access_key_id = os.getenv(<span class="hljs-string">&#x27;OSS_TEST_ACCESS_KEY_ID&#x27;</span>, <span class="hljs-string">&#x27;&lt;你的AccessKeyId&gt;&#x27;</span>)access_key_secret = os.getenv(<span class="hljs-string">&#x27;OSS_TEST_ACCESS_KEY_SECRET&#x27;</span>, <span class="hljs-string">&#x27;&lt;你的AccessKeySecret&gt;&#x27;</span>)bucket_name = os.getenv(<span class="hljs-string">&#x27;OSS_TEST_BUCKET&#x27;</span>, <span class="hljs-string">&#x27;&lt;你的Bucket&gt;&#x27;</span>)endpoint = os.getenv(<span class="hljs-string">&#x27;OSS_TEST_ENDPOINT&#x27;</span>, <span class="hljs-string">&#x27;&lt;你的访问域名&gt;&#x27;</span>)<span class="hljs-comment"># 确认上面的参数都填写正确了</span><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> (access_key_id, access_key_secret, bucket_name, endpoint):    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;&lt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> param, <span class="hljs-string">&#x27;请设置参数：&#x27;</span> + param<span class="hljs-comment"># 创建Bucket对象，所有Object相关的接口都可以通过Bucket对象来进行</span>bucket = oss2.Bucket(oss2.Auth(access_key_id, access_key_secret), endpoint, bucket_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">random_string</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.ascii_lowercase) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))<span class="hljs-comment"># 生成一个本地文件用于测试。文件内容是bytes类型。</span>filename = random_string(<span class="hljs-number">32</span>) + <span class="hljs-string">&#x27;.txt&#x27;</span>content = oss2.to_bytes(random_string(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>))<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fileobj:    fileobj.write(content)<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">断点续传上传</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># 断点续传一：因为文件比较小（小于oss2.defaults.multipart_threshold），</span><span class="hljs-comment"># 所以实际上用的是oss2.Bucket.put_object</span>oss2.resumable_upload(bucket, <span class="hljs-string">&#x27;remote-normal.txt&#x27;</span>, filename)<span class="hljs-comment"># 断点续传二：为了展示的需要，我们指定multipart_threshold可选参数，确保使用分片上传</span>oss2.resumable_upload(bucket, <span class="hljs-string">&#x27;remote-multipart.txt&#x27;</span>, filename, multipart_threshold=<span class="hljs-number">100</span> * <span class="hljs-number">1024</span>)<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">分片上传</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># 也可以直接调用分片上传接口。</span><span class="hljs-comment"># 首先可以用帮助函数设定分片大小，设我们期望的分片大小为128KB</span>total_size = os.path.getsize(filename)part_size = oss2.determine_part_size(total_size, preferred_size=<span class="hljs-number">128</span> * <span class="hljs-number">1024</span>)<span class="hljs-comment"># 初始化分片上传，得到Upload ID。接下来的接口都要用到这个Upload ID。</span>key = <span class="hljs-string">&#x27;remote-multipart2.txt&#x27;</span>upload_id = bucket.init_multipart_upload(key).upload_id<span class="hljs-comment"># 逐个上传分片</span><span class="hljs-comment"># 其中oss2.SizedFileAdapter()把fileobj转换为一个新的文件对象，新的文件对象可读的长度等于size_to_upload</span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fileobj:    parts = []    part_number = <span class="hljs-number">1</span>    offset = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> offset &lt; total_size:        size_to_upload = <span class="hljs-built_in">min</span>(part_size, total_size - offset)        result = bucket.upload_part(key, upload_id, part_number,                                    oss2.SizedFileAdapter(fileobj, size_to_upload))        parts.append(oss2.models.PartInfo(part_number, result.etag, size = size_to_upload, part_crc = result.crc))        offset += size_to_upload        part_number += <span class="hljs-number">1</span>    <span class="hljs-comment"># 完成分片上传</span>    bucket.complete_multipart_upload(key, upload_id, parts)<span class="hljs-comment"># 验证一下</span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fileobj:    <span class="hljs-keyword">assert</span> bucket.get_object(key).read() == fileobj.read()os.remove(filename)</code></pre><h2 id="二、车辆部件识别"><a href="#二、车辆部件识别" class="headerlink" title="二、车辆部件识别"></a>二、车辆部件识别</h2><p>1.请求参数</p><p>ImageURL：图片URL</p><p>2.示例代码<br><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">from</span> aliyunsdkcore.client <span class="hljs-keyword">import</span> AcsClient<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ClientException<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ServerException<span class="hljs-keyword">from</span> aliyunsdkobjectdet.request.v20191230.RecognizeVehiclePartsRequest <span class="hljs-keyword">import</span> RecognizeVehiclePartsRequestclient = AcsClient(<span class="hljs-string">&#x27;&lt;accessKeyId&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;accessSecret&gt;&#x27;</span>, <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>)request = RecognizeVehiclePartsRequest()request.set_accept_format(<span class="hljs-string">&#x27;json&#x27;</span>)request.set_ImageURL(<span class="hljs-string">&quot;http://viapi-test.oss-cn-shanghai.aliyuncs.com/RecognizeVehicleParts.jpg&quot;</span>)response = client.do_action_with_exception(request)<span class="hljs-comment"># python2:  print(response) </span>print(<span class="hljs-built_in">str</span>(response, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))</code></pre></p><h2 id="三、车辆损坏识别类"><a href="#三、车辆损坏识别类" class="headerlink" title="三、车辆损坏识别类"></a>三、车辆损坏识别类</h2><p>1.请求参数</p><p>ImageURL：图片URL</p><p>2.示例代码</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">from</span> aliyunsdkcore.client <span class="hljs-keyword">import</span> AcsClient<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ClientException<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ServerException<span class="hljs-keyword">from</span> aliyunsdkobjectdet.request.v20191230.RecognizeVehicleDamageRequest <span class="hljs-keyword">import</span> RecognizeVehicleDamageRequestclient = AcsClient(<span class="hljs-string">&#x27;&lt;accessKeyId&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;accessSecret&gt;&#x27;</span>, <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>)request = RecognizeVehicleDamageRequest()request.set_accept_format(<span class="hljs-string">&#x27;json&#x27;</span>)request.set_ImageURL(<span class="hljs-string">&quot;http://viapi-test.oss-cn-shanghai.aliyuncs.com/sanjiye-meizi/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%BD%A6%E8%BE%86%E6%8D%9F%E4%BC%A4%E8%AF%86%E5%88%AB%20.jpg&quot;</span>)response = client.do_action_with_exception(request)<span class="hljs-comment"># python2:  print(response) </span>print(<span class="hljs-built_in">str</span>(response, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))</code></pre><h2 id="四、车险图片分类"><a href="#四、车险图片分类" class="headerlink" title="四、车险图片分类"></a>四、车险图片分类</h2><p>1.请求参数</p><p>ImageURL：图片URL</p><p>2.示例代码</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">from</span> aliyunsdkcore.client <span class="hljs-keyword">import</span> AcsClient<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ClientException<span class="hljs-keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="hljs-keyword">import</span> ServerException<span class="hljs-keyword">from</span> aliyunsdkobjectdet.request.v20191230.ClassifyVehicleInsuranceRequest <span class="hljs-keyword">import</span> ClassifyVehicleInsuranceRequestclient = AcsClient(<span class="hljs-string">&#x27;&lt;accessKeyId&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;accessSecret&gt;&#x27;</span>, <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>)request = ClassifyVehicleInsuranceRequest()request.set_accept_format(<span class="hljs-string">&#x27;json&#x27;</span>)request.set_ImageURL(<span class="hljs-string">&quot;http://viapi-test.oss-cn-shanghai.aliyuncs.com/sanjiye-meizi/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%BD%A6%E9%99%A9%E5%9B%BE%E7%89%87.jpg&quot;</span>)response = client.do_action_with_exception(request)<span class="hljs-comment"># python2:  print(response) </span>print(<span class="hljs-built_in">str</span>(response, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>oss存储</tag>
      
      <tag>API</tag>
      
      <tag>车辆部件识别</tag>
      
      <tag>车辆损伤识别</tag>
      
      <tag>车险图片分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 3 SLB负载均衡实践</title>
    <link href="/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20SLB%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E8%B7%B5/"/>
    <url>/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20SLB%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-创建开通资源"><a href="#一-创建开通资源" class="headerlink" title="一.创建开通资源"></a>一.创建开通资源</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606457142887-1.PNG" alt=""></p><h1 id="二-云服务器状态确认"><a href="#二-云服务器状态确认" class="headerlink" title="二.云服务器状态确认"></a>二.云服务器状态确认</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606457248119-2.PNG" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606457248121-3.PNG" alt=""></p><p>比较两台ECS的访问结果，发现部署的网站内容相同，只是显示的后端服务器IP不同。</p><h1 id="三-负载均衡配置"><a href="#三-负载均衡配置" class="headerlink" title="三.负载均衡配置"></a>三.负载均衡配置</h1><h2 id="1-打开新的页面，登录子用户"><a href="#1-打开新的页面，登录子用户" class="headerlink" title="1.打开新的页面，登录子用户"></a>1.打开新的页面，登录子用户</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606457603020-4.PNG" alt=""></p><h2 id="2-开始配置负载均衡"><a href="#2-开始配置负载均衡" class="headerlink" title="2.开始配置负载均衡"></a>2.开始配置负载均衡</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606457651230-5.PNG" alt=""></p><h2 id="3-配置负载均衡的-监听端口、后端服务器-和-健康检查"><a href="#3-配置负载均衡的-监听端口、后端服务器-和-健康检查" class="headerlink" title="3.配置负载均衡的 监听端口、后端服务器 和 健康检查"></a>3.配置负载均衡的 监听端口、后端服务器 和 健康检查</h2><h3 id="1）在-协议-amp-监听-页面，输入如下信息，完成后，点击-下一步-。"><a href="#1）在-协议-amp-监听-页面，输入如下信息，完成后，点击-下一步-。" class="headerlink" title="1）在 协议&amp;监听 页面，输入如下信息，完成后，点击 下一步 。"></a>1）在 协议&amp;监听 页面，输入如下信息，完成后，点击 下一步 。</h3><p>负载均衡协议：选择 HTTP<br>监听端口：设为 80<br>高级配置保持默认</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458028281-6.PNG" alt=""></p><h3 id="2）在-后端服务器-页面，监听请求转发至-默认服务器组，在已添加服务器处点击-继续添加-。"><a href="#2）在-后端服务器-页面，监听请求转发至-默认服务器组，在已添加服务器处点击-继续添加-。" class="headerlink" title="2）在 后端服务器 页面，监听请求转发至 默认服务器组，在已添加服务器处点击 继续添加  。"></a>2）在 后端服务器 页面，监听请求转发至 默认服务器组，在已添加服务器处点击 继续添加  。</h3><h3 id="3）在弹出的待添加服务器页面，在预先配置好的两台云服务器前打勾选择，然后点击下一步，之后再点击-添加；"><a href="#3）在弹出的待添加服务器页面，在预先配置好的两台云服务器前打勾选择，然后点击下一步，之后再点击-添加；" class="headerlink" title="3）在弹出的待添加服务器页面，在预先配置好的两台云服务器前打勾选择，然后点击下一步，之后再点击 添加；"></a>3）在弹出的待添加服务器页面，在预先配置好的两台云服务器前打勾选择，然后点击下一步，之后再点击 添加；</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458152680-7.PNG" alt=""></p><h3 id="4）在后端服务器界面的已添加服务器列表中，可以看到新增的两台云服务器，分别将-端口-设置为-80，并点击-下一步-。"><a href="#4）在后端服务器界面的已添加服务器列表中，可以看到新增的两台云服务器，分别将-端口-设置为-80，并点击-下一步-。" class="headerlink" title="4）在后端服务器界面的已添加服务器列表中，可以看到新增的两台云服务器，分别将 端口 设置为 80，并点击 下一步 。"></a>4）在后端服务器界面的已添加服务器列表中，可以看到新增的两台云服务器，分别将 端口 设置为 80，并点击 下一步 。</h3><p>说明：负载均衡器将会按照输入的权重比例分发请求。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458167408-8.PNG" alt=""></p><h3 id="5）在-健康检查-配置中，开启健康检查按钮为绿色-开启状态，点击-下一步。"><a href="#5）在-健康检查-配置中，开启健康检查按钮为绿色-开启状态，点击-下一步。" class="headerlink" title="5）在 健康检查 配置中，开启健康检查按钮为绿色 开启状态，点击 下一步。"></a>5）在 健康检查 配置中，开启健康检查按钮为绿色 开启状态，点击 下一步。</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458216714-9.PNG" alt=""></p><h3 id="6）在-配置审核-页面，确认上述配置操作正确，点击-提交；出现如下界面，提示配置成功后，点击-知道了；"><a href="#6）在-配置审核-页面，确认上述配置操作正确，点击-提交；出现如下界面，提示配置成功后，点击-知道了；" class="headerlink" title="6）在 配置审核 页面，确认上述配置操作正确，点击 提交；出现如下界面，提示配置成功后，点击 知道了；"></a>6）在 配置审核 页面，确认上述配置操作正确，点击 提交；出现如下界面，提示配置成功后，点击 知道了；</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458245050-10.PNG" alt=""></p><h3 id="7）此时，页面将显示一个状态为-运行中-的负载均衡监听实例，后端服务器组已添加完成两台ECS服务器，且-健康检查-的状态为-正常。"><a href="#7）此时，页面将显示一个状态为-运行中-的负载均衡监听实例，后端服务器组已添加完成两台ECS服务器，且-健康检查-的状态为-正常。" class="headerlink" title="7）此时，页面将显示一个状态为 运行中 的负载均衡监听实例，后端服务器组已添加完成两台ECS服务器，且 健康检查 的状态为 正常。"></a>7）此时，页面将显示一个状态为 运行中 的负载均衡监听实例，后端服务器组已添加完成两台ECS服务器，且 健康检查 的状态为 正常。</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458613517-11.PNG" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606458788172-12.PNG" alt=""></p><h1 id="四-负载均衡验证"><a href="#四-负载均衡验证" class="headerlink" title="四.负载均衡验证"></a>四.负载均衡验证</h1><h2 id="1-两台后端服务器的权重比例相同"><a href="#1-两台后端服务器的权重比例相同" class="headerlink" title="1.两台后端服务器的权重比例相同"></a>1.两台后端服务器的权重比例相同</h2><h3 id="访问-负载均衡-的-服务地址"><a href="#访问-负载均衡-的-服务地址" class="headerlink" title="访问 负载均衡 的 服务地址"></a>访问 负载均衡 的 服务地址</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459077455-13.PNG" alt=""></p><p>界面显示内容：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459125831-14.PNG" alt=""></p><p>刷新两下后效果如下：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459134332-15.PNG" alt=""></p><p>重复刷新操作，观察 后端服务器IP 是在两个云服务器的 内网地址 间轮流更换。</p><h2 id="2-两台后端服务器的权重比例不同时"><a href="#2-两台后端服务器的权重比例不同时" class="headerlink" title="2.两台后端服务器的权重比例不同时"></a>2.两台后端服务器的权重比例不同时</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459351250-16.PNG" alt=""><br>界面显示内容：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459134332-15.PNG" alt=""></p><p>刷新两下后效果如下：</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459125831-14.PNG" alt=""></p><p>由此可见，每三次刷新中，必有两次访问到172.16.1.23，一次访问到172.16.1.22<br>，权重为2:1。</p><h2 id="3-当某一台ecs停止时，监听界面也会自动识别"><a href="#3-当某一台ecs停止时，监听界面也会自动识别" class="headerlink" title="3.当某一台ecs停止时，监听界面也会自动识别"></a>3.当某一台ecs停止时，监听界面也会自动识别</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459999184-19.PNG" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606459999177-18.PNG" alt=""></p><p>刷新<a href="http://101.132.190.205/页面时也只显示一个ip">http://101.132.190.205/页面时也只显示一个ip</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606460100949-20.PNG" alt=""></p><h1 id="五、感想"><a href="#五、感想" class="headerlink" title="五、感想"></a>五、感想</h1><p>如上结果证明：负载均衡会将用户的请求发送到后端不同的服务器进行处理。这样，可以减轻单台服务器的负载压力，从而确保业务的持续性。感觉这跟集群很像，但在性能处理上又有不同。希望自己接下来在项目中进行实战演练，实现进阶。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>ECS</tag>
      
      <tag>进阶班</tag>
      
      <tag>SLB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 3 电子相册搭建（人脸、表情识别）</title>
    <link href="/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%BA%E8%84%B8%E3%80%81%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB%EF%BC%89/"/>
    <url>/2020/11/29/%E9%98%BF%E9%87%8C%E4%BA%91/Class%203%20%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%BA%E8%84%B8%E3%80%81%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>功能：项目分为前端和后端两个部分，调用阿里云人脸识别、表情识别的功能，对电子相册里面的照片进行自动标签和分类。</p><p>API地址<br>阿里达摩院视觉识别平台（<a href="https://vision.aliyun.com/）">https://vision.aliyun.com/）</a></p><h1 id="一、后端"><a href="#一、后端" class="headerlink" title="一、后端"></a>一、后端</h1><p>代码是Java的srping-boot项目<br>项目代码下载地址：<a href="https://github.com/aliyun/alibabacloud-viapi-demo/tree/master">https://github.com/aliyun/alibabacloud-viapi-demo/tree/master</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628587522-QQ%E6%88%AA%E5%9B%BE20201129134250.png" alt=""></p><ul><li>Application：启动的入口函数，</li><li>common：一般就是存放公共的类或者常量，或者枚举值，</li><li>config：装载或者是数据库的配置。</li><li>Controller：用于接收外部的请求，通过接口调用或得到的数据返回给前端</li><li>Service: 把不同的请求 , 不同的服务抽象成一个 service。</li><li>Utils: 用于存放公共的类或者工具函数。</li></ul><h2 id="1-controller"><a href="#1-controller" class="headerlink" title="1.controller"></a>1.controller</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628380718-QQ%E6%88%AA%E5%9B%BE20201129133918.png" alt=""></p><p>获取图片、分类等，上传文件。</p><h2 id="2-ResourceService"><a href="#2-ResourceService" class="headerlink" title="2.ResourceService"></a>2.ResourceService</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628412703-QQ%E6%88%AA%E5%9B%BE20201129134001.png" alt=""></p><p>存储数据，资源管理</p><h2 id="3-VisionService"><a href="#3-VisionService" class="headerlink" title="3.VisionService"></a>3.VisionService</h2><p>上传图片，识别图片中的表情和场景</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628452439-QQ%E6%88%AA%E5%9B%BE20201129134031.png" alt=""></p><p>VisionService，识别场景，表情。我们上传图片流，我们把整个图片流传到接口里面，然后从服务端去识别这个场景。新的版本的 SDK支持通过本地上传图片来进行识别</p><h2 id="4-在控制台开通相应功能"><a href="#4-在控制台开通相应功能" class="headerlink" title="4.在控制台开通相应功能"></a>4.在控制台开通相应功能</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606617922595-QQ%E6%88%AA%E5%9B%BE20201129104458.png" alt=""></p><p>图片文件需要上传到对象存储oss中<br>新的版本的 SDK支持通过本地上传图片来进行识别</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606618124294-QQ%E6%88%AA%E5%9B%BE20201129104820.png" alt=""></p><h2 id="5-ResourceService-是一个资源的管理器"><a href="#5-ResourceService-是一个资源的管理器" class="headerlink" title="5.ResourceService 是一个资源的管理器"></a>5.ResourceService 是一个资源的管理器</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628698485-QQ%E6%88%AA%E5%9B%BE20201129134443.png" alt=""></p><h2 id="6-allImg-将所有上传的图片，放在数组里面。"><a href="#6-allImg-将所有上传的图片，放在数组里面。" class="headerlink" title="6.allImg 将所有上传的图片，放在数组里面。"></a>6.allImg 将所有上传的图片，放在数组里面。</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606628976841-QQ%E6%88%AA%E5%9B%BE20201129134922.png" alt=""></p><h2 id="7-json文件"><a href="#7-json文件" class="headerlink" title="7.json文件"></a>7.json文件</h2><p>cateMap 之后又分成两个场景 expression、scene，可以看到不同的分类，表情识别，场景识别，里面存放所有识别出来的表情，比如说惊讶、生气、开心，场景识别，存放运动、户外，这样存储是为了我们能够快速的进行查询，比如说可以通过分类，快速的找到某一个分类下面的所有的识别。</p><p>expressionMap 是表示某类标签下面都包括哪些图片，senceMap 也是同样的意思。</p><p>imgLabels 是一个反向的查找的过程，即通过一个图片，识别出来了哪些场景，比如说我们可以看到它可能这张图片它可能直接识别出来了，它是属于人物场景，属于运动场景，然后属于生气的表情，属于演出等场景。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606629114117-QQ%E6%88%AA%E5%9B%BE20201129135140.png" alt=""></p><h1 id="二、前端"><a href="#二、前端" class="headerlink" title="二、前端"></a>二、前端</h1><h2 id="1-利用上传的组件实现图片上传"><a href="#1-利用上传的组件实现图片上传" class="headerlink" title="1.利用上传的组件实现图片上传"></a>1.利用上传的组件实现图片上传</h2><h2 id="2-实现轮播图、列表"><a href="#2-实现轮播图、列表" class="headerlink" title="2.实现轮播图、列表"></a>2.实现轮播图、列表</h2><h2 id="3-实现自定义的标签"><a href="#3-实现自定义的标签" class="headerlink" title="3.实现自定义的标签"></a>3.实现自定义的标签</h2><p>前端采用视频所述方法</p><p>前端页面通过 vue，然后加上 element-ui 这个两个组件来实现前端的逻辑。大概可以看一下整个的结构，它可以分成三部分。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606629326420-QQ%E6%88%AA%E5%9B%BE20201129135504.png" alt=""></p><p>第一部分是通过一个上传的组件来实现拖拽上传以及点选。<br>找到一个图片，可以看到两种方式，一种拖拽，一种是点击上传，这是通过一个组件来实现的。action是在上传图片要去访问后端的 upload 接口，之后有一个事件，是在成功之后应该做哪些事情，也就是对应的要执行的函数。 比如 UploadSuccess 指上传成功之后，刷新页面，添加下面的标签分类等。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606618226668-QQ%E6%88%AA%E5%9B%BE20201129103014.png" alt=""></p><p>第二部分是实现轮播图部分<br>通过vue 的一个组件。vue-gallery, 实现自定义的标签名，之后定义了一个属性：photos。photos 从后台去取回数据，之后把它渲染到前端的 html 页面当中。由于我们这是一个组件，它会有对应的自己一个模板，这个就是我们整个的模板部分，之后对它进行背景图片的处理，然后以及一些事件的定义。<br>vue，它的整个是一个事件的数据流，通过数据的不同的变化，然后我们就可以去触发它的渲染，比如上传一张图片，它是可以对应不同的组件进行交互，利用不同的标签，事件来驱动数据的变化。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606629414004-QQ%E6%88%AA%E5%9B%BE20201129135638.png" alt=""></p><p>mounted定义一些事件，比如图片变化，怎么调用，以及监听按下不同的键，应该做哪些操作，然后是前张图片还是后一张图片等。<br>el 是一个 ID 的绑定，比如 #app, 在这个标签上层父级，定义了一个 ID 叫 app，这时候可以把组件放在父级 div 下面，然后在这个里面去根据模板进行渲染。</p><p>第三部分是自定义标签的组件。</p><p>V-tag 对应的是这块，我们把它分成不同的分类，下面有不同的标签是组件来实<br>现的。</p><p>Data 是指在初始化的时候，需要进行哪些渲染。这里面自定义了不同的颜色。cateMap，将返回的英文转化成汉字去显示出来。去取一个不同的 ID，然后给它选成不同的颜色，通过取一个随机的下标，然后去把它选成不同的颜色。<br>Tag 是一个两层 map 结构。就是第一层这里面某比每层结构，表情，下面有几种表情，场景下面有几种场景，这是一个两层的 map 结构。所以在渲染的时候，会对两层的 map 进行渲染，第一层完成之后，再渲染第二层数据。实现不同的触发，上传文件，成功之后要进行不同的事件操作。</p><p>因为要实现不同的组件之间进行通信，自定义了一个虚拟的 Event 的 vue 的实例，然后通过 Event 将所有的不同的 vue 实例串联起来。比如 uploadSuccess 去发送一个事件。通过 upload vue 实例去给其他的实例去发事件，在上传成功之后加载到轮播图里面。on 就对应去接收 emit 传过来的事件。如果我们得到了 uploadSuccess 事件 ,那么就会通过从后端去获取数据，对这个页面进行一个刷新操作。refresh 也是同样的道理，上传成功之后，要对整个的 tag 进行一个刷新，把新识别出来的不同的场景，不同标签，进行一个刷新。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-29/1606618569224-QQ%E6%88%AA%E5%9B%BE20201129105530.png" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>图像识别</tag>
      
      <tag>人脸识别</tag>
      
      <tag>表情识别</tag>
      
      <tag>自动标</tag>
      
      <tag>分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 2 基于ECS快速搭建Docker环境</title>
    <link href="/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E5%9F%BA%E4%BA%8EECS%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADocker%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E5%9F%BA%E4%BA%8EECS%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADocker%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="一-ssh连接远程服务器"><a href="#一-ssh连接远程服务器" class="headerlink" title="一.ssh连接远程服务器"></a>一.ssh连接远程服务器</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449081612-19.PNG" alt=""></p><h1 id="二-安装Docker-CE"><a href="#二-安装Docker-CE" class="headerlink" title="二.安装Docker CE"></a>二.安装Docker CE</h1><p>Docker有两个分支版本：Docker CE和Docker EE，即社区版和企业版。</p><h2 id="1-安装Docker的依赖库。"><a href="#1-安装Docker的依赖库。" class="headerlink" title="1.  安装Docker的依赖库。"></a>1.  安装Docker的依赖库。</h2><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449308595-20.PNG" alt=""></p><h2 id="2-添加Docker-CE的软件源信息。"><a href="#2-添加Docker-CE的软件源信息。" class="headerlink" title="2.  添加Docker CE的软件源信息。"></a>2.  添加Docker CE的软件源信息。</h2><pre><code class="hljs shell">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449342832-21.PNG" alt=""></p><h2 id="3-安装Docker-CE。"><a href="#3-安装Docker-CE。" class="headerlink" title="3.  安装Docker CE。"></a>3.  安装Docker CE。</h2><pre><code class="hljs shell">yum makecache fastyum -y install docker-ce</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449427975-23.PNG" alt=""></p><h2 id="4-启动Docker服务。"><a href="#4-启动Docker服务。" class="headerlink" title="4.  启动Docker服务。"></a>4.  启动Docker服务。</h2><pre><code class="hljs shell">systemctl start docker</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449459770-24.PNG" alt=""></p><h1 id="三-配置阿里云镜像仓库（镜像加速）"><a href="#三-配置阿里云镜像仓库（镜像加速）" class="headerlink" title="三.配置阿里云镜像仓库（镜像加速）"></a>三.配置阿里云镜像仓库（镜像加速）</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449616939-25.PNG" alt=""></p><h2 id="1-配置Docker的自定义镜像仓库地址。"><a href="#1-配置Docker的自定义镜像仓库地址。" class="headerlink" title="1. 配置Docker的自定义镜像仓库地址。"></a>1. 配置Docker的自定义镜像仓库地址。</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449732773-26.PNG" alt=""></p><h2 id="2-重新加载服务配置文件。"><a href="#2-重新加载服务配置文件。" class="headerlink" title="2.  重新加载服务配置文件。"></a>2.  重新加载服务配置文件。</h2><pre><code class="hljs shell">systemctl daemon-reload</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449816567-27.PNG" alt=""></p><h2 id="3-重启Docker服务。"><a href="#3-重启Docker服务。" class="headerlink" title="3.  重启Docker服务。"></a>3.  重启Docker服务。</h2><pre><code class="hljs shell">systemctl restart docker</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606449847291-28.PNG" alt=""></p><h1 id="四-使用Docker安装Nginx服务"><a href="#四-使用Docker安装Nginx服务" class="headerlink" title="四.使用Docker安装Nginx服务"></a>四.使用Docker安装Nginx服务</h1><h2 id="1-查看Docker镜像仓库中Nginx的可用版本。"><a href="#1-查看Docker镜像仓库中Nginx的可用版本。" class="headerlink" title="1.  查看Docker镜像仓库中Nginx的可用版本。"></a>1.  查看Docker镜像仓库中Nginx的可用版本。</h2><pre><code class="hljs shell">docker search nginx</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606450049454-29.PNG" alt=""></p><h2 id="2-拉取最新版的Nginx镜像。"><a href="#2-拉取最新版的Nginx镜像。" class="headerlink" title="2.  拉取最新版的Nginx镜像。"></a>2.  拉取最新版的Nginx镜像。</h2><pre><code class="hljs shell">docker pull nginx:latest</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606450100193-30.PNG" alt=""></p><h2 id="3-查看本地镜像。"><a href="#3-查看本地镜像。" class="headerlink" title="3.  查看本地镜像。"></a>3.  查看本地镜像。</h2><pre><code class="hljs shell">docker images</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606450132831-31.PNG" alt=""></p><h2 id="4-运行容器。"><a href="#4-运行容器。" class="headerlink" title="4.  运行容器。"></a>4.  运行容器。</h2><pre><code class="hljs shell">docker run --name nginx-test -p 8080:80 -d nginx</code></pre><p>命令参数说明：<br>—name nginx-test：容器名称。<br>-p 8080:80： 端口进行映射，将本地8080端口映射到容器内部的80端口。<br>-d nginx： 设置容器在后台一直运行。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606450167321-32.PNG" alt=""></p><h2 id="5-在浏览器地址栏输入http-139-196-156-125-8080-访问Nginx服务。"><a href="#5-在浏览器地址栏输入http-139-196-156-125-8080-访问Nginx服务。" class="headerlink" title="5.  在浏览器地址栏输入http://139.196.156.125:8080/访问Nginx服务。"></a>5.  在浏览器地址栏输入<a href="http://139.196.156.125:8080/访问Nginx服务。">http://139.196.156.125:8080/访问Nginx服务。</a></h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606450257544-33.PNG" alt=""></p><h1 id="五、感想"><a href="#五、感想" class="headerlink" title="五、感想"></a>五、感想</h1><p>指令介绍并不是很详细，很多参数都没有介绍。大家可以自行—help。通过这些指令，我最大的感受就是英语得过硬，很多指令、很多参数实际上就是英文单词或者缩写，并不是去盲目记忆，尤其是参数。不过好记性不如烂笔头，多敲多练习少不了。经过一段时间的学习，只能说对docker有了一个初步的入门，掌握了指令的基本使用，接下来需要在项目中进行实战演练，实现docker进阶。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Docker</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>ECS</tag>
      
      <tag>进阶班</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 2 身份证识别系统搭建</title>
    <link href="/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/11/28/%E9%98%BF%E9%87%8C%E4%BA%91/Class%202%20%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基本诉求"><a href="#一、基本诉求" class="headerlink" title="一、基本诉求"></a>一、基本诉求</h1><p>能够通过调用阿里达摩院视觉平台提供的API来识别出二代身份证关键字段内容，关键字段包括：姓名、性别、民族、身份证号、出生日期、地址信息、有效起始时间、签发机关，同时可输出身份证区域位置和人脸位置信息。</p><h1 id="二、项目预览"><a href="#二、项目预览" class="headerlink" title="二、项目预览"></a>二、项目预览</h1><h2 id="1-进入页面"><a href="#1-进入页面" class="headerlink" title="1.进入页面"></a>1.进入页面</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551110652-QQ%E6%88%AA%E5%9B%BE20201128161135.png" alt=""></p><h2 id="2-上传身份证照片信息界面。"><a href="#2-上传身份证照片信息界面。" class="headerlink" title="2.上传身份证照片信息界面。"></a>2.上传身份证照片信息界面。</h2><h2 id="3-识别之后的页面"><a href="#3-识别之后的页面" class="headerlink" title="3.识别之后的页面"></a>3.识别之后的页面</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551110652-QQ%E6%88%AA%E5%9B%BE20201128161208.png" alt=""></p><h2 id="4-源码展示"><a href="#4-源码展示" class="headerlink" title="4.源码展示"></a>4.源码展示</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551256215-QQ%E6%88%AA%E5%9B%BE20201128161349.png" alt=""></p><h1 id="三、前期准备"><a href="#三、前期准备" class="headerlink" title="三、前期准备"></a>三、前期准备</h1><h2 id="1-查看官方说明文档"><a href="#1-查看官方说明文档" class="headerlink" title="1.查看官方说明文档"></a>1.查看官方说明文档</h2><p>进入阿里达摩院视觉识别平台（<a href="https://vision.aliyun.com/），选择能力广场&gt;文字识别&gt;身份证识别。">https://vision.aliyun.com/），选择能力广场&gt;文字识别&gt;身份证识别。</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551777378-QQ%E6%88%AA%E5%9B%BE20201128162237.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551482261-QQ%E6%88%AA%E5%9B%BE20201128161735.png" alt=""></p><h2 id="2-查看SDK实例文档"><a href="#2-查看SDK实例文档" class="headerlink" title="2.查看SDK实例文档"></a>2.查看SDK实例文档</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551567680-QQ%E6%88%AA%E5%9B%BE20201128161840.png" alt=""></p><h2 id="3-获取OCR的SDK的Maven坐标（Java）"><a href="#3-获取OCR的SDK的Maven坐标（Java）" class="headerlink" title="3.获取OCR的SDK的Maven坐标（Java）"></a>3.获取OCR的SDK的Maven坐标（Java）</h2><p><a href="https://mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-ocr/1.0.3">传送门</a><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-28/1606551666848-QQ%E6%88%AA%E5%9B%BE20201128162017.png" alt=""></p><p>通过文字识别中查看产品文档，得知SDK支持包括Java、Java（本地接入）、Python、Node.js、PHP四种常用语言。通过检索Java（支持本地上传）的SDK，获取OCR的Maven代码（version=1.0.3）:</p><pre><code class="hljs shell">&lt;artifactId&gt;ocr&lt;/artifactId&gt;&lt;version&gt;1.0.3&lt;/version&gt;</code></pre><h1 id="四、框架分析"><a href="#四、框架分析" class="headerlink" title="四、框架分析"></a>四、框架分析</h1><p>建立Springboot项目，Application为启动类；Controller为控制器层，负责模板的渲染和路由等；Ocrservice负责通过SDK调用视觉识别的能力。上传表单只允许后缀为.jpg，.jpeg，.png的文件，且不为空。</p><h2 id="1-输入限制："><a href="#1-输入限制：" class="headerlink" title="1.输入限制："></a>1.输入限制：</h2><ul><li>图片格式：JPEG、JPG、PNG、BMP、GIF。</li><li>图像大小：图像大小不超过3M。</li><li>图像分辨率：不限制图片分辨率，但图片分辨率太高可能会导致API识别超时，超时时间为5秒。</li><li>URL地址中不能包含中文字符。</li></ul><h1 id="五、示例代码"><a href="#五、示例代码" class="headerlink" title="五、示例代码"></a>五、示例代码</h1><pre><code class="hljs shell">import com.aliyuncs.DefaultAcsClient;import com.aliyuncs.IAcsClient;import com.aliyuncs.exceptions.ClientException;import com.aliyuncs.exceptions.ServerException;import com.aliyuncs.profile.DefaultProfile;import com.google.gson.Gson;import java.util.*;import com.aliyuncs.ocr.model.v20191230.*;public class RecognizeIdentityCard &#123;public static void main(String[] args) &#123;    DefaultProfile profile = DefaultProfile.getProfile(&quot;cn-shanghai&quot;, &quot;&lt;accessKeyId&gt;&quot;, &quot;&lt;accessSecret&gt;&quot;);    IAcsClient client = new DefaultAcsClient(profile);    RecognizeIdentityCardRequest request = new RecognizeIdentityCardRequest();    request.setRegionId(&quot;cn-shanghai&quot;);    request.setSide(&quot;face&quot;);    try &#123;        RecognizeIdentityCardResponse response = client.getAcsResponse(request);        System.out.println(new Gson().toJson(response));    &#125; catch (ServerException e) &#123;        e.printStackTrace();    &#125; catch (ClientException e) &#123;        System.out.println(&quot;ErrCode:&quot; + e.getErrCode());        System.out.println(&quot;ErrMsg:&quot; + e.getErrMsg());        System.out.println(&quot;RequestId:&quot; + e.getRequestId());    &#125;&#125;&#125;</code></pre><p>代码是Java的srping-boot项目</p><p><a href="https://github.com/aliyun/alibabacloud-viapi-demo?spm=a2c6h.12873639.0.0.c08529f2JzpdtR">项目代码下载地址：https://github.com/aliyun/alibabacloud-viapi-demo?spm=a2c6h.12873639.0.0.c08529f2JzpdtR</a></p><h1 id="六、python代码"><a href="#六、python代码" class="headerlink" title="六、python代码"></a>六、python代码</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>在安装和使用阿里云SDK前，确保已经注册阿里云账号并生成访问密钥（AccessKey）。</p><h2 id="2-安装Python-SDK核心库。"><a href="#2-安装Python-SDK核心库。" class="headerlink" title="2.安装Python SDK核心库。"></a>2.安装Python SDK核心库。</h2><p>该SDK包为阿里云Java核心库，无论使用哪个产品的SDK，都必须先#</p><h2 id="3-安装该核心库。"><a href="#3-安装该核心库。" class="headerlink" title="3.安装该核心库。"></a>3.安装该核心库。</h2><p>使用依赖包工具安装（推荐）。</p><h2 id="4-执行如下命令，安装阿里云SDK核心库。"><a href="#4-执行如下命令，安装阿里云SDK核心库。" class="headerlink" title="4.执行如下命令，安装阿里云SDK核心库。"></a>4.执行如下命令，安装阿里云SDK核心库。</h2><pre><code class="hljs shell">pip install aliyun-python-sdk-core</code></pre><h2 id="5-自行下载安装：使用git-clone或其它方式从GitHub下载aliyun-python-sdk-core并自行添加解决方案。"><a href="#5-自行下载安装：使用git-clone或其它方式从GitHub下载aliyun-python-sdk-core并自行添加解决方案。" class="headerlink" title="5.自行下载安装：使用git clone或其它方式从GitHub下载aliyun-python-sdk-core并自行添加解决方案。"></a>5.自行下载安装：使用git clone或其它方式从GitHub下载aliyun-python-sdk-core并自行添加解决方案。</h2><h2 id="6-安装视觉智能API相关服务Python-SDK。"><a href="#6-安装视觉智能API相关服务Python-SDK。" class="headerlink" title="6.安装视觉智能API相关服务Python SDK。"></a>6.安装视觉智能API相关服务Python SDK。</h2><p>使用依赖包工具安装（推荐）。</p><h2 id="7-执行以下命令，安装需要的SDK包。"><a href="#7-执行以下命令，安装需要的SDK包。" class="headerlink" title="7.执行以下命令，安装需要的SDK包。"></a>7.执行以下命令，安装需要的SDK包。</h2><p>仅安装所需要的SDK包即可。<br><pre><code class="hljs shell">人脸人体：pip install aliyun-python-sdk-facebody文字识别：pip install aliyun-python-sdk-ocr商品理解：pip install aliyun-python-sdk-goodstech内容安全：pip install aliyun-python-sdk-imageaudit图像识别：pip install aliyun-python-sdk-imagerecog图像生产：pip install aliyun-python-sdk-imageenhan分割抠图：pip install aliyun-python-sdk-imageseg目标检测：pip install aliyun-python-sdk-objectdet图像分析处理：pip install aliyun-python-sdk-imageprocess视觉搜索：pip install aliyun-python-sdk-imgsearch视频理解：pip install aliyun-python-sdk-videorecog视频生产：pip install aliyun-python-sdk-videoenhan视频分割：pip install aliyun-python-sdk-videoseg自行下载安装：使用git clone或其它方式下载SDK包并自行添加解决方案。详细下载地址如下所示。AI类目SDK链接pypi链接人脸人体aliyun-python-sdk-facebodyaliyun-python-sdk-facebody文字识别aliyun-python-sdk-ocraliyun-python-sdk-ocr商品理解aliyun-python-sdk-goodstechaliyun-python-sdk-goodstech内容安全aliyun-python-sdk-imageauditaliyun-python-sdk-imageaudit图像识别aliyun-python-sdk-imagerecogaliyun-python-sdk-imagerecog图像生产aliyun-python-sdk-imageenhanaliyun-python-sdk-imageenhan分割抠图aliyun-python-sdk-imagesegaliyun-python-sdk-imageseg目标检测aliyun-python-sdk-objectdetaliyun-python-sdk-objectdet视觉搜索aliyun-python-sdk-imgsearchaliyun-python-sdk-imgsearch图像分析处理aliyun-python-sdk-imageprocessaliyun-python-sdk-imageprocess视频生产aliyun-python-sdk-videoenhanaliyun-python-sdk-videoenhan视频理解aliyun-python-sdk-videorecogaliyun-python-sdk-videorecog视频分割aliyun-python-sdk-videosegaliyun-python-sdk-videoseg</code></pre></p><h2 id="8-代码示例"><a href="#8-代码示例" class="headerlink" title="8.代码示例"></a>8.代码示例</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -*- coding: utf8 -*-</span>from aliyunsdkcore.client import AcsClientfrom aliyunsdkimageenhan.request.v20190930 import MakeSuperResolutionImageRequestfrom aliyunsdkimageenhan.request.v20190930 import ExtendImageStyleRequestfrom aliyunsdkimageenhan.request.v20190930 import RecolorImageRequestfrom aliyunsdkimageenhan.request.v20190930 import ChangeImageSizeRequestfrom aliyunsdkimagerecog.request.v20190930 import RecognizeImageColorRequestfrom aliyunsdkimagerecog.request.v20190930 import RecognizeImageStyleRequestfrom aliyunsdkimagerecog.request.v20190930 import DetectImageElementsRequestfrom aliyunsdkimagerecog.request.v20190930 import TaggingImageRequestfrom aliyunsdkimagerecog.request.v20190930 import RecognizeSceneRequestfrom aliyunsdkfacebody.request.v20191230 import DetectFaceRequestfrom aliyunsdkfacebody.request.v20191230 import RecognizeFaceRequestfrom aliyunsdkfacebody.request.v20191230 import CompareFaceRequestfrom aliyunsdkocr.request.v20191230 import RecognizeCharacterRequestfrom aliyunsdkocr.request.v20191230 import RecognizeTableRequestfrom aliyunsdkocr.request.v20191230 import RecognizeIdentityCardRequestfrom aliyunsdkocr.request.v20191230 import RecognizeBankCardRequestfrom aliyunsdkocr.request.v20191230 import RecognizeBusinessCardRequestfrom aliyunsdkocr.request.v20191230 import RecognizeAccountPageRequestfrom aliyunsdkocr.request.v20191230 import RecognizeDriverLicenseRequestfrom aliyunsdkocr.request.v20191230 import RecognizeDrivingLicenseRequestfrom aliyunsdkocr.request.v20191230 import RecognizeLicensePlateRequestfrom aliyunsdkocr.request.v20191230 import RecognizeVINCodeRequestfrom aliyunsdkocr.request.v20191230 import RecognizeTaxiInvoiceRequestfrom aliyunsdkocr.request.v20191230 import RecognizeTrainTicketRequestfrom aliyunsdkocr.request.v20191230 import RecognizeBusinessLicenseRequestfrom aliyunsdkocr.request.v20191230 import RecognizeStampRequestfrom aliyunsdkgoodstech.request.v20191230 import ClassifyCommodityRequestfrom aliyunsdkimageaudit.request.v20191230 import ScanImageRequestfrom aliyunsdkimageseg.request.v20191230 import SegmentCommonImageRequestfrom aliyunsdkimageseg.request.v20191230 import SegmentBodyRequestfrom aliyunsdkimageseg.request.v20191230 import SegmentCommodityRequestfrom aliyunsdkobjectdet.request.v20191230 import DetectMainBodyRequestfrom aliyunsdkobjectdet.request.v20191230 import DetectVehicleRequest<span class="hljs-meta">#</span><span class="bash"> 创建 AcsClient 实例</span>client = AcsClient(&quot;&lt;your-access-key-id&gt;&quot;, &quot;&lt;your-access-key-secret&gt;&quot;, &quot;cn-shanghai&quot;)<span class="hljs-meta">#</span><span class="bash"> 清晰化/超分辨率</span>request = MakeSuperResolutionImageRequest.MakeSuperResolutionImageRequest()request.set_Url(&quot;http://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/MakeSuperResolution/sup-dog.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 尺寸变换</span>request = ChangeImageSizeRequest.ChangeImageSizeRequest()request.set_Url(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/ChangeImageSize/change-image-size-src.png&quot;)request.set_Width(500)request.set_Height(600)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 图像元素检测</span>request = DetectImageElementsRequest.DetectImageElementsRequest()request.set_Url(&quot;http://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/DetectImageElements/detect-elements-src.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 风格迁移</span>request = ExtendImageStyleRequest.ExtendImageStyleRequest()request.set_StyleUrl(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/ExtendImageStyle/styleUrl.jpeg&quot;)request.set_MajorUrl(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/ExtendImageStyle/majorUrl.jpeg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 色板识别</span>request = RecognizeImageColorRequest.RecognizeImageColorRequest()request.set_Url(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecolorImage/recolor-1-src.png&quot;)request.set_ColorCount(3)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 风格识别</span>request = RecognizeImageStyleRequest.RecognizeImageStyleRequest()request.set_Url(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecognizeImageStyle/technology.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 色彩迁移</span>request = RecolorImageRequest.RecolorImageRequest()<span class="hljs-meta">#</span><span class="bash">自动拓色</span>request.set_Mode(&quot;AUTO&quot;)request.set_Url(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecolorImage/recolor-1-src.png&quot;)request.set_ColorCount(3)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash">参考图拓色</span>request.set_Mode(&quot;REF_PIC&quot;)request.set_RefUrl(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecolorImage/recolor-1-src.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash">色板拓色</span>request.set_Mode(&quot;TEMPLATE&quot;)request.set_Url(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecolorImage/recolor-2-src.png&quot;)colorTemplateList = []colorTemplateList.append(&#123;&quot;Color&quot;: &quot;FF0000&quot;&#125;)colorTemplateList.append(&#123;&quot;Color&quot;: &quot;00FF00&quot;&#125;)colorTemplateList.append(&#123;&quot;Color&quot;: &quot;0000FF&quot;&#125;)request.set_ColorTemplates(colorTemplateList)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 通用图像打标</span>request = TaggingImageRequest.TaggingImageRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 场景识别</span>request = RecognizeSceneRequest.RecognizeSceneRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 人脸检测定位</span>request = DetectFaceRequest.DetectFaceRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommonImage/segmengImage.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 人脸属性识别</span>request = RecognizeFaceRequest.RecognizeFaceRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 人脸比对</span>request = CompareFaceRequest.CompareFaceRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURLA(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)request.set_ImageURLB(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 通用识别</span>request = RecognizeCharacterRequest.RecognizeCharacterRequest();request.set_MinHeight(10);request.set_OutputProbability(True);<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai-internal.aliyuncs.com/viapi-demo/images/RecognizeCharacter/recognizeCharacter_demo.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 表格识别</span>request = RecognizeTableRequest.RecognizeTableRequest();request.set_UseFinanceModel(False);request.set_AssureDirection(False);request.set_HasLine(False);request.set_SkipDetection(False);request.set_OutputFormat(&quot;json&quot;);<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 身份证识别</span>request = RecognizeIdentityCardRequest.RecognizeIdentityCardRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecognizeIdentityCard/identityCard.jpg&quot;)request.set_Side(&quot;face&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 银行卡识别</span>request = RecognizeBankCardRequest.RecognizeBankCardRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/RecognizeBankCard/bankcard.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 名片识别</span>request = RecognizeBusinessCardRequest.RecognizeBusinessCardRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 户口页识别</span>request = RecognizeAccountPageRequest.RecognizeAccountPageRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 驾驶证识别</span>request = RecognizeDriverLicenseRequest.RecognizeDriverLicenseRequest();request.set_Side(&quot;face&quot;)<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 行驶证识别</span>request = RecognizeDrivingLicenseRequest.RecognizeDrivingLicenseRequest();request.set_Side(&quot;face&quot;)<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 车牌识别</span>request = RecognizeLicensePlateRequest.RecognizeLicensePlateRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> VIN码识别</span>request = RecognizeVINCodeRequest.RecognizeVINCodeRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 出租车发票识别</span>request = RecognizeTaxiInvoiceRequest.RecognizeTaxiInvoiceRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 火车票识别</span>request = RecognizeTrainTicketRequest.RecognizeTrainTicketRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 营业执照识别</span>request = RecognizeBusinessLicenseRequest.RecognizeBusinessLicenseRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 公章识别</span>request = RecognizeStampRequest.RecognizeStampRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 商品分类</span>request = ClassifyCommodityRequest.ClassifyCommodityRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommonImage/segmentimage-src-hu.jpeg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 图片智能鉴黄</span>request = ScanImageRequest.ScanImageRequest();scenes = []scenes.append(&quot;porn&quot;)request.set_Scenes(scenes)tasks = []<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>tasks.append(&#123;&quot;DataId&quot;:&quot;&lt;your-data-id&gt;&quot;, &quot;ImageURL&quot;:&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/ChangeImageSize/change-image-size-src.png&quot;&#125;)request.set_Tasks(tasks)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 通用分割</span>request = SegmentCommonImageRequest.SegmentCommonImageRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommonImage/segmentimage-src-hu.jpeg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 人像分割</span>request = SegmentBodyRequest.SegmentBodyRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentBody/%E4%BA%BA%E5%83%8F%E5%88%86%E5%89%B2.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 商品分割</span>request = SegmentCommodityRequest.SegmentCommodityRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommodity/%E5%95%86%E5%93%81.png&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 主体检测</span>request = DetectMainBodyRequest.DetectMainBodyRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommonImage/segmentimage-src-hu.jpeg&quot;)response = client.do_action_with_exception(request)print(response)<span class="hljs-meta">#</span><span class="bash"> 机动车检测</span>request = DetectVehicleRequest.DetectVehicleRequest();<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如下url替换为自有的上海region的oss文件地址</span></span>request.set_ImageURL(&quot;https://xxx.oss-cn-shanghai.aliyuncs.com/xxx.jpg&quot;)response = client.do_action_with_exception(request)print(response)</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
      <tag>身份证识别</tag>
      
      <tag>文字识别</tag>
      
      <tag>OCR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 1 基于ECS搭建FTP服务</title>
    <link href="/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E5%9F%BA%E4%BA%8EECS%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E5%9F%BA%E4%BA%8EECS%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="一-ssh连接远程服务器"><a href="#一-ssh连接远程服务器" class="headerlink" title="一.ssh连接远程服务器"></a>一.ssh连接远程服务器</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447302650-2.PNG" alt=""></p><h1 id="二-安装vsftpd"><a href="#二-安装vsftpd" class="headerlink" title="二.安装vsftpd"></a>二.安装vsftpd</h1><h3 id="1-运行以下命令安装vsftpd。"><a href="#1-运行以下命令安装vsftpd。" class="headerlink" title="1.运行以下命令安装vsftpd。"></a>1.运行以下命令安装vsftpd。</h3><pre><code class="hljs shell">yum install -y vsftpd</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447372928-3.PNG" alt=""></p><h3 id="2-运行以下命令设置FTP服务开机自启动。"><a href="#2-运行以下命令设置FTP服务开机自启动。" class="headerlink" title="2.运行以下命令设置FTP服务开机自启动。"></a>2.运行以下命令设置FTP服务开机自启动。</h3><pre><code class="hljs shell">systemctl enable vsftpd.service</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447411683-4.PNG" alt=""></p><h3 id="3-启动FTP服务。"><a href="#3-启动FTP服务。" class="headerlink" title="3.启动FTP服务。"></a>3.启动FTP服务。</h3><pre><code class="hljs shell">systemctl start vsftpd.service</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447463450-5.PNG" alt=""></p><h3 id="4-运行以下命令查看FTP服务监听的端口。"><a href="#4-运行以下命令查看FTP服务监听的端口。" class="headerlink" title="4.运行以下命令查看FTP服务监听的端口。"></a>4.运行以下命令查看FTP服务监听的端口。</h3><pre><code class="hljs shell">netstat -antup | grep ftp</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447508354-6.PNG" alt=""></p><p>如图所示，表示FTP服务已启动，监听的端口号为 21。vsftpd默认已开启匿名访问功能，无需输入用户名密码即可登录FTP服务器，但没有修改或上传文件的权限。</p><h1 id="三-配置vsftpd"><a href="#三-配置vsftpd" class="headerlink" title="三.配置vsftpd"></a>三.配置vsftpd</h1><p>vsftpd（very secure FTP daemon）是一款在Linux发行版中最受推崇的FTP服务器。vsftpd支持匿名访问和本地用户模式两种访问方式。匿名访问方式任何用户都可以访问搭建的FTP服务；本地用户模式只支持添加的本地用户访问搭建的FTP服务。</p><ul><li>说明: 匿名用户模式和本地用户模式只可同时配置一种。</li></ul><h2 id="匿名用户模式"><a href="#匿名用户模式" class="headerlink" title="匿名用户模式"></a>匿名用户模式</h2><h3 id="1-修改配置文件vsftpd-conf。"><a href="#1-修改配置文件vsftpd-conf。" class="headerlink" title="1.  修改配置文件vsftpd.conf。"></a>1.  修改配置文件vsftpd.conf。</h3><pre><code class="hljs shell">vim /etc/vsftpd/vsftpd.conf</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447646260-7.PNG" alt=""></p><p>将匿名上传权限 anon_upload_enable=YES 的注释解开。</p><h3 id="2-按ESC键退出编辑模式，输入-wq-保存并退出vim。"><a href="#2-按ESC键退出编辑模式，输入-wq-保存并退出vim。" class="headerlink" title="2.  按ESC键退出编辑模式，输入:wq 保存并退出vim。"></a>2.  按ESC键退出编辑模式，输入:wq 保存并退出vim。</h3><h3 id="3-更改-var-ftp-pub目录的权限，为FTP用户添加写权限。"><a href="#3-更改-var-ftp-pub目录的权限，为FTP用户添加写权限。" class="headerlink" title="3.  更改/var/ftp/pub目录的权限，为FTP用户添加写权限。"></a>3.  更改/var/ftp/pub目录的权限，为FTP用户添加写权限。</h3><pre><code class="hljs shell">chmod o+w /var/ftp/pub/</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447723097-9.PNG" alt=""></p><h3 id="4-重启FTP服务。"><a href="#4-重启FTP服务。" class="headerlink" title="4.  重启FTP服务。"></a>4.  重启FTP服务。</h3><pre><code class="hljs shell">systemctl restart vsftpd.service</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447784558-10.PNG" alt=""></p><h2 id="本地用户模式"><a href="#本地用户模式" class="headerlink" title="本地用户模式"></a>本地用户模式</h2><h3 id="1-为FTP服务创建一个Linux用户。"><a href="#1-为FTP服务创建一个Linux用户。" class="headerlink" title="1.  为FTP服务创建一个Linux用户。"></a>1.  为FTP服务创建一个Linux用户。</h3><pre><code class="hljs shell">adduser ftptest</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447840217-11.PNG" alt=""></p><p>为用户设置密码。</p><pre><code class="hljs shell">passwd ftptest</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447901540-12.PNG" alt=""></p><h3 id="2-创建一个供FTP服务使用的文件目录。"><a href="#2-创建一个供FTP服务使用的文件目录。" class="headerlink" title="2.  创建一个供FTP服务使用的文件目录。"></a>2.  创建一个供FTP服务使用的文件目录。</h3><pre><code class="hljs shell">mkdir /var/ftp/test</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447950244-13.PNG" alt=""></p><h3 id="3-更改-var-ftp-test目录的拥有者为ftptest。"><a href="#3-更改-var-ftp-test目录的拥有者为ftptest。" class="headerlink" title="3.  更改/var/ftp/test目录的拥有者为ftptest。"></a>3.  更改/var/ftp/test目录的拥有者为ftptest。</h3><pre><code class="hljs awk">chown -R ftptest:ftptest <span class="hljs-regexp">/var/</span>ftp/test</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606447990186-14.PNG" alt=""></p><h3 id="4-修改vsftpd-conf配置文件。"><a href="#4-修改vsftpd-conf配置文件。" class="headerlink" title="4.  修改vsftpd.conf配置文件。"></a>4.  修改vsftpd.conf配置文件。</h3><p>配置FTP为主动模式请执行如下命令:</p><pre><code class="hljs shell">sed -i &#x27;s/anonymous_enable=YES/anonymous_enable=NO/&#x27; /etc/vsftpd/vsftpd.conf #禁止匿名登录FTP服务器 sed -i &#x27;s/listen=NO/listen=YES/&#x27; /etc/vsftpd/vsftpd.conf #监听IPv4 sockets sed -i &#x27;s/listen_ipv6=YES/#listen_ipv6=YES/&#x27; /etc/vsftpd/vsftpd.conf #关闭监听IPv6 sockets sed -i &#x27;s/#chroot_local_user=YES/chroot_local_user=YES/&#x27; /etc/vsftpd/vsftpd.conf #全部用户被限制在主目录 sed -i &#x27;s/#chroot_list_enable=YES/chroot_list_enable=YES/&#x27; /etc/vsftpd/vsftpd.conf #启用例外用户名单 sed -i &#x27;s/#chroot_list_file=/chroot_list_file=/&#x27; /etc/vsftpd/vsftpd.conf #指定例外用户列表文件，列表中的用户不被锁定在主目录 echo &quot;allow_writeable_chroot=YES&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf echo &quot;local_root=/var/ftp/test&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #设置本地用户登录后所在的目录</code></pre><ul><li>配置FTP为被动模式请执行如下命令：</li></ul><pre><code class="hljs shell">sed -i &#x27;s/anonymous_enable=YES/anonymous_enable=NO/&#x27; /etc/vsftpd/vsftpd.conf #禁止匿名登录FTP服务器 sed -i &#x27;s/listen=NO/listen=YES/&#x27; /etc/vsftpd/vsftpd.conf #监听IPv4 sockets sed -i &#x27;s/listen_ipv6=YES/#listen_ipv6=YES/&#x27; /etc/vsftpd/vsftpd.conf #关闭监听IPv6 sockets sed -i &#x27;s/#chroot_local_user=YES/chroot_local_user=YES/&#x27; /etc/vsftpd/vsftpd.conf #全部用户被限制在主目录 sed -i &#x27;s/#chroot_list_enable=YES/chroot_list_enable=YES/&#x27; /etc/vsftpd/vsftpd.conf #启用例外用户名单 sed -i &#x27;s/#chroot_list_file=/chroot_list_file=/&#x27; /etc/vsftpd/vsftpd.conf #指定例外用户列表文件，列表中的用户不被锁定在主目录 echo &quot;allow_writeable_chroot=YES&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf echo &quot;local_root=/var/ftp/test&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #设置本地用户登录后所在的目录 echo &quot;pasv_enable=YES&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #开启被动模式 echo &quot;pasv_address=&lt;FTP服务器公网IP地址&gt;&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #本教程中为ECS服务器弹性IP echo &quot;pasv_min_port=20&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #设置被动模式下，建立数据传输可使用的端口范围的最小值 echo &quot;pasv_max_port=21&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf #设置被动模式下，建立数据传输可使用的端口范围的最大值</code></pre><h3 id="5-在-etc-vsftpd目录下创建chroot-list文件，并在文件中写入例外用户名单。"><a href="#5-在-etc-vsftpd目录下创建chroot-list文件，并在文件中写入例外用户名单。" class="headerlink" title="5.  在/etc/vsftpd目录下创建chroot_list文件，并在文件中写入例外用户名单。"></a>5.  在/etc/vsftpd目录下创建chroot_list文件，并在文件中写入例外用户名单。</h3><h1 id="使用vim命令编辑chroot-list文件，添加例外用户名单。此名单中的用户不会被锁定在主目录，可以访问其他目录。"><a href="#使用vim命令编辑chroot-list文件，添加例外用户名单。此名单中的用户不会被锁定在主目录，可以访问其他目录。" class="headerlink" title="使用vim命令编辑chroot_list文件，添加例外用户名单。此名单中的用户不会被锁定在主目录，可以访问其他目录。"></a>使用vim命令编辑chroot_list文件，添加例外用户名单。此名单中的用户不会被锁定在主目录，可以访问其他目录。</h1><pre><code class="hljs shell">vim /etc/vsftpd/chroot_list</code></pre><p>没有例外用户时，也必须创建chroot_list文件，内容可为空。</p><h3 id="6-重启FTP服务。"><a href="#6-重启FTP服务。" class="headerlink" title="6.  重启FTP服务。"></a>6.  重启FTP服务。</h3><pre><code class="hljs shell">systemctl restart vsftpd.service</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606448489247-16.PNG" alt=""></p><h1 id="四-客户端测试"><a href="#四-客户端测试" class="headerlink" title="四.客户端测试"></a>四.客户端测试</h1><p>FTP客户端、Windows命令行工具或浏览器均可用来测试FTP服务器。（此步骤仅适用于本地用户，匿名模式无需进行测试操作）</p><p>说明：使用浏览器访问FTP服务器出错时，建议您清除浏览器缓存后再尝试。</p><h3 id="1-打开搜狗浏览器，在地址栏中输入ftp-139-224-107-98"><a href="#1-打开搜狗浏览器，在地址栏中输入ftp-139-224-107-98" class="headerlink" title="1.    打开搜狗浏览器，在地址栏中输入ftp://139.224.107.98/"></a>1.    打开搜狗浏览器，在地址栏中输入ftp://139.224.107.98/</h3><h3 id="2-在弹出的对话框中，输入用户名和密码。"><a href="#2-在弹出的对话框中，输入用户名和密码。" class="headerlink" title="2.    在弹出的对话框中，输入用户名和密码。"></a>2.    在弹出的对话框中，输入用户名和密码。</h3><h3 id="3-登录成功界面如下，此时可对FTP文件进行相应权限的操作。"><a href="#3-登录成功界面如下，此时可对FTP文件进行相应权限的操作。" class="headerlink" title="3.    登录成功界面如下，此时可对FTP文件进行相应权限的操作。"></a>3.    登录成功界面如下，此时可对FTP文件进行相应权限的操作。</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606448628627-17.PNG" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/?spm=a2c6h.13788107.J_3120529270.3.450750a3CaVHui">云上实践 云上成长 ECS 7天实践训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>在家学习</tag>
      
      <tag>ECS</tag>
      
      <tag>FTP服务</tag>
      
      <tag>进阶班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class 1 达摩院视觉AI技术应用探索</title>
    <link href="/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E8%BE%BE%E6%91%A9%E9%99%A2%E8%A7%86%E8%A7%89AI%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E6%8E%A2%E7%B4%A2/"/>
    <url>/2020/11/27/%E9%98%BF%E9%87%8C%E4%BA%91/Class%201%20%E8%BE%BE%E6%91%A9%E9%99%A2%E8%A7%86%E8%A7%89AI%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、视觉生产——定义"><a href="#一、视觉生产——定义" class="headerlink" title="一、视觉生产——定义"></a>一、视觉生产——定义</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464675792-QQ%E6%88%AA%E5%9B%BE20201127161102.png" alt=""></p><p>通过一个/一系列视觉过程，产出新的视觉表达。<br>产出:人或机器能够感知的图像视频，而不是标签或特征；<br>要求:新的，和输入不一样的。<br>输入（参数/素材）——&gt;过程（视觉生产）——&gt;产出（素材/成品）</p><h1 id="二、视觉生产——分类"><a href="#二、视觉生产——分类" class="headerlink" title="二、视觉生产——分类"></a>二、视觉生产——分类</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464721190-QQ%E6%88%AA%E5%9B%BE20201127161145.png" alt=""></p><p>1.生成:从0到1<br>2.拓展:从1到N<br>3.摘要:从N到1<br>4.升维:从An到An+1（比如2D到3D，静态到动态等）<br>5.增强/变换:从A到B（改）<br>6.插入/合成:A+B=C（增）<br>7.擦除:A-B=C（删）</p><h1 id="三、视觉生产——通用基础框架"><a href="#三、视觉生产——通用基础框架" class="headerlink" title="三、视觉生产——通用基础框架"></a>三、视觉生产——通用基础框架</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464776274-QQ%E6%88%AA%E5%9B%BE20201127161244.png" alt=""></p><p>（请求）输入（参数、素材等）<br>（分发）生产类型（通用生成、素材合成等）<br>（服务）视觉生产引擎（生成引擎、搜索引擎）<br>（响应）输出图像/视频/3D（素材、案例等）</p><h1 id="四、视觉生产——五个关键维度（由下至上，由浅入深）"><a href="#四、视觉生产——五个关键维度（由下至上，由浅入深）" class="headerlink" title="四、视觉生产——五个关键维度（由下至上，由浅入深）"></a>四、视觉生产——五个关键维度（由下至上，由浅入深）</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464804833-QQ%E6%88%AA%E5%9B%BE20201127160922.png" alt=""></p><ul><li>带来用户/商业价值（可用）</li><li>提供用户预期的抓手（可控）</li><li>保证结果的丰富性（多样）</li><li>合乎语义/内容逻辑（合理）</li><li>满足视觉/美学表现（可看）</li></ul><h1 id="五、精细理解——分割抠图"><a href="#五、精细理解——分割抠图" class="headerlink" title="五、精细理解——分割抠图"></a>五、精细理解——分割抠图</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464854114-QQ%E6%88%AA%E5%9B%BE20201127161348.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464944259-QQ%E6%88%AA%E5%9B%BE20201127161449.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/2020-11-27/1606464967105-QQ%E6%88%AA%E5%9B%BE20201127161557.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127161704.png" alt=""></p><p>识别：知道是什么<br>检测：识别+知道在哪儿<br>分割：识别+检测+每一个像素是什么</p><h1 id="六、视觉生成——框架流程"><a href="#六、视觉生成——框架流程" class="headerlink" title="六、视觉生成——框架流程"></a>六、视觉生成——框架流程</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127161758.png" alt=""></p><p>1.理需求<br>2.定草图<br>3.选状态<br>4.调细节<br>5.生成图<br>6.评好坏</p><p>素材准备——基础特——智能特效——智能编排</p><h1 id="七、视觉编辑"><a href="#七、视觉编辑" class="headerlink" title="七、视觉编辑"></a>七、视觉编辑</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162042.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162043.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162047.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162046.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162045.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162044.png" alt=""></p><p>视觉植入：可实现在视频里进行文字、图片的拼接插入或者删除<br>画幅变化：调整画幅比例、图片尺寸等</p><h1 id="八、视觉增强（分辨率、帧率、色彩）"><a href="#八、视觉增强（分辨率、帧率、色彩）" class="headerlink" title="八、视觉增强（分辨率、帧率、色彩）"></a>八、视觉增强（分辨率、帧率、色彩）</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162140.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162245.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162244.png" alt=""></p><p>人脸修复增强、渲染图超分、视频超分、插帧、HDR色彩扩展、风格迁移</p><h1 id="九、视觉制造"><a href="#九、视觉制造" class="headerlink" title="九、视觉制造"></a>九、视觉制造</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162340.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162401.png" alt=""></p><p>实体设计制造、服装几何生成、多样性拓展等</p><h1 id="十、视觉智能开放平台"><a href="#十、视觉智能开放平台" class="headerlink" title="十、视觉智能开放平台"></a>十、视觉智能开放平台</h1><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201127162454.png" alt=""></p><p><a href="vision.aliyun.com">视觉开放平台</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.aliyun.com/adc/student/bootcamp/ai/2?spm=a2c6h.13788107.J_3120529270.4.450750a3fjp2m1&amp;accounttraceid=9cafb5972ade4cb484e00857d47625bbdkwh">达摩院特别版-视觉AI训练营</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>达摩院</tag>
      
      <tag>AI</tag>
      
      <tag>应用</tag>
      
      <tag>视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab学习</title>
    <link href="/2020/09/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/matlab%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/09/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/matlab%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一-函数intlinprog的使用"><a href="#一-函数intlinprog的使用" class="headerlink" title="一.函数intlinprog的使用"></a>一.函数intlinprog的使用</h2><h3 id="1-intlinprog介绍"><a href="#1-intlinprog介绍" class="headerlink" title="1. intlinprog介绍"></a>1. intlinprog介绍</h3><blockquote><p>intlinprog是matlab中用于求解混合整数线性规划(Mixed-integer linear programming)的一个函数，用法基本和linprog差不多。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190904121312375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZfaF9o,size_16,color_FFFFFF,t_70" alt=""></p><h4 id="intlinprog函数有九个参数"><a href="#intlinprog函数有九个参数" class="headerlink" title="intlinprog函数有九个参数"></a>intlinprog函数有九个参数</h4><blockquote><p>大多数求解线性规划问题时，只用到前面8个参数，所以这里，我就详细的讲解前面8个参数的含义<br><pre><code class="hljs shell">     f ：目标函数的系数矩阵intcon ：整数所在位置     A ：不等式约束的变量系数矩阵     b ：不等式约束的资源数   Aeq ：等式约束的变量系数矩阵   beq ：等式约束的资源数    lb ：变量约束下限    ub ：变量约束上限</code></pre></p></blockquote><h3 id="2-实例和代码"><a href="#2-实例和代码" class="headerlink" title="2. 实例和代码"></a>2. 实例和代码</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1:"></a>例1:</h4><p><img src="https://img-blog.csdnimg.cn/20190904123701805.png" alt=""></p><ul><li>根据函数的使用要求；</li><li>求最大值，首先要把目标函数转化为最小值，即min z = - (2x+3y)；</li><li>要把大于等于转换为小于等于，即在有 “≥” 符号式子两边同时乘以-1；</li></ul><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><pre><code class="hljs matlab">f = [<span class="hljs-number">-2</span> <span class="hljs-number">-3</span>];                        <span class="hljs-comment">% 目标函数的系数矩阵</span>intcon = [];                        <span class="hljs-comment">% 整数所在位置，题目没有要求，所以是空</span>A = [<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>];              <span class="hljs-comment">% 不等式约束的变量系数矩阵</span>b = [<span class="hljs-number">2</span>;<span class="hljs-number">1</span>;<span class="hljs-number">-1</span>];                       <span class="hljs-comment">% 不等式约束的资源数</span>[x,fval] = intlinprog(f,intcon,A,b);    <span class="hljs-comment">% fval代表最优解处的函数值</span>x,fval = -fval                      <span class="hljs-comment">% 返回最大值的结果</span></code></pre><h5 id="运行结果如下；"><a href="#运行结果如下；" class="headerlink" title="运行结果如下；"></a>运行结果如下；</h5><p><img src="https://img-blog.csdnimg.cn/20190904130117912.png" alt=""></p><h4 id="例2"><a href="#例2" class="headerlink" title="例2:"></a>例2:</h4><p><img src="https://img-blog.csdnimg.cn/20190904130812503.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20190904130818930.png" alt=""><br>该问题是个0-1规划问题，加上限制条件即可，代码如下：<br><pre><code class="hljs matlab">c = [<span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span>];intcon = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];a = [<span class="hljs-number">56</span>,<span class="hljs-number">20</span>,<span class="hljs-number">54</span>,<span class="hljs-number">42</span>,<span class="hljs-number">15</span>;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>];b = [<span class="hljs-number">100</span>;<span class="hljs-number">4</span>;<span class="hljs-number">-2</span>];aeq=[];beq=[];lb = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);        <span class="hljs-comment">% 生成1×5的 0 矩阵</span>ub = <span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);         <span class="hljs-comment">% 生成1×5的 1 矩阵</span>[x,fval]=intlinprog(c,intcon,a,b,aeq,beq,lb,ub)<span class="hljs-comment">%变量的下限是0，上限是1，同时限制了变量是整数。这就是0-1整数规划。同理，其他的规划，可以自己推。</span></code></pre><br><pre><code class="hljs matlab">matlab结果如下：    x =         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>    fval =         <span class="hljs-number">3</span></code></pre></p><h3 id="3-补充说明："><a href="#3-补充说明：" class="headerlink" title="3.补充说明："></a>3.补充说明：</h3><blockquote><p>使用intlinprog函数时，如果没有该参数所对应的限制条件，是用 [] 符号代替，不可以不写（在不打乱intlinprog函数参数顺序的前提下，如果后面都是[],可以省略不写）</p></blockquote><h2 id="二-函数fmincon的使用"><a href="#二-函数fmincon的使用" class="headerlink" title="二.函数fmincon的使用"></a>二.函数fmincon的使用</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>在matlab中，fmincon函数可以求解带约束的非线性多变量函数(Constrained nonlinear multivariable function)的最小值,即可以用来求解非线性规划问题<br>matlab中，非线性规划模型的写法如下<br><img src="https://s1.ax1x.com/2020/07/25/UzeDXR.png" alt="UzeDXR.png"></p><h3 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h3><p><strong>[x,fval]=fmincon(fun,x0,A,b,Aeq,beq,lb,ub,nonlcon,options)</strong></p><p>参数介绍：</p><ul><li><p>x的返回值是决策向量x的取值，fval的返回值是目标函数f(x)的取值</p></li><li><p>fun是用M文件定义的函数f(x),代表了(非)线性目标函数&lt;/p&gt;</p></li><li>x0是x的初始值&lt;/p&gt;</li><li><p>A,b,Aeq,beq定义了线性约束 ,如果没有线性约束，则A=[],b=[],Aeq=[],beq=[]</p></li><li><p>lb和ub是变量x的下界和上界，如果下界和上界没有约束，则lb=[],ub=[],也可以写成lb的各分量都为 -inf,ub的各分量都为inf</p></li><li><p>nonlcon是用M文件定义的非线性向量函数约束</p></li><li><p>options定义了优化参数，不填写表示使用Matlab默认的参数设置</p></li></ul><h3 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h3><p>求下列非线性规划：</p><p><img src="https://s1.ax1x.com/2020/07/25/UzmdVP.png" alt="UzmdVP.png"></p><p>(1)编写fun.m文件存储参数f<br><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">fun</span><span class="hljs-params">(x)</span></span>f=x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">3</span>)^<span class="hljs-number">2</span>+<span class="hljs-number">8</span>;</code></pre><br>(2)编写nonlcon.m文件<br><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[c,ceq]</span>=<span class="hljs-title">nonlcon</span><span class="hljs-params">(x)</span></span>c=[-x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>)-x(<span class="hljs-number">3</span>)^<span class="hljs-number">2</span>x(<span class="hljs-number">1</span>)+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">3</span>)^<span class="hljs-number">2</span><span class="hljs-number">-20</span>];ceq=[-x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>-x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+<span class="hljs-number">2</span>x(<span class="hljs-number">2</span>)+<span class="hljs-number">2</span>*x(<span class="hljs-number">3</span>)^<span class="hljs-number">2</span><span class="hljs-number">-3</span>];</code></pre><br>(3)执行fmincon()函数<br><pre><code class="hljs matlab">a=[];b=[];aeq=[];beq=[];lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);ub=[];[x,val]=fmincon(<span class="hljs-string">&#x27;fun&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>],a,b,aeq,beq,lb,ub,<span class="hljs-string">&#x27;nonlcon&#x27;</span>)</code></pre><br><strong>⚠注意事项：</strong></p><ol><li>在书写[c,ceq]=nonlcon(x)函数时，c和ceq中若存在$2x_i^2$时，✖需要用 $*$ 表示出来。</li><li>$x_0$的值必须要写！</li><li>matlab中函数文件名必须要和对应的函数调用时的名字一样。<br>(4)运行结果<pre><code class="hljs matlab">x =        <span class="hljs-number">0.6312</span>    <span class="hljs-number">1.2656</span>    <span class="hljs-number">0.9312</span>val =       <span class="hljs-number">10.8672</span></code></pre></li></ol><h2 id="三-函数fmbnd-fminunc-fminsearch-与fmincon"><a href="#三-函数fmbnd-fminunc-fminsearch-与fmincon" class="headerlink" title="三.函数fmbnd()  fminunc() fminsearch() 与fmincon()"></a>三.函数fmbnd()  fminunc() fminsearch() 与fmincon()</h2><p><img src="https://s1.ax1x.com/2020/08/06/acdOVf.jpg" alt="acdOVf.jpg"></p><h3 id="1-求解一元无约束规划"><a href="#1-求解一元无约束规划" class="headerlink" title="1.求解一元无约束规划"></a>1.求解一元无约束规划</h3><p>[x, fval]= fminbnd (f,x1,x2）其中fun为目标函数，支持字符串，inline函数，句柄函数，[x1,x2]为优化区间。输出x为最优解，fval为最优值。</p><h4 id="1-1-例1-求解一元非线性无约束函数"><a href="#1-1-例1-求解一元非线性无约束函数" class="headerlink" title="1.1 例1 求解一元非线性无约束函数"></a>1.1 例1 求解一元非线性无约束函数</h4><p>求函数$y=2e^{-x}sin(x)$在区间【0，8】上的最大值、最小值。</p><h5 id="1-1-1-画图"><a href="#1-1-1-画图" class="headerlink" title="1.1.1 画图"></a>1.1.1 画图</h5><pre><code class="hljs matlab">matlab代码如下:x=<span class="hljs-number">0</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">8</span>;y=<span class="hljs-number">2</span>*<span class="hljs-built_in">exp</span>(-x).*<span class="hljs-built_in">sin</span>(x);<span class="hljs-built_in">plot</span>(x,y)</code></pre><p><img src="https://s1.ax1x.com/2020/07/26/apDcLj.png" alt="apDcLj.png"></p><h5 id="1-1-2-求最大值"><a href="#1-1-2-求最大值" class="headerlink" title="1.1.2 求最大值"></a>1.1.2 求最大值</h5><p>代码 如下<br><pre><code class="hljs matlab">ymax=<span class="hljs-string">&#x27;2*exp(-x)*sin(x)&#x27;</span>;[xmin,fmin]=fminbnd(ymax,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)</code></pre><br>答案是<br><pre><code class="hljs matlab">xmin =        <span class="hljs-number">3.9270</span>fmin =       <span class="hljs-number">-0.0279</span></code></pre></p><h5 id="1-1-3-求最小值"><a href="#1-1-3-求最小值" class="headerlink" title="1.1.3 求最小值"></a>1.1.3 求最小值</h5><p>tip:$fminbnd(y,start,end)$函数默认是求函数$y$的最大值，所以求最小值时我们需要将y函数变号。<br>matlab代码如下<br><pre><code class="hljs matlab">ymin=<span class="hljs-string">&#x27;-2*exp(-x)*sin(x)&#x27;</span>[xmax,fmax]=fminbnd(ymin,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)</code></pre><br>答案是<br><pre><code class="hljs matlab">xmax =        <span class="hljs-number">0.7854</span>    fmax =       <span class="hljs-number">-0.6448</span></code></pre></p><h3 id="2-多元无约束优化"><a href="#2-多元无约束优化" class="headerlink" title="2 多元无约束优化"></a>2 多元无约束优化</h3><p>[x, fval]= fminunc(fun,x0)<br>[x, fval]= fminsearch(fun,x0)</p><p>其中：输入参数fun为目标函数，支持字符串，inline函数、句柄函数，x0为初值，必须得有<br>注意：fminunc，fminsearch只支持函数fun自变量单变量符号，如x(1),x(2)等</p><h4 id="2-1-例2-求解多元非线性无约束函数"><a href="#2-1-例2-求解多元非线性无约束函数" class="headerlink" title="2.1 例2 求解多元非线性无约束函数"></a>2.1 例2 求解多元非线性无约束函数</h4><script type="math/tex; mode=display">min \ z=100(x-y^2)^2+(1-y)^2</script><h5 id="2-1-1-画图"><a href="#2-1-1-画图" class="headerlink" title="2.1.1 画图"></a>2.1.1 画图</h5><pre><code class="hljs matlab">x=<span class="hljs-number">-1000</span>:<span class="hljs-number">1</span>:<span class="hljs-number">1000</span>;y=x;z=<span class="hljs-number">100</span>(x-y.^<span class="hljs-number">2</span>).^<span class="hljs-number">2</span>+(<span class="hljs-number">1</span>-y).^<span class="hljs-number">2</span>;<span class="hljs-built_in">plot3</span>(x,y,z)</code></pre><p><img src="https://s1.ax1x.com/2020/07/26/aphCCj.png" alt="aphCCj.png"></p><h5 id="2-1-2-求解最小值"><a href="#2-1-2-求解最小值" class="headerlink" title="2.1.2 求解最小值"></a>2.1.2 求解最小值</h5><p>matlab代码如下：<br><pre><code class="hljs matlab">f=<span class="hljs-string">&#x27;100*(x(1)-x(2)^2)^2+(1-x(2))^2&#x27;</span>;[x,fval]=fminunc(f,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])[x_1,fval_1]=fminsearch(f,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])</code></pre><br>答案是<br><pre><code class="hljs matlab">x =        <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.0000</span>fval =       <span class="hljs-number">1.9474e-11</span>x_1 =        <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.0000</span>fval_1 =       <span class="hljs-number">3.6862e-10</span></code></pre></p><h5 id="2-1-3-区别"><a href="#2-1-3-区别" class="headerlink" title="2.1.3 区别"></a>2.1.3 区别</h5><p>我们可以看到上面的结果是不同的，我们可以大胆猜一下可能是每个方法实现的算法不同。</p><blockquote><p>知乎：fminunc与fminsearch函数的区别是什么?<br>      两个都是求极小值，有区别吗？<br>      张国王 中科院人工智能研究人员，主攻大规模遥感图像智能化解译<br>      共同点：<br>      算法属性：局部最优化算法<br>      适用范围：无约束多变量最优化问题<br>      不同点：两个函数使用的方法不一样<br>      fminunc 采用拟牛顿法(QN)，是一种使用导数的算法。参见拟牛顿法 分析与推导<br>      fminsearch 采用Nelder-Mead单纯形法，是一种直接搜索法。参考单纯形法、Simplex Method</p></blockquote><h3 id="3-有约束优化"><a href="#3-有约束优化" class="headerlink" title="3.有约束优化"></a>3.有约束优化</h3><blockquote><p>这就是我们前几天一直做的问题。<br>[x, fval]= fmincon(fun,x0,A,b,Aeq,beq,lb,ub,nonlcon)<br>参数解释:fun为目标函数，支持字符串、inline函数，句柄函数，x0初值，A线性不等式约束系数、b线性不等式约束常数项、Aeq线性等式约束系数，线性beq等式约束常数，nonlcon非线性约束，支持句柄函数。</p></blockquote><h4 id="3-1-例3-求解非线性有约束函数"><a href="#3-1-例3-求解非线性有约束函数" class="headerlink" title="3.1 例3 求解非线性有约束函数"></a>3.1 例3 求解非线性有约束函数</h4><script type="math/tex; mode=display">min \ f =x_1^2+4x_2^2+x_3^2</script><script type="math/tex; mode=display">s.t. \ 3x_1+4x_2+x_3\geq13</script><script type="math/tex; mode=display">x_1^2+x_2^2-x_3\leq100</script><script type="math/tex; mode=display">3x_1^2+x_2^2-10\sqrt{x_3}\geq20</script><script type="math/tex; mode=display">3x_1-x_2^2+x_3=50</script><script type="math/tex; mode=display">x_1,x_2,x_3\geq0</script><h5 id="3-1-1-画图"><a href="#3-1-1-画图" class="headerlink" title="3.1.1 画图"></a>3.1.1 画图</h5><h5 id="3-1-2-求最小值"><a href="#3-1-2-求最小值" class="headerlink" title="3.1.2 求最小值"></a>3.1.2 求最小值</h5><p>matlab代码如下<br><pre><code class="hljs matlab"><span class="hljs-comment">%(1)编写fun.m函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">fun</span><span class="hljs-params">(x)</span></span>f=x(<span class="hljs-number">1</span>).^<span class="hljs-number">2</span>+<span class="hljs-number">4</span>*(<span class="hljs-number">2</span>).^<span class="hljs-number">2</span>+x(<span class="hljs-number">3</span>).^<span class="hljs-number">2</span><span class="hljs-comment">%(2)编写nonlcon.m函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[c,ceq]</span>=<span class="hljs-title">nonlcon</span><span class="hljs-params">(x)</span></span>c=[x(<span class="hljs-number">1</span>).^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>).^<span class="hljs-number">2</span>-x(<span class="hljs-number">3</span>)<span class="hljs-number">-100</span>  <span class="hljs-number">-3</span>*x(<span class="hljs-number">1</span>).^<span class="hljs-number">3</span>-x(<span class="hljs-number">2</span>).^<span class="hljs-number">2</span>+<span class="hljs-number">10</span>*x(<span class="hljs-number">3</span>).^<span class="hljs-number">0.5</span>+<span class="hljs-number">20</span>]  ceq=[<span class="hljs-number">3</span>*x(<span class="hljs-number">1</span>)-x(<span class="hljs-number">2</span>).^<span class="hljs-number">2</span>+x(<span class="hljs-number">3</span>)<span class="hljs-number">-50</span>]<span class="hljs-comment">%(3)执行matlab</span>x0=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)a=[<span class="hljs-number">-3</span> <span class="hljs-number">-4</span> <span class="hljs-number">-1</span>]b=[<span class="hljs-number">-13</span>]aeq=[]beq=[]lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)ub=[][x,val]=fmincon(<span class="hljs-string">&#x27;fun&#x27;</span>,x0,a,b,aeq,beq,lb,ub,<span class="hljs-string">&#x27;nonlcon&#x27;</span>)</code></pre><br>答案是<br><pre><code class="hljs matlab">x =       <span class="hljs-number">10.8390</span>    <span class="hljs-number">0.0005</span>   <span class="hljs-number">17.4831</span>val =      <span class="hljs-number">439.1423</span></code></pre></p><h2 id="四-关于统计学的一些函数"><a href="#四-关于统计学的一些函数" class="headerlink" title="四.关于统计学的一些函数"></a>四.关于统计学的一些函数</h2><p><img src="https://s1.ax1x.com/2020/07/27/aFVnf0.png" alt="aFVnf0.png"></p><h3 id="1-标准正态分布"><a href="#1-标准正态分布" class="headerlink" title="1. 标准正态分布"></a>1. 标准正态分布</h3><h4 id="1-1-概率密度函数图像"><a href="#1-1-概率密度函数图像" class="headerlink" title="1.1 概率密度函数图像"></a>1.1 概率密度函数图像</h4><script type="math/tex; mode=display">y=normpdf(x,mu,sigma)</script><h5 id="1-1-1-参数说明"><a href="#1-1-1-参数说明" class="headerlink" title="1.1.1 参数说明"></a>1.1.1 参数说明</h5><pre><code class="hljs matlab">mu：均值sigma：标准差y：正态概率密度函数在x处的值</code></pre><h5 id="1-1-2-例1"><a href="#1-1-2-例1" class="headerlink" title="1.1.2 例1"></a>1.1.2 例1</h5><p>绘制标准正态分布的概率密度图像。<br><pre><code class="hljs matlab">x=<span class="hljs-number">-10</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">10</span>mu=<span class="hljs-number">0</span>sigma=<span class="hljs-number">1</span>y=normpdf(x,mu,sigma)<span class="hljs-built_in">plot</span>(x,y)</code></pre></p><p><img src="https://s1.ax1x.com/2020/07/27/aiXbfs.png" alt="aiXbfs.png"></p><h4 id="1-2-分布函数图像"><a href="#1-2-分布函数图像" class="headerlink" title="1.2 分布函数图像"></a>1.2 分布函数图像</h4><script type="math/tex; mode=display">y=normcdf(x,mu,signma)</script><h5 id="1-2-1-参数说明"><a href="#1-2-1-参数说明" class="headerlink" title="1.2.1 参数说明"></a>1.2.1 参数说明</h5><pre><code class="hljs matlab">mu：均值sigma：标准差y：正态概率函数在x处的值</code></pre><h5 id="1-2-2-例2"><a href="#1-2-2-例2" class="headerlink" title="1.2.2 例2"></a>1.2.2 例2</h5><p>绘制标准正态分布的分布函数图像。</p><pre><code class="hljs matlab">x=<span class="hljs-number">-10</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">10</span>mu=<span class="hljs-number">0</span>sigma=<span class="hljs-number">1</span>y=normcdf(x,mu,sigma)<span class="hljs-built_in">plot</span>(x,y)</code></pre><p><img src="https://s1.ax1x.com/2020/07/27/aijYB8.png" alt="aijYB8.png"></p><h4 id="1-3-标准正态分布求分位数"><a href="#1-3-标准正态分布求分位数" class="headerlink" title="1.3 标准正态分布求分位数"></a>1.3 标准正态分布求分位数</h4><p>概率密度函数求分位数：</p><script type="math/tex; mode=display">norminv(α,mu,sigma)</script><p>概率分布函数求分位数：</p><script type="math/tex; mode=display">norcdf(α,mu,sigma)</script><h5 id="1-3-1-参数说明"><a href="#1-3-1-参数说明" class="headerlink" title="1.3.1 参数说明"></a>1.3.1 参数说明</h5><pre><code class="hljs matlab">mu：均值sigma：标准差<span class="hljs-built_in">ans</span>：α的分位数（即横坐标上的值）</code></pre><h5 id="1-3-2-求解标准正态分布α-0-5的分位数"><a href="#1-3-2-求解标准正态分布α-0-5的分位数" class="headerlink" title="1.3.2 求解标准正态分布α=0.5的分位数"></a>1.3.2 求解标准正态分布α=0.5的分位数</h5><pre><code class="hljs matlab">mu=<span class="hljs-number">0</span>sigma=<span class="hljs-number">1</span>norminv(<span class="hljs-number">0.5</span>,mu,sigma)normcdf(<span class="hljs-number">0.5</span>,mu,sigma)</code></pre><p>答案是</p><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =         <span class="hljs-number">0</span><span class="hljs-built_in">ans</span> =        <span class="hljs-number">0.6915</span></code></pre><h3 id="2-卡方分布"><a href="#2-卡方分布" class="headerlink" title="2. 卡方分布"></a>2. 卡方分布</h3><h4 id="2-1-概率密度函数图像"><a href="#2-1-概率密度函数图像" class="headerlink" title="2.1 概率密度函数图像"></a>2.1 概率密度函数图像</h4><script type="math/tex; mode=display">y=chi2pdf(x,n)</script><h5 id="2-1-1-参数说明"><a href="#2-1-1-参数说明" class="headerlink" title="2.1.1 参数说明"></a>2.1.1 参数说明</h5><pre><code class="hljs matlab">n：卡方分布的自由度y：卡方概率密度函数在x处的值</code></pre><h5 id="1-1-2-例1-1"><a href="#1-1-2-例1-1" class="headerlink" title="1.1.2 例1"></a>1.1.2 例1</h5><p>绘制自由度n=2的卡方分布的概率密度图像。</p><pre><code class="hljs matlab">x=<span class="hljs-number">-10</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">10</span>n=<span class="hljs-number">2</span>y=chi2pdf(x,<span class="hljs-number">2</span>)<span class="hljs-built_in">plot</span>(x,y)</code></pre><p><img src="https://s1.ax1x.com/2020/07/27/aFSvo8.png" alt="aFSvo8.png"></p><h4 id="2-2-分布函数图像"><a href="#2-2-分布函数图像" class="headerlink" title="2.2 分布函数图像"></a>2.2 分布函数图像</h4><script type="math/tex; mode=display">y=chi2cdf(x,n)</script><h5 id="2-2-1-参数说明"><a href="#2-2-1-参数说明" class="headerlink" title="2.2.1 参数说明"></a>2.2.1 参数说明</h5><pre><code class="hljs matlab">n：卡方分布的自由度y：卡方概率分布函数在x处的值</code></pre><h5 id="1-1-2-例1-2"><a href="#1-1-2-例1-2" class="headerlink" title="1.1.2 例1"></a>1.1.2 例1</h5><p>绘制自由度n=2的卡方分布的概率分布图像。<br><pre><code class="hljs matlab">x=<span class="hljs-number">-10</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">10</span>n=<span class="hljs-number">2</span>y=chi2cdf(x,<span class="hljs-number">2</span>)<span class="hljs-built_in">plot</span>(x,y)</code></pre></p><p><img src="https://s1.ax1x.com/2020/07/27/aFpRpQ.png" alt="aFpRpQ.png"></p><h4 id="2-3-卡方分布求分位数"><a href="#2-3-卡方分布求分位数" class="headerlink" title="2.3 卡方分布求分位数"></a>2.3 卡方分布求分位数</h4><p>概率密度函数求分位数：</p><script type="math/tex; mode=display">chi2inv(α,n)</script><p>概率分布函数求分位数：</p><script type="math/tex; mode=display">chi2cdf(α,n)</script><h5 id="2-3-1-参数说明"><a href="#2-3-1-参数说明" class="headerlink" title="2.3.1 参数说明"></a>2.3.1 参数说明</h5><pre><code class="hljs matlab">n：卡方分布的自由度<span class="hljs-built_in">ans</span>：α的分位数（即横坐标上的值）</code></pre><h5 id="2-3-2-求解标准正态分布α-0-5的分位数"><a href="#2-3-2-求解标准正态分布α-0-5的分位数" class="headerlink" title="2.3.2 求解标准正态分布α=0.5的分位数"></a>2.3.2 求解标准正态分布α=0.5的分位数</h5><pre><code class="hljs matlab">n=<span class="hljs-number">2</span>chi2inv(<span class="hljs-number">0.5</span>,n)chi2cdf(<span class="hljs-number">0.5</span>,n)</code></pre><p>答案是<br><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =        <span class="hljs-number">1.3863</span><span class="hljs-built_in">ans</span> =        <span class="hljs-number">0.2212</span></code></pre></p><h3 id="3-K-S检验"><a href="#3-K-S检验" class="headerlink" title="3.K-S检验"></a>3.K-S检验</h3><p><img src="https://s1.ax1x.com/2020/07/27/aFPDmR.png" alt="aFPDmR.png"></p><p><img src="https://s1.ax1x.com/2020/07/27/aFPL9S.png" alt="aFPL9S.png"></p><h4 id="3-1-正态分布的K-S检验"><a href="#3-1-正态分布的K-S检验" class="headerlink" title="3.1 正态分布的K-S检验"></a>3.1 正态分布的K-S检验</h4><script type="math/tex; mode=display">H = kstest(X)</script><pre><code class="hljs matlab">测试向量X是否服从标准正态分布，测试水平为 <span class="hljs-number">5</span><span class="hljs-comment">%。</span></code></pre><script type="math/tex; mode=display">H = kstest(X,cdf)</script><pre><code class="hljs matlab">指定累积分布函数为cdf的测试(cdf=[ ]时表示标准正态分布)，测试水平为<span class="hljs-number">5</span><span class="hljs-comment">%</span></code></pre><script type="math/tex; mode=display">H = kstest(X,cdf,alpha)</script><pre><code class="hljs matlab">alpha为指定测试水平</code></pre><script type="math/tex; mode=display">H=kstest(X,cdf,alpha,tail)</script><pre><code class="hljs matlab">tail=<span class="hljs-number">0</span>为双侧检验, tail=<span class="hljs-number">1</span>单侧(&lt;)检验， tail=<span class="hljs-number">-1</span>单侧(&gt;) 检验</code></pre><script type="math/tex; mode=display">[H,P,KSSTAT,CV] = kstest(X,cdf,alpha)</script><pre><code class="hljs matlab">P为原假设成立的概率;KSSTAT为测试统计量的值;CV为是否接受假设的临界值。#### 3.2 其他分布的K-S检验![QQ图片20200727181059](https://s1.ax1x.com/2020/07/27/aFitHI.png)#### 3.3 其他检验方法lillietest检测方法较为严格，容错率低，但参数少。&gt; chi2gof适合大样本，一般要求<span class="hljs-number">50</span>个以上&gt;   kstest适于小样本，&gt;   lillietest用于正态分布，与kstest类似，适用于小样本&gt;   jbtest,是通过峰度、偏度检测正态分布的，适用用大样本。### 4. 求解分布函数置信区间![20200727164241](https://s1.ax1x.com/2020/07/27/aFiaUP.png)### 5.参考文章## 五.函数adftest()### 1. 函数调用$h = adftest(x)$$[h,pValue,stat,cValue,reg] = adftest(x) $### 2. 功能介绍**检验时间序列的稳定性。**h = adftest(x)通过对单变量时间序列中的单位根进行增强的Dickey-Fuller测试来返回具有拒绝决策的逻辑值Y。### 3. 参数介绍​```shellh—测试拒绝决策(符合逻辑| 逻辑向量)测试拒绝决策，以逻辑值或逻辑值向量的形式返回，其长度等于执行的测试次数。* h = <span class="hljs-number">1</span> 表示拒绝使用单位根null表示支持替代模型。* h = <span class="hljs-number">0</span> 表示无法拒绝单位根null。pValue—测试统计p值(标量| 向量)测试统计p值，以标量或向量的形式返回，其长度等于执行的测试次数。* 如果检验统计量为<span class="hljs-string">&#x27;t1&#x27;</span>或<span class="hljs-string">&#x27;t2&#x27;</span>，则p值为左尾概率。* 如果检验统计量为<span class="hljs-string">&#x27;F&#x27;</span>，则p值为右尾概率。stat—统计检验(标量| 向量)测试统计信息，以标量或向量的形式返回，其长度等于执行的测试次数。adftest使用替代模型中系数的普通最小二乘（OLS）估计来计算测试统计量。cValue—临界值(标量| 向量)临界值，以标量或向量的形式返回，长度等于执行的测试次数。* 如果测试统计量为<span class="hljs-string">&#x27;t1&#x27;</span>或<span class="hljs-string">&#x27;t2&#x27;</span>，则临界值针对左尾概率。* 如果检验统计量为<span class="hljs-string">&#x27;F&#x27;</span>，则临界值适用于右尾概率。x— 单变量时间序列(单变量时间序列，指定为列向量。最后一个元素是最近的观察。adftest忽略由NaNs 表示的缺失观测值。)</code></pre><h3 id="4-例"><a href="#4-例" class="headerlink" title="4. 例"></a>4. 例</h3><h4 id="4-1-绘制y1-y2数据时序图"><a href="#4-1-绘制y1-y2数据时序图" class="headerlink" title="4.1 绘制y1,y2数据时序图"></a>4.1 绘制y1,y2数据时序图</h4><pre><code class="hljs matlab">t=(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>)&#x27;y1=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)y2=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*t<span class="hljs-built_in">plot</span>(t,y1,t,y2)</code></pre><p><img src="https://s1.ax1x.com/2020/07/28/aErkcR.png" alt="aErkcR.png"></p><h4 id="4-2-绘制y1-y2自相关图像"><a href="#4-2-绘制y1-y2自相关图像" class="headerlink" title="4.2 绘制y1,y2自相关图像"></a>4.2 绘制y1,y2自相关图像</h4><pre><code class="hljs matlab">t=(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>)&#x27;y1=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)y2=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*tsubplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)autocorr(y1)xlabel(<span class="hljs-string">&#x27;t&#x27;</span>)ylabel(<span class="hljs-string">&#x27;y1&#x27;</span>)title(<span class="hljs-string">&#x27;y1自相关图像&#x27;</span>)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)autocorr(y2)xlabel(<span class="hljs-string">&#x27;t&#x27;</span>)ylabel(<span class="hljs-string">&#x27;y2&#x27;</span>)title(<span class="hljs-string">&#x27;y2自相关图像&#x27;</span>)</code></pre><p><a href="https://imgchr.com/i/aERsW8"><img src="https://s1.ax1x.com/2020/07/28/aERsW8.png" alt="aERsW8.png"></a></p><h4 id="4-3-用adftest求解稳定性"><a href="#4-3-用adftest求解稳定性" class="headerlink" title="4.3 用adftest求解稳定性"></a>4.3 用adftest求解稳定性</h4><pre><code class="hljs matlab">t=(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>)&#x27;y1=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)y2=<span class="hljs-built_in">randn</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*t<span class="hljs-built_in">plot</span>(t,y1,t,y2)[h,p,s,cv]=adftest(y1)[h,p,s,cv]=adftest(y2)</code></pre><p>答案是<br><pre><code class="hljs matlab">h =   logical   <span class="hljs-number">1</span>p =   <span class="hljs-number">1.0000e-03</span>s =   <span class="hljs-number">-10.6932</span>cv =    <span class="hljs-number">-1.9444</span>h =   logical    <span class="hljs-number">0</span>p =   <span class="hljs-number">0.9990</span>s =    <span class="hljs-number">8.8428</span>cv =    <span class="hljs-number">-1.9444</span></code></pre></p><h2 id="五-函数eig-eigs"><a href="#五-函数eig-eigs" class="headerlink" title="五.函数eig() eigs()"></a>五.函数eig() eigs()</h2><h3 id="1-异同点"><a href="#1-异同点" class="headerlink" title="1.异同点"></a>1.异同点</h3><h4 id="1-1-相同点"><a href="#1-1-相同点" class="headerlink" title="1.1 相同点"></a>1.1 相同点</h4><pre><code class="hljs shell">都可以求解矩阵的特征值和特征向量</code></pre><h4 id="1-2-不同点"><a href="#1-2-不同点" class="headerlink" title="1.2 不同点"></a>1.2 不同点</h4><pre><code class="hljs shell">eig函数主要是给出矩阵的特征值和特征向量eigs函数主要是通过迭代法来求解矩阵特征值和特征向量</code></pre><h3 id="2-函数语法"><a href="#2-函数语法" class="headerlink" title="2.函数语法"></a>2.函数语法</h3><p><img src="https://s1.ax1x.com/2020/07/29/aenwMd.png" alt="aenwMd.png"></p><p>$lambda = eig(A)$</p><p>$[V,D] = eig(A)$</p><p>$[V,D,P] = eig(A)$</p><p>$lambda = eig(vpa(A))$</p><p>$[V,D] = eig(vpa(A))$</p><p><img src="https://s1.ax1x.com/2020/07/29/aZv0zD.png" alt="aZv0zD.png"></p><h3 id="3-描述"><a href="#3-描述" class="headerlink" title="3. 描述"></a>3. 描述</h3><pre><code class="hljs matlab">lambda = eig(A)返回包含方形符号矩阵特征值的符号向量A。[V,D] = eig(A)返回矩阵V和D。的V当前特征向量的列A。对角矩阵D包含特征值。如果所得结果V的大小与相同A，则矩阵A具有满足的整套线性独立特征向量A*V = V*D。[V,D,P] = eig(A)返回索引向量 P。的长度P等于线性独立的特征向量的总数，因此A*V = V*D(P,P)。lambda = eig(vpa(A)) 使用变量精度算法返回数字特征值。[V,D] = eig(vpa(A)) 还返回数字特征向量。</code></pre><h3 id="4-输入参数"><a href="#4-输入参数" class="headerlink" title="4.输入参数"></a>4.输入参数</h3><pre><code class="hljs matlab">A— 矩阵，指定为符号矩阵。</code></pre><h3 id="5-例"><a href="#5-例" class="headerlink" title="5.例"></a>5.例</h3><p><img src="https://s1.ax1x.com/2020/07/29/aZbma8.png" alt="aZbma8.png"></p><pre><code class="hljs matlab">A=[<span class="hljs-number">-2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>;<span class="hljs-number">-4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>][v,d]=eig(A)[v,d]=eigs(A)</code></pre><pre><code class="hljs matlab">结果是：    v =       <span class="hljs-number">-0.7071</span>   <span class="hljs-number">-0.2425</span>    <span class="hljs-number">0.3015</span>             <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.9045</span>       <span class="hljs-number">-0.7071</span>   <span class="hljs-number">-0.9701</span>    <span class="hljs-number">0.3015</span>    d =        <span class="hljs-number">-1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>         <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>    v =       <span class="hljs-number">-0.2425</span>    <span class="hljs-number">0.3015</span>   <span class="hljs-number">-0.7071</span>             <span class="hljs-number">0</span>    <span class="hljs-number">0.9045</span>         <span class="hljs-number">0</span>       <span class="hljs-number">-0.9701</span>    <span class="hljs-number">0.3015</span>   <span class="hljs-number">-0.7071</span>    d =         <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>         <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">-1</span></code></pre><h2 id="六-内联函数、匿名函数和函数函数"><a href="#六-内联函数、匿名函数和函数函数" class="headerlink" title="六.内联函数、匿名函数和函数函数"></a>六.内联函数、匿名函数和函数函数</h2><p><a href="http://www.baixf.xyz/index.php/2020/07/25/%e3%80%90matlab%e3%80%91%e5%87%bd%e6%95%b0fmincon%e7%9a%84%e4%bd%bf%e7%94%a8/">题目相关链接</a></p><h3 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1. 字符串函数"></a>1. 字符串函数</h3><pre><code class="hljs matlab">s=<span class="hljs-string">&#x27;x(1)^2+x(2)^2+8&#x27;</span>f=sym(s)</code></pre><h3 id="2-字符串转化为内联函数"><a href="#2-字符串转化为内联函数" class="headerlink" title="2. 字符串转化为内联函数"></a>2. 字符串转化为内联函数</h3><ul><li>可类似于写在html文件的css样式</li></ul><pre><code class="hljs matlab">s=<span class="hljs-string">&#x27;x(1)^2+x(2)^2+8&#x27;</span>f=inline(s)x=[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]f(x)</code></pre><h3 id="3-字符串转化为匿名函数"><a href="#3-字符串转化为匿名函数" class="headerlink" title="3. 字符串转化为匿名函数"></a>3. 字符串转化为匿名函数</h3><ul><li>直接转化为匿名函数，直接调用</li></ul><pre><code class="hljs matlab">s=<span class="hljs-string">&#x27;x(1)^2+x(2)^2+8&#x27;</span>x=[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]f=eval(s)</code></pre><h3 id="4-字符串转化为句柄函数"><a href="#4-字符串转化为句柄函数" class="headerlink" title="4. 字符串转化为句柄函数"></a>4. 字符串转化为句柄函数</h3><ul><li>需编写function.m函数并调用函数</li></ul><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">fun</span><span class="hljs-params">(x)</span></span>f=x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+<span class="hljs-number">8</span>;<span class="hljs-keyword">end</span><span class="hljs-comment">%调用规则：</span>x=[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]fun(x)</code></pre><h2 id="七-函数fprintf"><a href="#七-函数fprintf" class="headerlink" title="七.函数fprintf()"></a>七.函数fprintf()</h2><blockquote><p>将数据写入文本文件</p></blockquote><h3 id="1-句法"><a href="#1-句法" class="headerlink" title="1.句法"></a>1.句法</h3><p>$fprintf(fileID,formatSpec,A1,…,An)$<br>$fprintf(formatSpec,A1,…,An)$<br>$nbytes = fprintf( )$</p><h3 id="2-描述"><a href="#2-描述" class="headerlink" title="2.描述"></a>2.描述</h3><ol><li>fprintf(fileID,formatSpec,A1,…,An)按列顺序将应用于formatSpec数组的所有元素A1,…An，并将数据写入文本文件。fprintf使用对的调用中指定的编码方案fopen。&lt;/p&gt;</li><li>fprintf(formatSpec,A1,…,An) 格式化数据并在屏幕上显示结果。&lt;/p&gt;</li><li>nbytes = fprintf(<em>_</em>)fprintf使用前面语法中的任何输入参数，返回写入的字节数。</li></ol><h3 id="3-输入参数"><a href="#3-输入参数" class="headerlink" title="3.输入参数"></a>3.输入参数</h3><ol><li>fileID— 文件标识符<br>1（默认）| 2| 标量</li><li>formatSpec— 输出字段<br>格式的格式运算符</li><li>A1,…,An— 数字或字符数组<br>标量 | 向量 | 矩阵 | 多维数组</li></ol><h3 id="4-输出参数"><a href="#4-输出参数" class="headerlink" title="4.输出参数"></a>4.输出参数</h3><ul><li>nbytes— 标量的字节数</li></ul><h3 id="5-例-1"><a href="#5-例-1" class="headerlink" title="5.例"></a>5.例</h3><h5 id="打印文字文本和数组值"><a href="#打印文字文本和数组值" class="headerlink" title="打印文字文本和数组值"></a>打印文字文本和数组值</h5><blockquote><p>在屏幕上打印多个数值和文字文本。</p></blockquote><pre><code class="hljs matlab">A1 = [<span class="hljs-number">9.9</span>，<span class="hljs-number">9900</span>];A2 = [<span class="hljs-number">8.8</span>，<span class="hljs-number">7.7</span>; ...      <span class="hljs-number">8800</span>，<span class="hljs-number">7700</span>];formatSpec = <span class="hljs-string">&#x27;X为％4.2f米或％8.3f毫米\ n&#x27;</span> ;fprintf（formatSpec，A1，A2）X是<span class="hljs-number">9.90</span>米或<span class="hljs-number">9900.000</span>毫米X是<span class="hljs-number">8.80</span>米或<span class="hljs-number">8800.000</span>毫米X是<span class="hljs-number">7.70</span>米或<span class="hljs-number">7700.000</span>毫米</code></pre><blockquote><p>%4.2f在formatSpec输入规定，在输出的每一行的第一个值是与四位数字，包括小数点后两位数字的字段宽度的浮点数。%8.3f在formatSpec输入规定，在输出的每一行的第二个值是具有8位，包括小数点后三位数字的字段宽度的浮点数。\n是开始新行的控制字符。</p></blockquote><h5 id="将双精度值打印为整数"><a href="#将双精度值打印为整数" class="headerlink" title="将双精度值打印为整数"></a>将双精度值打印为整数</h5><p>将带分数的双精度值显式转换为整数值。<br><pre><code class="hljs matlab">a = [<span class="hljs-number">1.02</span> <span class="hljs-number">3.04</span> <span class="hljs-number">5.06</span>];fprintf（<span class="hljs-string">&#x27;％d \ n&#x27;</span>，<span class="hljs-built_in">round</span>（a））;<span class="hljs-number">1</span>个<span class="hljs-number">3</span><span class="hljs-number">5</span></code></pre></p><blockquote><p>%d在formatSpec输入中，将向量中的每个值打印round(a)为有符号整数。\n是开始新行的控制字符。</p></blockquote><h5 id="将表格数据写入文本文件"><a href="#将表格数据写入文本文件" class="headerlink" title="将表格数据写入文本文件"></a>将表格数据写入文本文件</h5><p>将指数函数的简短表写入名为的文本文件exp.txt。<br><pre><code class="hljs matlab">x = <span class="hljs-number">0</span>：<span class="hljs-number">.1</span>：<span class="hljs-number">1</span>;A = [x; <span class="hljs-built_in">exp</span>（x）];fileID = fopen（<span class="hljs-string">&#x27;exp.txt&#x27;</span>，<span class="hljs-string">&#x27;w&#x27;</span>）;fprintf（fileID，<span class="hljs-string">&#x27;％6s％12s \ n&#x27;</span>，<span class="hljs-string">&#x27;x&#x27;</span>，<span class="hljs-string">&#x27;exp（x）&#x27;</span>）;fprintf（fileID，<span class="hljs-string">&#x27;％6.2f％12.8f \ n&#x27;</span>，A）;fclose（fileID）;</code></pre></p><p>到第一个呼叫fprintf打印头文本x和exp(x)，并且所述第二呼叫从可变打印中的值A。<br>如果您打算读取该文件的Microsoft ®记事本，使用’\r\n’，而不是’\n’移动到一个新行。例如，将调用替换fprintf为以下内容：</p><pre><code class="hljs matlab">fprintf（fileID，<span class="hljs-string">&#x27;％6s％12s \ r \ n&#x27;</span>，<span class="hljs-string">&#x27;x&#x27;</span>，<span class="hljs-string">&#x27;exp（x）&#x27;</span>）;fprintf（fileID，<span class="hljs-string">&#x27;％6.2f％12.8f \ r \ n&#x27;</span>，A）;</code></pre><p>MATLAB ®导入功能，所有的UNIX ®应用程序，和微软的Word和写字板识别’\n’为一个换行符指标。</p><p>使用type命令查看文件的内容。<br><pre><code class="hljs matlab">输入<span class="hljs-built_in">exp</span>.txt</code></pre><br><pre><code class="hljs matlab">x <span class="hljs-built_in">exp</span>（x）<span class="hljs-number">0.00</span> <span class="hljs-number">1.00000000</span><span class="hljs-number">0.10</span> <span class="hljs-number">1.10517092</span><span class="hljs-number">0.20</span> <span class="hljs-number">1.22140276</span><span class="hljs-number">0.30</span> <span class="hljs-number">1.34985881</span><span class="hljs-number">0.40</span> <span class="hljs-number">1.49182470</span><span class="hljs-number">0.50</span> <span class="hljs-number">1.64872127</span><span class="hljs-number">0.60</span> <span class="hljs-number">1.82211880</span><span class="hljs-number">0.70</span> <span class="hljs-number">2.01375271</span><span class="hljs-number">0.80</span> <span class="hljs-number">2.22554093</span><span class="hljs-number">0.90</span> <span class="hljs-number">2.45960311</span><span class="hljs-number">1.00</span> <span class="hljs-number">2.71828183</span></code></pre></p><h5 id="获取写入文件的字节数"><a href="#获取写入文件的字节数" class="headerlink" title="获取写入文件的字节数"></a>获取写入文件的字节数</h5><p>将数据写入文件并返回写入的字节数。<br>将数据数组写入A文件，并获取fprintf写入的字节数。</p><pre><code class="hljs matlab">A =魔法（<span class="hljs-number">4</span>）;fileID = fopen（<span class="hljs-string">&#x27;myfile.txt&#x27;</span>，<span class="hljs-string">&#x27;w&#x27;</span>）;nbytes = fprintf（fileID，<span class="hljs-string">&#x27;％5d％5d％5d％5d \ n&#x27;</span>，A）</code></pre><p>字节= 96<br>该fprintf函数将96字节写入文件。<br>关闭文件。</p><pre><code class="hljs matlab">fclose（fileID）;</code></pre><p>使用type命令查看文件的内容。</p><pre><code class="hljs matlab">类型（<span class="hljs-string">&#x27;myfile.txt&#x27;</span>）</code></pre><pre><code class="hljs matlab"><span class="hljs-number">16</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span><span class="hljs-number">2</span> <span class="hljs-number">11</span> <span class="hljs-number">7</span> <span class="hljs-number">14</span><span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span> <span class="hljs-number">15</span><span class="hljs-number">13</span> <span class="hljs-number">8</span> <span class="hljs-number">12</span> <span class="hljs-number">1</span></code></pre><h5 id="在命令窗口中显示超链接"><a href="#在命令窗口中显示超链接" class="headerlink" title="在命令窗口中显示超链接"></a>在命令窗口中显示超链接</h5><p>在屏幕上显示超链接（MathWorks网站）。</p><pre><code class="hljs matlab">url = <span class="hljs-string">&#x27;https://www.mathworks.com&#x27;</span> ;sitename = <span class="hljs-string">&#x27;The MathWorks网站&#x27;</span> ;fprintf（<span class="hljs-string">&#x27;[％s ](%s) \ n&#x27;</span>，网址，站点名称）<span class="hljs-comment">%s在formatSpec输入指示变量的值url和sitename，应打印为文本。</span></code></pre><h2 id="八-数学上的常见基本函数-1"><a href="#八-数学上的常见基本函数-1" class="headerlink" title="八.数学上的常见基本函数[1]"></a>八.数学上的常见基本函数[1]</h2><h3 id="1-绝对值和复数幅度"><a href="#1-绝对值和复数幅度" class="headerlink" title="1.绝对值和复数幅度"></a>1.绝对值和复数幅度</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><script type="math/tex; mode=display">Y = abs(X)</script><h3 id="2-取模"><a href="#2-取模" class="headerlink" title="2.取模"></a>2.取模</h3><p>除法（模运算）之后的余数。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><script type="math/tex; mode=display">Y = mod(X)</script><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">mod</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">1</span>                   <span class="hljs-comment">%“除数”是正，“余数”就是正</span>&gt;&gt; <span class="hljs-built_in">mod</span>(<span class="hljs-number">-5</span>,<span class="hljs-number">2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">mod</span>(<span class="hljs-number">5</span>,<span class="hljs-number">-2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">-1</span>                  <span class="hljs-comment">%“除数”是负，“余数‘就是负</span>&gt;&gt; <span class="hljs-built_in">mod</span>(<span class="hljs-number">-5</span>,<span class="hljs-number">-2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">-1</span>                  <span class="hljs-comment">%用rem时，不管“除数”是正是负，“余数”的符号与“被除数”的符号相同</span></code></pre><h3 id="3-取余"><a href="#3-取余" class="headerlink" title="3.取余"></a>3.取余</h3><p>除后余数。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><script type="math/tex; mode=display">Y = rem(X)</script><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">rem</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">1</span>                   <span class="hljs-comment">%“被除数”是正，“余数”就是正</span>&gt;&gt; <span class="hljs-built_in">rem</span>(<span class="hljs-number">5</span>,<span class="hljs-number">-2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">rem</span>(<span class="hljs-number">-5</span>,<span class="hljs-number">2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">-1</span>                 <span class="hljs-comment">%“被除数”是负，“余数”就是负</span>&gt;&gt; <span class="hljs-built_in">rem</span>(<span class="hljs-number">-5</span>,<span class="hljs-number">-2</span>)<span class="hljs-built_in">ans</span> =<span class="hljs-number">-1</span></code></pre><h3 id="4-高斯取整函数"><a href="#4-高斯取整函数" class="headerlink" title="4.高斯取整函数"></a>4.高斯取整函数</h3><p>向零舍入。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><script type="math/tex; mode=display">Y = fix(x)</script><h4 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h4><pre><code class="hljs matlab"><span class="hljs-built_in">fix</span>([<span class="hljs-number">2.4</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">-1.4</span>,<span class="hljs-number">-4.7</span>])<span class="hljs-built_in">ans</span> =    <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-number">-1</span>    <span class="hljs-number">-4</span></code></pre><h3 id="5-四舍五入函数"><a href="#5-四舍五入函数" class="headerlink" title="5.四舍五入函数"></a>5.四舍五入函数</h3><p>四舍五入到最接近的十进制或整数.</p><script type="math/tex; mode=display">Y = round(x)</script><h4 id="例-2"><a href="#例-2" class="headerlink" title="例"></a>例</h4><pre><code class="hljs matlab"><span class="hljs-built_in">round</span>([<span class="hljs-number">2.4</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">-1.4</span>,<span class="hljs-number">-4.7</span>])<span class="hljs-built_in">ans</span> =   <span class="hljs-number">2</span>     <span class="hljs-number">4</span>    <span class="hljs-number">-1</span>    <span class="hljs-number">-5</span></code></pre><h3 id="6-返回不大于x的最大整数值"><a href="#6-返回不大于x的最大整数值" class="headerlink" title="6.返回不大于x的最大整数值"></a>6.返回不大于x的最大整数值</h3><p>向负无穷大舍入。</p><script type="math/tex; mode=display">Y = floor(x)</script><h4 id="例-3"><a href="#例-3" class="headerlink" title="例"></a>例</h4><pre><code class="hljs matlab"><span class="hljs-built_in">floor</span>([<span class="hljs-number">2.4</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">-1.4</span>,<span class="hljs-number">-4.7</span>])<span class="hljs-built_in">ans</span> =         <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-number">-2</span>    <span class="hljs-number">-5</span></code></pre><h3 id="7-返回不小于x的最小整数值"><a href="#7-返回不小于x的最小整数值" class="headerlink" title="7.返回不小于x的最小整数值"></a>7.返回不小于x的最小整数值</h3><p>向正无穷大方向舍入.</p><script type="math/tex; mode=display">Y = ceil(x)</script><h4 id="例-4"><a href="#例-4" class="headerlink" title="例"></a>例</h4><pre><code class="hljs matlab"><span class="hljs-built_in">ceil</span>([<span class="hljs-number">2.4</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">-1.4</span>,<span class="hljs-number">-4.7</span>])<span class="hljs-built_in">ans</span> =    <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">-1</span>    <span class="hljs-number">-4</span></code></pre><h2 id="九-format-函数"><a href="#九-format-函数" class="headerlink" title="九.format()函数"></a>九.format()函数</h2><pre><code class="hljs matlab">data1.txt:    <span class="hljs-number">0</span> <span class="hljs-number">3886.162</span> <span class="hljs-number">2200.938</span> <span class="hljs-number">141.240</span>    <span class="hljs-number">1</span> <span class="hljs-number">3721.139</span> <span class="hljs-number">2208.475</span> <span class="hljs-number">141.152</span>    <span class="hljs-number">2</span> <span class="hljs-number">3866.200</span> <span class="hljs-number">2198.936</span> <span class="hljs-number">141.126</span>    <span class="hljs-number">3</span> <span class="hljs-number">3678.048</span> <span class="hljs-number">2199.191</span> <span class="hljs-number">141.250</span>    <span class="hljs-number">4</span> <span class="hljs-number">3685.453</span> <span class="hljs-number">2203.726</span> <span class="hljs-number">141.241</span></code></pre><pre><code class="hljs matlab">读取数据：data=load(<span class="hljs-string">&#x27;data1.txt&#x27;</span>)dat1 =    <span class="hljs-number">1.0e+03</span> *             <span class="hljs-number">0</span>    <span class="hljs-number">3.8862</span>    <span class="hljs-number">2.2009</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0010</span>    <span class="hljs-number">3.7211</span>    <span class="hljs-number">2.2085</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0020</span>    <span class="hljs-number">3.8662</span>    <span class="hljs-number">2.1989</span>    <span class="hljs-number">0.1411</span>        <span class="hljs-number">0.0030</span>    <span class="hljs-number">3.6780</span>    <span class="hljs-number">2.1992</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0040</span>    <span class="hljs-number">3.6855</span>    <span class="hljs-number">2.2037</span>    <span class="hljs-number">0.1412</span></code></pre><p>1.format short：默认格式，小数点后保留4位</p><pre><code class="hljs matlab">dat1 =       <span class="hljs-number">1.0e+03</span> *             <span class="hljs-number">0</span>    <span class="hljs-number">3.8862</span>    <span class="hljs-number">2.2009</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0010</span>    <span class="hljs-number">3.7211</span>    <span class="hljs-number">2.2085</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0020</span>    <span class="hljs-number">3.8662</span>    <span class="hljs-number">2.1989</span>    <span class="hljs-number">0.1411</span>        <span class="hljs-number">0.0030</span>    <span class="hljs-number">3.6780</span>    <span class="hljs-number">2.1992</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0040</span>    <span class="hljs-number">3.6855</span>    <span class="hljs-number">2.2037</span>    <span class="hljs-number">0.1412</span></code></pre><p>2.format long：有效数字16位</p><pre><code class="hljs matlab">dat1 =       <span class="hljs-number">1.0e+03</span> *      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">3</span>                       <span class="hljs-number">0</span>   <span class="hljs-number">3.886162000000000</span>   <span class="hljs-number">2.200938000000000</span>       <span class="hljs-number">0.001000000000000</span>   <span class="hljs-number">3.721139000000000</span>   <span class="hljs-number">2.208475000000000</span>       <span class="hljs-number">0.002000000000000</span>   <span class="hljs-number">3.866200000000000</span>   <span class="hljs-number">2.198936000000000</span>       <span class="hljs-number">0.003000000000000</span>   <span class="hljs-number">3.678048000000000</span>   <span class="hljs-number">2.199191000000000</span>       <span class="hljs-number">0.004000000000000</span>   <span class="hljs-number">3.685453000000000</span>   <span class="hljs-number">2.203726000000000</span>      列 <span class="hljs-number">4</span>       <span class="hljs-number">0.141240000000000</span>       <span class="hljs-number">0.141152000000000</span>       <span class="hljs-number">0.141126000000000</span>       <span class="hljs-number">0.141250000000000</span>       <span class="hljs-number">0.141241000000000</span></code></pre><p>3.format long e：有效数字16位加3位指数</p><pre><code class="hljs matlab">dat1 =      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">2</span>                             <span class="hljs-number">0</span>     <span class="hljs-number">3.886162000000000e+03</span>         <span class="hljs-number">1.000000000000000e+00</span>     <span class="hljs-number">3.721139000000000e+03</span>         <span class="hljs-number">2.000000000000000e+00</span>     <span class="hljs-number">3.866200000000000e+03</span>         <span class="hljs-number">3.000000000000000e+00</span>     <span class="hljs-number">3.678048000000000e+03</span>         <span class="hljs-number">4.000000000000000e+00</span>     <span class="hljs-number">3.685453000000000e+03</span>      列 <span class="hljs-number">3</span> 至 <span class="hljs-number">4</span>         <span class="hljs-number">2.200938000000000e+03</span>     <span class="hljs-number">1.412400000000000e+02</span>         <span class="hljs-number">2.208475000000000e+03</span>     <span class="hljs-number">1.411520000000000e+02</span>         <span class="hljs-number">2.198936000000000e+03</span>     <span class="hljs-number">1.411260000000000e+02</span>         <span class="hljs-number">2.199191000000000e+03</span>     <span class="hljs-number">1.412500000000000e+02</span>         <span class="hljs-number">2.203726000000000e+03</span>     <span class="hljs-number">1.412410000000000e+02</span></code></pre><p>4.format short e：有效数字5位加3位指数</p><pre><code class="hljs matlab">dat1 =                <span class="hljs-number">0</span>   <span class="hljs-number">3.8862e+03</span>   <span class="hljs-number">2.2009e+03</span>   <span class="hljs-number">1.4124e+02</span>       <span class="hljs-number">1.0000e+00</span>   <span class="hljs-number">3.7211e+03</span>   <span class="hljs-number">2.2085e+03</span>   <span class="hljs-number">1.4115e+02</span>       <span class="hljs-number">2.0000e+00</span>   <span class="hljs-number">3.8662e+03</span>   <span class="hljs-number">2.1989e+03</span>   <span class="hljs-number">1.4113e+02</span>       <span class="hljs-number">3.0000e+00</span>   <span class="hljs-number">3.6780e+03</span>   <span class="hljs-number">2.1992e+03</span>   <span class="hljs-number">1.4125e+02</span>       <span class="hljs-number">4.0000e+00</span>   <span class="hljs-number">3.6855e+03</span>   <span class="hljs-number">2.2037e+03</span>   <span class="hljs-number">1.4124e+02</span></code></pre><p>5.format bank：保留两位小数位</p><pre><code class="hljs matlab">dat1 =                 <span class="hljs-number">0</span>       <span class="hljs-number">3886.16</span>       <span class="hljs-number">2200.94</span>        <span class="hljs-number">141.24</span>              <span class="hljs-number">1.00</span>       <span class="hljs-number">3721.14</span>       <span class="hljs-number">2208.47</span>        <span class="hljs-number">141.15</span>              <span class="hljs-number">2.00</span>       <span class="hljs-number">3866.20</span>       <span class="hljs-number">2198.94</span>        <span class="hljs-number">141.13</span>              <span class="hljs-number">3.00</span>       <span class="hljs-number">3678.05</span>       <span class="hljs-number">2199.19</span>        <span class="hljs-number">141.25</span>              <span class="hljs-number">4.00</span>       <span class="hljs-number">3685.45</span>       <span class="hljs-number">2203.73</span>        <span class="hljs-number">141.24</span></code></pre><p>6.format +：只给出正负</p><pre><code class="hljs matlab">dat1 =     +++    ++++    ++++    ++++    ++++</code></pre><p>7.format rational：以分数的形式表示</p><pre><code class="hljs matlab">dat1 =           <span class="hljs-number">0</span>         <span class="hljs-number">143788</span>/<span class="hljs-number">37</span>       <span class="hljs-number">35215</span>/<span class="hljs-number">16</span>        <span class="hljs-number">3531</span>/<span class="hljs-number">25</span>           <span class="hljs-number">1</span>         <span class="hljs-number">133961</span>/<span class="hljs-number">36</span>       <span class="hljs-number">41961</span>/<span class="hljs-number">19</span>       <span class="hljs-number">17644</span>/<span class="hljs-number">125</span>           <span class="hljs-number">2</span>          <span class="hljs-number">19331</span>/<span class="hljs-number">5</span>        <span class="hljs-number">35183</span>/<span class="hljs-number">16</span>       <span class="hljs-number">17923</span>/<span class="hljs-number">127</span>           <span class="hljs-number">3</span>          <span class="hljs-number">77239</span>/<span class="hljs-number">21</span>       <span class="hljs-number">46183</span>/<span class="hljs-number">21</span>         <span class="hljs-number">565</span>/<span class="hljs-number">4</span>           <span class="hljs-number">4</span>          <span class="hljs-number">40540</span>/<span class="hljs-number">11</span>       <span class="hljs-number">24241</span>/<span class="hljs-number">11</span>       <span class="hljs-number">11723</span>/<span class="hljs-number">83</span></code></pre><p>8.format hex：以16进制数表示</p><pre><code class="hljs matlab">dat1 =      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">3</span>       <span class="hljs-number">0000000000000000</span>   <span class="hljs-number">40</span>ae5c52f1a9fbe7   <span class="hljs-number">40</span>a131e04189374c       <span class="hljs-number">3</span>ff0000000000000   <span class="hljs-number">40</span>ad12472b020c4a   <span class="hljs-number">40</span>a140f333333333       <span class="hljs-number">4000000000000000</span>   <span class="hljs-number">40</span>ae346666666666   <span class="hljs-number">40</span>a12ddf3b645a1d       <span class="hljs-number">4008000000000000</span>   <span class="hljs-number">40</span>acbc189374bc6a   <span class="hljs-number">40</span>a12e61cac08312       <span class="hljs-number">4010000000000000</span>   <span class="hljs-number">40</span>accae7ef9db22d   <span class="hljs-number">40</span>a13773b645a1cb      列 <span class="hljs-number">4</span>       <span class="hljs-number">4061</span>a7ae147ae148       <span class="hljs-number">4061</span>a4dd2f1a9fbe       <span class="hljs-number">4061</span>a4083126e979       <span class="hljs-number">4061</span>a80000000000       <span class="hljs-number">4061</span>a7b645a1cac1</code></pre><p>9.format long g：15位有效数</p><pre><code class="hljs matlab">dat1 =      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">2</span>                             <span class="hljs-number">0</span>                  <span class="hljs-number">3886.162</span>                             <span class="hljs-number">1</span>                  <span class="hljs-number">3721.139</span>                             <span class="hljs-number">2</span>                    <span class="hljs-number">3866.2</span>                             <span class="hljs-number">3</span>                  <span class="hljs-number">3678.048</span>                             <span class="hljs-number">4</span>                  <span class="hljs-number">3685.453</span>      列 <span class="hljs-number">3</span> 至 <span class="hljs-number">4</span>                      <span class="hljs-number">2200.938</span>                    <span class="hljs-number">141.24</span>                      <span class="hljs-number">2208.475</span>                   <span class="hljs-number">141.152</span>                      <span class="hljs-number">2198.936</span>                   <span class="hljs-number">141.126</span>                      <span class="hljs-number">2199.191</span>                    <span class="hljs-number">141.25</span>                      <span class="hljs-number">2203.726</span>                   <span class="hljs-number">141.241</span></code></pre><p>10.format short g：5位有效数</p><pre><code class="hljs matlab">dat1 =                <span class="hljs-number">0</span>       <span class="hljs-number">3886.2</span>       <span class="hljs-number">2200.9</span>       <span class="hljs-number">141.24</span>                <span class="hljs-number">1</span>       <span class="hljs-number">3721.1</span>       <span class="hljs-number">2208.5</span>       <span class="hljs-number">141.15</span>                <span class="hljs-number">2</span>       <span class="hljs-number">3866.2</span>       <span class="hljs-number">2198.9</span>       <span class="hljs-number">141.13</span>                <span class="hljs-number">3</span>         <span class="hljs-number">3678</span>       <span class="hljs-number">2199.2</span>       <span class="hljs-number">141.25</span>                <span class="hljs-number">4</span>       <span class="hljs-number">3685.5</span>       <span class="hljs-number">2203.7</span>       <span class="hljs-number">141.24</span></code></pre><h2 id="十-数据文件读取"><a href="#十-数据文件读取" class="headerlink" title="十.数据文件读取"></a>十.数据文件读取</h2><h3 id="1-text文件"><a href="#1-text文件" class="headerlink" title="1.text文件"></a>1.text文件</h3><pre><code class="hljs matlab">data1.txt:    <span class="hljs-number">0</span> <span class="hljs-number">3886.162</span> <span class="hljs-number">2200.938</span> <span class="hljs-number">141.240</span>     <span class="hljs-number">1</span> <span class="hljs-number">3721.139</span> <span class="hljs-number">2208.475</span> <span class="hljs-number">141.152</span>     <span class="hljs-number">2</span> <span class="hljs-number">3866.200</span> <span class="hljs-number">2198.936</span> <span class="hljs-number">141.126</span>     <span class="hljs-number">3</span> <span class="hljs-number">3678.048</span> <span class="hljs-number">2199.191</span> <span class="hljs-number">141.250</span>     <span class="hljs-number">4</span> <span class="hljs-number">3685.453</span> <span class="hljs-number">2203.726</span> <span class="hljs-number">141.241</span></code></pre><p>1.dat1=load()</p><pre><code class="hljs matlab">dat1=load(<span class="hljs-string">&#x27;data1.txt&#x27;</span>)    dat1 =       <span class="hljs-number">1.0e+03</span> *             <span class="hljs-number">0</span>    <span class="hljs-number">3.8862</span>    <span class="hljs-number">2.2009</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0010</span>    <span class="hljs-number">3.7211</span>    <span class="hljs-number">2.2085</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0020</span>    <span class="hljs-number">3.8662</span>    <span class="hljs-number">2.1989</span>    <span class="hljs-number">0.1411</span>        <span class="hljs-number">0.0030</span>    <span class="hljs-number">3.6780</span>    <span class="hljs-number">2.1992</span>    <span class="hljs-number">0.1412</span>        <span class="hljs-number">0.0040</span>    <span class="hljs-number">3.6855</span>    <span class="hljs-number">2.2037</span>    <span class="hljs-number">0.1412</span></code></pre><p>2.dat2=importdata()</p><pre><code class="hljs matlab">dat2=importdata(<span class="hljs-string">&#x27;data1.txt&#x27;</span>)dat2 =      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">2</span>                             <span class="hljs-number">0</span>                  <span class="hljs-number">3886.162</span>                             <span class="hljs-number">1</span>                  <span class="hljs-number">3721.139</span>                             <span class="hljs-number">2</span>                    <span class="hljs-number">3866.2</span>                             <span class="hljs-number">3</span>                  <span class="hljs-number">3678.048</span>                             <span class="hljs-number">4</span>                  <span class="hljs-number">3685.453</span>      列 <span class="hljs-number">3</span> 至 <span class="hljs-number">4</span>                      <span class="hljs-number">2200.938</span>                    <span class="hljs-number">141.24</span></code></pre><p>3.[a,b,c,d]=textread()</p><pre><code class="hljs matlab">[a,b,c,d]=textread(<span class="hljs-string">&#x27;data1.txt&#x27;</span>,<span class="hljs-string">&#x27;%2d %8.3f %8.3f %7.3f&#x27;</span>)a =         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span>         <span class="hljs-number">4</span>b =                      <span class="hljs-number">3886.162</span>                      <span class="hljs-number">3721.139</span>                        <span class="hljs-number">3866.2</span>                      <span class="hljs-number">3678.048</span>                      <span class="hljs-number">3685.453</span>c =                      <span class="hljs-number">2200.938</span>                      <span class="hljs-number">2208.475</span>                      <span class="hljs-number">2198.936</span>                      <span class="hljs-number">2199.191</span>                      <span class="hljs-number">2203.726</span>d =                        <span class="hljs-number">141.24</span>                       <span class="hljs-number">141.152</span>                       <span class="hljs-number">141.126</span>                        <span class="hljs-number">141.25</span>                       <span class="hljs-number">141.241</span></code></pre><p>4.dat3=dat2(m:n,p:q)%提取矩阵的指定行和列组成的新矩阵</p><pre><code class="hljs matlab">dat2(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)<span class="hljs-comment">%提取矩阵的指定行和列组成的新矩阵</span><span class="hljs-built_in">ans</span> =                             <span class="hljs-number">0</span>                  <span class="hljs-number">3886.162</span>                             <span class="hljs-number">1</span>                  <span class="hljs-number">3721.139</span></code></pre><h3 id="2-excel文件"><a href="#2-excel文件" class="headerlink" title="2. excel文件"></a>2. excel文件</h3><p>1.num=xlsread(文件名)</p><pre><code class="hljs matlab">num=xlsread(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>)num =               <span class="hljs-number">1</span>       <span class="hljs-number">57286</span>               <span class="hljs-number">2</span>       <span class="hljs-number">34096</span>               …………………………………………</code></pre><p>2.num=xlsread(文件名,shett号，范围1)</p><pre><code class="hljs matlab">num=xlsread(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>,<span class="hljs-string">&#x27;A2:A67&#x27;</span>)    num =         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         ……</code></pre><p>3.num=xlsread(文件名,sheet号)</p><pre><code class="hljs matlab">num=xlsread(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>,<span class="hljs-number">1</span>)    num =               <span class="hljs-number">1</span>       <span class="hljs-number">57286</span>               <span class="hljs-number">2</span>       <span class="hljs-number">34096</span>               …………………………………………</code></pre><p>4.[x,y]=xlsread(文件名,shett号，范围1)</p><pre><code class="hljs matlab">num=xlsread(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;A2:A67&#x27;</span>)    num =         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         ……</code></pre><p>5.num=readtable(文件名)</p><blockquote><p>得到的是table类型数据</p></blockquote><pre><code class="hljs matlab">num=<span class="hljs-built_in">readtable</span>(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>)</code></pre><pre><code class="hljs matlab">num =      <span class="hljs-number">731</span>×<span class="hljs-number">2</span> <span class="hljs-built_in">table</span>      Var1    Var2      ____    _____       <span class="hljs-number">1</span>     <span class="hljs-number">57286</span>       <span class="hljs-number">2</span>     <span class="hljs-number">34096</span>       <span class="hljs-number">3</span>     <span class="hljs-number">26996</span>       <span class="hljs-number">4</span>     <span class="hljs-number">29552</span>       <span class="hljs-number">5</span>     <span class="hljs-number">27492</span></code></pre><h2 id="十一-函数kstest"><a href="#十一-函数kstest" class="headerlink" title="十一.函数kstest()"></a>十一.函数kstest()</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><p>$H = kstest(X)$<br>$H = kstest(X,cdf)$<br>$H = kstest(X,cdf,alpha)$<br>$H=kstest(X,cdf,alpha,tail)$<br>$[H,P,KSSTAT,CV] = kstest(X,cdf,alpha)$</p><h3 id="2-描述-1"><a href="#2-描述-1" class="headerlink" title="2. 描述"></a>2. 描述</h3><blockquote><p>H = kstest(X) %测试向量X是否服从标准正态分布，测试水平为5%。<br>  H = kstest(X,cdf) %指定累积分布函数为cdf的测试(cdf=[ ]时表示标准正态分布)，测试水平为5%<br>  H = kstest(X,cdf,alpha) % alpha为指定测试水平H=kstest(X,cdf,alpha,tail) % tail=0为双侧检验， tail=1单侧(&lt;)检验， tail=-1单侧(&gt;) 检验<br>  [H,P,KSSTAT,CV] = kstest(X,cdf,alpha) %P为原假设成立的概率，KSSTAT为测试统计量的值，CV为是否接受假设的临界值。</p></blockquote><h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3. 参数"></a>3. 参数</h3><h4 id="3-1-输入参数"><a href="#3-1-输入参数" class="headerlink" title="3.1 输入参数"></a>3.1 输入参数</h4><ul><li>x— 样本数据&lt;/p&gt;</li><li><p>Alpha— 重要性级别（0.05（默认）| 标量值，范围为（0,1））</p></li><li><p>CDF— 假设连续分布矩阵的 cdf | 概率分布对象</p></li><li><p>Tail— 备选假设的类型</p></li></ul><h4 id="3-2-输出参数"><a href="#3-2-输出参数" class="headerlink" title="3.2 输出参数"></a>3.2 输出参数</h4><ul><li><p>h—假设检验结果<br>如果为h = 1，则表明在Alpha重要性级别拒绝了原假设，即不是正态分布。<br>如果为h = 0，则表明在Alpha重要性级别上无法拒绝原假设，即是正态分布。</p></li><li><p>p— p值<br>较小的值对原p假设的有效性表示怀疑。</p></li><li><p>ksstat—测试统计<br>假设检验的检验统计量，作为非负标量值返回。</p></li><li><p>cv—临界值<br>临界值，作为非负标量值返回。</p></li></ul><h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h3><blockquote><p>kstest适用于小样本，当数据过大时，检验拒绝的临界值非常小，结果往往是拒绝原假设。<br>各种检验方法适用范围如下：</p><ol><li>chi2gof适合大样本，一般要求50个以上</li><li>kstest适于小样本，</li><li>lillietest用于正态分布，与kstest类似，适用于小样本</li><li>jbtest,是通过峰度、偏度检测正态分布的，适用用大样本。</li></ol></blockquote><h2 id="十二-函数crosstab"><a href="#十二-函数crosstab" class="headerlink" title="十二.函数crosstab()"></a>十二.函数crosstab()</h2><h3 id="1-句法-1"><a href="#1-句法-1" class="headerlink" title="1.句法"></a>1.句法</h3><p>$tbl = crosstab(x1,x2)$<br>$tbl = crosstab(x1,…,xn)$<br>$[tbl,chi2,p] = crosstab()$<br>$[tbl,chi2,p,labels] = crosstab()$</p><h3 id="2-描述-2"><a href="#2-描述-2" class="headerlink" title="2.描述"></a>2.描述</h3><blockquote><p>tbl = crosstab(x1,x2) %返回一个交叉列表，tbl具有相同长度的两个向量，的，x1和x2。<br>  tbl = crosstab(x1,…,xn) %返回一个多维交叉列表，tbl，对于多个输入向量数据，x1，x2，…， xn。<br>  [tbl,chi2,p] = crosstab() %对于在每个维度上独立的测试，还返回卡方统计量pchi2及其p值。您可以使用任何以前的语法。ptbl<br>  [tbl,chi2,p,labels] = crosstab() %还返回一个单元格数组，labels其中每个输入参数x1… 都包含一列标签xn。</p></blockquote><h3 id="3-概念"><a href="#3-概念" class="headerlink" title="3.概念"></a>3.概念</h3><blockquote><p>频数（Frequency），又称“次数”。指变量值中代表某种特征的数（标志值）出现的次数;</p></blockquote><h3 id="4-参数"><a href="#4-参数" class="headerlink" title="4.参数"></a>4.参数</h3><h4 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h4><ul><li>x1— 分组变量的输入向量</li><li>x2— 分组变量的输入向量</li><li>x1,…,xn— 输入向量</li></ul><h4 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h4><ul><li>tbl— 整数值的交叉列表表（矩阵）</li><li>chi2—卡方统计（正标量值）</li><li>p— p -Value（标量值，范围内[0,1]）</li><li>labels—数据标签（单元格数组）</li></ul><h3 id="5-例-2"><a href="#5-例-2" class="headerlink" title="5.例"></a>5.例</h3><p>1.tbl = crosstab(x1,x2)</p><pre><code class="hljs matlab">x = [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>];y = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>];tbl = crosstab(x,y)<span class="hljs-comment">%行表示x中出现的三个数值</span><span class="hljs-comment">%列表示y中出现的四个数值</span><span class="hljs-comment">%得到的表表示对应值出现的次数，例（1，1）</span>tbl =     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span></code></pre><p>2.[tbl,chi2,p] = crosstab(x,y)</p><pre><code class="hljs matlab">[<span class="hljs-built_in">table</span>,chi2,p] = crosstab(x,y)    <span class="hljs-built_in">table</span> =         <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    chi2 =        <span class="hljs-number">10</span>    p =        <span class="hljs-number">0.1247</span></code></pre><h2 id="十三-zscore函数-数据的标准化处理"><a href="#十三-zscore函数-数据的标准化处理" class="headerlink" title="十三.zscore函数 数据的标准化处理"></a>十三.zscore函数 数据的标准化处理</h2><p><img src="https://s1.ax1x.com/2020/08/06/agv70H.png" alt="agv70H.png"></p><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><p>在数据分析之前，我们通常需要先将数据标准化（normalization），利用标准化后的数据进行数据分析。数据标准化也就是统计数据的指数化。数据标准化处理主要包括数据同趋化处理和无量纲化处理两个方面。数据同趋化处理主要解决不同性质数据问题，对不同性质指标直接加总不能正确反映不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对测评方案的作用力同趋化，再加总才能得出正确结果。数据无量纲化处理主要解决数据的可比性。数据标准化的方法有很多种，常用的有“最小—最大标准化”、“Z-score标准化”和“按小数定标标准化”等。经过上述标准化处理，原始数据均转换为无量纲化指标测评值，即各指标值都处于同一个数量级别上，可以进行综合测评分析。</p><h3 id="2-z-score-标准化"><a href="#2-z-score-标准化" class="headerlink" title="2.z-score 标准化"></a>2.z-score 标准化</h3><p>这种方法基于原始数据的均值（mean）和标准差（standard deviation）进行数据的标准化。将A的原始值x使用z-score标准化到x’。<br>z-score标准化方法适用于属性A的最大值和最小值未知的情况，或有超出取值范围的离群数据的情况。</p><h3 id="3-计算公式"><a href="#3-计算公式" class="headerlink" title="3.计算公式"></a>3.计算公式</h3><ul><li>新数据=（原数据-均值）/标准差<br>用zscore函数可以把数据进行z-score标准化处理。</li></ul><h3 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h3><p>$Y=zscore(X)$</p><blockquote><p>x为标准化之前的数据，y为标准化后的数据</p></blockquote><h3 id="5-特点："><a href="#5-特点：" class="headerlink" title="5.特点："></a>5.特点：</h3><ol><li>样本平均值为0，方差为1；</li><li>区间不确定，处理后各指标的最大值、最小值不相同；</li><li>对于指标值恒定的情况不适用；</li><li>对于要求标准化后数据 大于0 的评价方法（如几何加权平均法）不适用。</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/WUDIPIPIXIA/article/details/101939085">matlab中kstest用法详解</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span><a href="https://ww2.mathworks.cn/help/optim/ug/intlinprog.html">linprog官方文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://ww2.mathworks.cn/help/stats/kstest.html?s_tid=srchtitle">kstest官方文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/f_h_h/article/details/100537394">MATLAB中关于函数intlinprog的使用</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/goodtwo/p/11146540.html">Matlab求解非线性规划，fmincon函数的用法总结</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.cnblogs.com/cherry231/p/8426280.html">MATLAB规划问题——线性规划和非线性规划(from_CSDN_echo_hello)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/qq_43264642/article/details/88949745">matlab学习——非线性规划</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="http://blog.sina.com.cn/s/blog_13e29d95e0102vmap.html">不等式最优解最小值fminbnd、fminunc、fminsearch、fmincon</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.zhihu.com/question/31052709/answer/74094320">fminunc与fminsearch函数的区别是什么?</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://zhidao.baidu.com/question/279465310.html">怎样用matlab做时间序列平稳性检验</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://ww2.mathworks.cn/help/econ/adftest.html?s_tid=srchtitle">adftest()官方文档</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://wenku.baidu.com/view/f14c18215901020207409c97.html">特征值与特征向量的概念、性质及其求法</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://www.cnblogs.com/MarshallL/p/4045768.html">MATLAB 函数编写方法， 浅析MATLAB中的内联函数、匿名函数和函数函数</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://www.cnblogs.com/MarshallL/p/4047880.html">Matlab 接受字符串并转为符号表达式，inline函数，匿名函数形式的方法汇总</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span><a href="https://blog.csdn.net/peterli_xue/article/details/7577003?utm_source=blogxgwz8">matlab @函数句柄以及inline函数、匿名函数、自定义函数</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span><a href="https://www.mathworks.com/help/matlab/ref/fprintf.html?s_tid=srchtitle">官方文档</a><a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:15" class="footnote-text"><span><a href="https://www.mathworks.com/help/stats/kstest.html?s_tid=srchtitle">kstest官方文档</a><a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:16" class="footnote-text"><span><a href="https://www.ilovematlab.cn/thread-171395-1-1.html">ks检验（kstest）几个参数的含义</a><a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:17" class="footnote-text"><span><a href="https://blog.csdn.net/WUDIPIPIXIA/article/details/101939085">matlab中kstest用法详解</a><a href="#fnref:17" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习常用模型及算法4.元胞自动机</title>
    <link href="/2020/08/24/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%954.%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <url>/2020/08/24/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%954.%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728101815307.png" alt=""></p><p>一维元胞自动机。给出任意一个状态，都能知道下一时刻的状态。规则已给出，总共有2^3 = 8种可能。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728103052932.png" alt=""></p><p>二维元胞自动机——生命游戏</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728103245248.png" alt=""></p><p>元胞的状态是有限的——不是有车就是无车，不是死就是活。<br>可以用简单的规则来模拟复杂的问题。</p><h3 id="1-元胞自动机的构成要素"><a href="#1-元胞自动机的构成要素" class="headerlink" title="1.元胞自动机的构成要素"></a>1.元胞自动机的构成要素</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728104319536.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728104350484.png" alt=""></p><p>左图可用来模拟疾病传播情况</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728104456310.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728104523134.png" alt=""></p><p>最常用的就是正方型网格，其次是六边型网格。三角型网格几乎不出现。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728105100503.png" alt=""></p><p>最常用的为左数两种邻居，但具体按照题目要求决定。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728110643566.png" alt=""></p><p>边界处理总共有四种类型。其中汽车交通就采取的是吸收型（汽车经过以后就会消失不见）<br>右侧采取的是周期型，相当于将相同的网格拼在一起。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728111700241.png" alt=""></p><p>总和型是合法型的一种特殊情况</p><h3 id="2-例-森林火灾模型"><a href="#2-例-森林火灾模型" class="headerlink" title="2.例 森林火灾模型"></a>2.例 森林火灾模型</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728111907651.png" alt=""></p><p>火灾在森林中蔓延的模型。元胞总共有三种状态：空格、树、火。<br>其中如果树的任一邻居是火（或者树遭雷劈），它的下一阶段就会变成火。再下一阶段就变成了空格。会以极小概率再次变成树。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728113147827.png" alt=""></p><p>系统稳定条件：着火的密度和由空格转化而成的树的密度应该是相等的。<br>时间尺度分离条件：遭雷劈的概率&lt;&lt;空格转化成树的概率&lt;&lt;树被火烧完的时间尺度</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728142325881.png" alt=""></p><p>用切片重拼的方法表示上下左右邻居。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728143054855.png" alt=""></p><p>这里用RGB分别表示着火、树和空格。<br><pre><code class="hljs matlab"><span class="hljs-comment">% simulate forest fire with cellular automata</span><span class="hljs-comment">% zhou lvwen: zhou.lv.wen@gmail.com</span><span class="hljs-comment">% August 15 2010</span>n = <span class="hljs-number">300</span>;Plight = <span class="hljs-number">5e-6</span>;Pgrowth = <span class="hljs-number">1e-2</span>;UL = [n <span class="hljs-number">1</span>:n<span class="hljs-number">-1</span>];DR = [<span class="hljs-number">2</span>:n <span class="hljs-number">1</span>];veg=<span class="hljs-built_in">zeros</span>(n,n);imh = image(<span class="hljs-built_in">cat</span>(<span class="hljs-number">3</span>,veg,veg,veg));<span class="hljs-comment">% veg = empty=0 burning=1 green=2</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">3000</span>    <span class="hljs-comment">%nearby fires?</span>    sum =            (veg(UL,:)==<span class="hljs-number">1</span>) + ...        (veg(:,UL)==<span class="hljs-number">1</span>)     +      (veg(:,DR)==<span class="hljs-number">1</span>) + ...                     (veg(DR,:)==<span class="hljs-number">1</span>);    veg = <span class="hljs-number">2</span>*(veg==<span class="hljs-number">2</span>) - ...          ( (veg==<span class="hljs-number">2</span>) &amp; (sum&gt;<span class="hljs-number">0</span> | (<span class="hljs-built_in">rand</span>(n,n)&lt;Plight)) ) + ...          <span class="hljs-number">2</span>*((veg==<span class="hljs-number">0</span>) &amp; <span class="hljs-built_in">rand</span>(n,n)&lt;Pgrowth) ;    set(imh, <span class="hljs-string">&#x27;cdata&#x27;</span>, <span class="hljs-built_in">cat</span>(<span class="hljs-number">3</span>,(veg==<span class="hljs-number">1</span>),(veg==<span class="hljs-number">2</span>),<span class="hljs-built_in">zeros</span>(n)) )    drawnow<span class="hljs-keyword">end</span></code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200728144806174.bmp" alt=""></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/You_are_blind/article/details/107630174">学习常用模型及算法：2.元胞自动机和交通模型</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lingo与matlab求解非线性规划</title>
    <link href="/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/lingo%E4%B8%8Ematlab%E6%B1%82%E8%A7%A3%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <url>/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/lingo%E4%B8%8Ematlab%E6%B1%82%E8%A7%A3%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p><img src="https://s1.ax1x.com/2020/08/23/dwhvB8.png" alt="dwhvB8.png"></p><h3 id="2-lingo代码"><a href="#2-lingo代码" class="headerlink" title="2.lingo代码"></a>2.lingo代码</h3><pre><code class="hljs lingo">model:p1&#x3D;17;p2&#x3D;2.67;k1&#x3D;0.3;k2&#x3D;8;p3&#x3D;1700;N1&#x3D;550&#x2F;(1+1.2*@exp(-0.8*x1));N2&#x3D;25&#x2F;(1+1.1*@exp(-0.4*x2));Max&#x3D;Z;Z&#x3D;k1*p1*N1+k1*p3*N2+(k2-x1-x2)*N1*p2;0&lt;&#x3D;x1+x2;x1+x1&lt;&#x3D;8;N1&gt;&#x3D;N2;0&lt;&#x3D;x1;x1&lt;&#x3D;20;0&lt;&#x3D;x2;x2&lt;&#x3D;10;@gin(x1); @gin(x2);end</code></pre><h3 id="2-matlab代码"><a href="#2-matlab代码" class="headerlink" title="2.matlab代码"></a>2.matlab代码</h3><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)构造函数<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>= <span class="hljs-title">con_fun1</span><span class="hljs-params">(x)</span></span>p1=<span class="hljs-number">17</span>;p2=<span class="hljs-number">2.67</span>;k1=<span class="hljs-number">0.3</span>;k2=<span class="hljs-number">8</span>;p3=<span class="hljs-number">1700</span>;N1=<span class="hljs-number">550</span>/(<span class="hljs-number">1</span>+<span class="hljs-number">1.2</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-0.8</span>*x(<span class="hljs-number">1</span>)));N2=<span class="hljs-number">25</span>/(<span class="hljs-number">1</span>+<span class="hljs-number">1.1</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-0.4</span>*x(<span class="hljs-number">2</span>)));f=<span class="hljs-number">-1</span>*(k1*p1*N1+k1*p3*N2+(k2-x(<span class="hljs-number">1</span>)-x(<span class="hljs-number">2</span>))*N1*p2);<span class="hljs-keyword">end</span>(<span class="hljs-number">2</span>)操作代码OPTIONS=optimset(<span class="hljs-string">&#x27;display&#x27;</span>,<span class="hljs-string">&#x27;iter&#x27;</span>,<span class="hljs-string">&#x27;LargeScale&#x27;</span>,<span class="hljs-string">&#x27;off&#x27;</span>);lb=[<span class="hljs-number">0</span> <span class="hljs-number">0</span>];hb=[<span class="hljs-number">20</span> <span class="hljs-number">10</span>];A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">-1</span> <span class="hljs-number">-1</span>];k2=<span class="hljs-number">30</span>;b=[k2;<span class="hljs-number">0</span>];[x,fval,exitflag,output]=fmincon(@con_fun1,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],A,b,[],[],lb,hb,[],OPTIONS);</code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000006192726">lingo学习篇</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习常用模型及算法3.遗传算法</title>
    <link href="/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%953.%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <url>/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%953.%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/d0YnPJ.jpg" alt=""></p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>遗传算法最初是借鉴了进化生物学中的一些现象而发展起来的，这些现象包括遗传, 突变, 自然选择(适者生存，优胜劣汰遗传机制) 以及杂交等。当然借鉴这些现象主要是因为这些现象的某些特性，而不仅仅是现象本身。所以理解这些现象的特性对于理解算法的思想是至关重要的。<br>在遗传算法中，问题域中的可能解被看作是种群的个体。对于一个最优化问题，一定数量的候选解（称为个体）的抽象表示（称为染色体）的种群向更好的解进化。传统上，解用二进制将个体编码成符号串形式（即0 和1 的串），但也可以用其他表示方法。进化从完全随机个体的种群开始，之后一代一代发生。在每一代中, 整个种群的适应度被评价，基于它们的适应度，从当前种群中随机地择优选择多个个体。通过杂交和突变产生新的生命种群，该种群在算法的下一次迭代中成为当前种群。从而不断得到更优的种群，同时搜索优化种群中的最优个体，求得满足要求的最优解。<br>选择可以使得种群在一定程度上淘汰一些较差的解，这样就减少了以后计算的消耗。交叉和变异，在一定程度上保留了本代种群的优良特性（也就是解的优化性），并且基于本代优良特性产生的下一代种群不至于会有很差的优化性，这样就减少了搜索的代价。<br>遗传算法可以认为是退火算法的更加复杂化，能够使用遗传算法的地方就能够使用退火算法。如果遗传算法的种群只有一个个体，并且去除算法中的选择和交叉，仅保留变异操作，那么这两个算法是非常类似的。正是因为遗传算法使用了种群这个机制，使得它可以并行操作，在同一时间内可以求解一定数量的最优个体。而退火算法在同一时间内只能优化一个方案。这也就是它们两者的区别。根据实际问题的需要，一般都是先选退火算法。</p><h3 id="2-算法模型"><a href="#2-算法模型" class="headerlink" title="2.算法模型"></a>2.算法模型</h3><p>算法的主要步骤</p><ol><li>初始化: 初始化进化代数计数器（generation） t ←← 0（即初始值为0），最大进化代数（max_generation）TT。随机生成MM个个体作为初始群体P(t)P(t)（population）。其中MM就是种群大小（population_size），TT就是进化代数（max_generation）。</li><li>个体评价：计算P(t)P(t) 中各个个体的适应度值（population_fitness）。适应度值是一个M×1M×1维的向量。每个维度对应每个个体的适应度值。</li><li>选择运算：将选择算子（select）作用于群体。</li><li>交叉运算：将交叉算子（crossover）作用于群体。</li><li>变异运算：将变异算子（mutate）作用于群体，并通过以上运算得到下一代群体P(t+1)P(t+1)。</li><li>终止条件：如果t≤Tt≤T，则t←t+1t←t+1并跳转到第2步；否则输出P(t)P(t)中的最优解。也就是没有迭代完最大的迭代次数，那么继续迭代，并且代际更新。否则，就结束</li></ol><h3 id="3-主要内容"><a href="#3-主要内容" class="headerlink" title="3.主要内容"></a>3.主要内容</h3><ul><li><p>解空间和编码<br>编码是解的表达形式，解空间的表达依赖于编码形式。编码影响交叉和变异等运算，在一定程度上会影响算法的效率。编码的形式主要有：二进制编码，实数编码，符号编码，格雷编码。选得较多的有实数编码，计算简答， 而且便于理解。</p></li><li><p>适应度计算<br>适应度是算法进行淘汰的依据，也就是说，适应度一般都是非负的，通常由目标函数直接改造得到，比如目标函数的相反数，目标函数的倒数。适应度函数不应该太复杂，以免影响计算。</p></li><li><p>选择算子<br>主要的方法有轮盘赌（比例选择算子），两两竞争，排序竞争。使用较多的就是前两个了。选择主要的作用就是从父代中选择一些适应度高的个体遗传到后代中。而且这是一个随机选择，依概率选择，适应度高的被选择的可能性大，适应度低的个体被选择的可能性小。</p></li><li><p>交叉算子<br>交叉就是指两个相互配对的染色体（在实际中一般选择相邻的两个染色体）依据交叉概率，交换他们的部分基因，从而形成新个体。通俗来讲，就是一个个体与其相邻的个体依据某个概率交换部分元素，从而产生新个体的过程。这样的过程会保留交换之前的个体的优良特性，减少算法的计算开销。遗传算法的独特之处，不仅仅是遗传算法，模拟退火算法等的独特之处都是其产生新个体的方式。而交叉运算是遗传算法产生新个体的主要方法，所以交叉运算是遗传算法的关键之处。交叉主要有两种，单点交叉和两点交叉，两点交叉使用的较多。</p></li><li><p>变异算子<br>变异操作对种群中的个体的某些基因上的基因值作变动，模拟生物在繁殖过程中新产生的染色体中的基因会以一定的概率出错。通俗来讲，就是一个个体的随机选取的某些元素依据某种概率发生变化。变异运算是产生新个体的辅助方法，决定遗传算法的局部搜索能力， 保持种群多样性。交叉运算和变异运算的相互配合，共同完成对搜索空间的全局搜索和局部搜索。类型主要有基本位变异和换位变异。</p></li><li><p>程序实现<br>这是解决TSP问题的程序，主要用于演示<br>程序框架介绍：</p></li></ul><ol><li>清理工作空间，加载数据，画出底层画布</li><li>计算各城市之间的距离矩阵（distance_matrix），若城市有CC个则矩阵应该是C×CC×C的。</li><li>初始化变量。包括种群大小（population_size），最大代数（max_generation），变异概率（probability_mutate）。</li><li>初始化一个矩阵，用于存储种群。这就是种群的数学表示。（population或population_matrix）</li><li>迭代开始。</li><li>评价准则。计算每个个体的适应度。在这个问题中，个体的适应度等于个体的目标函数的倒数。其中涉及到目标函数值向量（f_vector），适应度向量（population_fitness）。</li><li>获取本代种群中适应度最高的那个个体，并且加到下一代中。</li><li>选择操作。这里使用的是两两竞争。将种群中的个体随机打乱，生成两个随机序列，并依次比较这两个随机序列，选择相应位置上适应度较高的个体，可能会出现重复，即使出现重复但都是适应度较高的方案，经过交叉和变异，会生成不同的个体，对结果影响不大。</li><li>交叉操作。取种群中的个体，两两相取。这里使用的是两点交叉，所以随机生成两个点，在这两个点之间进行交叉操作。而交叉的对象就是这两个同时取到的个体，交叉之前的是父代，交叉之后的是子代。</li><li>变异操作。每个个体是依概率进行变异的，这就说明有的个体可能不会变异。 而变异的方式也是随机的，这就能较好的符合真实的自然现象。三种变异方式：随机的两个点进行交换（也就是单个个体随机选取两个元素进行交换），两个点之间的数据循环移动（包括左移位，右移位），两个带你之间的数据转置（这是使用概率较大的一种变异方式，约为0.5）。</li></ol><h3 id="4-例"><a href="#4-例" class="headerlink" title="4.例"></a>4.例</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dBEQaV.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dBEwa6.png" alt=""></p><p>pop为初始化的种群<br>select选择  crossover交叉  mutate变异<br>第14行是为了将最好的解留在种群当中</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dBEwa6.png" alt=""></p><p>size(pop, 1)求出pop的行数，即种群的个数<br>第12行可理解为：在1至popSize的整数之间任意挑选nselect次（可重复）之后组成的数组。<br>interp1为线性插值函数<br>I是我们选择的行数，即我们选择了哪些个体。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dBEcMd.png" alt=""></p><p>InsertPoints决定了我们进行交叉操作的起点与终点。<br>具体交叉方式与前文所述类似。<br>待交叉结束后，将child1和child2插回children。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dBE5i8.png" alt=""></p><p>当rand小于probmutation时，发生变异，变异情况有三种，1/4的可能性swap，1/4的可能性slide，1/2的可能性flip。<br><pre><code class="hljs matlab"><span class="hljs-comment">%</span><span class="hljs-comment">% This is the main script to finds a (near) optimal solution to the Traveling</span><span class="hljs-comment">% Salesman Problem (TSP), by setting up a Simulated Annealing (SA) to search</span><span class="hljs-comment">% for the shortest route (least distance for the salesman to travel to each</span><span class="hljs-comment">% city exactly once and return to the starting city).</span><span class="hljs-comment">%</span><span class="hljs-comment">% Author: zhou lvwen       Email: zhou.lv.wen@gmail.com</span><span class="hljs-comment">% Release Date: November 12, 2012</span><span class="hljs-comment">%</span>clear;clc;load china; <span class="hljs-comment">% geographic information</span>plotcities(province, border, city); <span class="hljs-comment">% draw the map of China</span>numberofcities = <span class="hljs-built_in">length</span>(city);      <span class="hljs-comment">% number of cities</span><span class="hljs-comment">% distance matrix: dis(i,j) is the distance between city i and j.</span>dis = distancematrix(city);temperature = <span class="hljs-number">1000</span>;                 <span class="hljs-comment">% Initialize the temperature.</span>cooling_rate = <span class="hljs-number">0.94</span>;                <span class="hljs-comment">% cooling rate</span>iterations = <span class="hljs-number">1</span>;                     <span class="hljs-comment">% Initialize the iteration number.</span><span class="hljs-comment">% Initialize random number generator with &quot;seed&quot;.</span><span class="hljs-built_in">rand</span>(<span class="hljs-string">&#x27;seed&#x27;</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">% Initialize the route by generate a sequence of random</span>route = randperm(numberofcities);<span class="hljs-comment">% This is objective function, the total distance for the routes.</span>previous_distance = totaldistance(route,dis);<span class="hljs-comment">% This is a flag used to cool the current temperature after 100 iterations</span>temperature_iterations = <span class="hljs-number">1</span>;<span class="hljs-comment">% This is a flag used to plot the current route after 200 iterations</span>plot_iterations = <span class="hljs-number">1</span>;<span class="hljs-comment">% plot the current route</span>plotroute(city, route, previous_distance, temperature);<span class="hljs-keyword">while</span> <span class="hljs-number">1.0</span> &lt; temperature    <span class="hljs-comment">% generate randomly a neighbouring solution</span>    temp_route = perturb(route,<span class="hljs-string">&#x27;reverse&#x27;</span>);    <span class="hljs-comment">% compute total distance of the temp_route</span>    current_distance = totaldistance(temp_route, dis);    <span class="hljs-comment">% compute change of distance</span>    diff = current_distance - previous_distance;    <span class="hljs-comment">% Metropolis Algorithm</span>    <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span>) || (<span class="hljs-built_in">rand</span> &lt; <span class="hljs-built_in">exp</span>(-diff/(temperature)))        route = temp_route;         <span class="hljs-comment">%accept new route</span>        previous_distance = current_distance;        <span class="hljs-comment">% update iterations</span>        temperature_iterations = temperature_iterations + <span class="hljs-number">1</span>;        plot_iterations = plot_iterations + <span class="hljs-number">1</span>;        iterations = iterations + <span class="hljs-number">1</span>;    <span class="hljs-keyword">end</span>    <span class="hljs-comment">% reduce the temperature every 100 iterations</span>    <span class="hljs-keyword">if</span> temperature_iterations &gt;= <span class="hljs-number">100</span>       temperature = cooling_rate*temperature;       temperature_iterations = <span class="hljs-number">0</span>;    <span class="hljs-keyword">end</span>    <span class="hljs-comment">%  plot the current route every 200 iterations</span>    <span class="hljs-keyword">if</span> plot_iterations &gt;= <span class="hljs-number">200</span>       plotroute(city, route, previous_distance,temperature);       plot_iterations = <span class="hljs-number">0</span>;    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-comment">% plot the final solution</span>plotroute(city, route, previous_distance,temperature);</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/d0YgiQ.png" alt=""></p><h3 id="5-算法的比较"><a href="#5-算法的比较" class="headerlink" title="5.算法的比较"></a>5.算法的比较</h3><p>基于TSP问题，我们最先想到的就是暴力搜索方法，就是遍历所有可能的情况，然后计算每种情况的代价，选择其中代价最小的一种情况作为最优解，这在理论上是一定能够找到最优解的，然后解空间非常大，遍历所有情况花费的时间可能是无穷的，这种情况下，实际上是不可能实现的。遗传算法区别于这种暴力搜索的一个关键就是，它在随机搜索解空间中新的解的时候，能够保留原解的优良特性，不至于本次搜索到了一个比较好的解，接下来会搜索很多比本次的解还要差的解，而暴力搜索就会产生这样的过程，即在搜索到一个较好的解之后，还可能会搜索很多比这个解要差很多的解。<br>那么在算法上这样搜索解的过程就是产生新个体的过程，或者可以叫做是邻解生成，在模拟退火中，主要通过扰动产生新解，这个过程类似于遗传算法的变异，而变异过程只是遗传算法产生新个体（新解）的辅助方法，主要方法是交叉。而选择又使得一些适应度较低的个体，也就是代价较大的解被抛弃掉，在算法中叫做淘汰。而不论是扰动，变异，还是交叉，选择，都达到了两个目的，一个是减少需要被搜索的解空间，另一个是保留较优的解。选择在减少需要被搜索的解空间上达到的效果最明显，而其他三种在保留较优的解上达到的效果比较明显。<br>所以，基于这些算法，我们改进暴力搜索的方向应该是加上限制，使得这些限制能够减少被搜索的解空间，并且能够在被搜索的解空间中尽可能多的保留较优的解。另外，受这些算法的启发，我们在优化一个比较暴力的方案时（或者说是一个比较粗糙的类全解空间搜索方案），也可以在这样的方向上加上一些措施，以减少我们做的无用功，也就是使得我们尽可能的朝着最优解的方向前进，而不是在中途后退，去检验较差的解是否可行。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_41634283/article/details/95381415">遗传算法——学习反馈</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/qq_41634283/article/details/95381415">学习常用模型及算法：1.启发式算法（模拟退火和遗传算法）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lingo学习</title>
    <link href="/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/lingo%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/lingo%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在lingo中&gt;与&gt;=等价<br>  @gin，整数变量限制<br>  @bin，0-1变量限制<br>  @bnd(取值范围)</p></blockquote><h2 id="1-整数规划"><a href="#1-整数规划" class="headerlink" title="1.整数规划"></a>1.整数规划</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dwlf1K.png" alt=""><br><pre><code class="hljs lingo">model:    max&#x3D;z;    z&#x3D;5*x1+8*x2;    x1+x2&lt;6;    5*x1+9*x2&lt;45;    x1&gt;0;x2&gt;0;    @gin(x1);@gin(x2);    end</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dwtpHU.png" alt=""></p><h2 id="2-非线性规划"><a href="#2-非线性规划" class="headerlink" title="2.非线性规划"></a>2.非线性规划</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dw1Oa9.png" alt=""></p><pre><code class="hljs shell">model:    min=3*x^2+y^2-x*y+0.4*y;    1.2*x+0.9*y&gt;1.1;    x+y=1;    y&lt;0.7;    end</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dwNCsP.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dw1X5R.png" alt=""></p><pre><code class="hljs shell">model:    min=z;    z=@abs(pi-((a*b)/(c*d)))+1;    @bnd(20,a,100);    @bnd(20,b,100);    @bnd(20,c,100);    @bnd(20,d,100);    @gin(a);    @gin(b);    @gin(c);    @gin(d);    end</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dwUG0f.png" alt=""></p><h2 id="3-复杂问题求解"><a href="#3-复杂问题求解" class="headerlink" title="3.复杂问题求解"></a>3.复杂问题求解</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/dw0trn.png" alt=""></p><pre><code class="hljs shell">Model:    Sets:       !定义集合;    CK/1..10/:d,y;   !10个仓库，y和d都是10维的变量，其中y是01变量，d由下面数据给定;    KH/1..20/;        !20个客户;    SS(CK,KH):x,c;   !x和c都是10*20的变量，x表示供应百分数，c表示全部供应的费用;    EndSets    Min=@Sum(SS(i,j):c(i,j)*x(i,j))+@Sum(CK(i):d(i)*y(i));    @For(CK(i):@Sum(KH(j):x(i,j))&lt;20*y(i));  !若不建某仓库，是没有物资的;    @For(KH(j):@Sum(CK(i):x(i,j))=1);  !每个客户需要供应的百分数之和都为1;    @For(CK(i):@Bin(y(i)));    !y是0、1变量限制;    Data:   !数据部分;    d=2    3    4    2    3    4    2    3    4    5    ;    c=    9    14    6    15    6    19    11    19    4    5    3    6    4    10    12    19    8    7    10    4    10    16    9    12    8    14    4    20    9    13    2    17    18    19    15    18    16    9    8    8    2    10    2    18    4    19    8    13    15    9    4    8    16    2    15    11    8    8    3    14    6    4    1    9    3    3    5    15    6    10    9    13    6    4    8    5    2    9    13    8    7    10    20    17    7    9    13    16    9    15    13    10    12    12    4    16    6    16    6    17    15    18    14    18    11    4    20    20    13    1    10    19    6    4    12    20    20    1    20    7    15    14    20    12    6    15    20    3    1    16    6    6    6    20    3    17    6    11    17    12    1    1    5    2    2    5    16    8    7    7    12    9    5    12    6    4    17    11    11    20    18    16    20    18    5    20    8    6    17    20    9    19    1    10    9    5    8    9    17    15    6    7    17    4    12    4    19    4    13    16    7    6    1    14    11    5    7    9    11    13    ;    EndData    End</code></pre><pre><code class="hljs shell"> Global optimal solution found.Objective value:                              69.00000Objective bound:                              69.00000Infeasibilities:                              0.000000Extended solver steps:                               0Total solver iterations:                           427Elapsed runtime seconds:                          0.55Model Class:                                      MILPTotal variables:                    210Nonlinear variables:                  0Integer variables:                   10Total constraints:                   31Nonlinear constraints:                0Total nonzeros:                     620Nonlinear nonzeros:                   0                                    Variable           Value        Reduced Cost                                       D( 1)        2.000000            0.000000                                       D( 2)        3.000000            0.000000                                       D( 3)        4.000000            0.000000                                       D( 4)        2.000000            0.000000                                       D( 5)        3.000000            0.000000                                       D( 6)        4.000000            0.000000                                       D( 7)        2.000000            0.000000                                       D( 8)        3.000000            0.000000                                       D( 9)        4.000000            0.000000                                      D( 10)        5.000000            0.000000                                       Y( 1)        1.000000            2.000000                                       Y( 2)        0.000000           -17.00000                                       Y( 3)        1.000000            4.000000                                       Y( 4)        1.000000            2.000000                                       Y( 5)        0.000000            3.000000                                       Y( 6)        1.000000            4.000000                                       Y( 7)        1.000000            2.000000                                       Y( 8)        1.000000            3.000000                                       Y( 9)        0.000000           -56.00000                                      Y( 10)        0.000000           -55.00000                                    X( 1, 1)        0.000000            8.000000                                    X( 1, 2)        0.000000            13.00000                                    X( 1, 3)        0.000000            5.000000                                    X( 1, 4)        0.000000            13.00000                                    X( 1, 5)        0.000000            4.000000                                    X( 1, 6)        0.000000            16.00000                                    X( 1, 7)        0.000000            6.000000                                    X( 1, 8)        0.000000            16.00000                                    X( 1, 9)        0.000000            3.000000                                   X( 1, 10)        0.000000            4.000000                                   X( 1, 11)        1.000000            0.000000                                   X( 1, 12)        0.000000            0.000000                                   X( 1, 13)        1.000000            0.000000                                   X( 1, 14)        0.000000            8.000000                                   X( 1, 15)        0.000000            9.000000                                   X( 1, 16)        0.000000            15.00000                                   X( 1, 17)        0.000000            6.000000                                   X( 1, 18)        0.000000            6.000000                                   X( 1, 19)        0.000000            7.000000                                   X( 1, 20)        1.000000            0.000000                                    X( 2, 1)        0.000000            10.00000                                    X( 2, 2)        0.000000            16.00000                                    X( 2, 3)        0.000000            9.000000                                    X( 2, 4)        0.000000            11.00000                                    X( 2, 5)        0.000000            7.000000                                    X( 2, 6)        0.000000            12.00000                                    X( 2, 7)        0.000000            0.000000                                    X( 2, 8)        0.000000            18.00000                                    X( 2, 9)        0.000000            9.000000                                   X( 2, 10)        0.000000            13.00000                                   X( 2, 11)        0.000000            0.000000                                   X( 2, 12)        0.000000            12.00000                                   X( 2, 13)        0.000000            15.00000                                   X( 2, 14)        0.000000            18.00000                                   X( 2, 15)        0.000000            13.00000                                   X( 2, 16)        0.000000            15.00000                                   X( 2, 17)        0.000000            15.00000                                   X( 2, 18)        0.000000            9.000000                                   X( 2, 19)        0.000000            6.000000                                   X( 2, 20)        0.000000            5.000000                                    X( 3, 1)        0.000000            1.000000                                    X( 3, 2)        0.000000            9.000000                                    X( 3, 3)        0.000000            1.000000                                    X( 3, 4)        0.000000            16.00000                                    X( 3, 5)        0.000000            2.000000                                    X( 3, 6)        0.000000            16.00000                                    X( 3, 7)        0.000000            3.000000                                    X( 3, 8)        0.000000            10.00000                                    X( 3, 9)        0.000000            14.00000                                   X( 3, 10)        0.000000            8.000000                                   X( 3, 11)        0.000000            1.000000                                   X( 3, 12)        0.000000            2.000000                                   X( 3, 13)        0.000000            12.00000                                   X( 3, 14)        1.000000            0.000000                                   X( 3, 15)        0.000000            12.00000                                   X( 3, 16)        0.000000            7.000000                                   X( 3, 17)        0.000000            6.000000                                   X( 3, 18)        0.000000            7.000000                                   X( 3, 19)        1.000000            0.000000                                   X( 3, 20)        0.000000            10.00000                                    X( 4, 1)        0.000000            5.000000                                    X( 4, 2)        0.000000            3.000000                                    X( 4, 3)        1.000000            0.000000                                    X( 4, 4)        0.000000            7.000000                                    X( 4, 5)        0.000000            1.000000                                    X( 4, 6)        1.000000            0.000000                                    X( 4, 7)        1.000000            0.000000                                    X( 4, 8)        0.000000            12.00000                                    X( 4, 9)        0.000000            5.000000                                   X( 4, 10)        0.000000            9.000000                                   X( 4, 11)        0.000000            6.000000                                   X( 4, 12)        0.000000            7.000000                                   X( 4, 13)        0.000000            2.000000                                   X( 4, 14)        0.000000            2.000000                                   X( 4, 15)        0.000000            5.000000                                   X( 4, 16)        0.000000            1.000000                                   X( 4, 17)        1.000000            0.000000                                   X( 4, 18)        0.000000            8.000000                                   X( 4, 19)        0.000000            10.00000                                   X( 4, 20)        0.000000            4.000000                                    X( 5, 1)        0.000000            6.000000                                    X( 5, 2)        0.000000            9.000000                                    X( 5, 3)        0.000000            19.00000                                    X( 5, 4)        0.000000            15.00000                                    X( 5, 5)        0.000000            5.000000                                    X( 5, 6)        0.000000            6.000000                                    X( 5, 7)        0.000000            8.000000                                    X( 5, 8)        0.000000            13.00000                                    X( 5, 9)        0.000000            8.000000                                   X( 5, 10)        0.000000            14.00000                                   X( 5, 11)        0.000000            10.00000                                   X( 5, 12)        0.000000            4.000000                                   X( 5, 13)        0.000000            8.000000                                   X( 5, 14)        0.000000            10.00000                                   X( 5, 15)        0.000000            1.000000                                   X( 5, 16)        0.000000            12.00000                                   X( 5, 17)        0.000000            4.000000                                   X( 5, 18)        0.000000            15.00000                                   X( 5, 19)        0.000000            3.000000                                   X( 5, 20)        0.000000            13.00000                                    X( 6, 1)        0.000000            14.00000                                    X( 6, 2)        0.000000            17.00000                                    X( 6, 3)        0.000000            13.00000                                    X( 6, 4)        0.000000            16.00000                                    X( 6, 5)        0.000000            9.000000                                    X( 6, 6)        0.000000            1.000000                                    X( 6, 7)        0.000000            15.00000                                    X( 6, 8)        0.000000            17.00000                                    X( 6, 9)        0.000000            12.00000                                   X( 6, 10)        1.000000            0.000000                                   X( 6, 11)        0.000000            7.000000                                   X( 6, 12)        0.000000            13.00000                                   X( 6, 13)        0.000000            2.000000                                   X( 6, 14)        0.000000            2.000000                                   X( 6, 15)        0.000000            9.000000                                   X( 6, 16)        0.000000            16.00000                                   X( 6, 17)        0.000000            18.00000                                   X( 6, 18)        1.000000            0.000000                                   X( 6, 19)        0.000000            17.00000                                   X( 6, 20)        0.000000            3.000000                                    X( 7, 1)        0.000000            14.00000                                    X( 7, 2)        0.000000            13.00000                                    X( 7, 3)        0.000000            19.00000                                    X( 7, 4)        0.000000            10.00000                                    X( 7, 5)        0.000000            4.000000                                    X( 7, 6)        0.000000            12.00000                                    X( 7, 7)        0.000000            15.00000                                    X( 7, 8)        1.000000            0.000000                                    X( 7, 9)        1.000000            0.000000                                   X( 7, 10)        0.000000            15.00000                                   X( 7, 11)        0.000000            3.000000                                   X( 7, 12)        1.000000            0.000000                                   X( 7, 13)        0.000000            2.000000                                   X( 7, 14)        0.000000            18.00000                                   X( 7, 15)        1.000000            0.000000                                   X( 7, 16)        0.000000            13.00000                                   X( 7, 17)        0.000000            4.000000                                   X( 7, 18)        0.000000            10.00000                                   X( 7, 19)        0.000000            14.00000                                   X( 7, 20)        0.000000            8.000000                                    X( 8, 1)        1.000000            0.000000                                    X( 8, 2)        1.000000            0.000000                                    X( 8, 3)        0.000000            4.000000                                    X( 8, 4)        1.000000            0.000000                                    X( 8, 5)        1.000000            0.000000                                    X( 8, 6)        0.000000            2.000000                                    X( 8, 7)        0.000000            11.00000                                    X( 8, 8)        0.000000            5.000000                                    X( 8, 9)        0.000000            6.000000                                   X( 8, 10)        0.000000            6.000000                                   X( 8, 11)        0.000000            9.000000                                   X( 8, 12)        0.000000            3.000000                                   X( 8, 13)        0.000000            1.000000                                   X( 8, 14)        0.000000            10.00000                                   X( 8, 15)        0.000000            3.000000                                   X( 8, 16)        1.000000            0.000000                                   X( 8, 17)        0.000000            15.00000                                   X( 8, 18)        0.000000            10.00000                                   X( 8, 19)        0.000000            8.000000                                   X( 8, 20)        0.000000            16.00000                                    X( 9, 1)        0.000000            20.00000                                    X( 9, 2)        0.000000            18.00000                                    X( 9, 3)        0.000000            22.00000                                    X( 9, 4)        0.000000            19.00000                                    X( 9, 5)        0.000000            6.000000                                    X( 9, 6)        0.000000            20.00000                                    X( 9, 7)        0.000000            6.000000                                    X( 9, 8)        0.000000            6.000000                                    X( 9, 9)        0.000000            19.00000                                   X( 9, 10)        0.000000            22.00000                                   X( 9, 11)        0.000000            9.000000                                   X( 9, 12)        0.000000            16.00000                                   X( 9, 13)        0.000000            0.000000                                   X( 9, 14)        0.000000            11.00000                                   X( 9, 15)        0.000000            9.000000                                   X( 9, 16)        0.000000            4.000000                                   X( 9, 17)        0.000000            9.000000                                   X( 9, 18)        0.000000            11.00000                                   X( 9, 19)        0.000000            17.00000                                   X( 9, 20)        0.000000            14.00000                                   X( 10, 1)        0.000000            8.000000                                   X( 10, 2)        0.000000            9.000000                                   X( 10, 3)        0.000000            19.00000                                   X( 10, 4)        0.000000            5.000000                                   X( 10, 5)        0.000000            13.00000                                   X( 10, 6)        0.000000            4.000000                                   X( 10, 7)        0.000000            17.00000                                   X( 10, 8)        0.000000            4.000000                                   X( 10, 9)        0.000000            15.00000                                  X( 10, 10)        0.000000            18.00000                                  X( 10, 11)        0.000000            7.000000                                  X( 10, 12)        0.000000            3.000000                                  X( 10, 13)        0.000000            0.000000                                  X( 10, 14)        0.000000            15.00000                                  X( 10, 15)        0.000000            11.00000                                  X( 10, 16)        0.000000            4.000000                                  X( 10, 17)        0.000000            8.000000                                  X( 10, 18)        0.000000            11.00000                                  X( 10, 19)        0.000000            11.00000                                  X( 10, 20)        0.000000            12.00000                                    C( 1, 1)        9.000000            0.000000                                    C( 1, 2)        14.00000            0.000000                                    C( 1, 3)        6.000000            0.000000                                    C( 1, 4)        15.00000            0.000000                                    C( 1, 5)        6.000000            0.000000                                    C( 1, 6)        19.00000            0.000000                                    C( 1, 7)        11.00000            0.000000                                    C( 1, 8)        19.00000            0.000000                                    C( 1, 9)        4.000000            0.000000                                   C( 1, 10)        5.000000            0.000000                                   C( 1, 11)        3.000000            0.000000                                   C( 1, 12)        6.000000            0.000000                                   C( 1, 13)        4.000000            0.000000                                   C( 1, 14)        10.00000            0.000000                                   C( 1, 15)        12.00000            0.000000                                   C( 1, 16)        19.00000            0.000000                                   C( 1, 17)        8.000000            0.000000                                   C( 1, 18)        7.000000            0.000000                                   C( 1, 19)        10.00000            0.000000                                   C( 1, 20)        4.000000            0.000000                                    C( 2, 1)        10.00000            0.000000                                    C( 2, 2)        16.00000            0.000000                                    C( 2, 3)        9.000000            0.000000                                    C( 2, 4)        12.00000            0.000000                                    C( 2, 5)        8.000000            0.000000                                    C( 2, 6)        14.00000            0.000000                                    C( 2, 7)        4.000000            0.000000                                    C( 2, 8)        20.00000            0.000000                                    C( 2, 9)        9.000000            0.000000                                   C( 2, 10)        13.00000            0.000000                                   C( 2, 11)        2.000000            0.000000                                   C( 2, 12)        17.00000            0.000000                                   C( 2, 13)        18.00000            0.000000                                   C( 2, 14)        19.00000            0.000000                                   C( 2, 15)        15.00000            0.000000                                   C( 2, 16)        18.00000            0.000000                                   C( 2, 17)        16.00000            0.000000                                   C( 2, 18)        9.000000            0.000000                                   C( 2, 19)        8.000000            0.000000                                   C( 2, 20)        8.000000            0.000000                                    C( 3, 1)        2.000000            0.000000                                    C( 3, 2)        10.00000            0.000000                                    C( 3, 3)        2.000000            0.000000                                    C( 3, 4)        18.00000            0.000000                                    C( 3, 5)        4.000000            0.000000                                    C( 3, 6)        19.00000            0.000000                                    C( 3, 7)        8.000000            0.000000                                    C( 3, 8)        13.00000            0.000000                                    C( 3, 9)        15.00000            0.000000                                   C( 3, 10)        9.000000            0.000000                                   C( 3, 11)        4.000000            0.000000                                   C( 3, 12)        8.000000            0.000000                                   C( 3, 13)        16.00000            0.000000                                   C( 3, 14)        2.000000            0.000000                                   C( 3, 15)        15.00000            0.000000                                   C( 3, 16)        11.00000            0.000000                                   C( 3, 17)        8.000000            0.000000                                   C( 3, 18)        8.000000            0.000000                                   C( 3, 19)        3.000000            0.000000                                   C( 3, 20)        14.00000            0.000000                                    C( 4, 1)        6.000000            0.000000                                    C( 4, 2)        4.000000            0.000000                                    C( 4, 3)        1.000000            0.000000                                    C( 4, 4)        9.000000            0.000000                                    C( 4, 5)        3.000000            0.000000                                    C( 4, 6)        3.000000            0.000000                                    C( 4, 7)        5.000000            0.000000                                    C( 4, 8)        15.00000            0.000000                                    C( 4, 9)        6.000000            0.000000                                   C( 4, 10)        10.00000            0.000000                                   C( 4, 11)        9.000000            0.000000                                   C( 4, 12)        13.00000            0.000000                                   C( 4, 13)        6.000000            0.000000                                   C( 4, 14)        4.000000            0.000000                                   C( 4, 15)        8.000000            0.000000                                   C( 4, 16)        5.000000            0.000000                                   C( 4, 17)        2.000000            0.000000                                   C( 4, 18)        9.000000            0.000000                                   C( 4, 19)        13.00000            0.000000                                   C( 4, 20)        8.000000            0.000000                                    C( 5, 1)        7.000000            0.000000                                    C( 5, 2)        10.00000            0.000000                                    C( 5, 3)        20.00000            0.000000                                    C( 5, 4)        17.00000            0.000000                                    C( 5, 5)        7.000000            0.000000                                    C( 5, 6)        9.000000            0.000000                                    C( 5, 7)        13.00000            0.000000                                    C( 5, 8)        16.00000            0.000000                                    C( 5, 9)        9.000000            0.000000                                   C( 5, 10)        15.00000            0.000000                                   C( 5, 11)        13.00000            0.000000                                   C( 5, 12)        10.00000            0.000000                                   C( 5, 13)        12.00000            0.000000                                   C( 5, 14)        12.00000            0.000000                                   C( 5, 15)        4.000000            0.000000                                   C( 5, 16)        16.00000            0.000000                                   C( 5, 17)        6.000000            0.000000                                   C( 5, 18)        16.00000            0.000000                                   C( 5, 19)        6.000000            0.000000                                   C( 5, 20)        17.00000            0.000000                                    C( 6, 1)        15.00000            0.000000                                    C( 6, 2)        18.00000            0.000000                                    C( 6, 3)        14.00000            0.000000                                    C( 6, 4)        18.00000            0.000000                                    C( 6, 5)        11.00000            0.000000                                    C( 6, 6)        4.000000            0.000000                                    C( 6, 7)        20.00000            0.000000                                    C( 6, 8)        20.00000            0.000000                                    C( 6, 9)        13.00000            0.000000                                   C( 6, 10)        1.000000            0.000000                                   C( 6, 11)        10.00000            0.000000                                   C( 6, 12)        19.00000            0.000000                                   C( 6, 13)        6.000000            0.000000                                   C( 6, 14)        4.000000            0.000000                                   C( 6, 15)        12.00000            0.000000                                   C( 6, 16)        20.00000            0.000000                                   C( 6, 17)        20.00000            0.000000                                   C( 6, 18)        1.000000            0.000000                                   C( 6, 19)        20.00000            0.000000                                   C( 6, 20)        7.000000            0.000000                                    C( 7, 1)        15.00000            0.000000                                    C( 7, 2)        14.00000            0.000000                                    C( 7, 3)        20.00000            0.000000                                    C( 7, 4)        12.00000            0.000000                                    C( 7, 5)        6.000000            0.000000                                    C( 7, 6)        15.00000            0.000000                                    C( 7, 7)        20.00000            0.000000                                    C( 7, 8)        3.000000            0.000000                                    C( 7, 9)        1.000000            0.000000                                   C( 7, 10)        16.00000            0.000000                                   C( 7, 11)        6.000000            0.000000                                   C( 7, 12)        6.000000            0.000000                                   C( 7, 13)        6.000000            0.000000                                   C( 7, 14)        20.00000            0.000000                                   C( 7, 15)        3.000000            0.000000                                   C( 7, 16)        17.00000            0.000000                                   C( 7, 17)        6.000000            0.000000                                   C( 7, 18)        11.00000            0.000000                                   C( 7, 19)        17.00000            0.000000                                   C( 7, 20)        12.00000            0.000000                                    C( 8, 1)        1.000000            0.000000                                    C( 8, 2)        1.000000            0.000000                                    C( 8, 3)        5.000000            0.000000                                    C( 8, 4)        2.000000            0.000000                                    C( 8, 5)        2.000000            0.000000                                    C( 8, 6)        5.000000            0.000000                                    C( 8, 7)        16.00000            0.000000                                    C( 8, 8)        8.000000            0.000000                                    C( 8, 9)        7.000000            0.000000                                   C( 8, 10)        7.000000            0.000000                                   C( 8, 11)        12.00000            0.000000                                   C( 8, 12)        9.000000            0.000000                                   C( 8, 13)        5.000000            0.000000                                   C( 8, 14)        12.00000            0.000000                                   C( 8, 15)        6.000000            0.000000                                   C( 8, 16)        4.000000            0.000000                                   C( 8, 17)        17.00000            0.000000                                   C( 8, 18)        11.00000            0.000000                                   C( 8, 19)        11.00000            0.000000                                   C( 8, 20)        20.00000            0.000000                                    C( 9, 1)        18.00000            0.000000                                    C( 9, 2)        16.00000            0.000000                                    C( 9, 3)        20.00000            0.000000                                    C( 9, 4)        18.00000            0.000000                                    C( 9, 5)        5.000000            0.000000                                    C( 9, 6)        20.00000            0.000000                                    C( 9, 7)        8.000000            0.000000                                    C( 9, 8)        6.000000            0.000000                                    C( 9, 9)        17.00000            0.000000                                   C( 9, 10)        20.00000            0.000000                                   C( 9, 11)        9.000000            0.000000                                   C( 9, 12)        19.00000            0.000000                                   C( 9, 13)        1.000000            0.000000                                   C( 9, 14)        10.00000            0.000000                                   C( 9, 15)        9.000000            0.000000                                   C( 9, 16)        5.000000            0.000000                                   C( 9, 17)        8.000000            0.000000                                   C( 9, 18)        9.000000            0.000000                                   C( 9, 19)        17.00000            0.000000                                   C( 9, 20)        15.00000            0.000000                                   C( 10, 1)        6.000000            0.000000                                   C( 10, 2)        7.000000            0.000000                                   C( 10, 3)        17.00000            0.000000                                   C( 10, 4)        4.000000            0.000000                                   C( 10, 5)        12.00000            0.000000                                   C( 10, 6)        4.000000            0.000000                                   C( 10, 7)        19.00000            0.000000                                   C( 10, 8)        4.000000            0.000000                                   C( 10, 9)        13.00000            0.000000                                  C( 10, 10)        16.00000            0.000000                                  C( 10, 11)        7.000000            0.000000                                  C( 10, 12)        6.000000            0.000000                                  C( 10, 13)        1.000000            0.000000                                  C( 10, 14)        14.00000            0.000000                                  C( 10, 15)        11.00000            0.000000                                  C( 10, 16)        5.000000            0.000000                                  C( 10, 17)        7.000000            0.000000                                  C( 10, 18)        9.000000            0.000000                                  C( 10, 19)        11.00000            0.000000                                  C( 10, 20)        13.00000            0.000000                                         Row    Slack or Surplus      Dual Price                                           1        69.00000           -1.000000                                           2        17.00000            0.000000                                           3        0.000000            1.000000                                           4        18.00000            0.000000                                           5        16.00000            0.000000                                           6        0.000000            0.000000                                           7        18.00000            0.000000                                           8        16.00000            0.000000                                           9        15.00000            0.000000                                          10        0.000000            3.000000                                          11        0.000000            3.000000                                          12        0.000000           -1.000000                                          13        0.000000           -1.000000                                          14        0.000000           -1.000000                                          15        0.000000           -2.000000                                          16        0.000000           -2.000000                                          17        0.000000           -3.000000                                          18        0.000000           -5.000000                                          19        0.000000           -3.000000                                          20        0.000000           -1.000000                                          21        0.000000           -1.000000                                          22        0.000000           -3.000000                                          23        0.000000           -6.000000                                          24        0.000000           -4.000000                                          25        0.000000           -2.000000                                          26        0.000000           -3.000000                                          27        0.000000           -4.000000                                          28        0.000000           -2.000000                                          29        0.000000           -1.000000                                          30        0.000000           -3.000000                                          31        0.000000           -4.000000</code></pre><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000006192726">lingo学习篇</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>整数规划</tag>
      
      <tag>非线性规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200823】</title>
    <link href="/2020/08/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200823%E3%80%91/"/>
    <url>/2020/08/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200823%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><p>用遗传算法求解下列函数最大值。</p><script type="math/tex; mode=display">z = \sin x+\cos y+0.1(x+y)</script><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130194141.png" alt=""></p><pre><code class="hljs matlab">clc, clear, close all<span class="hljs-comment">%%基础参数</span>N = <span class="hljs-number">100</span>;  <span class="hljs-comment">%种群内个体数目</span>N_chrom = <span class="hljs-number">2</span>; <span class="hljs-comment">%染色体节点数</span>iter = <span class="hljs-number">2000</span>; <span class="hljs-comment">%迭代次数</span>mut = <span class="hljs-number">0.2</span>;  <span class="hljs-comment">%突变概率</span>acr = <span class="hljs-number">0.2</span>; <span class="hljs-comment">%交叉概率</span>best = <span class="hljs-number">1</span>;chrom_range = [<span class="hljs-number">-10</span> <span class="hljs-number">-10</span>;<span class="hljs-number">10</span> <span class="hljs-number">10</span>];<span class="hljs-comment">%每个节点的值的区间</span>chrom = <span class="hljs-built_in">zeros</span>(N, N_chrom);<span class="hljs-comment">%存放染色体的矩阵</span>fitness = <span class="hljs-built_in">zeros</span>(N, <span class="hljs-number">1</span>);<span class="hljs-comment">%存放染色体的适应度</span>fitness_ave = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>, iter);<span class="hljs-comment">%存放每一代的平均适应度</span>fitness_best = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>, iter);<span class="hljs-comment">%存放每一代的最优适应度</span>chrom_best = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>, N_chrom+<span class="hljs-number">1</span>);<span class="hljs-comment">%存放当前代的最优染色体与适应度</span><span class="hljs-comment">%%初始化</span>chrom = Initialize(N, N_chrom, chrom_range); <span class="hljs-comment">%初始化染色体</span>fitness = CalFitness(chrom, N, N_chrom); <span class="hljs-comment">%计算适应度</span>chrom_best = FindBest(chrom, fitness, N_chrom); <span class="hljs-comment">%寻找最优染色体</span>fitness_best(<span class="hljs-number">1</span>) = chrom_best(<span class="hljs-keyword">end</span>); <span class="hljs-comment">%将当前最优存入矩阵当中</span>fitness_ave(<span class="hljs-number">1</span>) = CalAveFitness(fitness); <span class="hljs-comment">%将当前平均适应度存入矩阵当中</span><span class="hljs-keyword">for</span> t = <span class="hljs-number">2</span>:iter    chrom = MutChrom(chrom, mut, N, N_chrom, chrom_range, t, iter); <span class="hljs-comment">%变异</span>    chrom = AcrChrom(chrom, acr, N, N_chrom); <span class="hljs-comment">%交叉</span>    fitness = CalFitness(chrom, N, N_chrom); <span class="hljs-comment">%计算适应度</span>    chrom_best_temp = FindBest(chrom, fitness, N_chrom); <span class="hljs-comment">%寻找最优染色体</span>    <span class="hljs-keyword">if</span> chrom_best_temp(<span class="hljs-keyword">end</span>)&gt;chrom_best(<span class="hljs-keyword">end</span>) <span class="hljs-comment">%替换掉当前储存的最优</span>        chrom_best = chrom_best_temp;    <span class="hljs-keyword">end</span>    <span class="hljs-comment">%%替换掉最劣</span>    [chrom, fitness] = ReplaceWorse(chrom, chrom_best, fitness);    fitness_best(t) = chrom_best(<span class="hljs-keyword">end</span>); <span class="hljs-comment">%将当前最优存入矩阵当中</span>    fitness_ave(t) = CalAveFitness(fitness); <span class="hljs-comment">%将当前平均适应度存入矩阵当中</span><span class="hljs-keyword">end</span><span class="hljs-comment">%%作图</span><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>)<span class="hljs-built_in">plot</span>(<span class="hljs-number">1</span>:iter, fitness_ave, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-number">1</span>:iter, fitness_best, <span class="hljs-string">&#x27;b&#x27;</span>)grid on<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;平均适应度&#x27;</span>, <span class="hljs-string">&#x27;最优适应度&#x27;</span>)e = PlotModel(chrom_best)<span class="hljs-comment">%%输出结果</span><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;最优染色体为&#x27;</span>, num2str(chrom_best(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-1</span>))])<span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;最优适应度为&#x27;</span>, num2str(chrom_best(<span class="hljs-keyword">end</span>))])</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/Hanpu_Liang/article/details/78169525">遗传算法简单介绍与MATLAB实现（一）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/Hanpu_Liang/article/details/78172537">遗传算法简单介绍与MATLAB实现（二）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/Hanpu_Liang/article/details/78173909">遗传算法简单介绍与MATLAB实现（三）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200822】</title>
    <link href="/2020/08/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200822%E3%80%91/"/>
    <url>/2020/08/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200822%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线性规划与非线性规划之间转换"><a href="#线性规划与非线性规划之间转换" class="headerlink" title="线性规划与非线性规划之间转换"></a>线性规划与非线性规划之间转换</h1><h2 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h2><p class="note note-primary">  分析方案</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193540.png" alt=""></p><pre><code class="hljs matlab">f=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]; <span class="hljs-comment">% 目标函数的系数矩阵</span>intcon = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>]; <span class="hljs-comment">% 整数所在位置，题目没有要求，所以是空</span>A = [<span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span>]; <span class="hljs-comment">% 不等式约束的变量系数矩阵</span>b = [<span class="hljs-number">-50</span>;<span class="hljs-number">-20</span>,<span class="hljs-number">-15</span>]; <span class="hljs-comment">% 不等式约束的资源数</span>[x,fval] = intlinprog(f,intcon,-A,b); <span class="hljs-comment">% fval代表最优解处的函数值</span></code></pre><pre><code class="hljs matlab">model:sets:moshi/<span class="hljs-number">1.</span><span class="hljs-number">.7</span>/:x;xuqiu/<span class="hljs-number">1.</span><span class="hljs-number">.3</span>/:b;link(moshi,xuqiu):c;endsetsdata:c=<span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span>;b=<span class="hljs-number">50</span> <span class="hljs-number">20</span> <span class="hljs-number">15</span>;enddata<span class="hljs-built_in">min</span>=@sum(moshi:x);@<span class="hljs-keyword">for</span>(xuqiu(<span class="hljs-built_in">j</span>):@sum(moshi(<span class="hljs-built_in">i</span>):c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*x(<span class="hljs-built_in">i</span>))&gt;b(<span class="hljs-built_in">j</span>));@<span class="hljs-keyword">for</span>(moshi(<span class="hljs-built_in">i</span>):@gin(x(<span class="hljs-built_in">i</span>)));<span class="hljs-keyword">end</span></code></pre><h2 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193839.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193840.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193841.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193842.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193859.png" alt=""></p><pre><code class="hljs matlab">model:sets:moshi/<span class="hljs-number">1.</span><span class="hljs-number">.3</span>/:x;xuqiu/<span class="hljs-number">1.</span><span class="hljs-number">.3</span>/:a,b;link(moshi,xuqiu):r;endsetsdata:a=<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>;b=<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>;enddata<span class="hljs-built_in">min</span>=@sum(moshi:x);@<span class="hljs-keyword">for</span>(xuqiu(<span class="hljs-built_in">j</span>):@sum(moshi(<span class="hljs-built_in">i</span>):r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*x(<span class="hljs-built_in">i</span>))&gt;b(<span class="hljs-built_in">j</span>));@<span class="hljs-keyword">for</span>(moshi(<span class="hljs-built_in">i</span>):@sum(xuqiu(<span class="hljs-built_in">j</span>):a(<span class="hljs-built_in">j</span>)*r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&lt;<span class="hljs-number">19</span>;@sum(xuqiu(<span class="hljs-built_in">j</span>):a(<span class="hljs-built_in">j</span>)*r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&gt;<span class="hljs-number">16</span>);@<span class="hljs-keyword">for</span>(moshi(<span class="hljs-built_in">i</span>):@gin(x(<span class="hljs-built_in">i</span>));@<span class="hljs-keyword">for</span>(link:@gin(r)));@for(moshi(i)|i#le#2:x(i)&gt;x(i+1));@sum(moshi:x)&lt;<span class="hljs-number">28</span>;@sum(moshi:x)&gt;<span class="hljs-number">23</span>;<span class="hljs-keyword">end</span></code></pre><pre><code class="hljs matlab">Local optimal solution found.  Objective value:                              <span class="hljs-number">27.00000</span>  Objective bound:                              <span class="hljs-number">27.00000</span>  Infeasibilities:                              <span class="hljs-number">0.000000</span>  Extended solver steps:                              <span class="hljs-number">22</span>  Total solver iterations:                           <span class="hljs-number">294</span>  Elapsed runtime seconds:                          <span class="hljs-number">0.85</span>  Model Class:                                      PIQP  Total variables:                     <span class="hljs-number">12</span>  Nonlinear variables:                 <span class="hljs-number">12</span>  Integer variables:                   <span class="hljs-number">12</span>  Total constraints:                   <span class="hljs-number">14</span>  Nonlinear constraints:                <span class="hljs-number">3</span>  Total nonzeros:                      <span class="hljs-number">49</span>  Nonlinear nonzeros:                   <span class="hljs-number">9</span>                                Variable           Value        Reduced Cost                                   X( <span class="hljs-number">1</span>)        <span class="hljs-number">15.00000</span>            <span class="hljs-number">1.000000</span>                                   X( <span class="hljs-number">2</span>)        <span class="hljs-number">12.00000</span>            <span class="hljs-number">1.000000</span>                                   X( <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">1.000000</span>                                   A( <span class="hljs-number">1</span>)        <span class="hljs-number">4.000000</span>            <span class="hljs-number">0.000000</span>                                   A( <span class="hljs-number">2</span>)        <span class="hljs-number">6.000000</span>            <span class="hljs-number">0.000000</span>                                   A( <span class="hljs-number">3</span>)        <span class="hljs-number">8.000000</span>            <span class="hljs-number">0.000000</span>                                   B( <span class="hljs-number">1</span>)        <span class="hljs-number">50.00000</span>            <span class="hljs-number">0.000000</span>                                   B( <span class="hljs-number">2</span>)        <span class="hljs-number">20.00000</span>            <span class="hljs-number">0.000000</span>                                   B( <span class="hljs-number">3</span>)        <span class="hljs-number">15.00000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">1.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">1.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">1.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">3.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">1.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">3.000000</span>            <span class="hljs-number">0.000000</span>                                R( <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">0.000000</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>非线性规划</tag>
      
      <tag>线性规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200820】</title>
    <link href="/2020/08/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200820%E3%80%91/"/>
    <url>/2020/08/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200820%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>表 1<br>x  0   3   5   7   9   11   12   13   14   15<br>y  0 1.2 1.7 2.0 2.1 2.0 1.8 1.2 1.0 1.6<br>拟合求解函数表达式。<br><pre><code class="hljs matlab"><span class="hljs-comment">%绘制图像，初步判断</span>x=[<span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>];y=[<span class="hljs-number">0</span> <span class="hljs-number">1.2</span> <span class="hljs-number">1.7</span> <span class="hljs-number">2.0</span> <span class="hljs-number">2.1</span> <span class="hljs-number">2.0</span> <span class="hljs-number">1.8</span> <span class="hljs-number">1.2</span> <span class="hljs-number">1.0</span> <span class="hljs-number">1.6</span>];<span class="hljs-built_in">plot</span>(x,y)</code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193156.png" alt=""></p><pre><code class="hljs matlab">x0=[<span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]&#x27;;y0=[<span class="hljs-number">0</span> <span class="hljs-number">1.2</span> <span class="hljs-number">1.7</span> <span class="hljs-number">2.0</span> <span class="hljs-number">2.1</span> <span class="hljs-number">2.0</span> <span class="hljs-number">1.8</span> <span class="hljs-number">1.2</span> <span class="hljs-number">1.0</span> <span class="hljs-number">1.6</span>]&#x27;;<span class="hljs-comment">%画出散点图</span><span class="hljs-built_in">plot</span>(x0,y0,<span class="hljs-string">&#x27;ro&#x27;</span>);<span class="hljs-built_in">hold</span> on<span class="hljs-comment">%用线性拟合</span>[p1,s1]=polyfit(x0,y0,<span class="hljs-number">3</span>)[y,delete]=polyval(p1,x0,s1)<span class="hljs-built_in">plot</span>(x0,y)T = <span class="hljs-built_in">table</span>(x0,y0,y,y0-y,<span class="hljs-string">&#x27;VariableNames&#x27;</span>,&#123;<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Fit&#x27;</span>,<span class="hljs-string">&#x27;FitError&#x27;</span>&#125;)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193233.png" alt=""></p><script type="math/tex; mode=display">y=0.0012x^3-0.0517x^2+0.5939x-0.0541</script><pre><code class="hljs matlab">p1 =    <span class="hljs-number">0.0012</span>   <span class="hljs-number">-0.0517</span>    <span class="hljs-number">0.5939</span>   <span class="hljs-number">-0.0541</span>s1 =  包含以下字段的 struct:        R: [<span class="hljs-number">4</span>×<span class="hljs-number">4</span> double]       df: <span class="hljs-number">6</span>    normr: <span class="hljs-number">0.6985</span>&gt;&gt; s1.R<span class="hljs-built_in">ans</span> =   <span class="hljs-number">1.0e+03</span> *   <span class="hljs-number">-5.4009</span>   <span class="hljs-number">-0.3995</span>   <span class="hljs-number">-0.0301</span>   <span class="hljs-number">-0.0023</span>         <span class="hljs-number">0</span>   <span class="hljs-number">-0.0553</span>   <span class="hljs-number">-0.0103</span>   <span class="hljs-number">-0.0016</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>   <span class="hljs-number">-0.0025</span>   <span class="hljs-number">-0.0010</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.0010</span>delete =    <span class="hljs-number">0.3982</span>    <span class="hljs-number">0.3397</span>    <span class="hljs-number">0.3351</span>    <span class="hljs-number">0.3216</span>    <span class="hljs-number">0.3203</span>    <span class="hljs-number">0.3236</span>    <span class="hljs-number">0.3196</span>    <span class="hljs-number">0.3143</span>    <span class="hljs-number">0.3219</span>    <span class="hljs-number">0.3701</span>T =  <span class="hljs-number">10</span>×<span class="hljs-number">4</span> <span class="hljs-built_in">table</span>    X      Y        Fit       FitError    __    ___    _________    _________     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>    <span class="hljs-number">-0.054067</span>     <span class="hljs-number">0.054067</span>     <span class="hljs-number">3</span>    <span class="hljs-number">1.2</span>       <span class="hljs-number">1.2944</span>    <span class="hljs-number">-0.094445</span>     <span class="hljs-number">5</span>    <span class="hljs-number">1.7</span>       <span class="hljs-number">1.7716</span>    <span class="hljs-number">-0.071558</span>     <span class="hljs-number">7</span>      <span class="hljs-number">2</span>       <span class="hljs-number">1.9776</span>     <span class="hljs-number">0.022391</span>     <span class="hljs-number">9</span>    <span class="hljs-number">2.1</span>       <span class="hljs-number">1.9696</span>      <span class="hljs-number">0.13044</span>    <span class="hljs-number">11</span>      <span class="hljs-number">2</span>       <span class="hljs-number">1.8044</span>      <span class="hljs-number">0.19564</span>    <span class="hljs-number">12</span>    <span class="hljs-number">1.8</span>       <span class="hljs-number">1.6806</span>      <span class="hljs-number">0.11936</span>    <span class="hljs-number">13</span>    <span class="hljs-number">1.2</span>        <span class="hljs-number">1.539</span>     <span class="hljs-number">-0.33899</span>    <span class="hljs-number">14</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1.3865</span>     <span class="hljs-number">-0.38653</span>    <span class="hljs-number">15</span>    <span class="hljs-number">1.6</span>       <span class="hljs-number">1.2304</span>      <span class="hljs-number">0.36962</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130193312.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200819】</title>
    <link href="/2020/08/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200819%E3%80%91/"/>
    <url>/2020/08/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200819%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><h2 id="Lagrange插值、分段线性插值、三次样条插值"><a href="#Lagrange插值、分段线性插值、三次样条插值" class="headerlink" title="Lagrange插值、分段线性插值、三次样条插值"></a>Lagrange插值、分段线性插值、三次样条插值</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>表 1<br>x  0   3   5   7   9   11   12   13   14   15<br>y  0 1.2 1.7 2.0 2.1 2.0 1.8 1.2 1.0 1.6<br>要求用 Lagrange、分段线性和三次样条三种插值方法计算。<br><pre><code class="hljs matlab">clear,clcx0=[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>];y0=[<span class="hljs-number">0</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">1.7</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">2.1</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">1.8</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.6</span>];t=<span class="hljs-number">0</span>:<span class="hljs-number">0.05</span>:<span class="hljs-number">15</span>;showAllInterp( x0,y0,<span class="hljs-string">&#x27;all&#x27;</span>,t)<span class="hljs-comment">%显示x0,y0之间所有不同类型的插值情况</span><span class="hljs-comment">%字符串s选择要输出的插值类型：</span><span class="hljs-comment">%all：全部类型           lagrange：拉格朗日插值函数</span><span class="hljs-comment">%linear：分段线性插值    spline：三次线条插值A</span><span class="hljs-comment">%csape：三次线条插值B</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130192925.png" alt=""></p><p>综上，可以看出，拉格朗日插值函数根本不能应用，分段线性函数的光滑性较差，推荐三次样条插值。<br>同时，可以看出，interp1(x0,y0,’spline’)等价于spline(x0,y0)。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>插值</tag>
      
      <tag>Lagrange插值</tag>
      
      <tag>分段线性插值</tag>
      
      <tag>三次样条插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200818】</title>
    <link href="/2020/08/18/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200818%E3%80%91/"/>
    <url>/2020/08/18/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200818%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>例题:人文发展指数是联合国开发计划署于1990年5月发表的一份&lt;&lt;人类发展报告&gt;&gt;中公布的数据如下，试通过已知的样品建立判别函数,误判率是多少?并判断待判的归类.</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130192606.png" alt=""></p><pre><code class="hljs matlab"><span class="hljs-comment">%%原始数据的输入</span>clc,clear[x,textdata]=xlsread(<span class="hljs-string">&#x27;bayes.xlsx&#x27;</span>)p=x(<span class="hljs-number">1</span>:<span class="hljs-number">10</span>,<span class="hljs-number">3</span>:<span class="hljs-number">5</span>)  <span class="hljs-comment">%输入数据矩阵</span>p=p&#x27;t=x(<span class="hljs-number">1</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)t=t&#x27;<span class="hljs-number">-1</span><span class="hljs-comment">%%归一化处理</span>[pn,minp,maxp] = premnmx(p);  <span class="hljs-comment">%对p矩阵进行归一化处理</span>net=newff(minmax(pn),[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],&#123;<span class="hljs-string">&#x27;tansig&#x27;</span>,<span class="hljs-string">&#x27;purelin&#x27;</span>&#125;) <span class="hljs-comment">%建立一个具有两层的神经网络，[2,1]表示输入层两层，输出层一层</span>net.trainParam.show=<span class="hljs-number">50</span> <span class="hljs-comment">%显示训练结果的间隔步数</span>net.trainParam.epochs=<span class="hljs-number">1000</span> <span class="hljs-comment">%训练次数</span>net.trainParam.goal=<span class="hljs-number">1e-2</span> <span class="hljs-comment">%设置训练参数</span>net=train(net,pn,t)pp=x(<span class="hljs-number">11</span>:<span class="hljs-number">14</span>,<span class="hljs-number">3</span>:<span class="hljs-number">5</span>) <span class="hljs-comment">%待求</span>ppn = premnmx(pp&#x27;);y=sim(net,ppn) <span class="hljs-comment">%利用已训练好的网络识别</span></code></pre><pre><code class="hljs matlab">y =    <span class="hljs-number">1.0032</span>    <span class="hljs-number">1.0026</span>    <span class="hljs-number">0.0138</span>    <span class="hljs-number">0.0502</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130192659.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>BP神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200817】</title>
    <link href="/2020/08/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200817%E3%80%91/"/>
    <url>/2020/08/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200817%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="模糊识别"><a href="#模糊识别" class="headerlink" title="模糊识别"></a>模糊识别</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>已知矩阵各指标分类情况，请对B数据进行模糊分析，匹配最佳A类。<br>A=[1 0.8 0.5 0.4 0 0.1;0.5 0.1 0.8 1 0.6 0;0 1 0.2 0.7 0.5 0.8;0.4 0 1 0.9 0.6 0.5;0.8 0.2 0 0.5 1 0.7;0.5 0.7 0.8 0 0.5 1]<br>B=[0.7 0.2 0.1 0.4 1 0.8]<br><pre><code class="hljs matlab">A=[<span class="hljs-number">1</span> <span class="hljs-number">0.8</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0.4</span> <span class="hljs-number">0</span> <span class="hljs-number">0.1</span>;<span class="hljs-number">0.5</span> <span class="hljs-number">0.1</span> <span class="hljs-number">0.8</span> <span class="hljs-number">1</span> <span class="hljs-number">0.6</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0.2</span> <span class="hljs-number">0.7</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0.8</span>;<span class="hljs-number">0.4</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0.9</span> <span class="hljs-number">0.6</span> <span class="hljs-number">0.5</span>;<span class="hljs-number">0.8</span> <span class="hljs-number">0.2</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5</span> <span class="hljs-number">1</span> <span class="hljs-number">0.7</span>;<span class="hljs-number">0.5</span> <span class="hljs-number">0.7</span> <span class="hljs-number">0.8</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5</span> <span class="hljs-number">1</span>]B=[<span class="hljs-number">0.7</span> <span class="hljs-number">0.2</span> <span class="hljs-number">0.1</span> <span class="hljs-number">0.4</span> <span class="hljs-number">1</span> <span class="hljs-number">0.8</span>]</code></pre><br><pre><code class="hljs matlab"><span class="hljs-comment">%格贴近度:五</span>c =    <span class="hljs-number">0.6500</span>    <span class="hljs-number">0.7000</span>    <span class="hljs-number">0.8000</span>    <span class="hljs-number">0.7000</span>    <span class="hljs-number">0.9500</span>    <span class="hljs-number">0.7000</span><span class="hljs-comment">%最小最大贴近度：五</span>c =    <span class="hljs-number">0.3333</span>    <span class="hljs-number">0.3778</span>    <span class="hljs-number">0.4545</span>    <span class="hljs-number">0.4348</span>    <span class="hljs-number">0.8824</span>    <span class="hljs-number">0.4565</span><span class="hljs-comment">%最小平均贴近度：五</span>c =    <span class="hljs-number">0.5000</span>    <span class="hljs-number">0.5484</span>    <span class="hljs-number">0.6250</span>    <span class="hljs-number">0.6061</span>    <span class="hljs-number">0.9375</span>    <span class="hljs-number">0.6269</span><span class="hljs-comment">%海明贴近度：五</span>c =    <span class="hljs-number">0.5000</span>    <span class="hljs-number">0.5333</span>    <span class="hljs-number">0.6000</span>    <span class="hljs-number">0.5667</span>    <span class="hljs-number">0.9333</span>    <span class="hljs-number">0.5833</span><span class="hljs-comment">%欧几里得贴近度：五</span>c =    <span class="hljs-number">0.4084</span>    <span class="hljs-number">0.4677</span>    <span class="hljs-number">0.5033</span>    <span class="hljs-number">0.5101</span>    <span class="hljs-number">0.9184</span>    <span class="hljs-number">0.5472</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>模糊识别</tag>
      
      <tag>贴近度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200816】</title>
    <link href="/2020/08/16/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200816%E3%80%91/"/>
    <url>/2020/08/16/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200816%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="图论、最短路径、dijkstra算法"><a href="#图论、最短路径、dijkstra算法" class="headerlink" title="图论、最短路径、dijkstra算法"></a>图论、最短路径、dijkstra算法</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130191654.png" alt=""></p><p>用dijkstra算法求解A到各点的最短路径。<br><pre><code class="hljs matlab">a=[<span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">30</span> <span class="hljs-number">100</span>;<span class="hljs-built_in">inf</span> <span class="hljs-number">0</span> <span class="hljs-number">50</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">0</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">10</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">20</span> <span class="hljs-number">0</span> <span class="hljs-number">60</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">0</span>]</code></pre><br><pre><code class="hljs matlab">&gt;&gt; [<span class="hljs-built_in">min</span>,path]=dijkstra(a,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-built_in">min</span> =     <span class="hljs-number">0</span>path =     <span class="hljs-number">1</span>&gt;&gt; [<span class="hljs-built_in">min</span>,path]=dijkstra(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-built_in">min</span> =    <span class="hljs-number">10</span>path =     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>&gt;&gt; [<span class="hljs-built_in">min</span>,path]=dijkstra(a,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<span class="hljs-built_in">min</span> =    <span class="hljs-number">50</span>path =     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>&gt;&gt; [<span class="hljs-built_in">min</span>,path]=dijkstra(a,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<span class="hljs-built_in">min</span> =    <span class="hljs-number">30</span>path =     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>&gt;&gt; [<span class="hljs-built_in">min</span>,path]=dijkstra(a,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<span class="hljs-built_in">min</span> =    <span class="hljs-number">60</span>path =     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>最短路径</tag>
      
      <tag>图论</tag>
      
      <tag>dijkstra算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200815】</title>
    <link href="/2020/08/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200815%E3%80%91/"/>
    <url>/2020/08/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200815%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="图论、最短路径、Floyd算法"><a href="#图论、最短路径、Floyd算法" class="headerlink" title="图论、最短路径、Floyd算法"></a>图论、最短路径、Floyd算法</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130191654.png" alt=""></p><p>用Floyd算法求解路径。<br><pre><code class="hljs matlab">a=[<span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">30</span> <span class="hljs-number">100</span>;<span class="hljs-built_in">inf</span> <span class="hljs-number">0</span> <span class="hljs-number">50</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">0</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">10</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">20</span> <span class="hljs-number">0</span> <span class="hljs-number">60</span>;<span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">inf</span> <span class="hljs-number">0</span>][D,path]=floyd(a)</code></pre><br><pre><code class="hljs matlab">D =     <span class="hljs-number">0</span>    <span class="hljs-number">10</span>    <span class="hljs-number">50</span>    <span class="hljs-number">30</span>    <span class="hljs-number">60</span>   Inf     <span class="hljs-number">0</span>    <span class="hljs-number">50</span>   Inf    <span class="hljs-number">60</span>   Inf   Inf     <span class="hljs-number">0</span>   Inf    <span class="hljs-number">10</span>   Inf   Inf    <span class="hljs-number">20</span>     <span class="hljs-number">0</span>    <span class="hljs-number">30</span>   Inf   Inf   Inf   Inf     <span class="hljs-number">0</span>path =     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">5</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>最短路径</tag>
      
      <tag>图论</tag>
      
      <tag>Floyd算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200814】</title>
    <link href="/2020/08/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200814%E3%80%91/"/>
    <url>/2020/08/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200814%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="种群竞争模型"><a href="#种群竞争模型" class="headerlink" title="种群竞争模型"></a>种群竞争模型</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>当种群固有增长率为k1=1，k2=1；环境容纳量为n1=100，n2=200；r1=2，r2=0.5时，两种群数量关于时间曲线如图1，相轨线如图2<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130191219.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201130191227.png" alt=""><br><pre><code class="hljs matlab"><span class="hljs-comment">%fun.m</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dx</span>=<span class="hljs-title">fun</span><span class="hljs-params">(t,x,r1,r2,n1,n2,s1,s2)</span></span><span class="hljs-comment">%r1,r2为自然增长率</span><span class="hljs-comment">%n1,n2为各物种最大环境容纳量</span><span class="hljs-comment">%s表示为生物的生存能力</span><span class="hljs-comment">%s1的含义是对于供养甲的资源来说，单位数量的乙(相对n2)的消耗为单位数量甲(相对n1）消耗的s1倍，s2同理。</span><span class="hljs-comment">%n1为牛，n2为羊，1kg草料，一只羊吃的为牛的0.5倍</span>r1=<span class="hljs-number">1</span>;r2=<span class="hljs-number">1</span>;n1=<span class="hljs-number">100</span>;n2=<span class="hljs-number">200</span>;s1=<span class="hljs-number">2</span>;s2=<span class="hljs-number">0.5</span>;dx=[r1*x(<span class="hljs-number">1</span>)*(<span class="hljs-number">1</span>-x(<span class="hljs-number">1</span>)/n1-s1*x(<span class="hljs-number">2</span>)/n2);r2*x(<span class="hljs-number">2</span>)*(<span class="hljs-number">1</span>-s2*x(<span class="hljs-number">1</span>)/n1-x(<span class="hljs-number">2</span>)/n2)];<span class="hljs-comment">%jingzheng.m</span>h=<span class="hljs-number">0.1</span>;<span class="hljs-comment">%所取时间点间隔</span>ts=[<span class="hljs-number">0</span>:h:<span class="hljs-number">30</span>];<span class="hljs-comment">%时间区间</span>x0=[<span class="hljs-number">10</span>,<span class="hljs-number">10</span>];<span class="hljs-comment">%初始条件</span>opt=odeset(<span class="hljs-string">&#x27;reltol&#x27;</span>,<span class="hljs-number">1e-6</span>,<span class="hljs-string">&#x27;abstol&#x27;</span>,<span class="hljs-number">1e-9</span>);<span class="hljs-comment">%相对误差1e-6，绝对误差1e-9</span>[t,x]=ode45(@fun,ts,x0,opt);<span class="hljs-comment">%使用5级4阶龙格—库塔公式计算</span><span class="hljs-built_in">plot</span>(t,x(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;r&#x27;</span>,t,x(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">2</span>),grid;pause;<span class="hljs-built_in">plot</span>(x(:,<span class="hljs-number">1</span>),x(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">2</span>),grid  <span class="hljs-comment">%作相轨线</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>种群竞争模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200813】</title>
    <link href="/2020/08/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200813%E3%80%91/"/>
    <url>/2020/08/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200813%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="贝叶斯判别"><a href="#贝叶斯判别" class="headerlink" title="贝叶斯判别"></a>贝叶斯判别</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>6只Apf和9只Af不虫触角长度和翅膀长度数据:<br>Apf:(1.14,1.78)，(1.18,1.96)，(1.20,1.86)，(1.26,2.00)，(1.28,2.00)，(1.30,1.96) ;<br>Af:(1.24,1.72)，(1.36,1.74)，(1.38,1.64)，(1.38,1.82)，(1.38,1.90)，(1.40,1.70)，(1.48,1.82)，(1.54,1.82)，(1.56,2.08).<br>若两类虫协方差矩阵相等，假设总体Apf和Af均服从正态分布，用Bayes判别法判别三个右虫属于哪一类?<br>(1.24,1.8)，(1.28,1.84)，（1.4，2.04）<br><pre><code class="hljs matlab">pb=[<span class="hljs-number">1.14</span> <span class="hljs-number">1.18</span>;<span class="hljs-number">1.18</span> <span class="hljs-number">1.96</span>;<span class="hljs-number">1.20</span> <span class="hljs-number">1.86</span>;<span class="hljs-number">1.26</span> <span class="hljs-number">2.00</span>;<span class="hljs-number">1.28</span> <span class="hljs-number">2.00</span>;<span class="hljs-number">1.30</span> <span class="hljs-number">1.96</span>;<span class="hljs-number">1.24</span> <span class="hljs-number">1.72</span>;<span class="hljs-number">1.36</span> <span class="hljs-number">1.74</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.64</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.90</span>;<span class="hljs-number">1.40</span> <span class="hljs-number">1.70</span>;<span class="hljs-number">1.48</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.54</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.56</span> <span class="hljs-number">2.08</span>;<span class="hljs-number">1.24</span> <span class="hljs-number">1.8</span>;<span class="hljs-number">1.28</span> <span class="hljs-number">1.84</span>;<span class="hljs-number">1.4</span> <span class="hljs-number">2.04</span>]xl=[<span class="hljs-number">1.14</span> <span class="hljs-number">1.18</span>;<span class="hljs-number">1.18</span> <span class="hljs-number">1.96</span>;<span class="hljs-number">1.20</span> <span class="hljs-number">1.86</span>;<span class="hljs-number">1.26</span> <span class="hljs-number">2.00</span>;<span class="hljs-number">1.28</span> <span class="hljs-number">2.00</span>;<span class="hljs-number">1.30</span> <span class="hljs-number">1.96</span>;<span class="hljs-number">1.24</span> <span class="hljs-number">1.72</span>;<span class="hljs-number">1.36</span> <span class="hljs-number">1.74</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.64</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.38</span> <span class="hljs-number">1.90</span>;<span class="hljs-number">1.40</span> <span class="hljs-number">1.70</span>;<span class="hljs-number">1.48</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.54</span> <span class="hljs-number">1.82</span>;<span class="hljs-number">1.56</span> <span class="hljs-number">2.08</span>]lb=[<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>;<span class="hljs-number">2</span>][jg,wpl,gl]=classify(pb,xl,lb)gz=<span class="hljs-number">1</span>:<span class="hljs-number">18</span>[gz&#x27;,jg,gl]wpl</code></pre><br><pre><code class="hljs matlab"><span class="hljs-number">1.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.7919</span>    <span class="hljs-number">0.2081</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9981</span>    <span class="hljs-number">0.0019</span>    <span class="hljs-number">3.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9911</span>    <span class="hljs-number">0.0089</span>    <span class="hljs-number">4.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9754</span>    <span class="hljs-number">0.0246</span>    <span class="hljs-number">5.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9505</span>    <span class="hljs-number">0.0495</span>    <span class="hljs-number">6.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.8703</span>    <span class="hljs-number">0.1297</span>    <span class="hljs-number">7.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.8928</span>    <span class="hljs-number">0.1072</span>    <span class="hljs-number">8.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.1124</span>    <span class="hljs-number">0.8876</span>    <span class="hljs-number">9.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.0264</span>    <span class="hljs-number">0.9736</span>   <span class="hljs-number">10.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.1055</span>    <span class="hljs-number">0.8945</span>   <span class="hljs-number">11.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.1847</span>    <span class="hljs-number">0.8153</span>   <span class="hljs-number">12.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.0210</span>    <span class="hljs-number">0.9790</span>   <span class="hljs-number">13.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.0031</span>    <span class="hljs-number">0.9969</span>   <span class="hljs-number">14.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.0004</span>    <span class="hljs-number">0.9996</span>   <span class="hljs-number">15.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.0014</span>    <span class="hljs-number">0.9986</span>   <span class="hljs-number">16.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9411</span>    <span class="hljs-number">0.0589</span>   <span class="hljs-number">17.0000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.8388</span>    <span class="hljs-number">0.1612</span>   <span class="hljs-number">18.0000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">0.2559</span>    <span class="hljs-number">0.7441</span>wpl =    <span class="hljs-number">0.0556</span></code></pre><br>最后通过结果我们可以看到前两项分到Apf类，最后一项分到Af类。总误判率为0.0556。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>贝叶斯判别</tag>
      
      <tag>协方差</tag>
      
      <tag>正态分布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200812】</title>
    <link href="/2020/08/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200812%E3%80%91/"/>
    <url>/2020/08/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200812%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="层次聚类分析、动态聚类分析"><a href="#层次聚类分析、动态聚类分析" class="headerlink" title="层次聚类分析、动态聚类分析"></a>层次聚类分析、动态聚类分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>尽管我个人非常不喜欢人们被划分圈子，因为这样就有了歧视、偏见、排挤和矛盾，但“物以类聚，人以群分”确实是一种客观的现实——这其中就蕴含着聚类分析的思想。</p><h2 id="层次聚类分析"><a href="#层次聚类分析" class="headerlink" title="层次聚类分析"></a>层次聚类分析</h2><pre><code class="hljs matlab">X=xlsread(<span class="hljs-string">&#x27;chengji.xlsx&#x27;</span>)<span class="hljs-comment">%(1.标准化处理)</span>x=zscore(X(:,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>))<span class="hljs-comment">%（2.计算点与点之间欧氏距离）</span>y=pdist(x,<span class="hljs-string">&#x27;euclidean&#x27;</span>)<span class="hljs-comment">%(3.类平均法进行合并过程)</span>Z=linkage(y,<span class="hljs-string">&#x27;average&#x27;</span>)obslabel=cell(<span class="hljs-number">3</span>:<span class="hljs-number">1</span>)<span class="hljs-comment">%（5.）</span>H=dendrogram(Z,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;orientation&#x27;</span>,<span class="hljs-string">&#x27;right&#x27;</span>,<span class="hljs-string">&#x27;label&#x27;</span>,obslabel)set(H,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Color&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>) <span class="hljs-comment">%画图要求，线宽为1，颜色为黑色</span>xlabel(<span class="hljs-string">&#x27;标准化距离（类平均法）&#x27;</span>)inconsisten0=inconsistent(Z,<span class="hljs-number">4</span>) <span class="hljs-comment">%4表示为深度</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129234327.png" alt=""></p><h2 id="动态聚类分析"><a href="#动态聚类分析" class="headerlink" title="动态聚类分析"></a>动态聚类分析</h2><pre><code class="hljs matlab"><span class="hljs-number">1.</span>手动动态聚类分析data=xlsread(<span class="hljs-string">&#x27;chengji.xlsx&#x27;</span>)gc=data(:,<span class="hljs-number">1</span>)data=zscore(data(:,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>))x1=data(:,<span class="hljs-number">1</span>)x2=data(:,<span class="hljs-number">2</span>)<span class="hljs-built_in">scatter</span>(x1,x2,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-comment">%画散点图，观察凝点</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129234431.png" alt=""></p><pre><code class="hljs matlab">startdata=data([<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">27</span>,<span class="hljs-number">33</span>,<span class="hljs-number">22</span>],:) <span class="hljs-comment">%找四个凝点</span>idx=kmeans(data,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;Start&#x27;</span>,startdata) <span class="hljs-comment">%&#x27;Start为初始凝结点的标识&#x27;，startdata为具体的值</span>[S,H]=silhouette(data,idx)<span class="hljs-comment">%画图</span>gc(idx==<span class="hljs-number">1</span>),gc(idx==<span class="hljs-number">2</span>),gc(idx==<span class="hljs-number">3</span>),gc(idx==<span class="hljs-number">4</span>),gc(idx==<span class="hljs-number">5</span>)<span class="hljs-comment">%展示工厂标记</span></code></pre><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =     <span class="hljs-number">3</span>    <span class="hljs-number">12</span>    <span class="hljs-number">21</span>    <span class="hljs-number">28</span>    <span class="hljs-number">34</span>    <span class="hljs-number">36</span>    <span class="hljs-number">37</span>    <span class="hljs-number">40</span><span class="hljs-built_in">ans</span> =    <span class="hljs-number">11</span>    <span class="hljs-number">13</span>    <span class="hljs-number">14</span>    <span class="hljs-number">19</span>    <span class="hljs-number">23</span>    <span class="hljs-number">24</span>    <span class="hljs-number">30</span>    <span class="hljs-number">39</span><span class="hljs-built_in">ans</span> =     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span>    <span class="hljs-number">26</span>    <span class="hljs-number">27</span><span class="hljs-built_in">ans</span> =     <span class="hljs-number">6</span>     <span class="hljs-number">9</span>    <span class="hljs-number">18</span>    <span class="hljs-number">29</span>    <span class="hljs-number">33</span><span class="hljs-built_in">ans</span> =     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">7</span>    <span class="hljs-number">15</span>    <span class="hljs-number">16</span>    <span class="hljs-number">17</span>    <span class="hljs-number">20</span>    <span class="hljs-number">22</span>    <span class="hljs-number">25</span>    <span class="hljs-number">31</span>    <span class="hljs-number">32</span>    <span class="hljs-number">35</span>    <span class="hljs-number">38</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129234525.png" alt=""><br><pre><code class="hljs matlab"><span class="hljs-number">2.</span>自动动态聚类分析data=xlsread(<span class="hljs-string">&#x27;chengji.xlsx&#x27;</span>)gc=data(:,<span class="hljs-number">1</span>)data=zscore(data(:,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>))idx=kmeans(data,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;replicates&#x27;</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">%自己去找凝结点，重复十次</span>[S,H]=silhouette(data,idx)<span class="hljs-comment">%画图</span>Leibie1=gc(idx==<span class="hljs-number">1</span>),Leibie2=gc(idx==<span class="hljs-number">2</span>),Leibie3=gc(idx==<span class="hljs-number">3</span>),Leibie4=gc(idx==<span class="hljs-number">4</span>)</code></pre><br><pre><code class="hljs matlab">idx =     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>S =    <span class="hljs-number">0.8370</span>    <span class="hljs-number">0.8517</span>    <span class="hljs-number">0.2813</span>    <span class="hljs-number">0.6478</span>    <span class="hljs-number">0.5259</span>    <span class="hljs-number">0.2780</span>    <span class="hljs-number">0.7061</span>    <span class="hljs-number">0.3439</span>    <span class="hljs-number">0.5923</span>    <span class="hljs-number">0.3430</span>    <span class="hljs-number">0.8410</span>    <span class="hljs-number">0.8241</span>    <span class="hljs-number">0.4059</span>    <span class="hljs-number">0.6917</span>    <span class="hljs-number">0.7877</span>    <span class="hljs-number">0.4397</span>    <span class="hljs-number">0.5408</span>    <span class="hljs-number">0.3044</span>    <span class="hljs-number">0.6531</span>    <span class="hljs-number">0.7272</span>    <span class="hljs-number">0.5483</span>    <span class="hljs-number">0.5974</span>    <span class="hljs-number">0.6877</span>    <span class="hljs-number">0.5867</span>    <span class="hljs-number">0.7845</span>    <span class="hljs-number">0.2691</span>    <span class="hljs-number">0.1136</span>    <span class="hljs-number">0.8183</span>    <span class="hljs-number">0.5519</span>    <span class="hljs-number">0.8519</span>    <span class="hljs-number">0.8551</span>    <span class="hljs-number">0.6766</span>    <span class="hljs-number">0.5177</span>    <span class="hljs-number">0.8740</span>    <span class="hljs-number">0.6046</span>    <span class="hljs-number">0.7840</span>    <span class="hljs-number">0.7143</span>    <span class="hljs-number">0.6256</span>    <span class="hljs-number">0.7967</span>    <span class="hljs-number">0.8840</span>H =  Figure (<span class="hljs-number">1</span>) - 属性:      Number: <span class="hljs-number">1</span>        Name: <span class="hljs-string">&#x27;&#x27;</span>       Color: [<span class="hljs-number">0.9400</span> <span class="hljs-number">0.9400</span> <span class="hljs-number">0.9400</span>]    Position: [<span class="hljs-number">488</span> <span class="hljs-number">342</span> <span class="hljs-number">560</span> <span class="hljs-number">420</span>]       Units: <span class="hljs-string">&#x27;pixels&#x27;</span>  显示 所有属性Leibie1 =    <span class="hljs-number">11</span>    <span class="hljs-number">13</span>    <span class="hljs-number">14</span>    <span class="hljs-number">19</span>    <span class="hljs-number">23</span>    <span class="hljs-number">24</span>    <span class="hljs-number">26</span>    <span class="hljs-number">30</span>    <span class="hljs-number">39</span>Leibie2 =     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">9</span>    <span class="hljs-number">18</span>    <span class="hljs-number">27</span>    <span class="hljs-number">29</span>    <span class="hljs-number">33</span>Leibie3 =     <span class="hljs-number">5</span>    <span class="hljs-number">12</span>    <span class="hljs-number">21</span>    <span class="hljs-number">28</span>    <span class="hljs-number">34</span>    <span class="hljs-number">36</span>    <span class="hljs-number">37</span>    <span class="hljs-number">40</span>Leibie4 =     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">7</span>    <span class="hljs-number">10</span>    <span class="hljs-number">15</span>    <span class="hljs-number">16</span>    <span class="hljs-number">17</span>    <span class="hljs-number">20</span>    <span class="hljs-number">22</span>    <span class="hljs-number">25</span>    <span class="hljs-number">31</span>    <span class="hljs-number">32</span>    <span class="hljs-number">35</span>    <span class="hljs-number">38</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129234628.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>层次聚类分析</tag>
      
      <tag>手动动态聚类分析</tag>
      
      <tag>自动动态聚类分析</tag>
      
      <tag>凝点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200811】</title>
    <link href="/2020/08/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200811%E3%80%91/"/>
    <url>/2020/08/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200811%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h1><h2 id="灰色关联"><a href="#灰色关联" class="headerlink" title="灰色关联"></a>灰色关联</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129223648.png" alt=""><br>题目：分析下表中，哪一个产业对2000-2005年国内生产总值影响最大<br><pre><code class="hljs matlab">&gt;&gt; data=xlsread(<span class="hljs-string">&#x27;huiseguanlian-chanzhi.xlsx&#x27;</span>,<span class="hljs-string">&#x27;B2:E7&#x27;</span>)data =        <span class="hljs-number">1988</span>         <span class="hljs-number">386</span>         <span class="hljs-number">839</span>         <span class="hljs-number">763</span>        <span class="hljs-number">2061</span>         <span class="hljs-number">408</span>         <span class="hljs-number">846</span>         <span class="hljs-number">808</span>        <span class="hljs-number">2335</span>         <span class="hljs-number">422</span>         <span class="hljs-number">960</span>         <span class="hljs-number">953</span>        <span class="hljs-number">2750</span>         <span class="hljs-number">482</span>        <span class="hljs-number">1258</span>        <span class="hljs-number">1010</span>        <span class="hljs-number">3356</span>         <span class="hljs-number">511</span>        <span class="hljs-number">1577</span>        <span class="hljs-number">1268</span>        <span class="hljs-number">3806</span>         <span class="hljs-number">561</span>        <span class="hljs-number">1893</span>        <span class="hljs-number">1352</span>&gt;&gt; k=GRA(data)k =    <span class="hljs-number">0.5084</span>    <span class="hljs-number">0.6243</span>    <span class="hljs-number">0.7573</span>&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=<span class="hljs-string">&quot;language-matlab line-numbers&quot;</span>&gt;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">correlationnew</span>=<span class="hljs-title">GRA</span><span class="hljs-params">(data)</span></span><span class="hljs-comment">%此程序默认第一列数据为母序列比较值</span>[m,n]=<span class="hljs-built_in">size</span>(data);rou=<span class="hljs-number">0.5</span>; <span class="hljs-comment">%数据之间紧密度,越紧，数越小</span><span class="hljs-comment">%（2）数据标准化去量纲</span><span class="hljs-comment">%采用均值法</span>avedata=<span class="hljs-built_in">mean</span>(data);<span class="hljs-comment">%每列的平均值</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m    newdata(<span class="hljs-built_in">i</span>,:)=data(<span class="hljs-built_in">i</span>,:)./avedata;<span class="hljs-keyword">end</span><span class="hljs-comment">%(3)每一行关联系数计算</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">2</span>:n    diff(:,<span class="hljs-built_in">j</span><span class="hljs-number">-1</span>)=<span class="hljs-built_in">abs</span>(newdata(:,<span class="hljs-number">1</span>)-newdata(:,<span class="hljs-built_in">j</span>));<span class="hljs-comment">%差的绝对值</span><span class="hljs-keyword">end</span><span class="hljs-comment">%最大最小极差-采用总极差法</span>maxdiff=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(diff)); <span class="hljs-comment">%最大极差</span>mindiff=<span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(diff)); <span class="hljs-comment">%最小极差</span><span class="hljs-comment">%(4)关联度计算</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<span class="hljs-number">-1</span>        correlation(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=(mindiff+rou*maxdiff)/(diff(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)+rou*maxdiff);    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>correlationnew=<span class="hljs-built_in">mean</span>(correlation);</code></pre><br>由此我们可以知道第三产业对2000-2005年国内生产总值影响最大。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>综合评价</tag>
      
      <tag>去量纲</tag>
      
      <tag>灰色关联</tag>
      
      <tag>数据标准化</tag>
      
      <tag>极差</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200810】</title>
    <link href="/2020/08/10/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200810%E3%80%91/"/>
    <url>/2020/08/10/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200810%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h1><h2 id="模糊综合评价、TOPSIS法"><a href="#模糊综合评价、TOPSIS法" class="headerlink" title="模糊综合评价、TOPSIS法"></a>模糊综合评价、TOPSIS法</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>（娱乐题目）<br>根据调查数据对以下四名女艺人打分并作出综合评价。<br>1.模糊综合评价<br><span class="label label-primary">根据打分得到单因素评判矩阵。</span></p><p><table></p><p><thead></p><p><tr>  <th></th>  <th>身材</th>  <th>颜值</th>  <th>演技</th>  <th>槽点</th></tr><br>&lt;/thead&gt;</p><p><tbody></p><p><tr>  <td>深田</td>  <td>6</td>  <td>5</td>  <td>9</td>  <td>2</td></tr></p><p><tr>  <td>小泽</td>  <td>8</td>  <td>8</td>  <td>6</td>  <td>5</td></tr></p><p><tr>  <td>大乔</td>  <td>8</td>  <td>7</td>  <td>8</td>  <td>5</td></tr></p><p><tr>  <td>明日</td>  <td>7</td>  <td>6</td>  <td>7</td>  <td>5</td></tr><br>&lt;/tbody&gt;<br>&lt;/table&gt;<br><pre><code class="hljs matlab">x=[<span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> ;<span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span>;<span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span>;<span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span>](<span class="hljs-number">1</span>)数据正向性处理zu=[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>][m,n]=<span class="hljs-built_in">size</span>(x);R=x;<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m<span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<span class="hljs-comment">%根据指标确定是去哪一列的正向</span><span class="hljs-keyword">if</span> zu(<span class="hljs-built_in">j</span>)==<span class="hljs-number">1</span>R(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=(x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-<span class="hljs-built_in">max</span>(x(:,<span class="hljs-built_in">j</span>)))/(<span class="hljs-built_in">min</span>(x(:,<span class="hljs-built_in">j</span>))-<span class="hljs-built_in">max</span>(x(:,<span class="hljs-built_in">j</span>)));<span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>R(<span class="hljs-number">2</span>)由层次分析法计算属性权重A=[<span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> ;<span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span>;<span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span>;<span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span>][n,n]=<span class="hljs-built_in">size</span>(A);x=<span class="hljs-built_in">ones</span>(n,<span class="hljs-number">100</span>);y=<span class="hljs-built_in">ones</span>(n,<span class="hljs-number">100</span>);m=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);m(<span class="hljs-number">1</span>)=<span class="hljs-built_in">max</span>(x(:,<span class="hljs-number">1</span>));y(:,<span class="hljs-number">1</span>)=x(:,<span class="hljs-number">1</span>);x(:,<span class="hljs-number">2</span>)=A*y(:,<span class="hljs-number">1</span>);m(<span class="hljs-number">2</span>)=<span class="hljs-built_in">max</span>(x(:,<span class="hljs-number">2</span>));y(:,<span class="hljs-number">2</span>)=x(:,<span class="hljs-number">2</span>)/m(<span class="hljs-number">2</span>);p=<span class="hljs-number">0.0001</span>;<span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>;k=<span class="hljs-built_in">abs</span>(m(<span class="hljs-number">2</span>)-m(<span class="hljs-number">1</span>));<span class="hljs-keyword">while</span>  k&gt;p  <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;  x(:,<span class="hljs-built_in">i</span>)=A*y(:,<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>);  m(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">max</span>(x(:,<span class="hljs-built_in">i</span>));  y(:,<span class="hljs-built_in">i</span>)=x(:,<span class="hljs-built_in">i</span>)/m(<span class="hljs-built_in">i</span>);  k=<span class="hljs-built_in">abs</span>(m(<span class="hljs-built_in">i</span>)-m(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>));<span class="hljs-keyword">end</span>a=sum(y(:,<span class="hljs-built_in">i</span>));w=y(:,<span class="hljs-built_in">i</span>)/a;t=m(<span class="hljs-built_in">i</span>);<span class="hljs-built_in">disp</span>(w);         <span class="hljs-comment">%以下是一致性检验</span>CI=(t-n)/(n<span class="hljs-number">-1</span>);RI=[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.52</span> <span class="hljs-number">0.89</span> <span class="hljs-number">1.12</span> <span class="hljs-number">1.26</span> <span class="hljs-number">1.36</span> <span class="hljs-number">1.41</span> <span class="hljs-number">1.46</span> <span class="hljs-number">1.49</span> <span class="hljs-number">1.52</span> <span class="hljs-number">1.54</span> <span class="hljs-number">1.56</span> <span class="hljs-number">1.58</span> <span class="hljs-number">1.59</span>];CR=CI/RI(n);<span class="hljs-keyword">if</span> CR&lt;<span class="hljs-number">0.10</span>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;此矩阵的一致性可以接受!&#x27;</span>);    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;CI=&#x27;</span>);<span class="hljs-built_in">disp</span>(CI);    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;CR=&#x27;</span>);<span class="hljs-built_in">disp</span>(CR);<span class="hljs-keyword">end</span>(<span class="hljs-number">3</span>)采用主因素突出型进行模糊综合评价w=w&#x27;fuzzy_zhpj(<span class="hljs-number">2</span>,R,w)</code></pre><br><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)正向化结果R =     <span class="hljs-number">6</span>     <span class="hljs-number">5</span>     <span class="hljs-number">9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>     <span class="hljs-number">8</span>     <span class="hljs-number">6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">7</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">0</span>(<span class="hljs-number">2</span>)属性权重w=    <span class="hljs-number">0.2184</span>    <span class="hljs-number">0.2629</span>    <span class="hljs-number">0.2741</span>    <span class="hljs-number">0.2445</span>(<span class="hljs-number">3</span>)采用主因素突出型进行模糊综合评价结果 fuzzy_zhpj(<span class="hljs-number">2</span>,w,R)<span class="hljs-built_in">ans</span> =    <span class="hljs-number">2.1928</span>    <span class="hljs-number">2.1032</span>    <span class="hljs-number">2.1928</span>    <span class="hljs-number">0.2184</span></code></pre><br>2.TOPSIS法</p><p><span class="label label-primary">正向化去量纲</span></p><pre><code class="hljs matlab">正向化结果：R =     <span class="hljs-number">6</span>     <span class="hljs-number">5</span>     <span class="hljs-number">9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>     <span class="hljs-number">8</span>     <span class="hljs-number">6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">7</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">0</span></code></pre><p><span class="label label-primary">标准化矩阵</span></p><pre><code class="hljs matlab">&gt;&gt; R=zscore(R)R =   <span class="hljs-number">-1.3056</span>   <span class="hljs-number">-1.1619</span>    <span class="hljs-number">1.1619</span>    <span class="hljs-number">1.5000</span>    <span class="hljs-number">0.7833</span>    <span class="hljs-number">1.1619</span>   <span class="hljs-number">-1.1619</span>   <span class="hljs-number">-0.5000</span>    <span class="hljs-number">0.7833</span>    <span class="hljs-number">0.3873</span>    <span class="hljs-number">0.3873</span>   <span class="hljs-number">-0.5000</span>   <span class="hljs-number">-0.2611</span>   <span class="hljs-number">-0.3873</span>   <span class="hljs-number">-0.3873</span>   <span class="hljs-number">-0.5000</span></code></pre><p><span class="label label-primary">层次分析法计算权重</span><br><pre><code class="hljs matlab">w=    <span class="hljs-number">0.2184</span>    <span class="hljs-number">0.2629</span>    <span class="hljs-number">0.2741</span>    <span class="hljs-number">0.2445</span></code></pre><br><span class="label label-primary">TOPSIS法</span><br><pre><code class="hljs matlab">&gt;&gt; TOPSIS(R,w)<span class="hljs-built_in">ans</span> =    <span class="hljs-number">0.5129</span>    <span class="hljs-number">0.4871</span>    <span class="hljs-number">0.5661</span>    <span class="hljs-number">0.3180</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>综合评价</tag>
      
      <tag>去量纲</tag>
      
      <tag>层次分析法</tag>
      
      <tag>一致性检验</tag>
      
      <tag>模糊综合评价</tag>
      
      <tag>TOPSIS法</tag>
      
      <tag>正向性处理</tag>
      
      <tag>标准化矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习常用模型及算法2.蚁群算法（Ant Colony Optimization）</title>
    <link href="/2020/08/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%952.%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%EF%BC%88Ant%20Colony%20Optimization%EF%BC%89/"/>
    <url>/2020/08/09/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%952.%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%EF%BC%88Ant%20Colony%20Optimization%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/a7gHNq.jpg" alt=""></p><h3 id="1-蚁群算法"><a href="#1-蚁群算法" class="headerlink" title="1.蚁群算法"></a>1.蚁群算法</h3><p>蚁群算法是一种智能优化算法，通过蚁群优化求解复杂问题，ACO在离散优化问题方面有比较好的优越性。<br>蚁群算法是一种用来寻找优化路径的概率型算法。它由Marco Dorigo于1992年在他的博士论文中提出，其灵感来源于蚂蚁在寻找食物过程中发现路径的行为。</p><h3 id="2-算法背景"><a href="#2-算法背景" class="headerlink" title="2.算法背景"></a>2.算法背景</h3><p>单只蚂蚁的行为及其简单，行为数量在10种以内，但成千上万只蚂蚁组成的蚁群却能拥有巨大的智慧，这离不开它们信息传递的方式——信息素。<br>蚂蚁在行走过程中会释放一种称为“信息素”的物质，用来标识自己的行走路径。在寻找食物的过程中，根据信息素的浓度选择行走的方向，并最终到达食物所在的地方。<br>信息素会随着时间的推移而逐渐挥发。<br>在一开始的时候，由于地面上没有信息素，因此蚂蚁们的行走路径是随机的。蚂蚁们在行走的过程中会不断释放信息素，标识自己的行走路径。随着时间的推移，有若干只蚂蚁找到了食物，此时便存在若干条从洞穴到食物的路径。由于蚂蚁的行为轨迹是随机分布的，因此在单位时间内，短路径上的蚂蚁数量比长路径上的蚂蚁数量要多，从而蚂蚁留下的信息素浓度也就越高。这为后面的蚂蚁们提供了强有力的方向指引，越来越多的蚂蚁聚集到最短的路径上去。<br>（1）高度结构化的组织——虽然蚂蚁的个体行为极其简单，但由个体组成的蚁群却构成高度结构化的社会组织，蚂蚁社会的成员有分工，有相互的通信和信息传递。<br>（2）自然优化——蚁群在觅食过程中，在没有任何提示下总能找到从蚁巢到食物源之间的最短路径；当经过的路线上出现障碍物时，还能迅速找到新的最优路径。<br>（3）信息正反馈——蚂蚁在寻找食物时，在其经过的路径上释放信息素（外激素）。蚂蚁基本没有视觉，但能在小范围内察觉同类散发的信息素的轨迹，由此来决定何去何从，并倾向于朝着信息素强度高的方向移动。<br>（4）自催化行为——某条路径上走过的蚂蚁越多，留下的信息素也越多（随时间蒸发一部分），后来蚂蚁选择该路径的概率也越高。</p><h3 id="3-算法基本思想"><a href="#3-算法基本思想" class="headerlink" title="3.算法基本思想"></a>3.算法基本思想</h3><p>（1）根据具体问题设置多只蚂蚁，分头并行搜索。<br>（2）每只蚂蚁完成一次周游后，在行进的路上释放信息素，信息素量与解的质量成正比。<br>（3）蚂蚁路径的选择根据信息素强度大小（初始信息素量设为相等），同时考虑两点之间的距离，采用随机的局部搜索策略。这使得距离较短的边，其上的信息素量较大，后来的蚂蚁选择该边的概率也较大。<br>（4）每只蚂蚁只能走合法路线（经过每个城市1次且仅1次），为此设置禁忌表来控制。<br>（5）所有蚂蚁都搜索完一次就是迭代一次，每迭代一次就对所有的边做一次信息素更新，原来的蚂蚁死掉，新的蚂蚁进行新一轮搜索。<br>（6）更新信息素包括原有信息素的蒸发和经过的路径上信息素的增加。<br>（7）达到预定的迭代步数，或出现停滞现象（所有蚂蚁都选择同样的路径，解不再变化），则算法结束，以当前最优解作为问题的最优解。</p><h3 id="4-表示方式"><a href="#4-表示方式" class="headerlink" title="4.表示方式"></a>4.表示方式</h3><h4 id="4-1-参数表示"><a href="#4-1-参数表示" class="headerlink" title="4.1 参数表示"></a>4.1 参数表示</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20190303132914171.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20190303132853359.png" alt=""></p><h4 id="4-2-计算公式"><a href="#4-2-计算公式" class="headerlink" title="4.2 计算公式"></a>4.2 计算公式</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20190303132956568.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20190303133011207.png" alt=""></p><h4 id="4-3-结论"><a href="#4-3-结论" class="headerlink" title="4.3 结论"></a>4.3 结论</h4><p>当出现停滞现象的时候，说明已经得到最优解，算法结束。<br>我们发现在第二次迭代的时候，五只蚂蚁走的是同一条路，所以算法收敛结束。</p><p>最优路径A-&gt;E-&gt;D-&gt;C-&gt;B-&gt;A, 最优路径的距离为9.</p><h3 id="5-蚁群算法特点"><a href="#5-蚁群算法特点" class="headerlink" title="5.蚁群算法特点"></a>5.蚁群算法特点</h3><p>蚁群算法是一种基于多主体的智能算法，不是单个蚂蚁行动，而是多个蚂蚁同时搜索，具有分布式的协同优化机制。<br>本质上属于随机搜索算法（概率算法），具有概率搜索的特征。<br>是一种全局搜索算法，能够有效地避免局部最优。<br>（1）较强的鲁棒性——稍加修改即可应用于其他问题；<br>（2）分布式计算——本质上具有并行性；<br>（3）易于与其他启发式算法结合。</p><h3 id="6-例"><a href="#6-例" class="headerlink" title="6.例"></a>6.例</h3><p>遍游三十四省问题。<br><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)计算各城市距离矩阵<span class="hljs-comment">%a是纬度，b是经度</span>a=[<span class="hljs-number">45.7333</span> <span class="hljs-number">43.75</span> <span class="hljs-number">43.88333</span> <span class="hljs-number">41.8</span> <span class="hljs-number">40.8</span> <span class="hljs-number">39.91667</span> <span class="hljs-number">39.0003</span> <span class="hljs-number">38.45</span> <span class="hljs-number">38.0003</span> <span class="hljs-number">37.86667</span> <span class="hljs-number">36.66667</span> <span class="hljs-number">36.63333</span> <span class="hljs-number">36.00066</span> <span class="hljs-number">34.76667</span> <span class="hljs-number">34.28333</span> <span class="hljs-number">32</span> <span class="hljs-number">31.86667</span> <span class="hljs-number">31.2333</span> <span class="hljs-number">30.58333</span> <span class="hljs-number">30.66667</span> <span class="hljs-number">30.26667</span> <span class="hljs-number">29.9833</span> <span class="hljs-number">29.65</span> <span class="hljs-number">28.6666</span> <span class="hljs-number">28.21667</span> <span class="hljs-number">26.58333</span> <span class="hljs-number">26.0001</span> <span class="hljs-number">25.0006</span> <span class="hljs-number">25.0005</span> <span class="hljs-number">23.001333</span> <span class="hljs-number">22.8</span> <span class="hljs-number">21.38333</span> <span class="hljs-number">21.55</span> <span class="hljs-number">20.000333</span>];<span class="hljs-comment">%各个城市纬度</span>b=[<span class="hljs-number">126.6</span> <span class="hljs-number">87.6</span> <span class="hljs-number">125.3166</span> <span class="hljs-number">123.4166</span> <span class="hljs-number">111.6833</span> <span class="hljs-number">116.41</span> <span class="hljs-number">117.2</span> <span class="hljs-number">106.26667</span> <span class="hljs-number">114.48</span> <span class="hljs-number">112.55</span> <span class="hljs-number">117.0</span> <span class="hljs-number">101.8</span> <span class="hljs-number">103.66</span> <span class="hljs-number">113.65</span> <span class="hljs-number">108.95</span> <span class="hljs-number">118.7666</span> <span class="hljs-number">117.28333</span> <span class="hljs-number">121.4833</span> <span class="hljs-number">114.28333</span> <span class="hljs-number">104</span> <span class="hljs-number">120.1666</span> <span class="hljs-number">106.9</span> <span class="hljs-number">91.0001</span> <span class="hljs-number">115.9166</span> <span class="hljs-number">112.98</span> <span class="hljs-number">106.71667</span> <span class="hljs-number">119.3</span> <span class="hljs-number">102.7</span> <span class="hljs-number">121.5</span> <span class="hljs-number">113.23333</span> <span class="hljs-number">108.3166</span> <span class="hljs-number">115.2</span> <span class="hljs-number">115.0016</span> <span class="hljs-number">110.3333</span>];<span class="hljs-comment">%各个城市经度</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">34</span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">34</span>        c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">6371.3</span>*<span class="hljs-built_in">acos</span>(<span class="hljs-built_in">cos</span>(a(<span class="hljs-number">1</span>,<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>)*<span class="hljs-built_in">cos</span>(a(<span class="hljs-number">1</span>,<span class="hljs-built_in">j</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>)*<span class="hljs-built_in">cos</span>(b(<span class="hljs-number">1</span>,<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>-b(<span class="hljs-number">1</span>,<span class="hljs-built_in">j</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>)+<span class="hljs-built_in">sin</span>(a(<span class="hljs-number">1</span>,<span class="hljs-built_in">i</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>)*<span class="hljs-built_in">sin</span>(a(<span class="hljs-number">1</span>,<span class="hljs-built_in">j</span>)*<span class="hljs-built_in">pi</span>./<span class="hljs-number">180</span>))<span class="hljs-comment">%利用经纬度计算地球上两点距离</span>    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">2</span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">34</span>        coord(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=a(<span class="hljs-built_in">j</span>);        coord(<span class="hljs-number">2</span>,<span class="hljs-built_in">j</span>)=b(<span class="hljs-built_in">j</span>);    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span></code></pre><br> <pre><code class="hljs matlab">c =       <span class="hljs-number">1.0e+03</span> *      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">3</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0577</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2293</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.0577</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9996</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2293</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9996</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5065</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9087</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2787</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3239</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0012</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1702</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0517</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4121</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8583</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0742</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5116</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8560</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6670</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7005</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3191</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3372</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1194</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4531</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1898</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2627</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2871</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0674</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2962</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4395</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1430</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2005</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6146</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0357</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6375</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4419</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4238</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9622</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1147</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0077</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4397</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7377</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9018</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5091</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6719</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2677</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4463</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9942</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.7622</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.5736</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0484</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3789</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8084</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2285</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5807</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.4484</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2898</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2416</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.5652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5966</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.4086</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.1161</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0206</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8873</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2858</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8437</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0600</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.7627</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5480</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2884</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.4673</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0614</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.1399</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4945</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.3502</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.7048</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1281</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.8009</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2889</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5720</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.0377</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0048</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8142</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.8995</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.5563</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6704</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.8885</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.5290</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6592</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.2255</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.3796</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9976</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">4</span> 至 <span class="hljs-number">6</span>       <span class="hljs-number">0.5065</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3239</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0517</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.9087</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0012</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4121</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2787</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1702</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8583</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9857</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9857</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4123</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4123</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6114</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5113</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1224</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8889</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3932</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2707</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0248</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3346</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4044</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7941</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6509</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9429</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3249</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8222</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8790</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1983</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1555</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6928</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6224</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5146</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7636</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9105</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1651</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9054</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2313</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1122</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8986</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1876</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3796</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0686</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4905</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1599</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0556</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.1285</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3219</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5226</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3151</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3988</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1259</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9786</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2780</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.1981</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2420</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6099</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4031</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2518</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7815</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4043</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3385</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2769</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6455</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7326</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7970</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7894</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5706</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.6674</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9441</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0935</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8764</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9784</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2946</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9845</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9046</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.5366</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0263</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0503</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.3971</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1844</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0641</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.3854</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1633</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0467</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.7191</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3165</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2892</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">7</span> 至 <span class="hljs-number">9</span>       <span class="hljs-number">1.0742</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8560</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3191</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.5116</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6670</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3372</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7005</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1194</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6114</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5113</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3932</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.1224</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8889</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2707</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9499</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2615</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9499</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7190</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2615</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7190</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4241</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5531</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1699</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2601</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9661</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2676</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3764</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4425</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1307</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2388</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3570</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9857</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5667</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3672</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9032</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5219</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6459</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7912</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3411</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7728</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7933</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2391</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7283</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9472</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6008</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9878</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9730</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1412</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8250</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5172</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8900</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2599</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0082</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5643</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0062</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3753</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9433</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1318</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.6090</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7097</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3509</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1552</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4064</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0464</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2608</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2967</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0968</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6905</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3202</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4630</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4589</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8453</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4091</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0664</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5328</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8233</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6082</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5901</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8183</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8409</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6721</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9883</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7512</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7895</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9683</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0813</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8491</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9517</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0564</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8300</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2130</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0886</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0412</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">10</span> 至 <span class="hljs-number">12</span>       <span class="hljs-number">1.4531</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2871</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2962</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.1898</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4395</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2627</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0674</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1430</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0248</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7941</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9429</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3346</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6509</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4044</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3249</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4241</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2601</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3764</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5531</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9661</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4425</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.1699</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2676</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1307</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4157</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9608</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4157</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3547</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9608</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3547</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8166</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1963</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1809</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3585</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0893</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5132</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7754</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6981</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8637</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5437</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6386</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7945</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5344</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5165</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1006</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7319</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9085</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8254</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7216</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3359</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1208</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3739</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6940</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0975</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7698</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8414</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0194</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1958</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8780</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.1848</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5338</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2690</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0696</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8954</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5884</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0123</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4042</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4830</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2102</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4642</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2060</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0345</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7064</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8792</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2964</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6617</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3661</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6543</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5620</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8714</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7234</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7532</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6609</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8505</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7084</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1337</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8296</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6920</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1068</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9982</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9634</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">13</span> 至 <span class="hljs-number">15</span>       <span class="hljs-number">2.2005</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6375</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9622</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6146</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4419</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1147</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0357</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4238</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8222</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1555</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5146</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8790</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6928</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7636</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1983</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6224</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9105</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2388</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5667</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9032</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3570</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5219</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9857</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3672</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6459</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8166</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3585</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5132</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1963</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7754</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.1809</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0893</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6981</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9156</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5175</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9156</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4339</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5175</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4339</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4601</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5659</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9482</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3369</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8214</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7305</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8291</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2192</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1556</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6478</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5940</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0108</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6142</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6612</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7895</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1444</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7341</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5156</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3760</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2004</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7672</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4092</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7113</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9087</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2316</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7311</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0866</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8825</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8557</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1148</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3546</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2266</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5125</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1953</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0961</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3226</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5903</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7147</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3089</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3220</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5351</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4279</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2784</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9736</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4959</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5596</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9470</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5348</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8947</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6740</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5941</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">16</span> 至 <span class="hljs-number">18</span>       <span class="hljs-number">1.6689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7377</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6719</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.0077</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9018</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2677</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4397</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5091</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4463</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1651</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2313</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1876</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1122</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3796</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9054</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8986</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0686</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7912</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7933</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9472</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3411</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2391</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6008</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7728</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7283</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9878</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8637</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7945</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1006</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5437</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5344</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7319</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6386</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5165</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9085</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4601</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3369</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7305</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5659</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8291</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9482</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8214</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2192</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1408</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.1408</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4042</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4042</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4542</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3190</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6906</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4093</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2343</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3272</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1655</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1526</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0119</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4016</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.6570</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5175</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9185</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4606</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3793</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6074</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6975</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5798</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8867</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3135</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1809</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5260</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6692</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6812</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6197</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7497</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6154</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8228</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8675</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6931</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1393</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0635</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2257</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4513</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3408</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6043</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1839</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2611</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2204</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1693</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2548</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5768</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4904</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6741</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">19</span> 至 <span class="hljs-number">21</span>       <span class="hljs-number">1.9942</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5736</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8084</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.7622</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0484</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2285</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3789</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5807</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4905</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1285</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3151</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1599</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3219</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3988</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0556</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5226</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1259</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9730</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5172</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0082</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1412</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8900</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5643</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8250</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2599</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0062</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8254</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1208</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0975</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7216</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3739</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7698</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3359</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6940</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8414</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1556</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5940</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6612</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0108</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7895</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6478</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6142</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1444</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4542</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4093</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2343</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3190</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3272</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6906</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6668</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.1655</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9837</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9837</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5488</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5488</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7120</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2885</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2757</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2380</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2543</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8031</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1721</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4482</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2919</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9110</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7335</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8621</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5258</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3766</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7076</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5832</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4820</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2965</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6429</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8152</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9426</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8300</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6001</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8495</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2503</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0613</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0486</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9739</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4404</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5208</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1055</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0071</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4931</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0980</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2417</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3454</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5095</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">22</span> 至 <span class="hljs-number">24</span>       <span class="hljs-number">2.4484</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.5652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1161</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2898</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5966</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0206</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2416</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.4086</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8873</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9786</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.1981</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6099</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2780</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2420</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4031</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2518</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3753</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6090</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1552</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9433</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7097</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4064</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1318</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3509</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0464</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0194</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1848</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0696</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1958</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5338</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8954</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8780</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2690</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5884</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7341</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3760</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4092</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2004</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7113</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5156</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7672</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9087</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1526</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6570</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4606</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0119</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5175</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3793</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4016</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.9185</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6074</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7120</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2380</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2652</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2885</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2543</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1721</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2757</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8031</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4482</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5332</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8861</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5332</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4174</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8861</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.4174</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6225</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1418</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2915</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3785</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5773</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9353</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2947</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8055</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4468</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6917</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2653</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3724</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5416</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0481</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6877</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9996</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3313</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6848</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8111</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8851</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0021</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2665</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5902</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8131</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2391</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5637</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7967</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1626</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2220</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1170</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">25</span> 至 <span class="hljs-number">27</span>       <span class="hljs-number">2.2858</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.7627</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2884</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.8437</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.4673</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0600</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5480</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0614</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7815</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2769</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7970</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4043</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6455</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7894</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3385</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7326</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5706</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2608</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6905</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4589</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2967</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3202</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8453</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0968</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4630</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4091</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0738</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4642</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0123</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4830</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2060</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4042</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2102</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0345</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2316</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0866</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8557</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7311</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1148</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8825</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3546</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6975</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3135</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6692</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5798</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1809</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6812</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8867</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5260</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6197</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2919</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8621</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7076</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9110</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5258</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5832</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7335</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3766</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4820</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6225</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.3785</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2947</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.1418</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5773</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8055</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.2915</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9353</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4468</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6444</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6723</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6444</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2557</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6723</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2557</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0823</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4390</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9192</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4897</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2472</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5805</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6985</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7626</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4507</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1673</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7922</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0374</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6616</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0099</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6603</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9522</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8198</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1341</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">28</span> 至 <span class="hljs-number">30</span>       <span class="hljs-number">3.1399</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3502</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8009</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.4945</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.7048</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.2889</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.9323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1281</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5720</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.6674</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8764</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2946</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9441</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9784</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9845</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0935</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7252</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9046</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0664</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6082</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8183</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5328</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0710</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8409</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8233</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5901</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6721</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7064</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6617</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6543</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8792</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3661</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5620</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2964</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.2756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8714</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2266</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0961</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7147</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5125</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3226</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3089</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1953</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5903</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3220</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7497</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8228</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1393</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6154</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8675</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0635</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9650</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6931</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2257</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2965</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9426</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8495</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6429</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8300</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2503</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8152</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6001</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0613</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6917</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5416</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9996</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2653</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0481</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3313</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3724</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6877</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6848</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0823</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.9192</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5805</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4390</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4897</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7689</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6687</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2472</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6985</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8932</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0926</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8932</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8685</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0926</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8685</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6212</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3618</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5041</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3388</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7591</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2709</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3132</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7665</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2432</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9610</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2741</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.4487</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">31</span> 至 <span class="hljs-number">33</span>       <span class="hljs-number">3.0377</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8995</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.8885</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.0048</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.5563</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.5290</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.8142</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6704</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.6592</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.5366</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3971</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.3854</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0263</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1844</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1633</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0503</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0641</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0467</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9883</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9683</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9517</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7512</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0813</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0564</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7895</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8491</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8300</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7234</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8505</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.8296</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.7532</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.7084</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.6920</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6609</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1337</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.1068</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5351</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9736</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.9470</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4279</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4959</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4756</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2784</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5596</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5348</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4513</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2323</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2204</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3408</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1839</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1693</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6043</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2611</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2548</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0486</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0071</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9739</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.5208</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.4931</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4404</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.1055</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0980</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8111</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2665</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.2391</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8851</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5902</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.5637</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.0021</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.8131</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7967</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7626</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7922</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7688</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4507</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0374</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0099</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1673</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6616</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.6603</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.6212</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3388</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.3132</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3618</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7591</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7665</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5041</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2709</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.2432</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7264</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.7022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7264</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0277</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.7022</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0277</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3748</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5291</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">0.5150</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>      列 <span class="hljs-number">34</span>       <span class="hljs-number">3.2255</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">3.3796</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.9976</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.7191</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.3165</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2892</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2130</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0886</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0412</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9982</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.9634</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.0271</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.8947</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6740</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5941</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5768</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.4904</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.6741</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2417</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.3454</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.5095</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1626</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">2.2220</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1170</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9522</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.8198</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.1341</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.9610</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">1.2741</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.4487</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.3748</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5291</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.5150</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>       <span class="hljs-number">0.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span></code></pre><br><pre><code class="hljs matlab">(<span class="hljs-number">2</span>)蚁群算法    d=c;NC_max=<span class="hljs-number">100</span>;m=<span class="hljs-number">1000</span>;Alpha=<span class="hljs-number">0.95</span>;Beta=<span class="hljs-number">5</span>;Rho=<span class="hljs-number">0.1</span>;Q=<span class="hljs-number">100</span>;    [R_best,L_best,L_ave,Shortest_Route,Shortest_Length]=ACATSP(d,NC_max,m,Alpha,Beta,Rho,Q)</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/aTEqXV.png" alt=""></p><pre><code class="hljs matlab">Shortest_Route =      列 <span class="hljs-number">1</span> 至 <span class="hljs-number">11</span>        <span class="hljs-number">28</span>    <span class="hljs-number">26</span>    <span class="hljs-number">31</span>    <span class="hljs-number">34</span>    <span class="hljs-number">30</span>    <span class="hljs-number">33</span>    <span class="hljs-number">32</span>    <span class="hljs-number">27</span>    <span class="hljs-number">29</span>    <span class="hljs-number">21</span>    <span class="hljs-number">18</span>      列 <span class="hljs-number">12</span> 至 <span class="hljs-number">22</span>        <span class="hljs-number">16</span>    <span class="hljs-number">17</span>    <span class="hljs-number">19</span>    <span class="hljs-number">24</span>    <span class="hljs-number">25</span>    <span class="hljs-number">22</span>    <span class="hljs-number">20</span>    <span class="hljs-number">15</span>    <span class="hljs-number">14</span>    <span class="hljs-number">10</span>     <span class="hljs-number">9</span>      列 <span class="hljs-number">23</span> 至 <span class="hljs-number">33</span>        <span class="hljs-number">11</span>     <span class="hljs-number">7</span>     <span class="hljs-number">6</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">13</span>    <span class="hljs-number">12</span>     <span class="hljs-number">2</span>      列 <span class="hljs-number">34</span>        <span class="hljs-number">23</span>    Shortest_Length =       <span class="hljs-number">1.5912e+04</span></code></pre><pre><code class="hljs matlab">(<span class="hljs-number">3</span>)绘制最短路线    myplot(Shortest_Route,coord,Shortest_Length)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/aTVQjP.png" alt=""></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/u011125673/article/details/88087479">蚁群算法（Ant Colony Optimization）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="">蚁群算法与模拟退火算法对旅游路线问题的探究</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.imooc.com/article/23910?block_id=tuijian_wz">10分钟搞懂蚁群算法</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="http://www.dataguru.cn/article-11200-1.html">蚁群算法（独辟蹊径的进化算法）</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.cnblogs.com/tao-alex/p/6094483.html">智能算法—-蚁群算法</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200809】</title>
    <link href="/2020/08/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200809%E3%80%91/"/>
    <url>/2020/08/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200809%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="层次分析法、AHP"><a href="#层次分析法、AHP" class="headerlink" title="层次分析法、AHP"></a>层次分析法、AHP</h1><h2 id="比较选择问题"><a href="#比较选择问题" class="headerlink" title="比较选择问题"></a>比较选择问题</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>有一个毕业生为挑选合适的工作。经双方恳谈，已有三个单位表示愿意录用某毕业生，该毕业生考虑的因素有6个，研究课题、发展前途、待遇、同事情况、地理位置和单位名气。<br>那么这六个因素就是准则层，三个单位就是方案层，最后要求的就是应该去哪个单位。<br>1.准则层判断矩阵（主观性）<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129222139.png" alt=""><br>2.方案层判断矩阵（主观性）</p><pre><code class="hljs matlab">cengcifenxifa请输入比较参数个数NN=<span class="hljs-number">6</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">1</span>/<span class="hljs-number">4</span> <span class="hljs-number">1</span>/<span class="hljs-number">4</span> <span class="hljs-number">1</span>/<span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.1507</span>    <span class="hljs-number">0.1792</span>    <span class="hljs-number">0.1886</span>    <span class="hljs-number">0.0472</span>    <span class="hljs-number">0.1464</span>    <span class="hljs-number">0.2879</span>此矩阵的一致性可以接受!CI=    <span class="hljs-number">0.1236</span>CR=    <span class="hljs-number">0.0981</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">4</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>;<span class="hljs-number">2</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.1365</span>    <span class="hljs-number">0.6250</span>    <span class="hljs-number">0.2385</span>此矩阵的一致性可以接受!CI=    <span class="hljs-number">0.0091</span>CR=    <span class="hljs-number">0.0176</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">4</span> <span class="hljs-number">1</span>/<span class="hljs-number">5</span>;<span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.0974</span>    <span class="hljs-number">0.3331</span>    <span class="hljs-number">0.5695</span>此矩阵的一致性可以接受!CI=    <span class="hljs-number">0.0123</span>CR=    <span class="hljs-number">0.0236</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span>;<span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">7</span>;<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.3023</span>    <span class="hljs-number">0.1076</span>    <span class="hljs-number">0.5901</span>此矩阵的一致性可以接受!CI=   <span class="hljs-number">-0.1404</span>CR=   <span class="hljs-number">-0.2701</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-number">5</span>;<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span>;<span class="hljs-number">1</span>/<span class="hljs-number">5</span> <span class="hljs-number">1</span>/<span class="hljs-number">7</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.2790</span>    <span class="hljs-number">0.6491</span>    <span class="hljs-number">0.0719</span>此矩阵的一致性可以接受!CI=    <span class="hljs-number">0.0324</span>CR=    <span class="hljs-number">0.0624</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span>;<span class="hljs-number">1</span>/<span class="hljs-number">7</span> <span class="hljs-number">1</span>/<span class="hljs-number">7</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.4667</span>    <span class="hljs-number">0.4667</span>    <span class="hljs-number">0.0667</span>此矩阵的一致性可以接受!CI=     <span class="hljs-number">0</span>CR=     <span class="hljs-number">0</span>请输入判断矩阵A(n阶)A=[<span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>;<span class="hljs-number">1</span>/<span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span>/<span class="hljs-number">9</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]    <span class="hljs-number">0.7986</span>    <span class="hljs-number">0.1049</span>    <span class="hljs-number">0.0965</span>此矩阵的一致性可以接受!CI=    <span class="hljs-number">0.0035</span>CR=    <span class="hljs-number">0.0068</span>请输入选择方案个数MM=<span class="hljs-number">3</span>&gt;&gt; sumsum =    <span class="hljs-number">0.4064</span>    <span class="hljs-number">0.3033</span>    <span class="hljs-number">0.2902</span></code></pre><p>计算层次总排序权值和一致性检验三个单位对总目标的权值<br>得三家单位对总目标的权值分别为:0.4064    0.3033    0.2902,决策层对总目标的权向量为: {0.4064    0.3033    0.2902}<br>所以{0.4064    0.3033    0.2902}可作为最后的决策依据。<br>即各方案的权重排序为B1&gt;B2&gt;B3,分别表示三个单位，故最后的决策应为去第一个单位。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>权重</tag>
      
      <tag>层次分析法</tag>
      
      <tag>AHP</tag>
      
      <tag>比较选择问题</tag>
      
      <tag>准则层判断矩阵</tag>
      
      <tag>方案层判断矩阵</tag>
      
      <tag>层次排序</tag>
      
      <tag>权值</tag>
      
      <tag>一致性检验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200808】</title>
    <link href="/2020/08/08/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200808%E3%80%91/"/>
    <url>/2020/08/08/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200808%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h1><h2 id="模拟退火算法、优化问题、TSP、tsp"><a href="#模拟退火算法、优化问题、TSP、tsp" class="headerlink" title="模拟退火算法、优化问题、TSP、tsp"></a>模拟退火算法、优化问题、TSP、tsp</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>计算从北京走遍全国31个城市的最短距离，设计出合理算法规划出不同约束条件下的不同最优方案:<br>1．首先在不考虑外部因素的情况下，利用地球的经纬度，计算各个城市之间距离，建立数学模型，并规划出最优游遍31座城市的最短路线。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129221810.png" alt=""><br><pre><code class="hljs matlab">clearclcx=xlsread(<span class="hljs-string">&#x27;jingweidu.xlsx&#x27;</span>)&#x27;;R0=<span class="hljs-number">6371</span>;<span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(x)    x1(<span class="hljs-number">1</span>,<span class="hljs-built_in">j</span>)=x(<span class="hljs-number">1</span>,<span class="hljs-built_in">j</span>)/<span class="hljs-number">360</span>*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*R0;    x1(<span class="hljs-number">2</span>,<span class="hljs-built_in">j</span>)=x(<span class="hljs-number">2</span>,<span class="hljs-built_in">j</span>)*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*R0/<span class="hljs-number">4</span>;<span class="hljs-keyword">end</span>Coord=x1t0 = <span class="hljs-number">1</span> ; <span class="hljs-comment">% 初 温 t0</span>iLk = <span class="hljs-number">20</span> ; <span class="hljs-comment">% 内 循 环 最 大 迭 代 次 数 iLk</span>oLk = <span class="hljs-number">50</span> ; <span class="hljs-comment">% 外 循 环 最 大 迭 代 次 数 oLk</span>lam = <span class="hljs-number">0.95</span> ; <span class="hljs-comment">% λ lambda</span>istd = <span class="hljs-number">0.001</span> ; <span class="hljs-comment">% 若 内 循 环 函 数 值 方 差 小 于 istd 则 停 止</span>ostd = <span class="hljs-number">0.001</span> ; <span class="hljs-comment">% 若 外 循 环 函 数 值 方 差 小 于 ostd 则 停 止</span>ilen = <span class="hljs-number">5</span> ; <span class="hljs-comment">% 内 循 环 保 存 的 目 标 函 数 值 个 数</span>olen = <span class="hljs-number">5</span> ; <span class="hljs-comment">% 外 循 环 保 存 的 目 标 函 数 值 个 数</span><span class="hljs-comment">% 程 序 主 体</span>m = <span class="hljs-built_in">length</span>( Coord ) ; <span class="hljs-comment">% 城 市 的 个 数 m</span>fare = distance( Coord ) ; <span class="hljs-comment">% 路 径 费 用 fare</span>path = <span class="hljs-number">1</span> : m ; <span class="hljs-comment">% 初 始 路 径 path</span>pathfar = pathfare( fare , path ) ; <span class="hljs-comment">% 路 径 费 用 path fare</span>ores = <span class="hljs-built_in">zeros</span>( <span class="hljs-number">1</span> , olen ) ; <span class="hljs-comment">% 外 循 环 保 存 的 目 标 函 数 值</span>e0 = pathfar ; <span class="hljs-comment">% 能 量 初 值 e0</span>t = t0 ; <span class="hljs-comment">% 温 度 t</span><span class="hljs-keyword">for</span> out = <span class="hljs-number">1</span> : oLk <span class="hljs-comment">% 外 循 环 模 拟 退 火 过 程</span>ires = <span class="hljs-built_in">zeros</span>( <span class="hljs-number">1</span> , ilen ) ; <span class="hljs-comment">% 内 循 环 保 存 的 目 标 函 数 值</span><span class="hljs-keyword">for</span> in = <span class="hljs-number">1</span> : iLk <span class="hljs-comment">% 内 循 环 模 拟 热 平 衡 过 程</span>[ newpath , v ] = swap( path , <span class="hljs-number">1</span> ) ; <span class="hljs-comment">% 产 生 新 状 态</span>e1 = pathfare( fare , newpath ) ; <span class="hljs-comment">% 新 状 态 能 量</span><span class="hljs-comment">% Metropolis 抽 样 稳 定 准 则</span>r = <span class="hljs-built_in">min</span>( <span class="hljs-number">1</span> , <span class="hljs-built_in">exp</span>( - ( e1 - e0 ) / t ) ) ;<span class="hljs-keyword">if</span> <span class="hljs-built_in">rand</span> &lt; rpath = newpath ; <span class="hljs-comment">% 更 新 最 佳 状 态</span>e0 = e1 ;<span class="hljs-keyword">end</span>ires = [ ires( <span class="hljs-number">2</span> : <span class="hljs-keyword">end</span> ) e0 ] ; <span class="hljs-comment">% 保 存 新 状 态 能 量</span><span class="hljs-comment">% 内 循 环 终 止 准 则 ：连 续 ilen 个 状 态 能 量 波 动 小 于 istd</span><span class="hljs-keyword">if</span> std( ires , <span class="hljs-number">1</span> ) &lt; istd<span class="hljs-keyword">break</span> ;<span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>ores = [ ores( <span class="hljs-number">2</span> : <span class="hljs-keyword">end</span> ) e0 ] ; <span class="hljs-comment">% 保 存 新 状 态 能 量</span><span class="hljs-comment">% 外 循 环 终 止 准 则 ：连 续 olen 个 状 态 能 量 波 动 小 于 ostd</span><span class="hljs-keyword">if</span> std( ores , <span class="hljs-number">1</span> ) &lt; ostd<span class="hljs-keyword">break</span> ;<span class="hljs-keyword">end</span>t = lam * t ;<span class="hljs-keyword">end</span>pathfar = e0 ;<span class="hljs-comment">% 输 入 结 果</span>fprintf( <span class="hljs-string">&#x27;近似最优路径为：\n &#x27;</span> )<span class="hljs-comment">%disp( char( [ path , path(1) ] + 64 ) ) ;</span><span class="hljs-built_in">disp</span>(path)fprintf( <span class="hljs-string">&#x27;近似最优路径路程\tpathfare=&#x27;</span> ) ;<span class="hljs-built_in">disp</span>( pathfar ) ;myplot( path , Coord , pathfar ) ;</code></pre><br><pre><code class="hljs matlab">近似最优路径为：   列 <span class="hljs-number">1</span> 至 <span class="hljs-number">19</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span>    <span class="hljs-number">12</span>    <span class="hljs-number">13</span>    <span class="hljs-number">14</span>    <span class="hljs-number">15</span>    <span class="hljs-number">16</span>    <span class="hljs-number">17</span>    <span class="hljs-number">18</span>    <span class="hljs-number">19</span>  列 <span class="hljs-number">20</span> 至 <span class="hljs-number">31</span>    <span class="hljs-number">20</span>    <span class="hljs-number">21</span>    <span class="hljs-number">22</span>    <span class="hljs-number">23</span>    <span class="hljs-number">24</span>    <span class="hljs-number">25</span>    <span class="hljs-number">26</span>    <span class="hljs-number">27</span>    <span class="hljs-number">28</span>    <span class="hljs-number">29</span>    <span class="hljs-number">30</span>    <span class="hljs-number">31</span>近似最优路径路程    pathfare=   <span class="hljs-number">1.0104e+06</span></code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129221902.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>综合评价</tag>
      
      <tag>模拟退火算法</tag>
      
      <tag>优化问题</tag>
      
      <tag>TSP</tag>
      
      <tag>tsp</tag>
      
      <tag>最短路径</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习常用模型及算法1.模拟退火算法</title>
    <link href="/2020/08/08/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%951.%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    <url>/2020/08/08/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%AE%97%E6%B3%951.%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-算法简述"><a href="#1-算法简述" class="headerlink" title="1. 算法简述"></a>1. 算法简述</h3><p>模拟退火适用的问题通常是一些求最优解的问题。<br>比如，把问题抽象地看成一个长成这样的毫无规律的函数，而最优解就是函数的最低点。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/a4f8Ff.png" alt=""></p><p>众所周知，对于一个没有办法在多项式复杂度的算法下完成求解的问题，我们通常会想到一种简单粗暴的方法——贪心。<br>选择问题的某一个状态，然后不断向更优的情况靠近。<br>比如从A出发，可以获得局部最优解B，但这显然不是全局最优解。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/a4fUyj.png" alt=""></p><p>显然，这样做的局限性是，过于局限在局部的一个凹部分而无法跳出去去寻找更优的解。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>为了解决这一问题，科学家们想到了物理的退火降温的过程——<br>一个处于很高温度的物体，现在要给它降温，使物体内能降到最低。<br>我们常规的思维是，越快越好，让它的温度迅速地降低。<br>然而，实际上，过快地降温使得物体来不及有序地收缩，难以形成结晶。而结晶态，才是物体真正内能降到最低的形态。<br>正确的做法，是徐徐降温，也就是退火，才能使得物体的每一个粒子都有足够的时间找到自己的最佳位置并紧密有序地排列。开始温度高的时候，粒子活跃地运动并逐渐找到一个合适的状态。在这过程中温度也会越降越低，温度低下来了，那么粒子也渐渐稳定下来，相较于以前不那么活跃了。这时候就可以慢慢形成最终稳定的结晶态了。<br>那么，我们可不可以把找到最优解，与形成结晶态，这两个过程联系在一起呢？<br>于是，模拟退火诞生了。</p><h3 id="3-模拟退火算法要求"><a href="#3-模拟退火算法要求" class="headerlink" title="3. 模拟退火算法要求"></a>3. 模拟退火算法要求</h3><ol><li>初始温度足够高</li><li>降温过程足够慢</li><li>终止温度足够低</li></ol><h3 id="4-实现过程"><a href="#4-实现过程" class="headerlink" title="4. 实现过程"></a>4. 实现过程</h3><p>我们需要设定这几个参数，模拟退火过程</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/a4grxs.png" alt=""></p><ul><li>T——温度<br>ΔT——温度变化率，每次温度等于上一次温度乘上ΔT，实际应用时一般取0.95−0.99，模拟徐徐降温<br>再定义一些量&lt;/p&gt;</li><li><p>x——当前选择的解</p></li><li><p>Δx——解变动值</p></li><li>x1——当前的目标解，等于x+Δx</li><li>Δf——当前解的函数值与目标解函数值之差，等于f(x)−f(x1)<br><p>我们给一个初始解x，并让它不断变动。要模拟变动的大小随温度的降低而降低，我们每次的Δx应该在一个大小与T成正比的值域内随机取值。<br>这时候我们就要考虑是否将当前解变为目标解。因为我们还是需要贪心，所以如果f(x1)<f(x)，那么接受目标解，x=x1。那如果f(x1)>f(x)呢？我们当然要以一定概率接受它啦，这样才能跳出局部的限制，去搜寻更优的解，弥补贪心的局限性。那么这个概率应该是多少呢？同样要模拟变动的大小随温度的降低而降低。科学家经过理论分析，得出这个概率应该是eΔfT。<br>如此反复选择直到T趋近于0（可以设一个EPS）这时候我们认为我们当前的x就是最优解。</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200727113332676.png" alt=""></p><p>图中or random…即为metropolis准则，也是模拟退火和贪心算法的根本区别。<br>用图片来描述的话，就拿上面那个图像寻找最优解为例</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/a4f26J.png" alt=""></p><p>首先经过大幅波动，当前解由A-&gt;B-&gt;C，找到了一个比较满意的解。<br>但还不能满足。由于温度还比较大，此时接受了一些不比当前解优的目标解，C-&gt;D-&gt;E，成功地爬了上去。而温度还在慢慢减小。<br>终于，发现了一个更优解F，成功跳出了那个非常宽的局部凹函数。<br>这时候，温度越来越小了，很难再次接受不比当前解优的目标解，再次翻出去。解终于渐渐趋于稳定，并最终到达了G，找到了最优解。<br>如此看来，基于随机的模拟退火能很大程度上提高正确率，但也不可能完全正确。上面的例子只是随意模拟出的一个情况。所以要多跑几遍，取每一次得到的解的最优值。</p><h3 id="5-关于参数"><a href="#5-关于参数" class="headerlink" title="5. 关于参数"></a>5. 关于参数</h3><p>众所周知，模拟退火最麻烦的地方在调参，只有合适的参数才能在一定的时间内很大概率跑出最优解。<br>首先，根据数据范围和精度要求，可以基本确定EPS的大小了，不过也需要尝试手动微调。<br>比较麻烦的是温度和变动率。首先不必顾虑，都开大一点，先把最优解跑出来。<br>然后，手动二分吧，注意每个二分的值要多跑几遍，因为模拟退火有偶然性，一次跑出最优解不代表大部分时候都能。<br>不过因为有两个量，还不能直接二分，应该二分套二分比较合适<br>update:考试的时候写提答，总结了一种方法：观察法<br>一边退火一边输出当前的温度、解等信息，通过观察大致感受一下解的降低速率<br>一般来说，如果解的降低速率比较均匀，跑出来的最优解也就好一些<br>不均匀的话，就调整参数，将解的降低速率较快的时间段的ΔT变大一点，速率就能减慢一点。反之同理。</p><h3 id="6-经典问题：旅行商问题-TSP"><a href="#6-经典问题：旅行商问题-TSP" class="headerlink" title="6. 经典问题：旅行商问题(TSP)"></a>6. 经典问题：旅行商问题(TSP)</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20200727110007699.png" alt=""></p><p>每个城市只有一个箭头指进，一个箭头指出，即入度和出度均为1。<br>文件介绍：</p><ul><li>swap.m文件用于邻解生成</li><li>distance.m文件用于计算距离</li><li>pathfare.m文件用于记录路线<pre><code class="hljs matlab">clear;<span class="hljs-comment">% 程 序 参 数 设 定</span>Coord = ... <span class="hljs-comment">% 城 市 的 坐 标 Coordinates</span>[ <span class="hljs-number">0.6683</span> <span class="hljs-number">0.6195</span> <span class="hljs-number">0.4</span>    <span class="hljs-number">0.2439</span> <span class="hljs-number">0.1707</span> <span class="hljs-number">0.2293</span> <span class="hljs-number">0.5171</span> <span class="hljs-number">0.8732</span> <span class="hljs-number">0.6878</span> <span class="hljs-number">0.8488</span> ; ...  <span class="hljs-number">0.2536</span> <span class="hljs-number">0.2634</span> <span class="hljs-number">0.4439</span> <span class="hljs-number">0.1463</span> <span class="hljs-number">0.2293</span> <span class="hljs-number">0.761</span>  <span class="hljs-number">0.9414</span> <span class="hljs-number">0.6536</span> <span class="hljs-number">0.5219</span> <span class="hljs-number">0.3609</span> ] ;t0 = <span class="hljs-number">1</span> ; <span class="hljs-comment">% 初 温 t0</span>iLk = <span class="hljs-number">20</span> ; <span class="hljs-comment">% 内 循 环 最 大 迭 代 次 数 iLk</span>oLk = <span class="hljs-number">50</span> ; <span class="hljs-comment">% 外 循 环 最 大 迭 代 次 数 oLk</span>lam = <span class="hljs-number">0.95</span> ; <span class="hljs-comment">% λ lambda</span>istd = <span class="hljs-number">0.001</span> ; <span class="hljs-comment">% 若 内 循 环 函 数 值 方 差 小 于 istd 则 停 止</span>ostd = <span class="hljs-number">0.001</span> ; <span class="hljs-comment">% 若 外 循 环 函 数 值 方 差 小 于 ostd 则 停 止</span>ilen = <span class="hljs-number">5</span> ; <span class="hljs-comment">% 内 循 环 保 存 的 目 标 函 数 值 个 数</span>olen = <span class="hljs-number">5</span> ; <span class="hljs-comment">% 外 循 环 保 存 的 目 标 函 数 值 个 数</span><span class="hljs-comment">% 程 序 主 体</span>m = <span class="hljs-built_in">length</span>( Coord ) ; <span class="hljs-comment">% 城 市 的 个 数 m</span>fare = distance( Coord ) ; <span class="hljs-comment">% 路 径 费 用 fare</span>path = <span class="hljs-number">1</span> : m ; <span class="hljs-comment">% 初 始 路 径 path</span>pathfar = pathfare( fare , path ) ; <span class="hljs-comment">% 路 径 费 用 path fare</span>ores = <span class="hljs-built_in">zeros</span>( <span class="hljs-number">1</span> , olen ) ; <span class="hljs-comment">% 外 循 环 保 存 的 目 标 函 数 值</span>e0 = pathfar ; <span class="hljs-comment">% 能 量 初 值 e0</span>t = t0 ; <span class="hljs-comment">% 温 度 t</span><span class="hljs-keyword">for</span> out = <span class="hljs-number">1</span> : oLk <span class="hljs-comment">% 外 循 环 模 拟 退 火 过 程</span>ires = <span class="hljs-built_in">zeros</span>( <span class="hljs-number">1</span> , ilen ) ; <span class="hljs-comment">% 内 循 环 保 存 的 目 标 函 数 值</span><span class="hljs-keyword">for</span> in = <span class="hljs-number">1</span> : iLk <span class="hljs-comment">% 内 循 环 模 拟 热 平 衡 过 程</span>[ newpath , v ] = swap( path , <span class="hljs-number">1</span> ) ; <span class="hljs-comment">% 产 生 新 状 态</span>e1 = pathfare( fare , newpath ) ; <span class="hljs-comment">% 新 状 态 能 量</span><span class="hljs-comment">% Metropolis 抽 样 稳 定 准 则</span>r = <span class="hljs-built_in">min</span>( <span class="hljs-number">1</span> , <span class="hljs-built_in">exp</span>( - ( e1 - e0 ) / t ) ) ;<span class="hljs-keyword">if</span> <span class="hljs-built_in">rand</span> &lt; rpath = newpath ; <span class="hljs-comment">% 更 新 最 佳 状 态</span>e0 = e1 ;<span class="hljs-keyword">end</span>ires = [ ires( <span class="hljs-number">2</span> : <span class="hljs-keyword">end</span> ) e0 ] ; <span class="hljs-comment">% 保 存 新 状 态 能 量</span><span class="hljs-comment">% 内 循 环 终 止 准 则 ：连 续 ilen 个 状 态 能 量 波 动 小 于 istd</span><span class="hljs-keyword">if</span> std( ires , <span class="hljs-number">1</span> ) &lt; istd<span class="hljs-keyword">break</span> ;<span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>ores = [ ores( <span class="hljs-number">2</span> : <span class="hljs-keyword">end</span> ) e0 ] ; <span class="hljs-comment">% 保 存 新 状 态 能 量</span><span class="hljs-comment">% 外 循 环 终 止 准 则 ：连 续 olen 个 状 态 能 量 波 动 小 于 ostd</span><span class="hljs-keyword">if</span> std( ores , <span class="hljs-number">1</span> ) &lt; ostd<span class="hljs-keyword">break</span> ;<span class="hljs-keyword">end</span>t = lam * t ;<span class="hljs-keyword">end</span>pathfar = e0 ;<span class="hljs-comment">% 输 入 结 果</span>fprintf( <span class="hljs-string">&#x27;近似最优路径为：\n &#x27;</span> )<span class="hljs-comment">%disp( char( [ path , path(1) ] + 64 ) ) ;</span><span class="hljs-built_in">disp</span>(path)fprintf( <span class="hljs-string">&#x27;近似最优路径路程\tpathfare=&#x27;</span> ) ;<span class="hljs-built_in">disp</span>( pathfar ) ;myplot( path , Coord , pathfar ) ;</code></pre><h3 id="7-TSP“旅行商问题”的应用领域"><a href="#7-TSP“旅行商问题”的应用领域" class="headerlink" title="7. TSP“旅行商问题”的应用领域"></a>7. TSP“旅行商问题”的应用领域</h3></li></ul><p>如何规划最合理高效的道路交通，以减少拥堵;如何更好地规划物流，以减少运营成本;在互联网环境中如何更好地设置节点，以更好地让信息流动等。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/flashhu/p/8884132.html">模拟退火总结（模拟退火）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/You_are_blind/article/details/107606852">学习常用模型及算法：1.启发式算法（模拟退火和遗传算法）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200806】</title>
    <link href="/2020/08/06/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200806%E3%80%91/"/>
    <url>/2020/08/06/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200806%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="主成分分析法"><a href="#主成分分析法" class="headerlink" title="主成分分析法"></a>主成分分析法</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>30个市经济各项水平统计如下，请针对各市经济水平做综合评价。<br>指标如下：GDP、居民消费水平、固定资产投资、职工平均工资、货物周转量、居民消费价格指数、商品零售价格指数、工业总产值<br><pre><code class="hljs matlab"><span class="hljs-comment">%1.对原始资料矩阵进行标准化处理</span>zef_data = xlsread(<span class="hljs-string">&#x27;zhengfu.xlsx&#x27;</span>,<span class="hljs-string">&#x27;A1:H30&#x27;</span>);z = zscore(zef_data)<span class="hljs-comment">%2.计算相关系数矩阵</span>cor = corrcoef(z)<span class="hljs-comment">%3.计算该相关系数矩阵的特征值和特征向量，并对特征值进行排序</span>[vec, val] = eig(cor)  <span class="hljs-comment">%特征向量vec  特征值val</span>newval = <span class="hljs-built_in">diag</span>(val);  <span class="hljs-comment">%取主对角线上的数值，排成一列数组</span>newy = <span class="hljs-built_in">sort</span>(newval, <span class="hljs-string">&#x27;descend&#x27;</span>)<span class="hljs-comment">%4.确定主成分个数</span>newrate = newy./sum(newy)  <span class="hljs-comment">%求方差贡献率</span></code></pre><br><pre><code class="hljs matlab">vec =    <span class="hljs-number">0.0109</span>    <span class="hljs-number">0.5539</span>    <span class="hljs-number">0.4080</span>   <span class="hljs-number">-0.1042</span>    <span class="hljs-number">0.0890</span>    <span class="hljs-number">0.2307</span>    <span class="hljs-number">0.6671</span>    <span class="hljs-number">0.0977</span>   <span class="hljs-number">-0.0771</span>   <span class="hljs-number">-0.3504</span>    <span class="hljs-number">0.3043</span>   <span class="hljs-number">-0.4476</span>   <span class="hljs-number">-0.4496</span>   <span class="hljs-number">-0.4534</span>    <span class="hljs-number">0.2001</span>    <span class="hljs-number">0.3613</span>    <span class="hljs-number">0.4191</span>    <span class="hljs-number">0.4359</span>   <span class="hljs-number">-0.5288</span>   <span class="hljs-number">-0.2359</span>   <span class="hljs-number">-0.2482</span>    <span class="hljs-number">0.0325</span>   <span class="hljs-number">-0.1290</span>    <span class="hljs-number">0.4688</span>   <span class="hljs-number">-0.6966</span>    <span class="hljs-number">0.2717</span>    <span class="hljs-number">0.0032</span>    <span class="hljs-number">0.4111</span>   <span class="hljs-number">-0.1323</span>   <span class="hljs-number">-0.0710</span>   <span class="hljs-number">-0.1781</span>    <span class="hljs-number">0.4665</span>   <span class="hljs-number">-0.2552</span>   <span class="hljs-number">-0.2215</span>    <span class="hljs-number">0.0281</span>   <span class="hljs-number">-0.5299</span>    <span class="hljs-number">0.4367</span>    <span class="hljs-number">0.5087</span>   <span class="hljs-number">-0.1960</span>    <span class="hljs-number">0.3411</span>    <span class="hljs-number">0.5152</span>   <span class="hljs-number">-0.1608</span>    <span class="hljs-number">0.5043</span>    <span class="hljs-number">0.4166</span>    <span class="hljs-number">0.1020</span>    <span class="hljs-number">0.1151</span>   <span class="hljs-number">-0.2373</span>    <span class="hljs-number">0.4482</span>   <span class="hljs-number">-0.0497</span>    <span class="hljs-number">0.0252</span>    <span class="hljs-number">0.2152</span>   <span class="hljs-number">-0.0557</span>   <span class="hljs-number">-0.6998</span>    <span class="hljs-number">0.5873</span>   <span class="hljs-number">-0.2350</span>   <span class="hljs-number">-0.2401</span>   <span class="hljs-number">-0.0024</span>   <span class="hljs-number">-0.4806</span>   <span class="hljs-number">-0.3998</span>    <span class="hljs-number">0.3266</span>   <span class="hljs-number">-0.1415</span>    <span class="hljs-number">0.3438</span>    <span class="hljs-number">0.5626</span>    <span class="hljs-number">0.2183</span>val =    <span class="hljs-number">0.0119</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.0489</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.0721</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.1662</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.5028</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">1.1819</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">1.9446</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">4.0716</span>newy =    <span class="hljs-number">4.0716</span>    <span class="hljs-number">1.9446</span>    <span class="hljs-number">1.1819</span>    <span class="hljs-number">0.5028</span>    <span class="hljs-number">0.1662</span>    <span class="hljs-number">0.0721</span>    <span class="hljs-number">0.0489</span>    <span class="hljs-number">0.0119</span>newrate =    <span class="hljs-number">0.5089</span>    <span class="hljs-number">0.2431</span>    <span class="hljs-number">0.1477</span>    <span class="hljs-number">0.0629</span>    <span class="hljs-number">0.0208</span>    <span class="hljs-number">0.0090</span>    <span class="hljs-number">0.0061</span>    <span class="hljs-number">0.0015</span></code></pre><br>由方差贡献率可知：0.5089+0.2431+0.1477&gt;0.8,因此7、6、5后三项作为主成分。<br>下图所示为特征向量值，所以7、6、5倒数3列为各省主成分。<br><pre><code class="hljs matlab">vec =    <span class="hljs-number">0.0109</span>    <span class="hljs-number">0.5539</span>    <span class="hljs-number">0.4080</span>   <span class="hljs-number">-0.1042</span>    <span class="hljs-number">0.0890</span>    <span class="hljs-number">0.2307</span>    <span class="hljs-number">0.6671</span>    <span class="hljs-number">0.0977</span>   <span class="hljs-number">-0.0771</span>   <span class="hljs-number">-0.3504</span>    <span class="hljs-number">0.3043</span>   <span class="hljs-number">-0.4476</span>   <span class="hljs-number">-0.4496</span>   <span class="hljs-number">-0.4534</span>    <span class="hljs-number">0.2001</span>    <span class="hljs-number">0.3613</span>    <span class="hljs-number">0.4191</span>    <span class="hljs-number">0.4359</span>   <span class="hljs-number">-0.5288</span>   <span class="hljs-number">-0.2359</span>   <span class="hljs-number">-0.2482</span>    <span class="hljs-number">0.0325</span>   <span class="hljs-number">-0.1290</span>    <span class="hljs-number">0.4688</span>   <span class="hljs-number">-0.6966</span>    <span class="hljs-number">0.2717</span>    <span class="hljs-number">0.0032</span>    <span class="hljs-number">0.4111</span>   <span class="hljs-number">-0.1323</span>   <span class="hljs-number">-0.0710</span>   <span class="hljs-number">-0.1781</span>    <span class="hljs-number">0.4665</span>   <span class="hljs-number">-0.2552</span>   <span class="hljs-number">-0.2215</span>    <span class="hljs-number">0.0281</span>   <span class="hljs-number">-0.5299</span>    <span class="hljs-number">0.4367</span>    <span class="hljs-number">0.5087</span>   <span class="hljs-number">-0.1960</span>    <span class="hljs-number">0.3411</span>    <span class="hljs-number">0.5152</span>   <span class="hljs-number">-0.1608</span>    <span class="hljs-number">0.5043</span>    <span class="hljs-number">0.4166</span>    <span class="hljs-number">0.1020</span>    <span class="hljs-number">0.1151</span>   <span class="hljs-number">-0.2373</span>    <span class="hljs-number">0.4482</span>   <span class="hljs-number">-0.0497</span>    <span class="hljs-number">0.0252</span>    <span class="hljs-number">0.2152</span>   <span class="hljs-number">-0.0557</span>   <span class="hljs-number">-0.6998</span>    <span class="hljs-number">0.5873</span>   <span class="hljs-number">-0.2350</span>   <span class="hljs-number">-0.2401</span>   <span class="hljs-number">-0.0024</span>   <span class="hljs-number">-0.4806</span>   <span class="hljs-number">-0.3998</span>    <span class="hljs-number">0.3266</span>   <span class="hljs-number">-0.1415</span>    <span class="hljs-number">0.3438</span>    <span class="hljs-number">0.5626</span>    <span class="hljs-number">0.2183</span></code></pre><br><pre><code class="hljs matlab"><span class="hljs-comment">%5.计算主成分得分</span>sco = z * vec<span class="hljs-comment">%6.建立排序指标，进行排序</span>nowsco = sco(:, <span class="hljs-keyword">end</span>) .* newrate(<span class="hljs-number">1</span>) + sco(:, <span class="hljs-keyword">end</span><span class="hljs-number">-1</span>) .* newrate(<span class="hljs-number">2</span>)+ sco(:, <span class="hljs-keyword">end</span><span class="hljs-number">-2</span>) .* newrate(<span class="hljs-number">3</span>)[a,x] = <span class="hljs-built_in">sort</span>(nowsco, <span class="hljs-string">&#x27;descend&#x27;</span>)</code></pre><br><pre><code class="hljs matlab"><span class="hljs-comment">%倒数第一列是第一主成分在30个城市中的得分，倒数第二列是是第二主成分在30个城市中的得分</span>sco =   <span class="hljs-number">-0.2671</span>    <span class="hljs-number">0.4404</span>   <span class="hljs-number">-0.1319</span>    <span class="hljs-number">0.7683</span>    <span class="hljs-number">0.0348</span>   <span class="hljs-number">-1.0019</span>   <span class="hljs-number">-0.8083</span>    <span class="hljs-number">3.1053</span>   <span class="hljs-number">-0.1212</span>   <span class="hljs-number">-0.0731</span>    <span class="hljs-number">0.1029</span>    <span class="hljs-number">0.5436</span>    <span class="hljs-number">0.9089</span>   <span class="hljs-number">-1.9800</span>   <span class="hljs-number">-0.7629</span>    <span class="hljs-number">2.6881</span>   <span class="hljs-number">-0.0113</span>    <span class="hljs-number">0.4556</span>   <span class="hljs-number">-0.3883</span>   <span class="hljs-number">-1.0661</span>    <span class="hljs-number">0.9795</span>    <span class="hljs-number">2.9656</span>   <span class="hljs-number">-1.0149</span>    <span class="hljs-number">3.3810</span>    <span class="hljs-number">0.0458</span>    <span class="hljs-number">0.1186</span>    <span class="hljs-number">0.2694</span>    <span class="hljs-number">0.6032</span>    <span class="hljs-number">0.2964</span>    <span class="hljs-number">0.8737</span>   <span class="hljs-number">-1.5556</span>    <span class="hljs-number">1.3791</span>    <span class="hljs-number">0.0503</span>    <span class="hljs-number">0.0518</span>    <span class="hljs-number">0.6655</span>    <span class="hljs-number">0.2457</span>   <span class="hljs-number">-0.0388</span>    <span class="hljs-number">1.0481</span>   <span class="hljs-number">-2.0285</span>    <span class="hljs-number">1.0424</span>   <span class="hljs-number">-0.2491</span>   <span class="hljs-number">-0.7849</span>    <span class="hljs-number">0.0103</span>   <span class="hljs-number">-0.2186</span>    <span class="hljs-number">0.6038</span>    <span class="hljs-number">1.4134</span>    <span class="hljs-number">0.4535</span>    <span class="hljs-number">3.2715</span>    <span class="hljs-number">0.2483</span>   <span class="hljs-number">-0.0634</span>    <span class="hljs-number">0.2053</span>    <span class="hljs-number">0.5152</span>    <span class="hljs-number">0.2555</span>   <span class="hljs-number">-0.0685</span>   <span class="hljs-number">-1.0577</span>    <span class="hljs-number">1.6799</span>    <span class="hljs-number">0.3040</span>   <span class="hljs-number">-0.2936</span>    <span class="hljs-number">0.0847</span>   <span class="hljs-number">-0.0270</span>    <span class="hljs-number">0.1158</span>    <span class="hljs-number">0.5102</span>   <span class="hljs-number">-0.2808</span>    <span class="hljs-number">2.5044</span>    <span class="hljs-number">0.0840</span>    <span class="hljs-number">0.0376</span>   <span class="hljs-number">-0.3266</span>   <span class="hljs-number">-0.4305</span>   <span class="hljs-number">-2.3921</span>   <span class="hljs-number">-1.8753</span>    <span class="hljs-number">0.8014</span>    <span class="hljs-number">5.5768</span>    <span class="hljs-number">0.0004</span>   <span class="hljs-number">-0.0170</span>    <span class="hljs-number">0.0486</span>    <span class="hljs-number">0.2251</span>   <span class="hljs-number">-0.0212</span>    <span class="hljs-number">0.6055</span>    <span class="hljs-number">3.1295</span>   <span class="hljs-number">-0.2001</span>   <span class="hljs-number">-0.0152</span>    <span class="hljs-number">0.1412</span>    <span class="hljs-number">0.3801</span>   <span class="hljs-number">-0.4242</span>    <span class="hljs-number">0.2755</span>   <span class="hljs-number">-0.7199</span>    <span class="hljs-number">1.4977</span>   <span class="hljs-number">-0.4861</span>    <span class="hljs-number">0.0839</span>    <span class="hljs-number">0.0399</span>   <span class="hljs-number">-0.4196</span>    <span class="hljs-number">0.1720</span>    <span class="hljs-number">1.0203</span>   <span class="hljs-number">-0.7362</span>    <span class="hljs-number">0.5886</span>   <span class="hljs-number">-0.9374</span>   <span class="hljs-number">-0.0532</span>    <span class="hljs-number">0.0089</span>    <span class="hljs-number">0.4601</span>   <span class="hljs-number">-0.6610</span>   <span class="hljs-number">-0.0587</span>   <span class="hljs-number">-0.9762</span>    <span class="hljs-number">0.3208</span>   <span class="hljs-number">-0.8409</span>    <span class="hljs-number">0.0016</span>    <span class="hljs-number">0.0192</span>   <span class="hljs-number">-0.1305</span>    <span class="hljs-number">0.0309</span>   <span class="hljs-number">-0.1090</span>    <span class="hljs-number">0.0185</span>   <span class="hljs-number">-0.4284</span>   <span class="hljs-number">-1.5195</span>    <span class="hljs-number">0.0368</span>   <span class="hljs-number">-0.0624</span>   <span class="hljs-number">-0.2698</span>    <span class="hljs-number">0.5473</span>    <span class="hljs-number">0.1708</span>    <span class="hljs-number">0.8670</span>    <span class="hljs-number">3.1543</span>   <span class="hljs-number">-0.2973</span>    <span class="hljs-number">0.0512</span>    <span class="hljs-number">0.0868</span>   <span class="hljs-number">-0.3433</span>    <span class="hljs-number">0.4549</span>    <span class="hljs-number">0.2526</span>    <span class="hljs-number">0.5363</span>    <span class="hljs-number">1.2403</span>   <span class="hljs-number">-1.0387</span>   <span class="hljs-number">-0.0414</span>   <span class="hljs-number">-0.1997</span>   <span class="hljs-number">-0.0449</span>    <span class="hljs-number">0.1098</span>   <span class="hljs-number">-0.6326</span>    <span class="hljs-number">0.6207</span>    <span class="hljs-number">0.7261</span>   <span class="hljs-number">-1.1425</span>   <span class="hljs-number">-0.0019</span>    <span class="hljs-number">0.0704</span>   <span class="hljs-number">-0.0080</span>    <span class="hljs-number">0.0072</span>   <span class="hljs-number">-0.0855</span>    <span class="hljs-number">0.0907</span>    <span class="hljs-number">0.3834</span>   <span class="hljs-number">-1.2070</span>    <span class="hljs-number">0.0062</span>    <span class="hljs-number">0.2360</span>    <span class="hljs-number">0.5092</span>   <span class="hljs-number">-0.4653</span>    <span class="hljs-number">0.7371</span>   <span class="hljs-number">-0.9719</span>    <span class="hljs-number">3.1392</span>    <span class="hljs-number">0.2452</span>   <span class="hljs-number">-0.0202</span>    <span class="hljs-number">0.1367</span>    <span class="hljs-number">0.0953</span>   <span class="hljs-number">-0.0901</span>   <span class="hljs-number">-0.3339</span>    <span class="hljs-number">0.1565</span>   <span class="hljs-number">-0.2945</span>   <span class="hljs-number">-1.5072</span>    <span class="hljs-number">0.0614</span>   <span class="hljs-number">-0.1975</span>   <span class="hljs-number">-0.3144</span>   <span class="hljs-number">-0.3866</span>    <span class="hljs-number">1.3292</span>   <span class="hljs-number">-2.1673</span>   <span class="hljs-number">-0.5809</span>   <span class="hljs-number">-0.9178</span>   <span class="hljs-number">-0.0205</span>    <span class="hljs-number">0.1694</span>    <span class="hljs-number">0.0782</span>    <span class="hljs-number">0.2735</span>   <span class="hljs-number">-0.6234</span>    <span class="hljs-number">1.1873</span>    <span class="hljs-number">1.3348</span>   <span class="hljs-number">-1.1501</span>   <span class="hljs-number">-0.0142</span>    <span class="hljs-number">0.1213</span>   <span class="hljs-number">-0.0579</span>    <span class="hljs-number">0.0199</span>   <span class="hljs-number">-0.4379</span>    <span class="hljs-number">0.3117</span>   <span class="hljs-number">-1.1431</span>   <span class="hljs-number">-1.9150</span>   <span class="hljs-number">-0.0636</span>   <span class="hljs-number">-0.1021</span>    <span class="hljs-number">0.0482</span>    <span class="hljs-number">0.0060</span>   <span class="hljs-number">-0.9963</span>    <span class="hljs-number">0.7430</span>   <span class="hljs-number">-0.5425</span>   <span class="hljs-number">-1.7106</span>    <span class="hljs-number">0.0281</span>    <span class="hljs-number">0.0692</span>   <span class="hljs-number">-0.1999</span>   <span class="hljs-number">-0.1376</span>    <span class="hljs-number">0.3650</span>   <span class="hljs-number">-0.7658</span>   <span class="hljs-number">-1.3861</span>   <span class="hljs-number">-1.7108</span>   <span class="hljs-number">-0.0311</span>   <span class="hljs-number">-0.0777</span>   <span class="hljs-number">-0.0733</span>    <span class="hljs-number">0.0158</span>   <span class="hljs-number">-0.5475</span>    <span class="hljs-number">0.3302</span>   <span class="hljs-number">-0.6233</span>   <span class="hljs-number">-1.6505</span>   <span class="hljs-number">-0.0028</span>   <span class="hljs-number">-0.0617</span>   <span class="hljs-number">-0.2341</span>    <span class="hljs-number">0.0926</span>   <span class="hljs-number">-0.2533</span>    <span class="hljs-number">0.1336</span>   <span class="hljs-number">-0.9374</span>   <span class="hljs-number">-1.7505</span>   <span class="hljs-number">-0.0382</span>   <span class="hljs-number">-0.0898</span>    <span class="hljs-number">0.0388</span>   <span class="hljs-number">-0.3045</span>   <span class="hljs-number">-0.3436</span>   <span class="hljs-number">-0.4329</span>   <span class="hljs-number">-1.3358</span>   <span class="hljs-number">-1.7028</span>   <span class="hljs-number">-0.0039</span>   <span class="hljs-number">-0.0719</span>   <span class="hljs-number">-0.1110</span>   <span class="hljs-number">-0.2239</span>    <span class="hljs-number">0.0702</span>   <span class="hljs-number">-0.6892</span>   <span class="hljs-number">-1.2226</span>   <span class="hljs-number">-1.6105</span>   <span class="hljs-number">-0.0471</span>   <span class="hljs-number">-0.1084</span>    <span class="hljs-number">0.0569</span>   <span class="hljs-number">-0.1955</span>   <span class="hljs-number">-0.5414</span>   <span class="hljs-number">-0.0271</span>   <span class="hljs-number">-0.7662</span>   <span class="hljs-number">-1.5784</span></code></pre><br>下面展示的为各个市按照上面计算得到的结果以及原数据排名。<br><pre><code class="hljs matlab">nowsco =    <span class="hljs-number">1.2360</span>    <span class="hljs-number">0.8902</span>    <span class="hljs-number">1.9122</span>    <span class="hljs-number">0.4528</span>    <span class="hljs-number">0.1923</span>    <span class="hljs-number">1.9841</span>    <span class="hljs-number">0.5877</span>    <span class="hljs-number">1.2817</span>    <span class="hljs-number">2.7561</span>    <span class="hljs-number">0.7483</span>    <span class="hljs-number">0.0103</span>   <span class="hljs-number">-0.4428</span>   <span class="hljs-number">-0.4942</span>   <span class="hljs-number">-0.8748</span>    <span class="hljs-number">0.7435</span>   <span class="hljs-number">-0.1479</span>   <span class="hljs-number">-0.3133</span>   <span class="hljs-number">-0.5077</span>    <span class="hljs-number">0.7443</span>   <span class="hljs-number">-0.8155</span>   <span class="hljs-number">-0.9285</span>   <span class="hljs-number">-0.0855</span>   <span class="hljs-number">-1.2065</span>   <span class="hljs-number">-0.8927</span>   <span class="hljs-number">-1.3208</span>   <span class="hljs-number">-0.9428</span>   <span class="hljs-number">-1.0990</span>   <span class="hljs-number">-1.2553</span>   <span class="hljs-number">-1.2187</span>   <span class="hljs-number">-0.9936</span>a =    <span class="hljs-number">2.7561</span>    <span class="hljs-number">1.9841</span>    <span class="hljs-number">1.9122</span>    <span class="hljs-number">1.2817</span>    <span class="hljs-number">1.2360</span>    <span class="hljs-number">0.8902</span>    <span class="hljs-number">0.7483</span>    <span class="hljs-number">0.7443</span>    <span class="hljs-number">0.7435</span>    <span class="hljs-number">0.5877</span>    <span class="hljs-number">0.4528</span>    <span class="hljs-number">0.1923</span>    <span class="hljs-number">0.0103</span>   <span class="hljs-number">-0.0855</span>   <span class="hljs-number">-0.1479</span>   <span class="hljs-number">-0.3133</span>   <span class="hljs-number">-0.4428</span>   <span class="hljs-number">-0.4942</span>   <span class="hljs-number">-0.5077</span>   <span class="hljs-number">-0.8155</span>   <span class="hljs-number">-0.8748</span>   <span class="hljs-number">-0.8927</span>   <span class="hljs-number">-0.9285</span>   <span class="hljs-number">-0.9428</span>   <span class="hljs-number">-0.9936</span>   <span class="hljs-number">-1.0990</span>   <span class="hljs-number">-1.2065</span>   <span class="hljs-number">-1.2187</span>   <span class="hljs-number">-1.2553</span>   <span class="hljs-number">-1.3208</span>x =     <span class="hljs-number">9</span>     <span class="hljs-number">6</span>     <span class="hljs-number">3</span>     <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span>    <span class="hljs-number">19</span>    <span class="hljs-number">15</span>     <span class="hljs-number">7</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span>    <span class="hljs-number">11</span>    <span class="hljs-number">22</span>    <span class="hljs-number">16</span>    <span class="hljs-number">17</span>    <span class="hljs-number">12</span>    <span class="hljs-number">13</span>    <span class="hljs-number">18</span>    <span class="hljs-number">20</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">21</span>    <span class="hljs-number">26</span>    <span class="hljs-number">30</span>    <span class="hljs-number">27</span>    <span class="hljs-number">23</span>    <span class="hljs-number">29</span>    <span class="hljs-number">28</span>    <span class="hljs-number">25</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>主成分分析</tag>
      
      <tag>标准化处理</tag>
      
      <tag>相关系数矩阵</tag>
      
      <tag>特征值</tag>
      
      <tag>特征向量</tag>
      
      <tag>主成分得分</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200805】</title>
    <link href="/2020/08/05/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200805%E3%80%91/"/>
    <url>/2020/08/05/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200805%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="通径系数"><a href="#通径系数" class="headerlink" title="通径系数"></a>通径系数</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>用湖北省油菜投入与产出的数据，计算油菜产量与物质费用投入、土地投入、劳动力投入的直接通径系数。</p><p>1.首先计算油菜产出y与各投入之间的简单相关系数</p><pre><code class="hljs matlab">clearclcA=xlsread(<span class="hljs-string">&#x27;youcai.xlsx&#x27;</span>,<span class="hljs-string">&#x27;B2:E14&#x27;</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">3</span>    xi=<span class="hljs-built_in">log</span>(A(:,<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>));    y=<span class="hljs-built_in">log</span>(A(:,<span class="hljs-number">1</span>));    [ry(<span class="hljs-built_in">i</span>),py(<span class="hljs-built_in">i</span>)]=corr(xi,y,<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;pearson&#x27;</span>);<span class="hljs-keyword">end</span>ry,py</code></pre><pre><code class="hljs matlab">ry =    <span class="hljs-number">0.9640</span>    <span class="hljs-number">0.9835</span>    <span class="hljs-number">0.8980</span>py =   <span class="hljs-number">1.0e-04</span> *    <span class="hljs-number">0.0011</span>    <span class="hljs-number">0.0000</span>    <span class="hljs-number">0.3076</span></code></pre><p>此处可以看到p1,p2,p3&lt;&lt;0.05，拒绝原假设，认为各投入都与油菜产出y相关。</p><p>2.计算所有自变量之间的相关系数</p><pre><code class="hljs matlab">A=xlsread(<span class="hljs-string">&#x27;youcai.xlsx&#x27;</span>,<span class="hljs-string">&#x27;B2:E14&#x27;</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">3</span>    xi=<span class="hljs-built_in">log</span>(A(:,<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>));    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">3</span>        xj=<span class="hljs-built_in">log</span>(A(:,<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>));        r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=corr(xi,xj,<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;pearson&#x27;</span>);    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>r</code></pre><pre><code class="hljs matlab">r =    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9565</span>    <span class="hljs-number">0.9267</span>    <span class="hljs-number">0.9565</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.9420</span>    <span class="hljs-number">0.9267</span>    <span class="hljs-number">0.9420</span>    <span class="hljs-number">1.0000</span></code></pre><p>3.建立通径方程</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129220448.png" alt=""></p><p>4.计算出直接通径系数<br><pre><code class="hljs matlab">p=inv(r)*ry&#x27;p =<span class="hljs-number">0.3751</span><span class="hljs-number">0.9438</span><span class="hljs-number">-0.3386</span></code></pre><br><span class="label label-primary">可以看出，湖北省油菜产出主要是面积的投入影响的，其次是物质费用投入的影响，湖北省油菜产量没有受到劳动力减少的影响。</span></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>相关系数</tag>
      
      <tag>通径系数</tag>
      
      <tag>简单相关系数</tag>
      
      <tag>通径方程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200804】</title>
    <link href="/2020/08/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200804%E3%80%91/"/>
    <url>/2020/08/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200804%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="单因素方差分析"><a href="#单因素方差分析" class="headerlink" title="单因素方差分析"></a>单因素方差分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215419.png" alt=""></p><p><span class="label label-primary">正态性检验</span></p><p>原假设为不同样品的电流是符合正态分布的。<br>备择假设为不同样品的电流是符合正态分布的。<br><pre><code class="hljs matlab">a=[<span class="hljs-number">1.7</span> <span class="hljs-number">2.1</span> <span class="hljs-number">1.5</span> <span class="hljs-number">1.9</span><span class="hljs-number">2.1</span> <span class="hljs-number">2.2</span> <span class="hljs-number">1.3</span> <span class="hljs-number">1.9</span><span class="hljs-number">2.2</span> <span class="hljs-number">2.0</span> <span class="hljs-number">1.8</span> <span class="hljs-number">2.2</span><span class="hljs-number">2.1</span> <span class="hljs-number">2.2</span> <span class="hljs-number">1.4</span> <span class="hljs-number">2.3</span><span class="hljs-number">1.9</span> <span class="hljs-number">2.1</span> <span class="hljs-number">1.7</span> <span class="hljs-number">2.0</span>];b=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span>];a=<span class="hljs-built_in">reshape</span>(a&#x27;,<span class="hljs-built_in">numel</span>(a),<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">5</span>    ai=a(b==<span class="hljs-built_in">i</span>);    alpha=<span class="hljs-number">0.05</span>;    [mui,sigmai]=normfit(ai);    <span class="hljs-built_in">pi</span>=normcdf(ai,mui,sigmai);    [h0(<span class="hljs-built_in">i</span>),p(<span class="hljs-built_in">i</span>)]=kstest(ai,[ai,<span class="hljs-built_in">pi</span>],alpha);<span class="hljs-keyword">end</span>h0,p</code></pre><br><pre><code class="hljs matlab">h0 =  <span class="hljs-number">1</span>×<span class="hljs-number">5</span> logical 数组   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>p =    <span class="hljs-number">0.9807</span>    <span class="hljs-number">0.8446</span>    <span class="hljs-number">0.8207</span>    <span class="hljs-number">0.6162</span>    <span class="hljs-number">0.9499</span></code></pre><br>h0均为0，接受原假设，即每个样本的电流均符合正态分布。</p><p><span class="label label-primary">方差齐性检验</span></p><p>原假设是5个样本电流数据服从方差相同的正态分布。<br>备择假设是服从方差不同的正态分布。<br><pre><code class="hljs matlab">[p,stats]=vartestn(a,b)</code></pre><br><pre><code class="hljs matlab">p =    <span class="hljs-number">0.5093</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215632.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215657.png" alt=""><br>p&gt;&gt;0.05,所以接受原假设，所以5个样本服从方差相同的正态分布。</p><p><span class="label label-primary">方差分析</span></p><p>原假设是没有显著差异，即$μ_1=μ_2=μ_3=μ_4=μ_5$。<br>备择假设时有显著差异。<br><pre><code class="hljs matlab">[p,<span class="hljs-built_in">table</span>,stats]=anova1(a,b)</code></pre><br><pre><code class="hljs matlab">p =    <span class="hljs-number">0.7882</span></code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215811.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215812.png" alt=""></p><p>p&gt;&gt;0.05,接受原假设，即没有显著差异。</p><p><span class="label label-primary">两两之间多重比较</span></p><pre><code class="hljs matlab">sta=multcompare(stats,<span class="hljs-string">&#x27;estimate&#x27;</span>,<span class="hljs-string">&#x27;column&#x27;</span>)</code></pre><pre><code class="hljs matlab">sta =    <span class="hljs-number">1.0000</span>    <span class="hljs-number">2.0000</span>   <span class="hljs-number">-0.7385</span>   <span class="hljs-number">-0.0750</span>    <span class="hljs-number">0.5885</span>    <span class="hljs-number">0.9965</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">3.0000</span>   <span class="hljs-number">-0.9135</span>   <span class="hljs-number">-0.2500</span>    <span class="hljs-number">0.4135</span>    <span class="hljs-number">0.7711</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">4.0000</span>   <span class="hljs-number">-0.8635</span>   <span class="hljs-number">-0.2000</span>    <span class="hljs-number">0.4635</span>    <span class="hljs-number">0.8805</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">5.0000</span>   <span class="hljs-number">-0.7885</span>   <span class="hljs-number">-0.1250</span>    <span class="hljs-number">0.5385</span>    <span class="hljs-number">0.9758</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">3.0000</span>   <span class="hljs-number">-0.8385</span>   <span class="hljs-number">-0.1750</span>    <span class="hljs-number">0.4885</span>    <span class="hljs-number">0.9221</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">4.0000</span>   <span class="hljs-number">-0.7885</span>   <span class="hljs-number">-0.1250</span>    <span class="hljs-number">0.5385</span>    <span class="hljs-number">0.9758</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">5.0000</span>   <span class="hljs-number">-0.7135</span>   <span class="hljs-number">-0.0500</span>    <span class="hljs-number">0.6135</span>    <span class="hljs-number">0.9993</span>    <span class="hljs-number">3.0000</span>    <span class="hljs-number">4.0000</span>   <span class="hljs-number">-0.6135</span>    <span class="hljs-number">0.0500</span>    <span class="hljs-number">0.7135</span>    <span class="hljs-number">0.9993</span>    <span class="hljs-number">3.0000</span>    <span class="hljs-number">5.0000</span>   <span class="hljs-number">-0.5385</span>    <span class="hljs-number">0.1250</span>    <span class="hljs-number">0.7885</span>    <span class="hljs-number">0.9758</span>    <span class="hljs-number">4.0000</span>    <span class="hljs-number">5.0000</span>   <span class="hljs-number">-0.5885</span>    <span class="hljs-number">0.0750</span>    <span class="hljs-number">0.7385</span>    <span class="hljs-number">0.9965</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129215928.gif" alt=""><br>经两两之间多重验证，各样本没有显著差异，即$μ_1=μ_2=μ_3=μ_4=μ_5$</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>单因素方差分析</tag>
      
      <tag>方差分析</tag>
      
      <tag>方差齐次性检验</tag>
      
      <tag>两两多重比较</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200803】</title>
    <link href="/2020/08/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200803%E3%80%91/"/>
    <url>/2020/08/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200803%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="两变量间的相关系数"><a href="#两变量间的相关系数" class="headerlink" title="两变量间的相关系数"></a>两变量间的相关系数</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>某地区1982~1996年国民生产总值与工商税收收入的数据如下:<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129214423.jpg" alt=""><br>计算两变量的相关系数</p><p><span class="label label-primary">K-S test正态检验</span></p><pre><code class="hljs matlab">x=[<span class="hljs-number">234</span> <span class="hljs-number">246</span> <span class="hljs-number">258</span> <span class="hljs-number">254</span> <span class="hljs-number">282</span> <span class="hljs-number">294</span> <span class="hljs-number">314</span> <span class="hljs-number">318</span>]y=[<span class="hljs-number">29</span> <span class="hljs-number">31</span> <span class="hljs-number">33</span> <span class="hljs-number">32</span> <span class="hljs-number">35</span> <span class="hljs-number">39</span> <span class="hljs-number">42</span> <span class="hljs-number">44</span>]x=x&#x27;y=y&#x27;[mu1,sigma1]=normfit(x)[mu2,sigma2]=normfit(y)p1=normcdf(x,mu1,sigma1)p2=normcdf(y,mu2,sigma2)h1=kstest(x,[x,p1])h2=kstest(y,[y,p2])</code></pre><pre><code class="hljs matlab">h1 =  logical   <span class="hljs-number">0</span>h2 =  logical   <span class="hljs-number">0</span></code></pre><p>返回值均为0，说明接受假设，两个序列均为正态序列。<br>但是分析该数据不是连续型数据，所以不能用Pearson检验，所以采用Spearman检验和Kendall检验。<br><span class="label label-primary"><br>  统计学中，连续数据，离散数据又称连续变量，离散变量。区分两种变量的方法为观察变量是否连续可分。连续变量，指在一定区间内可以任意取值，相邻的两个数值可作无限分割(即可取无限个值)。比如题主所说的身高，身高可以是183，也可以是183.1，也可以是183.111……1。离散变量，是指其数值只能用自然数、整数、计数单位等描述的数据。例如，职工个数(总不能是1.2个吧)，成绩A+等。<br>  要区分每月核心行为 1 次、 2次、3次，对于大多数产品意义不是很大。倒不如将连续数据转换为离散，比如 5 次以下归为一类，5 次以上归为另一类。更好的做法用「二八」划分，比如以累计贡献度达 80 % 的用户核心操作数值作为界线划分「高低」用户。即使 1、2、3次意义重大，那转为离散会更合适，每个数值能区分出不同意义。</span><br><strong>通过阅读相关文献，我发现可能是我理解错了qwq,也许这是连续性的数据！！！</strong></p><ul><li>读取数据</li><li>调用函数进行检验</li><li>~该数据不存在第三因素，所以我们不进行偏相关系数（qwq打脸）~</li></ul><pre><code class="hljs matlab">x=[<span class="hljs-number">234</span> <span class="hljs-number">246</span> <span class="hljs-number">258</span> <span class="hljs-number">254</span> <span class="hljs-number">282</span> <span class="hljs-number">294</span> <span class="hljs-number">314</span> <span class="hljs-number">318</span>]y=[<span class="hljs-number">29</span> <span class="hljs-number">31</span> <span class="hljs-number">33</span> <span class="hljs-number">32</span> <span class="hljs-number">35</span> <span class="hljs-number">39</span> <span class="hljs-number">42</span> <span class="hljs-number">44</span>]z=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]x=x&#x27;y=y&#x27;z=z&#x27;[r,p]=corr(x,y,<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;pearson&#x27;</span>) <span class="hljs-comment">%R检验（&lt;0.05）</span>[r,p]=partialcorr(x,y,z)[r,p]=corr(x,y,<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;spearman&#x27;</span>) <span class="hljs-comment">%T检验</span>[e,p]=corr(x,y,<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;kendall&#x27;</span>) <span class="hljs-comment">%正态检验</span></code></pre><pre><code class="hljs matlab">r =    <span class="hljs-number">0.9884</span>p =   <span class="hljs-number">3.8806e-06</span>r =    <span class="hljs-number">0.7921</span>p =    <span class="hljs-number">0.0337</span>r =     <span class="hljs-number">1</span>p =   <span class="hljs-number">4.9603e-05</span>e =     <span class="hljs-number">1</span>p =   <span class="hljs-number">4.9603e-05</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/306601010/answer/614207635">如何判断特征是连续的还是离散的?</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.jianshu.com/p/1030bf2d69a7">数据|连续还是离散</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>相关系数</tag>
      
      <tag>ks正态检验</tag>
      
      <tag>normtest</tag>
      
      <tag>R检验</tag>
      
      <tag>T检验</tag>
      
      <tag>正态检验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200802】</title>
    <link href="/2020/08/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200802%E3%80%91/"/>
    <url>/2020/08/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200802%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="随机序列的Markov链预测"><a href="#随机序列的Markov链预测" class="headerlink" title="随机序列的Markov链预测"></a>随机序列的Markov链预测</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>1978年至2004年城镇居民蔬菜人均消费数据，请给出城镇居民蔬菜消费量的长期趋势。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129213735.png" alt=""></p><h2 id="1-状态划分及构造"><a href="#1-状态划分及构造" class="headerlink" title="1.状态划分及构造"></a>1.状态划分及构造</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129213809.png" alt=""><br><pre><code class="hljs matlab">A=[<span class="hljs-number">130</span> <span class="hljs-number">137</span> <span class="hljs-number">143</span> <span class="hljs-number">152.34</span> <span class="hljs-number">159.08</span> <span class="hljs-number">165.48</span> <span class="hljs-number">149.04</span> <span class="hljs-number">144.36</span> <span class="hljs-number">148.32</span> <span class="hljs-number">142.58</span> <span class="hljs-number">147.02</span> <span class="hljs-number">144.56</span> <span class="hljs-number">138.70</span> <span class="hljs-number">132.18</span> <span class="hljs-number">124.91</span> <span class="hljs-number">120.64</span> <span class="hljs-number">120.74</span> <span class="hljs-number">116.47</span> <span class="hljs-number">118.51</span> <span class="hljs-number">113.34</span> <span class="hljs-number">113.76</span> <span class="hljs-number">114.94</span> <span class="hljs-number">114.74</span> <span class="hljs-number">115.86</span> <span class="hljs-number">116.52</span> <span class="hljs-number">118.34</span> <span class="hljs-number">122.30</span>];b=diff(A);A1=A(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-1</span>);tt=b./A1*<span class="hljs-number">100</span>;z=[<span class="hljs-number">-3</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span>];<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(tt)    <span class="hljs-keyword">if</span> tt(<span class="hljs-built_in">i</span>)&lt;z(<span class="hljs-number">1</span>)        aa(<span class="hljs-built_in">i</span>)=<span class="hljs-number">1</span>;    <span class="hljs-keyword">elseif</span> tt(<span class="hljs-built_in">i</span>)&lt;z(<span class="hljs-number">2</span>)        aa(<span class="hljs-built_in">i</span>)=<span class="hljs-number">2</span>;    <span class="hljs-keyword">elseif</span> tt(<span class="hljs-built_in">i</span>)&lt;z(<span class="hljs-number">3</span>)        aa(<span class="hljs-built_in">i</span>)=<span class="hljs-number">3</span>;    <span class="hljs-keyword">else</span>        aa(<span class="hljs-built_in">i</span>)=<span class="hljs-number">4</span>;    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span></code></pre></p><h2 id="2-计算各状态转移次数及转移概率"><a href="#2-计算各状态转移次数及转移概率" class="headerlink" title="2.计算各状态转移次数及转移概率"></a>2.计算各状态转移次数及转移概率</h2><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">4</span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">4</span>        k=[<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>];        c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-built_in">length</span>(strfind(aa,k));    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>ccs=sum(c,<span class="hljs-number">2</span>);p=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">4</span>    p(<span class="hljs-built_in">i</span>,:)=c(<span class="hljs-built_in">i</span>,:)./cs(<span class="hljs-built_in">i</span>);<span class="hljs-keyword">end</span>p</code></pre><pre><code class="hljs matlab">c =     <span class="hljs-number">4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>p =    <span class="hljs-number">0.4444</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.4444</span>    <span class="hljs-number">0.1111</span>    <span class="hljs-number">0.5000</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.5000</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.3750</span>    <span class="hljs-number">0.1250</span>    <span class="hljs-number">0.3750</span>    <span class="hljs-number">0.1250</span>    <span class="hljs-number">0.1667</span>    <span class="hljs-number">0.1667</span>         <span class="hljs-number">0</span>    <span class="hljs-number">0.6667</span></code></pre><h2 id="3-计算城镇居民年人均蔬菜消费量的长期趋势"><a href="#3-计算城镇居民年人均蔬菜消费量的长期趋势" class="headerlink" title="3.计算城镇居民年人均蔬菜消费量的长期趋势"></a>3.计算城镇居民年人均蔬菜消费量的长期趋势</h2><p><strong>(极限分布)</strong><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129214104.png" alt=""><br><pre><code class="hljs matlab">p1=p&#x27;-<span class="hljs-built_in">eye</span>(<span class="hljs-built_in">size</span>(p&#x27;));p2=[p1;<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)];b11=[<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>),<span class="hljs-number">1</span>]&#x27;;x=linsolve(p2,b11)</code></pre><br><pre><code class="hljs matlab">x =                      <span class="hljs-number">0.36</span>                      <span class="hljs-number">0.08</span>                      <span class="hljs-number">0.32</span>                      <span class="hljs-number">0.24</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/You_are_blind/article/details/107269665">随机序列的Markov链预测</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>预测</tag>
      
      <tag>随机序列</tag>
      
      <tag>Markov链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200731】</title>
    <link href="/2020/07/31/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200731%E3%80%91/"/>
    <url>/2020/07/31/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200731%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="灰色预测案例分析"><a href="#灰色预测案例分析" class="headerlink" title="灰色预测案例分析"></a>灰色预测案例分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129211843.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129211913.jpg" alt=""></p><p>问：预测下一次旱灾的出现的时间</p><h2 id="matlab求解"><a href="#matlab求解" class="headerlink" title="matlab求解"></a>matlab求解</h2><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)<span class="hljs-keyword">function</span>.m<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[x,a,b,c,error1,error2]</span>=<span class="hljs-title">GM11</span><span class="hljs-params">(x0,k)</span></span><span class="hljs-comment">%其中x0为输入序列,k为预测长度</span><span class="hljs-comment">%x为预测输出序列，c为后检验检验数</span><span class="hljs-comment">%error1为残差，error2为相对误差</span><span class="hljs-comment">%format long； %精度达到软件最大值</span>n=<span class="hljs-built_in">length</span>(x0);x1=[];x1(<span class="hljs-number">1</span>)=x0(<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:n    x1(<span class="hljs-built_in">i</span>)=x1(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+x0(<span class="hljs-built_in">i</span>); <span class="hljs-comment">%计算累加生成序列</span><span class="hljs-keyword">end</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<span class="hljs-number">-1</span> <span class="hljs-comment">%求紧邻矩阵</span>    B(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">-0.5</span>*(x1(<span class="hljs-built_in">i</span>)+x1(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>));    B(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">1</span>;    Y(<span class="hljs-built_in">i</span>)=x0(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>);<span class="hljs-keyword">end</span>alpha=(B&#x27;*B)^(<span class="hljs-number">-1</span>)*B&#x27;*Y&#x27;; <span class="hljs-comment">%做最小二乘估计求出参数</span>a=alpha(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);b=alpha(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);d=b/a;c=x1(<span class="hljs-number">1</span>)-d;x2(<span class="hljs-number">1</span>)=x0(<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<span class="hljs-number">-1</span>    x2(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)=c*<span class="hljs-built_in">exp</span>(-a*<span class="hljs-built_in">i</span>)+d;    x(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)=x2(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)-x2(<span class="hljs-built_in">i</span>);<span class="hljs-keyword">end</span> <span class="hljs-comment">%计算时间响应参数函数</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=(n+<span class="hljs-number">1</span>):(n+k)    x2(<span class="hljs-built_in">i</span>)=c*<span class="hljs-built_in">exp</span>(-a*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>))+d;    x(<span class="hljs-built_in">i</span>)=x2(<span class="hljs-built_in">i</span>)-x2(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>);<span class="hljs-keyword">end</span> <span class="hljs-comment">%计算预测序列</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n    error(<span class="hljs-built_in">i</span>)=x(<span class="hljs-built_in">i</span>)-x0(<span class="hljs-built_in">i</span>);    error1(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">abs</span>(error(<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%计算残差 &lt;20%</span>    error2(<span class="hljs-built_in">i</span>)=error1(<span class="hljs-built_in">i</span>)/x0(<span class="hljs-built_in">i</span>); <span class="hljs-comment">%计算相对误差</span><span class="hljs-keyword">end</span>c=std(error1)/std(x0); <span class="hljs-comment">%计算后验差检验数</span>(<span class="hljs-number">2</span>)matlab操作代码a=[<span class="hljs-number">390.6</span>,<span class="hljs-number">412</span>,<span class="hljs-number">320</span>,<span class="hljs-number">559.2</span>,<span class="hljs-number">380.8</span>,<span class="hljs-number">542.4</span>,<span class="hljs-number">553</span>,<span class="hljs-number">310</span>,<span class="hljs-number">561</span>,<span class="hljs-number">300</span>,<span class="hljs-number">632</span>,<span class="hljs-number">540</span>,<span class="hljs-number">406.2</span>,<span class="hljs-number">313.8</span>,<span class="hljs-number">576</span>,<span class="hljs-number">587.6</span>,<span class="hljs-number">318.5</span>]&#x27;; <span class="hljs-comment">%录入数据</span>k=<span class="hljs-number">1</span>;t0=<span class="hljs-built_in">find</span>(a&lt;=<span class="hljs-number">320</span>);[x,a,b,c,error1,error2]=GM11(t0,k) <span class="hljs-comment">%执行之前已经写好的灰色系统预测函数</span>x=<span class="hljs-built_in">fix</span>(x) <span class="hljs-comment">%因为是整数，根据实际情况我们进行高斯函数(取整)处理</span></code></pre><pre><code class="hljs matlab">结果展示：x =         <span class="hljs-number">0</span>    <span class="hljs-number">7.9896</span>   <span class="hljs-number">10.2960</span>   <span class="hljs-number">13.2681</span>   <span class="hljs-number">17.0983</span>   <span class="hljs-number">22.0340</span>a =   <span class="hljs-number">-0.2536</span>b =    <span class="hljs-number">6.2585</span>c =    <span class="hljs-number">0.2302</span> <span class="hljs-comment">% c&lt;0.35优秀</span>error1 =    <span class="hljs-number">3.0000</span>    <span class="hljs-number">0.0104</span>    <span class="hljs-number">0.2960</span>    <span class="hljs-number">0.7319</span>    <span class="hljs-number">0.0983</span>error2 =    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.0013</span>    <span class="hljs-number">0.0296</span>    <span class="hljs-number">0.0523</span>    <span class="hljs-number">0.0058</span>x =     <span class="hljs-number">0</span>     <span class="hljs-number">7</span>    <span class="hljs-number">10</span>    <span class="hljs-number">13</span>    <span class="hljs-number">17</span>    <span class="hljs-number">22</span></code></pre><h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><pre><code class="hljs matlab">n=<span class="hljs-built_in">length</span>(t0)<span class="hljs-built_in">plot</span>((<span class="hljs-number">1</span>:n),t0,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;Markersize&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-built_in">hold</span> on<span class="hljs-built_in">plot</span>((<span class="hljs-number">1</span>:n+<span class="hljs-number">1</span>),x)<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;原数据函数图像&#x27;</span>,<span class="hljs-string">&#x27;预测函数图像&#x27;</span>)xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)title(<span class="hljs-string">&#x27;原始数据与预测数据图像&#x27;</span>)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129212031.png" alt=""></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre><code class="hljs matlab">fprintf(<span class="hljs-string">&#x27;%s\n&#x27;</span>,<span class="hljs-string">&#x27;-----------------灰色系统预测值与实际值比较---------------&#x27;</span>)fprintf(<span class="hljs-string">&#x27;   %s              %s            %s            %s           %s\n&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;预测值&#x27;</span>,<span class="hljs-string">&#x27;实际值&#x27;</span>,<span class="hljs-string">&#x27;残差&#x27;</span>,<span class="hljs-string">&#x27;相对误差&#x27;</span>);fmt=<span class="hljs-string">&#x27;  %d  %20.4f  %15.4f  %15.4f  %13.4f\n&#x27;</span>;<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:n    fprintf(fmt,<span class="hljs-built_in">i</span>,x(<span class="hljs-built_in">i</span>),t0(<span class="hljs-built_in">i</span>),error1(<span class="hljs-built_in">i</span>),error2(<span class="hljs-built_in">i</span>));<span class="hljs-keyword">end</span></code></pre><h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><pre><code class="hljs matlab">-----------------灰色系统预测值与实际值比较---------------   n              预测值            实际值            残差           相对误差  <span class="hljs-number">2</span>                <span class="hljs-number">7.0000</span>           <span class="hljs-number">8.0000</span>           <span class="hljs-number">0.0104</span>         <span class="hljs-number">0.0013</span>  <span class="hljs-number">3</span>               <span class="hljs-number">10.0000</span>          <span class="hljs-number">10.0000</span>           <span class="hljs-number">0.2960</span>         <span class="hljs-number">0.0296</span>  <span class="hljs-number">4</span>               <span class="hljs-number">13.0000</span>          <span class="hljs-number">14.0000</span>           <span class="hljs-number">0.7319</span>         <span class="hljs-number">0.0523</span>  <span class="hljs-number">5</span>               <span class="hljs-number">17.0000</span>          <span class="hljs-number">17.0000</span>           <span class="hljs-number">0.0983</span>         <span class="hljs-number">0.0058</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>相对误差</tag>
      
      <tag>残差</tag>
      
      <tag>灰色系统</tag>
      
      <tag>预测</tag>
      
      <tag>后检验检验数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200730】</title>
    <link href="/2020/07/30/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200730%E3%80%91/"/>
    <url>/2020/07/30/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200730%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="灰色预测案例分析"><a href="#灰色预测案例分析" class="headerlink" title="灰色预测案例分析"></a>灰色预测案例分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>由1990-2001年某地蔬菜产量，建立模型预测该地2002年蔬菜产量，并对预测结果做检。<br><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)编写函数文件<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[x,c,error1,error2]</span>=<span class="hljs-title">GM11</span><span class="hljs-params">(x0,k)</span></span><span class="hljs-comment">%其中x0为输入序列,k为预测长度</span><span class="hljs-comment">%x为预测输出序列，c为后检验检验数</span><span class="hljs-comment">%error1为残差，error2为相对误差</span><span class="hljs-comment">%format long； %精度达到软件最大值</span>n=<span class="hljs-built_in">length</span>(x0);x1=[];x1(<span class="hljs-number">1</span>)=x0(<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:n    x1(<span class="hljs-built_in">i</span>)=x1(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+x0(<span class="hljs-built_in">i</span>); <span class="hljs-comment">%计算累加生成序列</span><span class="hljs-keyword">end</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<span class="hljs-number">-1</span> <span class="hljs-comment">%求紧邻矩阵</span>    B(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">-0.5</span>*(x1(<span class="hljs-built_in">i</span>)+x1(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>));    B(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">1</span>;    Y(<span class="hljs-built_in">i</span>)=x0(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>);<span class="hljs-keyword">end</span>alpha=(B&#x27;*B)^(<span class="hljs-number">-1</span>)*B&#x27;*Y&#x27;; <span class="hljs-comment">%做最小二乘估计求出参数</span>a=alpha(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);b=alpha(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);d=b/a;c=x1(<span class="hljs-number">1</span>)-d;x2(<span class="hljs-number">1</span>)=x0(<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<span class="hljs-number">-1</span>    x2(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)=c*<span class="hljs-built_in">exp</span>(-a*<span class="hljs-built_in">i</span>)+d;    x(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)=x2(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)-x2(<span class="hljs-built_in">i</span>);<span class="hljs-keyword">end</span> <span class="hljs-comment">%计算时间响应参数函数</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=(n+<span class="hljs-number">1</span>):(n+k)    x2(<span class="hljs-built_in">i</span>)=c*<span class="hljs-built_in">exp</span>(-a*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>))+d;    x(<span class="hljs-built_in">i</span>)=x2(<span class="hljs-built_in">i</span>)-x2(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>);<span class="hljs-keyword">end</span> <span class="hljs-comment">%计算预测序列</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n    error(<span class="hljs-built_in">i</span>)=x(<span class="hljs-built_in">i</span>)-x0(<span class="hljs-built_in">i</span>);    error1(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">abs</span>(error(<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%计算残差 &lt;20%</span>    error2(<span class="hljs-built_in">i</span>)=error1(<span class="hljs-built_in">i</span>)/x0(<span class="hljs-built_in">i</span>); <span class="hljs-comment">%计算相对误差</span><span class="hljs-keyword">end</span>c=std(error1)/std(x0); <span class="hljs-comment">%计算后验差检验数</span></code></pre><br><pre><code class="hljs matlab">(<span class="hljs-number">2</span>)matlab操作代码y=[<span class="hljs-number">19519</span>,<span class="hljs-number">19578</span>,<span class="hljs-number">19637</span>,<span class="hljs-number">19695</span>,<span class="hljs-number">16602</span>,<span class="hljs-number">25723</span>,<span class="hljs-number">30379</span>,<span class="hljs-number">34473</span>,<span class="hljs-number">38485</span>,<span class="hljs-number">40514</span>,<span class="hljs-number">42400</span>,<span class="hljs-number">48337</span>];k=<span class="hljs-number">1</span>;[X1,c1,e1,e2]=GM11(y,k)</code></pre><br><pre><code class="hljs matlab">结果展示-------------------------------------累加后序列--------------------------------x1 =  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">9</span>       <span class="hljs-number">19519</span>       <span class="hljs-number">39097</span>       <span class="hljs-number">58734</span>       <span class="hljs-number">78429</span>       <span class="hljs-number">95031</span>      <span class="hljs-number">120754</span>      <span class="hljs-number">151133</span>      <span class="hljs-number">185606</span>      <span class="hljs-number">224091</span>  列 <span class="hljs-number">10</span> 至 <span class="hljs-number">12</span>      <span class="hljs-number">264605</span>      <span class="hljs-number">307005</span>      <span class="hljs-number">355342</span></code></pre><br><pre><code class="hljs matlab">------------------------------------x1的紧邻矩阵----------------------------------B =   <span class="hljs-number">1.0e+05</span> *   <span class="hljs-number">-0.2931</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-0.4892</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-0.6858</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-0.8673</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-1.0789</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-1.3594</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-1.6837</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-2.0485</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-2.4435</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-2.8580</span>    <span class="hljs-number">0.0000</span>   <span class="hljs-number">-3.3117</span>    <span class="hljs-number">0.0000</span>Y =  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">9</span>       <span class="hljs-number">19578</span>       <span class="hljs-number">19637</span>       <span class="hljs-number">19695</span>       <span class="hljs-number">16602</span>       <span class="hljs-number">25723</span>       <span class="hljs-number">30379</span>       <span class="hljs-number">34473</span>       <span class="hljs-number">38485</span>       <span class="hljs-number">40514</span>  列 <span class="hljs-number">10</span> 至 <span class="hljs-number">11</span>       <span class="hljs-number">42400</span>       <span class="hljs-number">48337</span></code></pre><br><pre><code class="hljs matlab">----------------------------------最小二乘法的参数--------------------------a =   <span class="hljs-number">-0.1062</span>b =   <span class="hljs-number">1.4000e+04</span>&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=<span class="hljs-string">&quot;language-matlab line-numbers&quot;</span>&gt;-------------------------------------预测序列----------------------------------x =   <span class="hljs-number">1.0e+04</span> *  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">11</span>         <span class="hljs-number">0</span>    <span class="hljs-number">1.6958</span>    <span class="hljs-number">1.8858</span>    <span class="hljs-number">2.0971</span>    <span class="hljs-number">2.3321</span>    <span class="hljs-number">2.5934</span>    <span class="hljs-number">2.8840</span>    <span class="hljs-number">3.2072</span>    <span class="hljs-number">3.5666</span>    <span class="hljs-number">3.9662</span>    <span class="hljs-number">4.4107</span>  列 <span class="hljs-number">12</span> 至 <span class="hljs-number">13</span>    <span class="hljs-number">4.9049</span>    <span class="hljs-number">5.4546</span></code></pre><br><pre><code class="hljs matlab">--------------------------------------残差值-------------------------------------error1 =   <span class="hljs-number">1.0e+04</span> *  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">11</span>    <span class="hljs-number">1.9519</span>    <span class="hljs-number">0.2620</span>    <span class="hljs-number">0.0779</span>    <span class="hljs-number">0.1276</span>    <span class="hljs-number">0.6719</span>    <span class="hljs-number">0.0211</span>    <span class="hljs-number">0.1539</span>    <span class="hljs-number">0.2401</span>    <span class="hljs-number">0.2819</span>    <span class="hljs-number">0.0852</span>    <span class="hljs-number">0.1707</span>  列 <span class="hljs-number">12</span>    <span class="hljs-number">0.0712</span>-----------------------------------残差值相对误差--------------------------------error2 =  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">11</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.1338</span>    <span class="hljs-number">0.0397</span>    <span class="hljs-number">0.0648</span>    <span class="hljs-number">0.4047</span>    <span class="hljs-number">0.0082</span>    <span class="hljs-number">0.0506</span>    <span class="hljs-number">0.0696</span>    <span class="hljs-number">0.0733</span>    <span class="hljs-number">0.0210</span>    <span class="hljs-number">0.0403</span>  列 <span class="hljs-number">12</span>    <span class="hljs-number">0.0147</span>-----------------------------------后验差检验数--------------------------------c =    <span class="hljs-number">0.4879</span></code></pre></p><h3 id="列数据"><a href="#列数据" class="headerlink" title="列数据"></a>列数据</h3><pre><code class="hljs matlab">fprintf(<span class="hljs-string">&#x27;%s\n&#x27;</span>,<span class="hljs-string">&#x27;-----------------1991-2001年GM(1,1)灰色系统预测值与实际值比较---------------&#x27;</span>)fprintf(<span class="hljs-string">&#x27;   %s              %s            %s            %s           %s\n&#x27;</span>,<span class="hljs-string">&#x27;年份&#x27;</span>,<span class="hljs-string">&#x27;预测值&#x27;</span>,<span class="hljs-string">&#x27;实际值&#x27;</span>,<span class="hljs-string">&#x27;残差&#x27;</span>,<span class="hljs-string">&#x27;相对误差&#x27;</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:<span class="hljs-number">12</span>fmt=<span class="hljs-string">&#x27;  %d  %20.4f  %15.4f  %15.4f  %13.4f\n&#x27;</span>;fprintf(fmt,t(<span class="hljs-built_in">i</span>),X1(<span class="hljs-built_in">i</span>),y(<span class="hljs-built_in">i</span>),e1(<span class="hljs-built_in">i</span>),e2(<span class="hljs-built_in">i</span>));<span class="hljs-keyword">end</span></code></pre><pre><code class="hljs matlab">---------------<span class="hljs-number">-1991</span><span class="hljs-number">-2001</span>年GM(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)灰色系统预测值与实际值比较---------------   年份              预测值            实际值            残差           相对误差  <span class="hljs-number">1991</span>            <span class="hljs-number">16957.6939</span>       <span class="hljs-number">19578.0000</span>        <span class="hljs-number">2620.3061</span>         <span class="hljs-number">0.1338</span>  <span class="hljs-number">1992</span>            <span class="hljs-number">18857.9037</span>       <span class="hljs-number">19637.0000</span>         <span class="hljs-number">779.0963</span>         <span class="hljs-number">0.0397</span>  <span class="hljs-number">1993</span>            <span class="hljs-number">20971.0433</span>       <span class="hljs-number">19695.0000</span>        <span class="hljs-number">1276.0433</span>         <span class="hljs-number">0.0648</span>  <span class="hljs-number">1994</span>            <span class="hljs-number">23320.9727</span>       <span class="hljs-number">16602.0000</span>        <span class="hljs-number">6718.9727</span>         <span class="hljs-number">0.4047</span>  <span class="hljs-number">1995</span>            <span class="hljs-number">25934.2255</span>       <span class="hljs-number">25723.0000</span>         <span class="hljs-number">211.2255</span>         <span class="hljs-number">0.0082</span>  <span class="hljs-number">1996</span>            <span class="hljs-number">28840.3088</span>       <span class="hljs-number">30379.0000</span>        <span class="hljs-number">1538.6912</span>         <span class="hljs-number">0.0506</span>  <span class="hljs-number">1997</span>            <span class="hljs-number">32072.0359</span>       <span class="hljs-number">34473.0000</span>        <span class="hljs-number">2400.9641</span>         <span class="hljs-number">0.0696</span>  <span class="hljs-number">1998</span>            <span class="hljs-number">35665.8972</span>       <span class="hljs-number">38485.0000</span>        <span class="hljs-number">2819.1028</span>         <span class="hljs-number">0.0733</span>  <span class="hljs-number">1999</span>            <span class="hljs-number">39662.4718</span>       <span class="hljs-number">40514.0000</span>         <span class="hljs-number">851.5282</span>         <span class="hljs-number">0.0210</span>  <span class="hljs-number">2000</span>            <span class="hljs-number">44106.8863</span>       <span class="hljs-number">42400.0000</span>        <span class="hljs-number">1706.8863</span>         <span class="hljs-number">0.0403</span>  <span class="hljs-number">2001</span>            <span class="hljs-number">49049.3236</span>       <span class="hljs-number">48337.0000</span>         <span class="hljs-number">712.3236</span>         <span class="hljs-number">0.0147</span></code></pre><h3 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h3><pre><code class="hljs matlab">t=[<span class="hljs-number">1990</span> <span class="hljs-number">1991</span> <span class="hljs-number">1992</span> <span class="hljs-number">1993</span> <span class="hljs-number">1994</span> <span class="hljs-number">1995</span> <span class="hljs-number">1996</span> <span class="hljs-number">1997</span> <span class="hljs-number">1998</span> <span class="hljs-number">1999</span> <span class="hljs-number">2000</span> <span class="hljs-number">2001</span> <span class="hljs-number">2002</span>]<span class="hljs-built_in">plot</span>(t(<span class="hljs-number">1</span>:<span class="hljs-number">12</span>),y,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;Markersize&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-built_in">hold</span> on<span class="hljs-built_in">plot</span>(t,X1)<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;原数据函数图像&#x27;</span>,<span class="hljs-string">&#x27;预测函数图像&#x27;</span>)xlabel(<span class="hljs-string">&#x27;年份&#x27;</span>)ylabel(<span class="hljs-string">&#x27;蔬菜产量&#x27;</span>)title(<span class="hljs-string">&#x27;1990-2001年蔬菜产量&#x27;</span>)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129211024.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>灰色系统预测</tag>
      
      <tag>GM11</tag>
      
      <tag>后检验</tag>
      
      <tag>后验差检验数</tag>
      
      <tag>相对误差</tag>
      
      <tag>残差</tag>
      
      <tag>最小二乘法</tag>
      
      <tag>预测序列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200729】</title>
    <link href="/2020/07/29/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200729%E3%80%91/"/>
    <url>/2020/07/29/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200729%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129205734.png" alt=""></p><h3 id="1-画出x的图像以及其自相关图像"><a href="#1-画出x的图像以及其自相关图像" class="headerlink" title="1.画出x的图像以及其自相关图像"></a>1.画出x的图像以及其自相关图像</h3><pre><code class="hljs matlab">x=[<span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">14</span> <span class="hljs-number">8</span> <span class="hljs-number">17</span> <span class="hljs-number">14</span> <span class="hljs-number">18</span> <span class="hljs-number">3</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span> <span class="hljs-number">14</span> <span class="hljs-number">10</span> <span class="hljs-number">25</span> <span class="hljs-number">29</span> <span class="hljs-number">33</span> <span class="hljs-number">33</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> <span class="hljs-number">19</span> <span class="hljs-number">19</span> <span class="hljs-number">12</span> <span class="hljs-number">34</span> <span class="hljs-number">15</span> <span class="hljs-number">36</span> <span class="hljs-number">29</span> <span class="hljs-number">26</span> <span class="hljs-number">21</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span> <span class="hljs-number">13</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span> <span class="hljs-number">14</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">17</span> <span class="hljs-number">12</span> <span class="hljs-number">8</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">12</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span> <span class="hljs-number">16</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> ]subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-built_in">plot</span>(x)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)autocorr(x)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129205821.png" alt=""></p><h3 id="2-判断序列的平稳性以及纯随机性"><a href="#2-判断序列的平稳性以及纯随机性" class="headerlink" title="2.判断序列的平稳性以及纯随机性"></a>2.判断序列的平稳性以及纯随机性</h3><pre><code class="hljs matlab">x=[<span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">14</span> <span class="hljs-number">8</span> <span class="hljs-number">17</span> <span class="hljs-number">14</span> <span class="hljs-number">18</span> <span class="hljs-number">3</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span> <span class="hljs-number">14</span> <span class="hljs-number">10</span> <span class="hljs-number">25</span> <span class="hljs-number">29</span> <span class="hljs-number">33</span> <span class="hljs-number">33</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> <span class="hljs-number">19</span> <span class="hljs-number">19</span> <span class="hljs-number">12</span> <span class="hljs-number">34</span> <span class="hljs-number">15</span> <span class="hljs-number">36</span> <span class="hljs-number">29</span> <span class="hljs-number">26</span> <span class="hljs-number">21</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span> <span class="hljs-number">13</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span> <span class="hljs-number">14</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">17</span> <span class="hljs-number">12</span> <span class="hljs-number">8</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">12</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span> <span class="hljs-number">16</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> ][h,p,s,cv]=adftest(x)[h,p,s,cv]=lbqtest(x,<span class="hljs-string">&#x27;lags&#x27;</span>,[<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>])</code></pre><pre><code class="hljs matlab">结果是：h =  logical   <span class="hljs-number">1</span>p =    <span class="hljs-number">0.0418</span>s =   <span class="hljs-number">-2.0251</span>cv =   <span class="hljs-number">-1.9451</span>h =  <span class="hljs-number">1</span>×<span class="hljs-number">3</span> logical 数组   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>p =    <span class="hljs-number">0.4201</span>    <span class="hljs-number">0.4499</span>    <span class="hljs-number">0.5022</span>s =   <span class="hljs-number">-0.6227</span>   <span class="hljs-number">-0.5401</span>   <span class="hljs-number">-0.3961</span>cv =   <span class="hljs-number">-1.9456</span>   <span class="hljs-number">-1.9460</span>   <span class="hljs-number">-1.9465</span></code></pre><h3 id="3-结论"><a href="#3-结论" class="headerlink" title="3.结论"></a>3.结论</h3><h4 id="a-平稳性检验"><a href="#a-平稳性检验" class="headerlink" title="a.平稳性检验"></a>a.平稳性检验</h4><p>以上时序图给我们的信息非常明确，芝加哥海德公园内每28天发生的抢包案件数序列在1971年至1972年之间波动较大，自相关图显示自相关系数长期位于零轴的一边，这是具有单调趋势序列的典型特征，还有明显的递增趋势，所以它一定不是平稳序列。<br>由adf检验也可以得知此序列不是平稳序列。</p><h4 id="b-纯随机性检验（白噪声检验）"><a href="#b-纯随机性检验（白噪声检验）" class="headerlink" title="b.纯随机性检验（白噪声检验）"></a>b.纯随机性检验（白噪声检验）</h4><p>原假设:延迟期数小于或等于m期的序列值之间相互独立。<br>备择假设:延迟期数小于或等于m期的序列值之间有相关性。<br>纯随机性检验结果显示，在前6期、前12期和前18延迟下LBQ检验统计量的Р值都非常小(&lt;0.05)，所以我们可以判断该序列属于非白噪声序列。</p><h3 id="4-一阶差分后的时序图以及自相关图"><a href="#4-一阶差分后的时序图以及自相关图" class="headerlink" title="4.一阶差分后的时序图以及自相关图"></a>4.一阶差分后的时序图以及自相关图</h3><pre><code class="hljs matlab">x1=diff(x)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-built_in">plot</span>(x1)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)autocorr(x1)</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129210029.png" alt=""></p><h3 id="5-判断一阶差分后序列的平稳性以及纯随机性"><a href="#5-判断一阶差分后序列的平稳性以及纯随机性" class="headerlink" title="5.判断一阶差分后序列的平稳性以及纯随机性"></a>5.判断一阶差分后序列的平稳性以及纯随机性</h3><pre><code class="hljs matlab">[h,p,s,cv]=adftest(x1)[h,p,s,cv]=lbqtest(x1,<span class="hljs-string">&#x27;lags&#x27;</span>,[<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>])</code></pre><pre><code class="hljs matlab">结果是：h =  logical   <span class="hljs-number">1</span>p =   <span class="hljs-number">1.0000e-03</span>s =  <span class="hljs-number">-14.8262</span>cv =   <span class="hljs-number">-1.9452</span>h =  <span class="hljs-number">1</span>×<span class="hljs-number">3</span> logical 数组   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>p =    <span class="hljs-number">0.0000</span>    <span class="hljs-number">0.0003</span>    <span class="hljs-number">0.0032</span>s =   <span class="hljs-number">29.4582</span>   <span class="hljs-number">35.9434</span>   <span class="hljs-number">38.6135</span>cv =   <span class="hljs-number">12.5916</span>   <span class="hljs-number">21.0261</span>   <span class="hljs-number">28.8693</span></code></pre><h3 id="6-结论"><a href="#6-结论" class="headerlink" title="6.结论"></a>6.结论</h3><h4 id="c-平稳性检验"><a href="#c-平稳性检验" class="headerlink" title="c.平稳性检验"></a>c.平稳性检验</h4><p>以上时序图显示芝加哥海德公园内每28天发生的抢包案件数序<br>列始终围绕在10件附近随机波动，没有明显的趋势或周期，基本可<br>以视为平稳序列，自相关图显示该序列的自相关系数一直都比较小，<br>始终控制在2倍的标准差范围以内，故认为该序列是平稳序列。<br>由adf检验也可以得知此序列是平稳序列。</p><h4 id="d-纯随机性检验（白噪声检验）"><a href="#d-纯随机性检验（白噪声检验）" class="headerlink" title="d.纯随机性检验（白噪声检验）"></a>d.纯随机性检验（白噪声检验）</h4><p>纯随机性检验结果显示，在前6期、前12期和前18期延迟下LBQ检验统计量的Р值都非常小(&lt;0.05)，所以我们可以判断该序列属于非白噪声序列。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129210150.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wenku.baidu.com/view/f33964235fbfc77da369b1b9.html">检验时间序列的平稳性及纯随机性(白噪声序列检验)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间序列分析</tag>
      
      <tag>平稳性检验</tag>
      
      <tag>白噪声检验</tag>
      
      <tag>adftest</tag>
      
      <tag>lbqtest</tag>
      
      <tag>自相关</tag>
      
      <tag>随机性检验</tag>
      
      <tag>一阶差分</tag>
      
      <tag>autocoor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200727】</title>
    <link href="/2020/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200727%E3%80%91/"/>
    <url>/2020/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200727%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h1><p><a href="https://blog.csdn.net/jiejiexiao/article/details/79247115?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-4-79247115.nonecase">题目来源：csdn jiejiexiao</a></p><h2 id="matlab随机取样计算法解决非线性整数规划"><a href="#matlab随机取样计算法解决非线性整数规划" class="headerlink" title="matlab随机取样计算法解决非线性整数规划"></a>matlab随机取样计算法解决非线性整数规划</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129203834.jpg" alt=""></p><pre><code class="hljs matlab">matlab代码：(<span class="hljs-number">1</span>)编辑mengte.m文件<span class="hljs-comment">%目标函数f,约束条件g</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[f,g]</span> = <span class="hljs-title">mengte</span><span class="hljs-params">(x)</span></span>f = x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span> + x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span> + <span class="hljs-number">3</span>*x(<span class="hljs-number">3</span>)^<span class="hljs-number">2</span> + <span class="hljs-number">4</span>*x(<span class="hljs-number">4</span>)^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*x(<span class="hljs-number">5</span>)^<span class="hljs-number">2</span> - <span class="hljs-number">8</span>*x(<span class="hljs-number">1</span>) - <span class="hljs-number">2</span>*x(<span class="hljs-number">2</span>) - <span class="hljs-number">3</span>*x(<span class="hljs-number">3</span>) - x(<span class="hljs-number">4</span>) - <span class="hljs-number">2</span>*x(<span class="hljs-number">5</span>);g(<span class="hljs-number">1</span>) = sum(x) - <span class="hljs-number">400</span>;g(<span class="hljs-number">2</span>) = x(<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>*x(<span class="hljs-number">2</span>) + <span class="hljs-number">2</span>*x(<span class="hljs-number">3</span>) + x(<span class="hljs-number">4</span>) + <span class="hljs-number">6</span>*x(<span class="hljs-number">5</span>) - <span class="hljs-number">800</span>;g(<span class="hljs-number">3</span>) = <span class="hljs-number">2</span>*x(<span class="hljs-number">1</span>) + x(<span class="hljs-number">2</span>) + <span class="hljs-number">6</span>*x(<span class="hljs-number">3</span>) - <span class="hljs-number">200</span>;g(<span class="hljs-number">4</span>) = x(<span class="hljs-number">3</span>) + x(<span class="hljs-number">4</span>) + <span class="hljs-number">5</span>*x(<span class="hljs-number">5</span>) - <span class="hljs-number">200</span>;<span class="hljs-keyword">end</span>(<span class="hljs-number">2</span>)matlab执行代码<span class="hljs-comment">%非线性整数规划----枚举法--随机取样计算法--有误差</span><span class="hljs-comment">%tic和toc用来记录matlab命令执行的时间。</span><span class="hljs-comment">%整数问题最好用Lingo-----可每次将 p0 改为最大值</span>ticp0 = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-number">10</span>^<span class="hljs-number">5</span>    x = <span class="hljs-number">99</span> * <span class="hljs-built_in">rand</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>);                 <span class="hljs-comment">%0 &lt;= x &lt;=99</span>    x1 = <span class="hljs-built_in">floor</span>(x);  x2 = <span class="hljs-built_in">ceil</span>(x);       <span class="hljs-comment">%取整</span>    [f,g] = mengte(x1);    <span class="hljs-keyword">if</span> sum(g &lt;= <span class="hljs-number">0</span>) == <span class="hljs-number">4</span>        <span class="hljs-keyword">if</span> f &gt;= p0            x0 = x1;            p0 = f;        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">end</span>    [f,g] = mengte(x2);    <span class="hljs-keyword">if</span> sum(g &lt;= <span class="hljs-number">0</span>) == <span class="hljs-number">4</span>        <span class="hljs-keyword">if</span> f &gt;= p0;            x0 = x2;            p0 = f;        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>x0,p0toc</code></pre><p>答案是：<br><pre><code class="hljs matlab">x0 =    <span class="hljs-number">27</span>    <span class="hljs-number">98</span>     <span class="hljs-number">5</span>    <span class="hljs-number">99</span>     <span class="hljs-number">1</span>p0 =       <span class="hljs-number">49086</span>历时 <span class="hljs-number">0.770322</span> 秒。</code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>线性规划</tag>
      
      <tag>intlinprog</tag>
      
      <tag>0-1规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200726】</title>
    <link href="/2020/07/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200726%E3%80%91/"/>
    <url>/2020/07/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200726%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h1><h2 id="用0-1整数规划匈牙利算法求解指派问题"><a href="#用0-1整数规划匈牙利算法求解指派问题" class="headerlink" title="用0-1整数规划匈牙利算法求解指派问题"></a>用0-1整数规划匈牙利算法求解指派问题</h2><p><a href="https://blog.csdn.net/ouzuosong/article/details/52236152">题目来源：csdn lilard_ou</a></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129203413.png" alt=""></p><h3 id="根据题意，写出方程组以及约束条件"><a href="#根据题意，写出方程组以及约束条件" class="headerlink" title="根据题意，写出方程组以及约束条件"></a>根据题意，写出方程组以及约束条件</h3><p>$min \ z=25x<em>1+29x_2+31x_3+42x_4$<br>$+39x_5+38x_6+26x_7+20x_8$<br>$+34x_9+27x</em>{10}+28x<em>{11}+40x</em>{12}$<br>$+24x<em>{13}+42x</em>{14}+36x<em>{15}+23x</em>{16}$<br>$s.t. $</p><script type="math/tex; mode=display">x_1+x_2+x_3+x_4=1</script><script type="math/tex; mode=display">x_5+x_6+x_7+x_8=1</script><script type="math/tex; mode=display">x_9+x_{10}+x_{11}+x_{12}=1</script><script type="math/tex; mode=display">x_{13}+x_{14}+x_{15}+x_{16}=1</script><script type="math/tex; mode=display">x_1+x_5+x_9+x_{13}=1</script><script type="math/tex; mode=display">x_2+x_6+x_{10}+x_{14}=1</script><script type="math/tex; mode=display">x_3+x_7+x_{11}+x_{15}=1</script><script type="math/tex; mode=display">x_4+x_8+x_{12}+x_{16}=1</script><pre><code class="hljs matlab">matlab求解：c=[<span class="hljs-number">25</span> <span class="hljs-number">29</span> <span class="hljs-number">31</span> <span class="hljs-number">42</span><span class="hljs-number">39</span> <span class="hljs-number">38</span> <span class="hljs-number">26</span> <span class="hljs-number">20</span><span class="hljs-number">34</span> <span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">40</span><span class="hljs-number">24</span> <span class="hljs-number">42</span> <span class="hljs-number">36</span> <span class="hljs-number">23</span>];intcon=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]a=[];b=[];aeq=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>]beq=<span class="hljs-built_in">ones</span>(<span class="hljs-number">9</span>,<span class="hljs-number">1</span>);lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">16</span>,<span class="hljs-number">1</span>);ub=<span class="hljs-built_in">ones</span>(<span class="hljs-number">16</span>,<span class="hljs-number">1</span>);[x,val]=intlinprog(c,intcon,a,b,aeq,beq,lb,ub)</code></pre><pre><code class="hljs matlab">x =     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>val =   <span class="hljs-number">101</span></code></pre><p>执行结果大概是这样滴！！！</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129203558.png" alt=""></p><p>$val=25+26+27+23=101$</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>线性规划</tag>
      
      <tag>intlinprog</tag>
      
      <tag>0-1规划</tag>
      
      <tag>匈牙利算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Termux玩转Android手机</title>
    <link href="/2020/07/25/Linux/%E4%BD%BF%E7%94%A8Termux%E7%8E%A9%E8%BD%ACAndroid%E6%89%8B%E6%9C%BA/"/>
    <url>/2020/07/25/Linux/%E4%BD%BF%E7%94%A8Termux%E7%8E%A9%E8%BD%ACAndroid%E6%89%8B%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Termux是一款能够为Android手机提供Linux环境的应用。可以理解为自带pkg包管理器的终端，可以很方便的安装其他linux应用。假如用到更高级的功能，可能需要root。</p></blockquote><h2 id="1-安装Termux"><a href="#1-安装Termux" class="headerlink" title="1 安装Termux"></a>1 安装Termux</h2><h3 id="1-1-软件安装下载"><a href="#1-1-软件安装下载" class="headerlink" title="1.1 软件安装下载"></a>1.1 软件安装下载</h3><p>可以在Google Play Store或F-Droid上搜索Termux来安装，目前的版本是0.6X。</p><h3 id="1-2-安装sshd"><a href="#1-2-安装sshd" class="headerlink" title="1.2 安装sshd"></a>1.2 安装sshd</h3><p>打开 Termux 会出现一个类似Linux终端的界面。<br>由于sshd是包含在openssh包中的，因此我们首先需要在Termux中安装openssh</p><pre><code class="hljs shell">pkg install openssh</code></pre><p>安装好之后，我们需要手工启动 sshd</p><pre><code class="hljs shell">sshd</code></pre><p>需要指出的是, sshd 监听的是8022端口而不是22号端口，因此可以使用下面命令来验证ssh服务是否开启</p><pre><code class="hljs shell">ssh localhost -p 8022</code></pre><p>若要查看sshd的日志，则可以在Termux上执行<br><pre><code class="hljs shell">logcat -s &#x27;syslog:*&#x27;</code></pre></p><h2 id="2-安装anlinux"><a href="#2-安装anlinux" class="headerlink" title="2 安装anlinux"></a>2 安装anlinux</h2><pre><code>点击仪表盘安装系统、桌面以及ssh等。</code></pre><h3 id="2-1-根据提示选择安装ubuntu"><a href="#2-1-根据提示选择安装ubuntu" class="headerlink" title="2.1 根据提示选择安装ubuntu"></a>2.1 根据提示选择安装ubuntu</h3><pre><code class="hljs shell">pkg install wget openssl-tool proot -y &amp;&amp; hash -r &amp;&amp; wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh &amp;&amp; bash ubuntu.sh</code></pre><h3 id="2-2-查看linux版本"><a href="#2-2-查看linux版本" class="headerlink" title="2.2 查看linux版本"></a>2.2 查看linux版本</h3><pre><code class="hljs shell">cat /etc/issue</code></pre><pre><code class="hljs shell">Ubuntu 18.04 LTS</code></pre><h3 id="2-3-ubuntu安装ssh服务端"><a href="#2-3-ubuntu安装ssh服务端" class="headerlink" title="2.3 ubuntu安装ssh服务端"></a>2.3 ubuntu安装ssh服务端</h3><h4 id="2-3-1-安装ssh服务端"><a href="#2-3-1-安装ssh服务端" class="headerlink" title="2.3.1 安装ssh服务端"></a>2.3.1 安装ssh服务端</h4><pre><code class="hljs shell">sudo apt-get install openssh-server；</code></pre><h4 id="2-3-2-确认sshserver是否启动了"><a href="#2-3-2-确认sshserver是否启动了" class="headerlink" title="2.3.2 确认sshserver是否启动了"></a>2.3.2 确认sshserver是否启动了</h4><pre><code class="hljs shell">ps -e | grep ssh</code></pre><p>如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了</p><h4 id="2-3-3-启动sshserver"><a href="#2-3-3-启动sshserver" class="headerlink" title="2.3.3 启动sshserver"></a>2.3.3 启动sshserver</h4><pre><code class="hljs shell">/etc/init.d/ssh start</code></pre><h4 id="2-3-4-SSH配置（如果需要）"><a href="#2-3-4-SSH配置（如果需要）" class="headerlink" title="2.3.4 SSH配置（如果需要）"></a>2.3.4 SSH配置（如果需要）</h4><pre><code>修改配置文件/etc/ssh/sshd_config，这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号如32，然后重启服务</code></pre><h4 id="2-3-5-重启ssh-server"><a href="#2-3-5-重启ssh-server" class="headerlink" title="2.3.5 重启ssh server"></a>2.3.5 重启ssh server</h4><pre><code class="hljs shell">/etc/init.d/ssh restart</code></pre><h2 id="3-安装宝塔"><a href="#3-安装宝塔" class="headerlink" title="3 安装宝塔"></a>3 安装宝塔</h2><h3 id="3-1-安装宝塔linux面板"><a href="#3-1-安装宝塔linux面板" class="headerlink" title="3.1 安装宝塔linux面板"></a>3.1 安装宝塔linux面板</h3><h4 id="3-1-1-一键安装指令："><a href="#3-1-1-一键安装指令：" class="headerlink" title="3.1.1 一键安装指令："></a>3.1.1 一键安装指令：</h4><pre><code class="hljs shell">wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</code></pre><h4 id="3-1-2-启动："><a href="#3-1-2-启动：" class="headerlink" title="3.1.2 启动："></a>3.1.2 启动：</h4><pre><code class="hljs shell">/etc/init.d/bt start</code></pre><h4 id="3-1-3-查询默认用户名密码："><a href="#3-1-3-查询默认用户名密码：" class="headerlink" title="3.1.3 查询默认用户名密码："></a>3.1.3 查询默认用户名密码：</h4><pre><code class="hljs shell">/etc/init.d/bt default</code></pre><h4 id="3-1-4-查询当前面板端口："><a href="#3-1-4-查询当前面板端口：" class="headerlink" title="3.1.4 查询当前面板端口："></a>3.1.4 查询当前面板端口：</h4><pre><code class="hljs shell">cat /www/server/panel/data/port.pl</code></pre><h4 id="3-1-5登录面板前端页面："><a href="#3-1-5登录面板前端页面：" class="headerlink" title="3.1.5登录面板前端页面："></a>3.1.5登录面板前端页面：</h4><pre><code class="hljs html">http://ip：port（面板端口）</code></pre><h4 id="3-2-登录面板前端页面"><a href="#3-2-登录面板前端页面" class="headerlink" title="3.2 登录面板前端页面"></a>3.2 登录面板前端页面</h4><p>根据用户名密码登录进面板，直接推荐安装 nginx、mysql、php<br>在面板设置中修改默认的用户名密码</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_44241083/article/details/97293558">csdn:ubuntu安装宝塔linux面板、安装matomo</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.linuxprobe.com/termux-ssh-server.html">使用Termux把Android手机变成SSH服务器</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/cookiewu/p/9664062.html">Ubuntu下安装ssh与配置</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Android</tag>
      
      <tag>旧手机</tag>
      
      <tag>termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200725】</title>
    <link href="/2020/07/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200725%E3%80%91/"/>
    <url>/2020/07/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200725%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h1><h2 id="求下面这个非线性规划问题的最优值"><a href="#求下面这个非线性规划问题的最优值" class="headerlink" title="求下面这个非线性规划问题的最优值"></a>求下面这个非线性规划问题的最优值</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129203018.png" alt=""></p><pre><code class="hljs matlab">matlab求解：(<span class="hljs-number">1</span>)编写fun.m函数<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">fun</span><span class="hljs-params">(x)</span></span>f=x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+<span class="hljs-number">8</span>;<span class="hljs-keyword">end</span>(<span class="hljs-number">2</span>)编写nonlcon.m函数<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[c,ceq]</span>=<span class="hljs-title">nonlcon</span><span class="hljs-params">(x)</span></span>c=[-x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>+x(<span class="hljs-number">2</span>)];ceq=[-x(<span class="hljs-number">1</span>)-x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>+<span class="hljs-number">2</span>];<span class="hljs-keyword">end</span>(<span class="hljs-number">3</span>)matlab操作：x0=[<span class="hljs-number">0</span> <span class="hljs-number">0</span>];a=[];b=[];aeq=[];beq=[];lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);ub=[];[x,val]=fmincon(<span class="hljs-string">&#x27;fun&#x27;</span>,x0,a,b,aeq,beq,lb,ub,<span class="hljs-string">&#x27;nonlcon&#x27;</span>)</code></pre><pre><code class="hljs matlab">x =    <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.0000</span>val =   <span class="hljs-number">10.0000</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>非线性规划</tag>
      
      <tag>fmincon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200723】</title>
    <link href="/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200724%E3%80%91/"/>
    <url>/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200724%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="0-1-规划问题"><a href="#0-1-规划问题" class="headerlink" title="0-1 规划问题"></a>0-1 规划问题</h1><h2 id="用matlab求解下列-0-1-规划问题"><a href="#用matlab求解下列-0-1-规划问题" class="headerlink" title="用matlab求解下列 0-1 规划问题"></a>用matlab求解下列 0-1 规划问题</h2><script type="math/tex; mode=display">max \ z=6x_1+2x_2+3x_3+5x_4</script><p><strong>s.t.</strong></p><script type="math/tex; mode=display">3x_1-5x_2+x_3+6x_4\geq4</script><script type="math/tex; mode=display">2x_1+x_2+x_3-x_4\leq3</script><script type="math/tex; mode=display">x_1+2x_2+4x_3+5x_4\leq10</script><script type="math/tex; mode=display">x_i=0或1,i=1,2，3，4</script><pre><code class="hljs matlab">matlab代码：c=[<span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>]intcon=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]a=[<span class="hljs-number">-3</span> <span class="hljs-number">5</span> <span class="hljs-number">-1</span> <span class="hljs-number">-6</span>;<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">-1</span>;<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]b=[<span class="hljs-number">-4</span>;<span class="hljs-number">3</span>;<span class="hljs-number">10</span>]aeq=[]beq=[]lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)ub=<span class="hljs-built_in">ones</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)[x,val]=intlinprog(-c,intcon,a,b,aeq,beq,lb,ub)x,val=-val&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=<span class="hljs-string">&quot;language-matlab line-numbers&quot;</span>&gt;matlab运行结果：x =     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>val =    <span class="hljs-number">14</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>线性规划</tag>
      
      <tag>intlinprog</tag>
      
      <tag>0-1规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200728】</title>
    <link href="/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200728%E3%80%91/"/>
    <url>/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200728%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="时间序列分析的数据预处理"><a href="#时间序列分析的数据预处理" class="headerlink" title="时间序列分析的数据预处理"></a>时间序列分析的数据预处理</h1><p>做时间序列分析，之前需要做两个准备工作，即检查序列是否是平稳的，如果是平稳的，还要检查是否是白噪声。如果一个序列是平稳的，那么下面我们就要判断数据是否是白噪声，白噪声没有研究的意义。<br><span class="label label-primary"><br>  Ljung-Box test是对randomness的检验,或者说是对时间序列是否存在滞后相关的一种统计检验。说明对于滞后相关的检验，我们常常采用的方法还包括计算ACF和PCAF并观察其图像，但是无论是ACF还是PACF都仅仅考虑是否存在某一特定滞后阶数的相关。LB检验则是基于一系列滞后阶数，判断序列总体的相关性或者说随机性是否存在。<br>  作者：Yining<br>  来源：知乎</span></p><h1 id="例"><a href="#例" class="headerlink" title="例"></a>例</h1><p>检验1964年-1999年中国纱年产量序列的平稳性与纯随机性进行检验。<br><pre><code class="hljs matlab">(<span class="hljs-number">1</span>)画出数据图及自相关函数图像x=[<span class="hljs-number">97</span> <span class="hljs-number">130</span> <span class="hljs-number">156.5</span> <span class="hljs-number">135.2</span> <span class="hljs-number">137.7</span> <span class="hljs-number">180.5</span> <span class="hljs-number">205.2</span> <span class="hljs-number">190</span> <span class="hljs-number">188.6</span> <span class="hljs-number">196.7</span> <span class="hljs-number">180.3</span> <span class="hljs-number">210.8</span> <span class="hljs-number">196</span> <span class="hljs-number">223</span> <span class="hljs-number">238.2</span> <span class="hljs-number">263.5</span> <span class="hljs-number">292.6</span> <span class="hljs-number">317</span> <span class="hljs-number">335.4</span> <span class="hljs-number">327</span> <span class="hljs-number">321.9</span> <span class="hljs-number">353.5</span> <span class="hljs-number">397.8</span> <span class="hljs-number">436.8</span> <span class="hljs-number">465.7</span> <span class="hljs-number">476.7</span> <span class="hljs-number">462.6</span> <span class="hljs-number">640.8</span> <span class="hljs-number">501.8</span> <span class="hljs-number">501.5</span> <span class="hljs-number">489.5</span> <span class="hljs-number">542.3</span> <span class="hljs-number">512.2</span> <span class="hljs-number">559.8</span> <span class="hljs-number">542</span> <span class="hljs-number">567</span>]<span class="hljs-built_in">figure</span>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-built_in">plot</span>(x)title(<span class="hljs-string">&#x27;原始数据时序图&#x27;</span>)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)autocorr(x)title(<span class="hljs-string">&#x27;自相关函数图像&#x27;</span>)</code></pre></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129204326.png" alt=""></p><pre><code class="hljs matlab">(<span class="hljs-number">2</span>)稳定性检验[h,pval,s,cv]=adftest(x)</code></pre><pre><code class="hljs matlab">结果如下：h =  logical   <span class="hljs-number">0</span>pval =    <span class="hljs-number">0.9411</span>s =    <span class="hljs-number">1.2310</span>cv =   <span class="hljs-number">-1.9488</span></code></pre><pre><code class="hljs matlab">(<span class="hljs-number">3</span>)进行一次降阶并进行平稳性检验x=x&#x27;x1=diff(x)[h,pval,s,cv]=adftest(x1)</code></pre><pre><code class="hljs matlab">结果如下：h =  logical   <span class="hljs-number">1</span>pval =   <span class="hljs-number">1.0000e-03</span>s =   <span class="hljs-number">-8.3378</span>cv =   <span class="hljs-number">-1.9491</span></code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129204357.png" alt=""></p><pre><code class="hljs matlab">(<span class="hljs-number">4</span>)进行白噪声检验yanchi=[<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>][H,pval,s,cv]=lbqtest(xa,<span class="hljs-string">&#x27;lags&#x27;</span>,yanchi)</code></pre><pre><code class="hljs matlab">结果如下：H =  <span class="hljs-number">1</span>×<span class="hljs-number">3</span> logical 数组   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>pval =    <span class="hljs-number">0.0247</span>    <span class="hljs-number">0.1729</span>    <span class="hljs-number">0.3603</span>s =   <span class="hljs-number">14.4765</span>   <span class="hljs-number">16.4168</span>   <span class="hljs-number">19.5239</span>cv =   <span class="hljs-number">12.5916</span>   <span class="hljs-number">21.0261</span>   <span class="hljs-number">28.8693</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>自相关性</tag>
      
      <tag>时间序列分析</tag>
      
      <tag>数据预处理</tag>
      
      <tag>平稳性检验</tag>
      
      <tag>一维降阶</tag>
      
      <tag>白噪声检验</tag>
      
      <tag>autocorr</tag>
      
      <tag>adftest</tag>
      
      <tag>lbqtest</tag>
      
      <tag>diff</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200725】</title>
    <link href="/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200801%E3%80%91/"/>
    <url>/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200801%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="时间序列的ARIMA预测分析"><a href="#时间序列的ARIMA预测分析" class="headerlink" title="时间序列的ARIMA预测分析"></a>时间序列的ARIMA预测分析</h1><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>假设我们有这么一段数据（采样自移动公司某段时间的开户客户数目），预测接下来31天的开户客户数。</p><p><p class="note note-primary">  文件地址：  链接: https://pan.baidu.com/s/1RS-x1HTQLUU1IF5g3Yesdw  提取码: xbyt</p><br>在这里，我们把时间序列数据利用Cramer分解定理将其分解为以下四项：<br><pre><code class="hljs matlab">真实数据=趋势项+周期项+信息传递项+白噪声项趋势性：例如随时间变化的一次函数/多次函数/幂函数趋势等周期项：周期规律信息传递项：白噪声项：作为残差</code></pre></p><h2 id="1-观测数据（均值，周期等）"><a href="#1-观测数据（均值，周期等）" class="headerlink" title="1.观测数据（均值，周期等）"></a>1.观测数据（均值，周期等）</h2><ul><li>读取数据</li><li>绘制数据图像</li><li>绘制自相关图像</li></ul><pre><code class="hljs matlab">x0=xlsread(<span class="hljs-string">&#x27;移动通知户开户数.xlsx&#x27;</span>,<span class="hljs-string">&#x27;B2:B732&#x27;</span>);n=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(x0);subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<span class="hljs-built_in">plot</span>(n,x0);title(<span class="hljs-string">&#x27;原始数据图像&#x27;</span>);<span class="hljs-built_in">hold</span> on;subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);autocorr(x0);title(<span class="hljs-string">&#x27;自相关图&#x27;</span>);</code></pre><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129212617.png" alt=""></p><h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. 数据预处理</h2><ul><li>去周期/趋势</li><li>绘制数据图像</li><li>绘制自相关图像</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129212715.png" alt=""></p><p>如图所示我们可以看到周期大约是30或31，由此我们也可以推测该数据是一个来自每天的开户统计数据。<br><pre><code class="hljs matlab">s=<span class="hljs-number">31</span>; <span class="hljs-comment">%周期s=31</span>n=<span class="hljs-number">31</span>; <span class="hljs-comment">%预报数据个数</span>m1=<span class="hljs-built_in">length</span>(x0)<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=s+<span class="hljs-number">1</span>:m1    y(<span class="hljs-built_in">i</span>-s)=x0(<span class="hljs-built_in">i</span>)-x0(<span class="hljs-built_in">i</span>-s);<span class="hljs-keyword">end</span>x1=diff(y)m2=<span class="hljs-built_in">length</span>(x1)subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-built_in">plot</span>(<span class="hljs-number">1</span>:m2,x1)title(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">hold</span> onsubplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)autocorr(x1)</code></pre><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201129212755.png" alt=""></p><p><span class="label label-primary">adf检验处理后的数据平稳</span></p><pre><code class="hljs matlab">[h1,p1,adf,ljz]=adftest(x1)h1 =  logical   <span class="hljs-number">1</span>p1 =   <span class="hljs-number">1.0000e-03</span>adf =  <span class="hljs-number">-47.5009</span>ljz =   <span class="hljs-number">-1.9413</span></code></pre><p>结果表示一阶31步后的数据是平稳的。</p><h2 id="3-白噪声检验"><a href="#3-白噪声检验" class="headerlink" title="3. 白噪声检验"></a>3. 白噪声检验</h2><pre><code class="hljs matlab">yanchi=[<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>];[H,pValue,Qstat,CriticalValue]=lbqtest(x1,<span class="hljs-string">&#x27;lags&#x27;</span>,yanchi);fprintf(<span class="hljs-string">&#x27;%15s%15s%15s&#x27;</span>,<span class="hljs-string">&#x27;延迟阶数&#x27;</span>,<span class="hljs-string">&#x27;卡方统计量&#x27;</span>,<span class="hljs-string">&#x27;p值&#x27;</span>);fprintf(<span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(yanchi)    fprintf(<span class="hljs-string">&#x27;%18f%19f%19f&#x27;</span>,yanchi(<span class="hljs-built_in">i</span>),Qstat(<span class="hljs-built_in">i</span>),pValue(<span class="hljs-built_in">i</span>));    fprintf(<span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-keyword">end</span>           延迟阶数          卡方统计量             p值          <span class="hljs-number">6.000000</span>         <span class="hljs-number">200.496085</span>           <span class="hljs-number">0.000000</span>         <span class="hljs-number">12.000000</span>         <span class="hljs-number">209.963846</span>           <span class="hljs-number">0.000000</span>         <span class="hljs-number">18.000000</span>         <span class="hljs-number">235.502676</span>           <span class="hljs-number">0.000000</span></code></pre><p>p&lt;0.1说明数据不是白噪声,可以进行aeima模型。</p><h2 id="4-模型检验"><a href="#4-模型检验" class="headerlink" title="4. 模型检验"></a>4. 模型检验</h2><ul><li>aic</li><li>bic</li></ul><pre><code class="hljs matlab">x1=x1&#x27;;LOGL=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">%Initialize</span>PQ=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<span class="hljs-keyword">for</span> p=<span class="hljs-number">0</span>:<span class="hljs-number">5</span>    <span class="hljs-keyword">for</span> q=<span class="hljs-number">0</span>:<span class="hljs-number">5</span>        model=arima(p,<span class="hljs-number">0</span>,q); <span class="hljs-comment">%指定模型结构</span>        [fit,~,logL]=estimate(model,x1);LOGL(p+<span class="hljs-number">1</span>,q+<span class="hljs-number">1</span>)=logL;        PQ(p+<span class="hljs-number">1</span>,q+<span class="hljs-number">1</span>)=p+q; <span class="hljs-comment">%计算拟合参数的个数</span>    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>LOGL=<span class="hljs-built_in">reshape</span>(LOGL,<span class="hljs-number">36</span>,<span class="hljs-number">1</span>);PQ=<span class="hljs-built_in">reshape</span>(PQ,<span class="hljs-number">36</span>,<span class="hljs-number">1</span>);[aic,bic]=aicbic(LOGL,PQ+<span class="hljs-number">1</span>,m2);fprintf(<span class="hljs-string">&#x27;AIC为：\n&#x27;</span>);<span class="hljs-comment">%显示计算结果</span><span class="hljs-built_in">reshape</span>(aic,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">%储存36个模型AIC的值</span>fprintf(<span class="hljs-string">&#x27;BIC为: \n&#x27;</span>);<span class="hljs-built_in">reshape</span>(bic,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">%储存36个模型BIC的值</span></code></pre><pre><code class="hljs matlab">AIC为：<span class="hljs-built_in">ans</span> =   <span class="hljs-number">1.0e+04</span> *    <span class="hljs-number">1.5207</span>    <span class="hljs-number">1.4932</span>    <span class="hljs-number">1.4859</span>    <span class="hljs-number">1.4859</span>    <span class="hljs-number">1.4859</span>    <span class="hljs-number">1.4861</span>    <span class="hljs-number">1.4980</span>    <span class="hljs-number">1.4858</span>    <span class="hljs-number">1.4859</span>    <span class="hljs-number">1.4843</span>    <span class="hljs-number">1.4843</span>    <span class="hljs-number">1.4864</span>    <span class="hljs-number">1.4917</span>    <span class="hljs-number">1.4858</span>    <span class="hljs-number">1.4850</span>    <span class="hljs-number">1.4840</span>    <span class="hljs-number">1.4851</span>    <span class="hljs-number">1.4844</span>    <span class="hljs-number">1.4892</span>    <span class="hljs-number">1.4858</span>    <span class="hljs-number">1.4862</span>    <span class="hljs-number">1.4852</span>    <span class="hljs-number">1.4839</span>    <span class="hljs-number">1.4843</span>    <span class="hljs-number">1.4876</span>    <span class="hljs-number">1.4846</span>    <span class="hljs-number">1.4862</span>    <span class="hljs-number">1.4844</span>    <span class="hljs-number">1.4841</span>    <span class="hljs-number">1.4841</span>    <span class="hljs-number">1.4873</span>    <span class="hljs-number">1.4850</span>    <span class="hljs-number">1.4846</span>    <span class="hljs-number">1.4845</span>    <span class="hljs-number">1.4836</span>    <span class="hljs-number">1.4833</span>BIC为:<span class="hljs-built_in">ans</span> =   <span class="hljs-number">1.0e+04</span> *    <span class="hljs-number">1.5211</span>    <span class="hljs-number">1.4942</span>    <span class="hljs-number">1.4873</span>    <span class="hljs-number">1.4877</span>    <span class="hljs-number">1.4882</span>    <span class="hljs-number">1.4889</span>    <span class="hljs-number">1.4989</span>    <span class="hljs-number">1.4872</span>    <span class="hljs-number">1.4878</span>    <span class="hljs-number">1.4865</span>    <span class="hljs-number">1.4870</span>    <span class="hljs-number">1.4896</span>    <span class="hljs-number">1.4931</span>    <span class="hljs-number">1.4877</span>    <span class="hljs-number">1.4872</span>    <span class="hljs-number">1.4867</span>    <span class="hljs-number">1.4883</span>    <span class="hljs-number">1.4880</span>    <span class="hljs-number">1.4910</span>    <span class="hljs-number">1.4881</span>    <span class="hljs-number">1.4889</span>    <span class="hljs-number">1.4884</span>    <span class="hljs-number">1.4876</span>    <span class="hljs-number">1.4883</span>    <span class="hljs-number">1.4899</span>    <span class="hljs-number">1.4873</span>    <span class="hljs-number">1.4894</span>    <span class="hljs-number">1.4880</span>    <span class="hljs-number">1.4882</span>    <span class="hljs-number">1.4887</span>    <span class="hljs-number">1.4901</span>    <span class="hljs-number">1.4882</span>    <span class="hljs-number">1.4883</span>    <span class="hljs-number">1.4886</span>    <span class="hljs-number">1.4882</span>    <span class="hljs-number">1.4883</span></code></pre><p>寻找使AIC\BIC值最小的p值和q值（p、q值越小越好）<br>如果数值相同可尽量选择阶数较小。<br>p=q=5</p><h2 id="5-模型估计"><a href="#5-模型估计" class="headerlink" title="5. 模型估计"></a>5. 模型估计</h2><pre><code class="hljs matlab">p=input(<span class="hljs-string">&#x27;输入阶数p=&#x27;</span>);q=input(<span class="hljs-string">&#x27;输入阶数q=&#x27;</span>);model=arima(p,<span class="hljs-number">0</span>,q);  <span class="hljs-comment">%指定模型的结构</span>m=estimate(model,x1);  <span class="hljs-comment">%拟合参数</span></code></pre><pre><code class="hljs matlab">ARIMA(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) Model (Gaussian Distribution):                  Value       StandardError    TStatistic      PValue                __________    _____________    __________    __________    Constant      <span class="hljs-number">-0.13876</span>         <span class="hljs-number">5.2153</span>       <span class="hljs-number">-0.026606</span>       <span class="hljs-number">0.97877</span>    AR&#123;<span class="hljs-number">1</span>&#125;         <span class="hljs-number">-0.62756</span>         <span class="hljs-number">0.2344</span>         <span class="hljs-number">-2.6773</span>     <span class="hljs-number">0.0074222</span>    AR&#123;<span class="hljs-number">2</span>&#125;          <span class="hljs-number">0.63226</span>        <span class="hljs-number">0.23509</span>          <span class="hljs-number">2.6894</span>     <span class="hljs-number">0.0071576</span>    AR&#123;<span class="hljs-number">3</span>&#125;          <span class="hljs-number">0.45155</span>        <span class="hljs-number">0.16781</span>          <span class="hljs-number">2.6909</span>     <span class="hljs-number">0.0071264</span>    AR&#123;<span class="hljs-number">4</span>&#125;         <span class="hljs-number">-0.21596</span>        <span class="hljs-number">0.23391</span>        <span class="hljs-number">-0.92326</span>       <span class="hljs-number">0.35587</span>    AR&#123;<span class="hljs-number">5</span>&#125;          <span class="hljs-number">0.14475</span>       <span class="hljs-number">0.055125</span>          <span class="hljs-number">2.6259</span>     <span class="hljs-number">0.0086427</span>    MA&#123;<span class="hljs-number">1</span>&#125;         <span class="hljs-number">-0.16113</span>         <span class="hljs-number">0.2338</span>        <span class="hljs-number">-0.68919</span>        <span class="hljs-number">0.4907</span>    MA&#123;<span class="hljs-number">2</span>&#125;          <span class="hljs-number">-1.1618</span>       <span class="hljs-number">0.073341</span>         <span class="hljs-number">-15.841</span>    <span class="hljs-number">1.6094e-56</span>    MA&#123;<span class="hljs-number">3</span>&#125;         <span class="hljs-number">0.080585</span>         <span class="hljs-number">0.3241</span>         <span class="hljs-number">0.24864</span>       <span class="hljs-number">0.80364</span>    MA&#123;<span class="hljs-number">4</span>&#125;          <span class="hljs-number">0.64061</span>        <span class="hljs-number">0.12254</span>          <span class="hljs-number">5.2276</span>    <span class="hljs-number">1.7168e-07</span>    MA&#123;<span class="hljs-number">5</span>&#125;         <span class="hljs-number">-0.39824</span>        <span class="hljs-number">0.17684</span>          <span class="hljs-number">-2.252</span>       <span class="hljs-number">0.02432</span>    Variance    <span class="hljs-number">1.0281e+08</span>     <span class="hljs-number">1.3326e-06</span>      <span class="hljs-number">7.7147e+13</span>             <span class="hljs-number">0</span></code></pre><h2 id="6-模型检验"><a href="#6-模型检验" class="headerlink" title="6. 模型检验"></a>6. 模型检验</h2><pre><code class="hljs matlab">z=iddata(x1);ml1=armax(z,[p,q]);e=resid(ml1,z);  <span class="hljs-comment">%拟合做残差分析</span>[H,pValue,Qstat,CriticalValue]=lbqtest(e.OutputData,<span class="hljs-string">&#x27;lags&#x27;</span>,<span class="hljs-number">6</span>)</code></pre><pre><code class="hljs matlab">H =  logical   <span class="hljs-number">0</span>pValue =    <span class="hljs-number">0.9795</span>Qstat =    <span class="hljs-number">1.1455</span>CriticalValue =   <span class="hljs-number">12.5916</span></code></pre><p>说明残差是白噪声序列。</p><h2 id="7-预测"><a href="#7-预测" class="headerlink" title="7. 预测"></a>7. 预测</h2><pre><code class="hljs matlab">[yf,ymse]=forecast(m,n,<span class="hljs-string">&#x27;Y0&#x27;</span>,x1);yhat=y(<span class="hljs-keyword">end</span>)+cumsum(yf);  <span class="hljs-comment">%求y的预报值</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n    x0(m1+<span class="hljs-built_in">j</span>)=yhat(<span class="hljs-built_in">j</span>)+x0(m1+<span class="hljs-built_in">j</span>-s);  <span class="hljs-comment">%求x的预测值</span><span class="hljs-keyword">end</span>xhat=x0(m1+<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span>)</code></pre><pre><code class="hljs matlab">xhat =   <span class="hljs-number">1.0e+04</span> *    <span class="hljs-number">9.4432</span>    <span class="hljs-number">6.1221</span>    <span class="hljs-number">5.4381</span>    <span class="hljs-number">4.6014</span>    <span class="hljs-number">4.6824</span>    <span class="hljs-number">4.3914</span>    <span class="hljs-number">3.7724</span>    <span class="hljs-number">4.0716</span>    <span class="hljs-number">4.1337</span>    <span class="hljs-number">4.0116</span>    <span class="hljs-number">3.8555</span>    <span class="hljs-number">3.7977</span>    <span class="hljs-number">3.8511</span>    <span class="hljs-number">3.2243</span>    <span class="hljs-number">3.4339</span>    <span class="hljs-number">3.4500</span>    <span class="hljs-number">4.0557</span>    <span class="hljs-number">3.9356</span>    <span class="hljs-number">3.6604</span>    <span class="hljs-number">3.6947</span>    <span class="hljs-number">3.2538</span>    <span class="hljs-number">3.4977</span>    <span class="hljs-number">3.6063</span>    <span class="hljs-number">3.8183</span>    <span class="hljs-number">3.5776</span>    <span class="hljs-number">3.9540</span>    <span class="hljs-number">3.9762</span>    <span class="hljs-number">3.5320</span>    <span class="hljs-number">3.8284</span>    <span class="hljs-number">4.2821</span>    <span class="hljs-number">4.3404</span></code></pre><p>这就是接下来31天的预测客户数。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>数据预处理</tag>
      
      <tag>白噪声检验</tag>
      
      <tag>预测</tag>
      
      <tag>时间序列</tag>
      
      <tag>ARIMA</tag>
      
      <tag>读取数据</tag>
      
      <tag>稳定性检验</tag>
      
      <tag>拟合</tag>
      
      <tag>AIC</tag>
      
      <tag>BIC</tag>
      
      <tag>卡方统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200807】</title>
    <link href="/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200807%E3%80%91/"/>
    <url>/2020/07/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200807%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h1><h2 id="均方差、熵权定权法"><a href="#均方差、熵权定权法" class="headerlink" title="均方差、熵权定权法"></a>均方差、熵权定权法</h2><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>30个市经济各项水平统计如下，请针对各市经济水平做综合评价。<br>指标如下：GDP、居民消费水平、固定资产投资、职工平均工资、货物周转量、居民消费价格指数、商品零售价格指数、工业总产值<br>1.均方差定权法<br><pre><code class="hljs matlab">x=xlsread(<span class="hljs-string">&#x27;zhengfu.xlsx&#x27;</span>);[m,n]=<span class="hljs-built_in">size</span>(x);<span class="hljs-comment">%求得各自均方差</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n    sigma2(<span class="hljs-built_in">j</span>)=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> =<span class="hljs-number">1</span>:m        v(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=(x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-<span class="hljs-built_in">min</span>(x(:,<span class="hljs-built_in">j</span>)))/(<span class="hljs-built_in">max</span>(x(:,<span class="hljs-built_in">j</span>))-<span class="hljs-built_in">min</span>(x(:,<span class="hljs-built_in">j</span>)));        sigma2(<span class="hljs-built_in">j</span>)=sigma2(<span class="hljs-built_in">j</span>)+((v(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-<span class="hljs-built_in">mean</span>(v(:,<span class="hljs-built_in">j</span>)).^<span class="hljs-number">2</span>));    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span>sigma=sigma2.^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>);<span class="hljs-comment">%求得权重</span>alpha=sigma./sum(sigma)<span class="hljs-comment">%进行综合评价</span>zh=v*alpha&#x27;<span class="hljs-comment">%对结果进行排序</span>[a,x] = <span class="hljs-built_in">sort</span>(zh, <span class="hljs-string">&#x27;descend&#x27;</span>)</code></pre><br><pre><code class="hljs matlab">alpha =    <span class="hljs-number">0.1248</span>    <span class="hljs-number">0.1110</span>    <span class="hljs-number">0.0967</span>    <span class="hljs-number">0.1077</span>    <span class="hljs-number">0.0886</span>    <span class="hljs-number">0.1288</span>    <span class="hljs-number">0.1883</span>    <span class="hljs-number">0.1540</span>zh =    <span class="hljs-number">0.4681</span>    <span class="hljs-number">0.3544</span>    <span class="hljs-number">0.6282</span>    <span class="hljs-number">0.4471</span>    <span class="hljs-number">0.4479</span>    <span class="hljs-number">0.5950</span>    <span class="hljs-number">0.4212</span>    <span class="hljs-number">0.5126</span>    <span class="hljs-number">0.6845</span>    <span class="hljs-number">0.3786</span>    <span class="hljs-number">0.2508</span>    <span class="hljs-number">0.1635</span>    <span class="hljs-number">0.2094</span>    <span class="hljs-number">0.2057</span>    <span class="hljs-number">0.3751</span>    <span class="hljs-number">0.2746</span>    <span class="hljs-number">0.3051</span>    <span class="hljs-number">0.2436</span>    <span class="hljs-number">0.2915</span>    <span class="hljs-number">0.2298</span>    <span class="hljs-number">0.0509</span>    <span class="hljs-number">0.3500</span>    <span class="hljs-number">0.2015</span>    <span class="hljs-number">0.2731</span>    <span class="hljs-number">0.1122</span>    <span class="hljs-number">0.2312</span>    <span class="hljs-number">0.1938</span>    <span class="hljs-number">0.1654</span>    <span class="hljs-number">0.1387</span>    <span class="hljs-number">0.2143</span>a =    <span class="hljs-number">0.6845</span>    <span class="hljs-number">0.6282</span>    <span class="hljs-number">0.5950</span>    <span class="hljs-number">0.5126</span>    <span class="hljs-number">0.4681</span>    <span class="hljs-number">0.4479</span>    <span class="hljs-number">0.4471</span>    <span class="hljs-number">0.4212</span>    <span class="hljs-number">0.3786</span>    <span class="hljs-number">0.3751</span>    <span class="hljs-number">0.3544</span>    <span class="hljs-number">0.3500</span>    <span class="hljs-number">0.3051</span>    <span class="hljs-number">0.2915</span>    <span class="hljs-number">0.2746</span>    <span class="hljs-number">0.2731</span>    <span class="hljs-number">0.2508</span>    <span class="hljs-number">0.2436</span>    <span class="hljs-number">0.2312</span>    <span class="hljs-number">0.2298</span>    <span class="hljs-number">0.2143</span>    <span class="hljs-number">0.2094</span>    <span class="hljs-number">0.2057</span>    <span class="hljs-number">0.2015</span>    <span class="hljs-number">0.1938</span>    <span class="hljs-number">0.1654</span>    <span class="hljs-number">0.1635</span>    <span class="hljs-number">0.1387</span>    <span class="hljs-number">0.1122</span>    <span class="hljs-number">0.0509</span>x =     <span class="hljs-number">9</span>     <span class="hljs-number">3</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>     <span class="hljs-number">7</span>    <span class="hljs-number">10</span>    <span class="hljs-number">15</span>     <span class="hljs-number">2</span>    <span class="hljs-number">22</span>    <span class="hljs-number">17</span>    <span class="hljs-number">19</span>    <span class="hljs-number">16</span>    <span class="hljs-number">24</span>    <span class="hljs-number">11</span>    <span class="hljs-number">18</span>    <span class="hljs-number">26</span>    <span class="hljs-number">20</span>    <span class="hljs-number">30</span>    <span class="hljs-number">13</span>    <span class="hljs-number">14</span>    <span class="hljs-number">23</span>    <span class="hljs-number">27</span>    <span class="hljs-number">28</span>    <span class="hljs-number">12</span>    <span class="hljs-number">29</span>    <span class="hljs-number">25</span>    <span class="hljs-number">21</span></code></pre><br>2.熵权定权法<br><pre><code class="hljs matlab"><span class="hljs-comment">%选择是效率型还是成本型标记</span>L=xlsread(<span class="hljs-string">&#x27;zhengfu.xlsx&#x27;</span>,<span class="hljs-number">-1</span>)x=xlsread(<span class="hljs-string">&#x27;zhengfu.xlsx&#x27;</span>,<span class="hljs-number">-1</span>)[m,n]=<span class="hljs-built_in">size</span>(x);<span class="hljs-comment">%矩阵去量纲</span>R=<span class="hljs-built_in">zeros</span>(m,n);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<span class="hljs-comment">%根据指标确定是越大越优型还是越小越优型</span>        <span class="hljs-keyword">if</span> L(<span class="hljs-built_in">j</span>)==<span class="hljs-number">1</span>            R(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=(x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-<span class="hljs-built_in">min</span>(x(:,<span class="hljs-built_in">j</span>)))/(<span class="hljs-built_in">max</span>(x(:,<span class="hljs-built_in">j</span>))-<span class="hljs-built_in">min</span>(x(:,<span class="hljs-built_in">j</span>)));        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-comment">%给第j项指标对不同评价对象求和，得到sumR</span>sumR=sum(R);<span class="hljs-comment">%初始化特征比重矩阵p</span>p=<span class="hljs-built_in">zeros</span>(m,n); <span class="hljs-comment">%零矩阵，可有可无</span><span class="hljs-comment">%计算第i个评价对象指标的特征比重</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> =<span class="hljs-number">1</span>:m    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n        p(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=R(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)/sumR(<span class="hljs-built_in">j</span>);    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-comment">%判断p中元素是否为0，如果为0，p(i,j)*ln(p(i,j))=0</span>tp=<span class="hljs-built_in">zeros</span>(m,n);<span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<span class="hljs-comment">%根据p(i,j)是否小于等于零给tp赋值</span>        <span class="hljs-keyword">if</span> p(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)&lt;=<span class="hljs-number">0</span>            tp(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">0</span>        <span class="hljs-keyword">else</span>            tp(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=p(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*<span class="hljs-built_in">log</span>(p(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>));        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-comment">%计算第j项指标的条件熵</span>H=-sum(tp);<span class="hljs-comment">%计算第j项指标的熵值</span>E=H/<span class="hljs-built_in">log</span>(m);<span class="hljs-comment">%计算差异系数G</span>G=<span class="hljs-number">1</span>-E;<span class="hljs-comment">%计算熵权W</span>W=G/sum(G)</code></pre><br><pre><code class="hljs matlab">W =    <span class="hljs-number">0.0486</span>    <span class="hljs-number">0.0670</span>    <span class="hljs-number">0.2085</span>    <span class="hljs-number">0.1995</span>    <span class="hljs-number">0.2264</span>    <span class="hljs-number">0.1923</span>    <span class="hljs-number">0.0191</span>    <span class="hljs-number">0.0385</span></code></pre></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>综合评价</tag>
      
      <tag>均方差法</tag>
      
      <tag>熵权定权法</tag>
      
      <tag>权重</tag>
      
      <tag>熵权</tag>
      
      <tag>去量纲</tag>
      
      <tag>熵值</tag>
      
      <tag>差异系数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown数学公式</title>
    <link href="/2020/07/23/software/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2020/07/23/software/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作为理工男，数学公式的编辑在所难免。<br>  在这里埋个坑。最近在准备数学建模，准备开辟一个每日一题栏目。</p></blockquote><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1 分类"></a>1 分类</h3><h4 id="1-1-行内公式"><a href="#1-1-行内公式" class="headerlink" title="1.1 行内公式"></a>1.1 行内公式</h4><p>$a=b+c$<br><pre><code class="hljs markdown">$a=b+c$</code></pre></p><h4 id="1-2-独行公式"><a href="#1-2-独行公式" class="headerlink" title="1.2 独行公式"></a>1.2 独行公式</h4><script type="math/tex; mode=display">a=b+c</script><pre><code class="hljs markdown">$$a=b+c$$</code></pre><h3 id="2-上下标"><a href="#2-上下标" class="headerlink" title="2 上下标"></a>2 上下标</h3><h4 id="2-1-上标"><a href="#2-1-上标" class="headerlink" title="2.1 上标"></a>2.1 上标</h4><script type="math/tex; mode=display">a^2+b^2=c^2</script><pre><code class="hljs markdown">$a^2+b^2=c^2$</code></pre><h4 id="2-2-下标"><a href="#2-2-下标" class="headerlink" title="2.2 下标"></a>2.2 下标</h4><script type="math/tex; mode=display">x_1+x_2=x_3</script><pre><code class="hljs markdown">$x<span class="hljs-emphasis">_1+x_</span>2=x<span class="hljs-emphasis">_3$</span></code></pre><h4 id="2-3-实例"><a href="#2-3-实例" class="headerlink" title="2.3 实例"></a>2.3 实例</h4><script type="math/tex; mode=display">y=e^{cosx+sinx}+a^{12}tanx</script><pre><code class="hljs markdown">$y=e^&#123;cosx+sinx&#125;+a^&#123;12&#125;tanx$</code></pre><h3 id="3-常见运算符"><a href="#3-常见运算符" class="headerlink" title="3 常见运算符"></a>3 常见运算符</h3><table>    <thead>    <tr>      <th>符号</th>      <th>表达式</th>      <th>符号</th>      <th>表达式</th>      <th>符号</th>      <th>表达式</th>    </tr>    </thead>    <tbody>    <tr>      <td>$\times$</td>      <td>\time</td>      <td>$\div$</td>      <td>\div</td>      <td>$\pm$</td>      <td>\pm</td>    </tr>    <tr>      <td>$\neq$</td>      <td>\neq</td>      <td>$\geq$</td>      <td>\geq</td>      <td>$\leq$</td>      <td>\leq</td>    </tr>    <tr>      <td>$\in$</td>      <td>\in</td>      <td>$\notin$</td>      <td>\notin</td>      <td>$\cdot$</td>      <td>\cdot</td>    </tr>    <tr>      <td>$\supset$</td>      <td>\supset</td>      <td>$\subset$</td>      <td>\subset</td>      <td></td>      <td></td>    </tr>    <tr>      <td>$\bigcap$</td>      <td>\bigcap</td>      <td>$\bigcup$</td>      <td>\bigcup</td>      <td></td>      <td></td>    </tr>    </tbody></table><h3 id="4-特殊符号"><a href="#4-特殊符号" class="headerlink" title="4 特殊符号"></a>4 特殊符号</h3><table>    <thead>    <tr>      <th>符号</th>      <th>表达式</th>      <th>文字描述</th>      <th>实例</th>      <th>表达式</th>    </tr>    </thead>    <tbody>    <tr>      <td>$\sum$</td>      <td>\sum</td>      <td>累加</td>      <td>$\sum_{m=1}^{\infty}$</td>      <td>\sum_{m=1}^{\infty}</td>    </tr>    <tr>      <td>$\int_a^bx^2dx$</td>      <td>\intx^2dx</td>      <td>积分</td>      <td>$\int_0^1x^2dx$</td>      <td>\int_0^1x^2dx</td>    </tr>    <tr>      <td>$\lim_{a \to b}x^2$</td>      <td>lim_{a \to b}x^2</td>      <td>极限</td>      <td>$\lim_{0 \to 1}x^2$</td>      <td>\lim_{0 \to 1}x^2</td>    </tr>    <tr>      <td>$\vec{a}$</td>      <td>\vec{a}</td>      <td>向量</td>      <td>$\vec{a}+\vec{b}$</td>      <td>\vec{a}+\vec{b}</td>    </tr>    </tbody></table><h3 id="5-注释"><a href="#5-注释" class="headerlink" title="5 注释"></a>5 注释</h3><h4 id="5-1-普通注释"><a href="#5-1-普通注释" class="headerlink" title="5.1 普通注释"></a>5.1 普通注释</h4><script type="math/tex; mode=display">\text{I Love CHINA}</script><pre><code class="hljs markdown">$$\text&#123;I Love CHINA&#125;$$</code></pre><h4 id="5-2-用法"><a href="#5-2-用法" class="headerlink" title="5.2 用法"></a>5.2 用法</h4><script type="math/tex; mode=display">a^2+b^2=c^2 \, \text{(勾股定理)}</script><pre><code class="hljs markdown">$$a^2+b^2=c^2 \, \text&#123;(勾股定理)&#125;$$</code></pre><h4 id="5-3-高级注释"><a href="#5-3-高级注释" class="headerlink" title="5.3 高级注释"></a>5.3 高级注释</h4><script type="math/tex; mode=display">\color{red}{I Love CHINA}</script><pre><code class="hljs markdown">$$\color&#123;red&#125;&#123;I Love CHINA&#125;$$</code></pre><h3 id="6-分数"><a href="#6-分数" class="headerlink" title="6 分数"></a>6 分数</h3><script type="math/tex; mode=display">-\frac{\infty}{0}</script><pre><code class="hljs markdown">$$-\frac&#123;\infty&#125;&#123;0&#125;$$</code></pre><h3 id="7-分隔符"><a href="#7-分隔符" class="headerlink" title="7 分隔符"></a>7 分隔符</h3><script type="math/tex; mode=display">\frac{du}{dx}\mid_{x=0}</script><pre><code class="hljs markdown">$$\frac&#123;du&#125;&#123;dx&#125;\mid<span class="hljs-emphasis">_&#123;x=0&#125;$$</span></code></pre><h3 id="8-上划线、下划线"><a href="#8-上划线、下划线" class="headerlink" title="8 上划线、下划线"></a>8 上划线、下划线</h3><script type="math/tex; mode=display">\overline{a+b+c}</script><pre><code class="hljs markdown">$$\overline&#123;a+b+c&#125;$$</code></pre><script type="math/tex; mode=display">\underline{a+b+c}</script><pre><code class="hljs markdown">$$\underline&#123;a+b+c&#125;$$</code></pre><h3 id="9-根号"><a href="#9-根号" class="headerlink" title="9 根号"></a>9 根号</h3><script type="math/tex; mode=display">\sqrt{16}</script><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">$\sqrt&#123;16&#125;$$</span></code></pre><script type="math/tex; mode=display">\sqrt[3]{16}</script><pre><code class="hljs gams"><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>\<span class="hljs-built_in">sqrt</span>[<span class="hljs-number">3</span>]&#123;<span class="hljs-number">16</span>&#125;<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span></code></pre><h3 id="10-方程组"><a href="#10-方程组" class="headerlink" title="10 方程组"></a>10 方程组</h3><script type="math/tex; mode=display">\begin{cases}ax^2+bx+c=0\ax^2+bx+c=0\\end{cases}</script><pre><code class="hljs markdown">$$\begin&#123;cases&#125;ax^2+bx+c=0\\ax^2+bx+c=0\end&#123;cases&#125;$$</code></pre><h3 id="11-空格"><a href="#11-空格" class="headerlink" title="11 空格"></a>11 空格</h3><script type="math/tex; mode=display">ax^2+bx+c=0 \,\,\,\,\,\, \text{(我是注释)}</script><script type="math/tex; mode=display">ax^2+bx+c=0 \;\;\;\;\;\; \text{(我是注释)}</script><pre><code class="hljs markdown">$$ax^2+bx+c=0 \,\,\,\,\,\, \text&#123;(我是注释)&#125;$$$$ax^2+bx+c=0 \;\;\;\;\;\; \text&#123;(我是注释)&#125;$$</code></pre>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>latex</tag>
      
      <tag>数学公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200723】</title>
    <link href="/2020/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200723%E3%80%91/"/>
    <url>/2020/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200723%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="整数规划问题"><a href="#整数规划问题" class="headerlink" title="整数规划问题"></a>整数规划问题</h1><h2 id="用分支定界法求解下列混合整数规划问题。"><a href="#用分支定界法求解下列混合整数规划问题。" class="headerlink" title="用分支定界法求解下列混合整数规划问题。"></a>用分支定界法求解下列混合整数规划问题。</h2><script type="math/tex; mode=display">max \ z=3x_1+x_2+3x_3</script><p><strong>s. t.</strong></p><script type="math/tex; mode=display">-x_1+2x_2+x_3\leq4,</script><script type="math/tex; mode=display">4x_2-3x_3\leq2,</script><script type="math/tex; mode=display">x_1-3x_2+2x_3\leq3,</script><script type="math/tex; mode=display">x_1,x_2,x_3\geq0,x_1,x_3\in{z^*}</script><pre><code class="hljs matlab">matlab实现代码：c=[<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>]intcon=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]a=[<span class="hljs-number">-1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>;<span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">-3</span>;<span class="hljs-number">1</span> <span class="hljs-number">-3</span> <span class="hljs-number">2</span>]b=[<span class="hljs-number">4</span>;<span class="hljs-number">2</span>;<span class="hljs-number">3</span>]aeq=[]beq=[]lb=[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]ub=[][x,val]=intlinprog(-c,intcon,a,b,aeq,beq,lb,ub)x,val=-val</code></pre><pre><code class="hljs matlab">运行结果：x =    <span class="hljs-number">5.0000</span>    <span class="hljs-number">2.7500</span>    <span class="hljs-number">3.0000</span>val =  <span class="hljs-number">26.7500</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/">Debian-Pi-Aarch64 ★ 全新树莓派64位系统2.0正式版 - 说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://raspberrypi.club/">树莓派俱乐部</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://shumeipai.nxez.com/">树莓派实验</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>整数规划</tag>
      
      <tag>线性规划</tag>
      
      <tag>intlinprog</tag>
      
      <tag>用分支定界法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频站视频下载工具You-Get</title>
    <link href="/2020/07/22/software/%E8%A7%86%E9%A2%91%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7You-Get/"/>
    <url>/2020/07/22/software/%E8%A7%86%E9%A2%91%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7You-Get/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><p class="note note-primary">  很多时候随时随地在线看视频不是那么容易，尤其是YouTube的视频（你懂得），所以遇到好的视频下载下来还是有必要的。今天给大家介绍就是一款是使用python编写的下载视频站视频的工具——you-get。</p><br><a href="https://you-get.org/">官方网址：https://you-get.org/。</a></p><h2 id="1-1-下载、安装"><a href="#1-1-下载、安装" class="headerlink" title="1.1 下载、安装"></a>1.1 下载、安装</h2><p><span class="label label-primary"><br>依赖</p><ul><li>Python 3</li><li>FFmpeg (推荐) 或者 Libav</li><li>(可选) RTMPDump<br>&lt;/span&gt;</li></ul><h3 id="PIP安装"><a href="#PIP安装" class="headerlink" title="PIP安装"></a>PIP安装</h3><p>如果你的电脑上安装Python3，可以使用pip安装。</p><h4 id="GIT-克隆源码"><a href="#GIT-克隆源码" class="headerlink" title="GIT 克隆源码"></a>GIT 克隆源码</h4><p>首先从github下载所有源文件。<br><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> git://http://github.com/soimort/you-get.git</span></code></pre><br><span class="label label-primary">然后运行 ./setup.py install进行安装。</span></p><h3 id="linux安装you-get"><a href="#linux安装you-get" class="headerlink" title="linux安装you-get"></a>linux安装you-get</h3><h4 id="1、更新"><a href="#1、更新" class="headerlink" title="1、更新"></a>1、更新</h4><pre><code class="hljs shell">sudo apt-get update</code></pre><h3 id="2、安装-pip"><a href="#2、安装-pip" class="headerlink" title="2、安装 pip"></a>2、安装 pip</h3><pre><code class="hljs shell">sudo apt-get install python3-pip</code></pre><h3 id="3、安装-you-get"><a href="#3、安装-you-get" class="headerlink" title="3、安装 you-get"></a>3、安装 you-get</h3><pre><code class="hljs shell">sudo pip3 install you-get</code></pre><h3 id="4、下载网页视频"><a href="#4、下载网页视频" class="headerlink" title="4、下载网页视频"></a>4、下载网页视频</h3><pre><code class="hljs shell">you-get -o 保存路径 视频网址</code></pre><h3 id="5、查看帮助信息"><a href="#5、查看帮助信息" class="headerlink" title="5、查看帮助信息"></a>5、查看帮助信息</h3><pre><code class="hljs shell">you-get -h 来查看帮助信息</code></pre><h2 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h2><h3 id="1-下载视频网站视频"><a href="#1-下载视频网站视频" class="headerlink" title="1. 下载视频网站视频"></a>1. 下载视频网站视频</h3><p><span class="label label-primary">安装成功之后，就该大显身手的时候了。我在YouTube上看到一套《Hacking with Python》的视频，就拿它来做试验吧。复制该视频的URL：<br><a href="https://www.youtube.com/watch?v=UVac47TtghQ&amp;list=PL1A2CSdiySGLtKwqBnqj9BON6QQjWkP4n&amp;index=1。">https://www.youtube.com/watch?v=UVac47TtghQ&amp;list=PL1A2CSdiySGLtKwqBnqj9BON6QQjWkP4n&amp;index=1。</a></span><br>然后在命令行执行：<br><pre><code class="hljs shell">you-get-0.4.486-win32.exe -i https://www.youtube.com/watch?v=UVac47TtghQ&amp;list=PL1A2CSdiySGLtKwqBnqj9BON6QQjWkP4n&amp;index=1</code></pre><br>使用-i参数列出详细的视频下载信息，供我们进一步选择。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201128121001.png" alt=""></p><p>从上图可以看到，程序列出了不同格式和质量的下载选项，并给出了下载方法。比如我这里下载mp4格式、1920*1080的视频，应该输入的命令为：<br>D:\工具\网络工具包&gt;you-get-0.4.486-win32.exe —itag=137 <a href="https://www.youtube.com/watch?v=UVac47TtghQ&amp;list=PL1A2CSdiySGLtKwqBnqj9BON6QQjWkP4n&amp;index=1">https://www.youtube.com/watch?v=UVac47TtghQ&amp;list=PL1A2CSdiySGLtKwqBnqj9BON6QQjWkP4n&amp;index=1</a><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201128121105.png" alt=""><br><span class="label label-primary"><br>  you-get在下载视频的过程中会依赖ffmpeg对下载的视频进行合并或者转码。很多视频站的视频都是分成多段进行加载的，如果你不希望程序自动合并视频，可以添加—no-merge/-n参数进行控制。</span><br>好了，下载成功一个视频：<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201128121216.png" alt=""></p><h3 id="2-下载任何指定文件"><a href="#2-下载任何指定文件" class="headerlink" title="2.下载任何指定文件"></a>2.下载任何指定文件</h3><p>是不是感觉很爽呢？当然除了视频资源，如果我们给定一个文件url，它都可以帮我们下载。<br>如果我们给一个随意的URL，you-get会整体分析该网页可下载的资源，但是这个功能目前还不是很完善。</p><h3 id="3-自定义下载文件路径和名称"><a href="#3-自定义下载文件路径和名称" class="headerlink" title="3.自定义下载文件路径和名称"></a>3.自定义下载文件路径和名称</h3><p>使用—output-dir/-o参数可以指定文件保存的路径，使用—output-filename/-O参数来指定保存的文件名。例如：<br><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> you-get -o ~/Videos -O zoo.webm <span class="hljs-string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span></code></pre></p><h3 id="4-设置代理"><a href="#4-设置代理" class="headerlink" title="4.设置代理"></a>4.设置代理</h3><p>使用—http-proxy/-x 参数为you-get指定http代理，默认情况下you-get会使用系统代理。如果不希望you-get使用任何代理，可以使用—no-proxy 参数来禁用。</p><h3 id="5-加载COOKIE"><a href="#5-加载COOKIE" class="headerlink" title="5.加载COOKIE"></a>5.加载COOKIE</h3><p>很多网站是需要登录才可以访问视频内容的，比如很多在线教育网站。这个时候就需要我们提交cookie信息了，you-get支持使用—cookies/-c来提交cookie数据。cookie数据支持两种格式：<br>cookies.sqlite 和 cookies.txt。</p><h2 id="1-3支持网站"><a href="#1-3支持网站" class="headerlink" title="1.3支持网站"></a>1.3支持网站</h2><table><thead><tr>  <th align="center">Site</th>  <th align="left">URL</th>  <th align="center">Videos?</th>  <th align="center">Images?</th>  <th align="center">Audios?</th></tr></thead><tbody><tr>  <td align="center"><strong>YouTube</strong></td>  <td align="left"><a href="https://www.youtube.com/">https://www.youtube.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Twitter</strong></td>  <td align="left"><a href="https://twitter.com/">https://twitter.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">VK</td>  <td align="left"><a href="http://vk.com/">http://vk.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">Vine</td>  <td align="left"><a href="https://vine.co/">https://vine.co/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Vimeo</td>  <td align="left"><a href="https://vimeo.com/">https://vimeo.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Veoh</td>  <td align="left"><a href="http://www.veoh.com/">http://www.veoh.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Tumblr</strong></td>  <td align="left"><a href="https://www.tumblr.com/">https://www.tumblr.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center">✓</td></tr><tr>  <td align="center">TED</td>  <td align="left"><a href="http://www.ted.com/">http://www.ted.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">SoundCloud</td>  <td align="left"><a href="https://soundcloud.com/">https://soundcloud.com/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">SHOWROOM</td>  <td align="left"><a href="https://www.showroom-live.com/">https://www.showroom-live.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Pinterest</td>  <td align="left"><a href="https://www.pinterest.com/">https://www.pinterest.com/</a></td>  <td align="center"></td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">MTV81</td>  <td align="left"><a href="http://www.mtv81.com/">http://www.mtv81.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Mixcloud</td>  <td align="left"><a href="https://www.mixcloud.com/">https://www.mixcloud.com/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">Metacafe</td>  <td align="left"><a href="http://www.metacafe.com/">http://www.metacafe.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Magisto</td>  <td align="left"><a href="http://www.magisto.com/">http://www.magisto.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Khan Academy</td>  <td align="left"><a href="https://www.khanacademy.org/">https://www.khanacademy.org/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Internet Archive</td>  <td align="left"><a href="https://archive.org/">https://archive.org/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Instagram</strong></td>  <td align="left"><a href="https://instagram.com/">https://instagram.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">InfoQ</td>  <td align="left"><a href="http://www.infoq.com/presentations/">http://www.infoq.com/presentations/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Imgur</td>  <td align="left"><a href="http://imgur.com/">http://imgur.com/</a></td>  <td align="center"></td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">Heavy Music Archive</td>  <td align="left"><a href="http://www.heavy-music.ru/">http://www.heavy-music.ru/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">Freesound</td>  <td align="left"><a href="http://www.freesound.org/">http://www.freesound.org/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">Flickr</td>  <td align="left"><a href="https://www.flickr.com/">https://www.flickr.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">FC2 Video</td>  <td align="left"><a href="http://video.fc2.com/">http://video.fc2.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Facebook</td>  <td align="left"><a href="https://www.facebook.com/">https://www.facebook.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">eHow</td>  <td align="left"><a href="http://www.ehow.com/">http://www.ehow.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Dailymotion</td>  <td align="left"><a href="http://www.dailymotion.com/">http://www.dailymotion.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Coub</td>  <td align="left"><a href="http://coub.com/">http://coub.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">CBS</td>  <td align="left"><a href="http://www.cbs.com/">http://www.cbs.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Bandcamp</td>  <td align="left"><a href="http://bandcamp.com/">http://bandcamp.com/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">AliveThai</td>  <td align="left"><a href="http://alive.in.th/">http://alive.in.th/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">interest.me</td>  <td align="left"><a href="http://ch.interest.me/tvn">http://ch.interest.me/tvn</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>755<br/>ナナゴーゴー</strong></td>  <td align="left"><a href="http://7gogo.jp/">http://7gogo.jp/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center"><strong>niconico<br/>ニコニコ動画</strong></td>  <td align="left"><a href="http://www.nicovideo.jp/">http://www.nicovideo.jp/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>163<br/>网易视频<br/>网易云音乐</strong></td>  <td align="left"><a href="http://v.163.com/">http://v.163.com/</a><br/><a href="http://music.163.com/">http://music.163.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">56网</td>  <td align="left"><a href="http://www.56.com/">http://www.56.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>AcFun</strong></td>  <td align="left"><a href="http://www.acfun.cn/">http://www.acfun.cn/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Baidu<br/>百度贴吧</strong></td>  <td align="left"><a href="http://tieba.baidu.com/">http://tieba.baidu.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">爆米花网</td>  <td align="left"><a href="http://www.baomihua.com/">http://www.baomihua.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>bilibili<br/>哔哩哔哩</strong></td>  <td align="left"><a href="http://www.bilibili.com/">http://www.bilibili.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center">✓</td></tr><tr>  <td align="center">豆瓣</td>  <td align="left"><a href="http://www.douban.com/">http://www.douban.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">斗鱼</td>  <td align="left"><a href="http://www.douyutv.com/">http://www.douyutv.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">凤凰视频</td>  <td align="left"><a href="http://v.ifeng.com/">http://v.ifeng.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">风行网</td>  <td align="left"><a href="http://www.fun.tv/">http://www.fun.tv/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">iQIYI<br/>爱奇艺</td>  <td align="left"><a href="http://www.iqiyi.com/">http://www.iqiyi.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">激动网</td>  <td align="left"><a href="http://www.joy.cn/">http://www.joy.cn/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">酷6网</td>  <td align="left"><a href="http://www.ku6.com/">http://www.ku6.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">酷狗音乐</td>  <td align="left"><a href="http://www.kugou.com/">http://www.kugou.com/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">酷我音乐</td>  <td align="left"><a href="http://www.kuwo.cn/">http://www.kuwo.cn/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">乐视网</td>  <td align="left"><a href="http://www.le.com/">http://www.le.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">荔枝FM</td>  <td align="left"><a href="http://www.lizhi.fm/">http://www.lizhi.fm/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">秒拍</td>  <td align="left"><a href="http://www.miaopai.com/">http://www.miaopai.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">MioMio弹幕网</td>  <td align="left"><a href="http://www.miomio.tv/">http://www.miomio.tv/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">MissEvan<br/>猫耳FM</td>  <td align="left"><a href="http://www.missevan.com/">http://www.missevan.com/</a></td>  <td align="center"></td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">痞客邦</td>  <td align="left"><a href="https://www.pixnet.net/">https://www.pixnet.net/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">PPTV聚力</td>  <td align="left"><a href="http://www.pptv.com/">http://www.pptv.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">齐鲁网</td>  <td align="left"><a href="http://v.iqilu.com/">http://v.iqilu.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">QQ<br/>腾讯视频</td>  <td align="left"><a href="http://v.qq.com/">http://v.qq.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">企鹅直播</td>  <td align="left"><a href="http://live.qq.com/">http://live.qq.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Sina<br/>新浪视频<br/>微博秒拍视频</td>  <td align="left"><a href="http://video.sina.com.cn/">http://video.sina.com.cn/</a><br/><a href="http://video.weibo.com/">http://video.weibo.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Sohu<br/>搜狐视频</td>  <td align="left"><a href="http://tv.sohu.com/">http://tv.sohu.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Tudou<br/>土豆</strong></td>  <td align="left"><a href="http://www.tudou.com/">http://www.tudou.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">虾米</td>  <td align="left"><a href="http://www.xiami.com/">http://www.xiami.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center">✓</td></tr><tr>  <td align="center">阳光卫视</td>  <td align="left"><a href="http://www.isuntv.com/">http://www.isuntv.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>音悦Tai</strong></td>  <td align="left"><a href="http://www.yinyuetai.com/">http://www.yinyuetai.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center"><strong>Youku<br/>优酷</strong></td>  <td align="left"><a href="http://www.youku.com/">http://www.youku.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">战旗TV</td>  <td align="left"><a href="http://www.zhanqi.tv/lives">http://www.zhanqi.tv/lives</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">央视网</td>  <td align="left"><a href="http://www.cntv.cn/">http://www.cntv.cn/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">Naver<br/>네이버</td>  <td align="left"><a href="http://tvcast.naver.com/">http://tvcast.naver.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">芒果TV</td>  <td align="left"><a href="http://www.mgtv.com/">http://www.mgtv.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">火猫TV</td>  <td align="left"><a href="http://www.huomao.com/">http://www.huomao.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">阳光宽频网</td>  <td align="left"><a href="http://www.365yg.com/">http://www.365yg.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">西瓜视频</td>  <td align="left"><a href="https://www.ixigua.com/">https://www.ixigua.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">新片场</td>  <td align="left"><a href="https://www.xinpianchang.com//">https://www.xinpianchang.com//</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">快手</td>  <td align="left"><a href="https://www.kuaishou.com/">https://www.kuaishou.com/</a></td>  <td align="center">✓</td>  <td align="center">✓</td>  <td align="center"></td></tr><tr>  <td align="center">抖音</td>  <td align="left"><a href="https://www.douyin.com/">https://www.douyin.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">TikTok</td>  <td align="left"><a href="https://www.tiktok.com/">https://www.tiktok.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">中国体育(TV)</td>  <td align="left"><a href="http://v.zhibo.tv/">http://v.zhibo.tv/</a> </br><a href="http://video.zhibo.tv/">http://video.zhibo.tv/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr><tr>  <td align="center">知乎</td>  <td align="left"><a href="https://www.zhihu.com/">https://www.zhihu.com/</a></td>  <td align="center">✓</td>  <td align="center"></td>  <td align="center"></td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">视频站视频下载工具You-Get github中文说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>you-get</tag>
      
      <tag>视频下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题【20200722】</title>
    <link href="/2020/07/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200722%E3%80%91/"/>
    <url>/2020/07/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%9020200722%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线性规划问题"><a href="#线性规划问题" class="headerlink" title="线性规划问题"></a>线性规划问题</h1><h2 id="求解下列线性规划问题。"><a href="#求解下列线性规划问题。" class="headerlink" title="求解下列线性规划问题。"></a>求解下列线性规划问题。</h2><script type="math/tex; mode=display">max z =2x_1+3x_2-5x_3</script><script type="math/tex; mode=display">x_1+x_2+x_3=7</script><script type="math/tex; mode=display">2x_1-5x_2+x_3\geq10</script><script type="math/tex; mode=display">\ x_1+3x_2+x_3\leq12</script><script type="math/tex; mode=display">x_1,x_2,x_3\geq0</script><p>解题思路：</p><ul><li>根据函数的使用要求；</li><li>求最大值，首先要把目标函数转化为最小值，即<script type="math/tex; mode=display">min \ z = - (2x_1+3x_2-5x_3)</script><span class="label label-primary">要把大于等于转换为小于等于，即在有 “≥” 符号式子两边同时乘以-1；</span></li></ul><pre><code class="hljs matlab">matlab代码：c=[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">-5</span>]a=[<span class="hljs-number">-2</span> <span class="hljs-number">5</span> <span class="hljs-number">-1</span>;<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>]b=[<span class="hljs-number">-10</span>;<span class="hljs-number">12</span>]aeq=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]beq=[<span class="hljs-number">7</span>]lb=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)ub=[][x,fval]=linprog(-c,a,b,aeq,beq,lb,ub) ; <span class="hljs-comment">%是求最大值而不是最小值，注意这里是&quot;-c&quot;而不是&quot;c&quot;</span>x,fval=-fval</code></pre><pre><code class="hljs matlab">matlab结果：x =    <span class="hljs-number">6.4286</span>    <span class="hljs-number">0.5714</span>         <span class="hljs-number">0</span>fval =   <span class="hljs-number">14.5714</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="">NULL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>线性规划</tag>
      
      <tag>linprog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程</title>
    <link href="/2020/07/21/Linux/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/07/21/Linux/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、计算机组成："><a href="#一、计算机组成：" class="headerlink" title="一、计算机组成："></a>一、计算机组成：</h2><ul><li><p>内核在中间位置，连接软件与硬件（雷纳斯开发）</p></li><li><p>内核功能：</p><ul><li>内存（物理、虚拟（交换空间）内存）；</li><li>软件管理（进程管理）；</li><li>硬件管理</li></ul></li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123221706.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123221733.png" alt=""></p><h2 id="二、-shell-编程基础"><a href="#二、-shell-编程基础" class="headerlink" title="二、 shell 编程基础"></a>二、 shell 编程基础</h2><ul><li><p>“；” 可以放在两个毫不相关的之间       例：date ; who</p></li><li><p>脚本格式要求：脚本以 <strong>#!/Bin/bash</strong> 开头；脚本需要有可执行权限</p></li><li><p>脚本的常用执行方式：</p></li></ul><ol><li>命令行进入脚本的绝对路径或相对路径</li><li>●方式1<br>1)首先要<strong>chmod 744  helloworld.sh</strong> 改变权限(变绿为可执行文件)<br>2)执行脚本<br>●方式2(bash/bash+脚本)<br>说明:不用赋予脚本+x权限，直接执行即可。</li></ol><pre><code class="hljs shell">例:输出“hello world”  <span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>echo &quot;hello world&quot;<span class="hljs-meta">#</span><span class="bash"> 注意：<span class="hljs-built_in">echo</span>命令中想输出单引号用双引号包裹，双引号同理</span></code></pre><h2 id="三、shell的变量"><a href="#三、shell的变量" class="headerlink" title="三、shell的变量"></a>三、shell的变量</h2><ul><li><p>系统变量</p><p>$HOME、$USER、$UID、$PWD等等</p></li><li><p>用户自定义变量</p><p>定义变量=值</p></li></ul><pre><code class="hljs shell">例：系统变量与自定义变量的使用<span class="hljs-meta">#</span><span class="bash">！/bin/bash</span>echo &quot;当前用户信息：$USER&quot;var=10var1=$varecho &quot;上一个值是：$var&quot;echo &quot;第二个值是:$var1&quot;<span class="hljs-meta">#</span><span class="bash">shell命令中，在用户自定义命令时，切勿在等号两旁留空格</span></code></pre><ul><li><p>其他内容：</p><ul><li>撤销命令 unset 变量名</li><li>设置静态变量 readonly（不能unset）</li></ul></li></ul><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>var=10var1=$varreadonly var2=3unset varecho &quot;第一个值是：$var&quot;echo &quot;第二个值是：$var1&quot;echo &quot;第三个值是：$var2&quot;</code></pre><h2 id="四、-显示消息"><a href="#四、-显示消息" class="headerlink" title="四、 显示消息"></a>四、 显示消息</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>A=`ls -la`echo $AB=$(ls -la)echo $B</code></pre><h2 id="五、设置环境变量"><a href="#五、设置环境变量" class="headerlink" title="五、设置环境变量"></a>五、设置环境变量</h2><ol><li><p>基本语法<br>1) export变量名=变量值(功能描述: 将shell变量输出为环境变量)<br>2) source配置文件(功能描述:让修改后的配置信息立即生效)..<br>3) echo $变量名(功能描述: 查询环境变量的值)</p></li><li><p>快速入门<br>1)在/etc/profile文件中定义TOMCAT HOME环境变量<br>2)查看环境变量TOMCAT<em> HOME的值<br>3)在另外-一个shell程序中使用TOMCAT</em> HOME<br>注意:在输出TOMCAT_ HOME环境变量前，需要让其生效<br>source /etc/profile</p></li></ol><h2 id="六、位置参数变量"><a href="#六、位置参数变量" class="headerlink" title="六、位置参数变量"></a>六、位置参数变量</h2><ol><li><p>介绍<br>   当我们执行一个shelI脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参<br>   数变量比如: ./myshell.sh 100200 ,这个就是一 个执行shell的命令行，可以在<br>   myshell脚本中获取到参数信息</p></li><li><p>基本语法</p></li></ol><ul><li>$n (功能描述: n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，十以上的<br>参数,十以上的参数需要用大括号包含，如${10})<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>echo $0 $1 $2<span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span> $* <span class="hljs-variable">$@</span> <span class="hljs-variable">$#</span></span>pi@raspbian:~/bash$ bash test.sh 1 2test.sh 1 2pi@raspbian:~/bash$ bash test.sh 1 2 3test.sh 1 2pi@raspbian:~/bash$ bash test.sh 1 test.sh 1</code></pre></li><li>$* (功能描述: 这个变量代表命令行中所有的参数，$’ 把所有的参数看成一个整体)</li><li>$@ (功能描述:这个变量也代表命令行中所有的参数,不过$@把每个参数区分对待)</li><li>$# (功能描述:这个量代表命令行中所有参数的个数)<br>位置参数变量<br>●应用实例<br>案例:编写一个shel脚本positionPara.sh，在脚本中获取到命 令行的各个参数信息。</li></ul><h2 id="七、运算符"><a href="#七、运算符" class="headerlink" title="七、运算符"></a>七、运算符</h2><ol><li>基本介绍<br>学习如何在shell中进行各种运算操作。</li></ol><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123223132.png" alt=""></p><ol><li><p>基本语法<br>   1) i “$(运算式)” 或“$[运算式]”<br>   2)expr m + n<br>   <strong>注意:expr运算符间要有空格</strong><br>   3) expr m - n<br>   4) expr \*,/, % (乘，除，取余)</p></li><li><p>应用实例.<br>   案例1:计算(2+3) X4的值<br>   案例2:请求出命令行的两个参数[整数]的和</p></li></ol><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>expr 1 + 4expr 1 \* 4var1=10var2=20var3=$(expr $var1 + $var2) echo $var3var4=$[20 + 20]echo $var4var5=$[$var4 * 3]echo $var5var6=$[$var1 * ($var3 + $var4)]echo var6<span class="hljs-meta">#</span><span class="bash">(2+3)*4</span><span class="hljs-meta">#</span><span class="bash">error:expr需分开做</span><span class="hljs-meta">#</span><span class="bash">var7=$(expr (2 + 3) \* 4)</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span> var7</span>var7=$(expr 2 + 3)var8=$(expr $var7 \* 4)</code></pre><ol><li><p>只支持整数级运算</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>var4=$(expr1.56 + 5.69)echo var4</code></pre></li><li><p>bash中自带计算器，可使用<strong>bc</strong>使用（quit退出）</p></li></ol><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><span class="hljs-meta">#</span><span class="bash">bc 计算器;管道传给bc ?</span>echo &quot;scale=4;3.777 / 5&quot; | bcvar1=$(echo &quot;scale=4;3.777 / 5&quot; | bc)var2=3var3=$(echo &quot;scale=4; $var1 *$var2&quot; | bc)echo var3</code></pre><h2 id="八、判断语句"><a href="#八、判断语句" class="headerlink" title="八、判断语句"></a>八、判断语句</h2><ol><li>两个整数的比较<br>=字符串比较<br>-lt小于<br>-le小于等于<br>-eq等于<br>-gt大于<br>-ge大于等于<br>-ne不等于</li><li>按照文件权限进行判断-r有读的权限<br> -w有写的权限<br>-x有执行的权限</li><li>按照文件类型进行判断-f 文件存在并且是一个常规的文件<br>-e文件存在<br>-d文件存在并是一个目录</li></ol><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><span class="hljs-meta">#</span><span class="bash">条件判断</span>[ qust ]echo $?   #输出上一条指令判断结果[ &quot;qust&quot; = &quot;qust&quot;]echo $?[ &quot;qust&quot; = &quot;gmqust&quot;]echo $?</code></pre><h2 id="九、流程控制"><a href="#九、流程控制" class="headerlink" title="九、流程控制"></a>九、流程控制</h2><ol><li>if-then</li></ol><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">！/bin/bash</span>if [ &quot;ok&quot; = ok ]   #[ commond ]即中括号内项与符号之间也要保留空格thenecho &quot;相等&quot;fi                 #表示if判断结束</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">！/bin/bash</span>if pwd   thenecho &quot;相等&quot;fi</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">！/bin/bash</span><span class="hljs-meta">#</span><span class="bash">❌ 没有相应命令</span>if dewedawathenecho &quot;相等&quot;fi      pi@raspbian:~/bash$ bash test.sh相等test.sh: line 1: waasdad: command not found</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">！/bin/bash</span>if pwd;thenecho &quot;相等&quot;fi</code></pre><h2 id="十、复习："><a href="#十、复习：" class="headerlink" title="十、复习："></a>十、复习：</h2><h4 id="1-位置参数变量"><a href="#1-位置参数变量" class="headerlink" title="1.位置参数变量"></a>1.位置参数变量</h4><h4 id="n-0-9-0表示其本身-10以上用大括号表示-10"><a href="#n-0-9-0表示其本身-10以上用大括号表示-10" class="headerlink" title="$n(0-9) : $0表示其本身;10以上用大括号表示${10};$*;$#;"></a>$n(0-9) : $0表示其本身;10以上用大括号表示${10};$*;$#;</h4><h4 id="2-预定义变量"><a href="#2-预定义变量" class="headerlink" title="2.预定义变量"></a>2.预定义变量</h4><h4 id="进程号PID-最后一个进程号"><a href="#进程号PID-最后一个进程号" class="headerlink" title="$$(进程号PID);$!(最后一个进程号);$?"></a>$$(进程号PID);$!(最后一个进程号);$?</h4><h4 id="3-运算符（不支持浮点数）"><a href="#3-运算符（不支持浮点数）" class="headerlink" title="3.运算符（不支持浮点数）"></a>3.运算符（不支持浮点数）</h4><h4 id="expr-m-n-注：空格"><a href="#expr-m-n-注：空格" class="headerlink" title="expr m + (/ - \* \)  n (注：空格);"></a>expr m + (/ - \* \)  n (注：空格);</h4><h4 id="运算式"><a href="#运算式" class="headerlink" title="${运算式}"></a>${运算式}</h4><h4 id="4-条件判断"><a href="#4-条件判断" class="headerlink" title="4.条件判断"></a>4.条件判断</h4><pre><code class="hljs shell">if commandthen  commandsfi</code></pre><h2 id="十一、if语句"><a href="#十一、if语句" class="headerlink" title="十一、if语句"></a>十一、if语句</h2><h4 id="example-01-if—else流程"><a href="#example-01-if—else流程" class="headerlink" title="example 01: if—else流程"></a>example 01: if—else流程</h4><pre><code class="hljs shell">example 01:if——else流程<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>testuser=piif grep $testuser /etc/passwdthenecho &quot;hello&quot;echo &quot;你好&quot;echo &quot;有这个用户&quot;elseecho &quot;用户不存在&quot;fi</code></pre><h4 id="example-02-流程控制（嵌套if）"><a href="#example-02-流程控制（嵌套if）" class="headerlink" title="example 02:流程控制（嵌套if）"></a>example 02:流程控制（嵌套if）</h4><pre><code class="hljs shell">example 02:流程控制（嵌套if）testuser=NoSuchUserif grep $testuser /etc/ passwdthenecho &quot;The user $testuser exists on this system.elseecho &quot;The user $testuser does not exist on this system. ”if ls -d /home/$testuser/thenecho &quot;However， $testuser has a directory.&#x27;fifi</code></pre><h4 id="example-03-if-elif"><a href="#example-03-if-elif" class="headerlink" title="example 03: if-elif"></a>example 03: if-elif</h4>  <pre><code class="hljs shell">example 03:if-elif</code></pre><h4 id="example-04-if-condition-条件判断"><a href="#example-04-if-condition-条件判断" class="headerlink" title="example 04: if [ condition ]条件判断"></a>example 04: if [ condition ]条件判断</h4><h5 id="1-注意：中括号前后需保留空格"><a href="#1-注意：中括号前后需保留空格" class="headerlink" title="1.注意：中括号前后需保留空格"></a>1.注意：中括号前后需保留空格</h5><h5 id="2-常见的应用"><a href="#2-常见的应用" class="headerlink" title="2.常见的应用"></a>2.常见的应用</h5><ul><li>数值比较</li><li>字符串比较</li><li>文件比较</li></ul><h5 id="3-数值比较"><a href="#3-数值比较" class="headerlink" title="3.数值比较"></a>3.数值比较</h5><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123221926.png" alt=""></p><pre><code class="hljs shell">example 0401:if[ condition ]<span class="hljs-meta">#</span><span class="bash">/bin/bash</span>var1=5var2=10if [ var1 -le var2 ]thenecho &quot;var1小于等于var2&quot;elseecho &quot;var1大于var2&quot;fi</code></pre><h5 id="4-字符串比较"><a href="#4-字符串比较" class="headerlink" title="4.字符串比较"></a>4.字符串比较</h5><ul><li>[ $m = $n ]</li><li>[ $m != $n ]</li><li>[ $m &lt; $n ] (根据首字母顺序比较)</li><li>[ $m &gt; $n ] (根据首字母顺序比较)</li><li>[ -n str1 ] (判断str1长度是否非零)</li><li>[ -z str1 ] (判断str1长度是否为零)</li></ul><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123221819.png" alt=""></p><pre><code class="hljs shell">example 0402:字符串比较<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>str1=pistr2=rootif [ $str1 = $str2 ]thenecho &quot;相同&quot;elseecho &quot;不相同&quot;fi</code></pre><pre><code class="hljs shell">example 0403:得到的结果永远都是sr1&gt;str2,原因：&gt;在此处是记录，会创建新文件<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>str1=pistr2=rootif [ $str1 &gt; $str2 ]thenecho&quot;str1 大于 str2&quot;elseecho&quot;str1 小于 str2&quot;</code></pre><h5 id="5-文件比较"><a href="#5-文件比较" class="headerlink" title="5.文件比较"></a>5.文件比较</h5><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123221953.png" alt=""></p><pre><code class="hljs shell">example 0404:文件比较<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>dir 1=/hone/piif[-e dir1]thenecho“目录$dtr1存在cd dir1elseecho &quot;不存在&quot;fi</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>dir1=t05.shif [ t04.sh -nt Sdir1 ]thenecho&quot;t04 更新一些&quot;elseecho &quot;t05 更新一些&quot;ft</code></pre><h5 id="6-复合条件测试"><a href="#6-复合条件测试" class="headerlink" title="6.复合条件测试"></a>6.复合条件测试</h5><h5 id="condition1-amp-amp-condition2"><a href="#condition1-amp-amp-condition2" class="headerlink" title="[ condition1 ] &amp;&amp;[ condition2 ]"></a>[ condition1 ] &amp;&amp;[ condition2 ]</h5><p>[ condition1 ] II [ condition2 ]<br>if-then的高级特性<br>使用双括号<br>(( expression ))</p><pre><code class="hljs shell">example 0405:复合条件测试<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>val1=10if (( $val1 ** 2 &gt; 99 ))then(( $val2 = val1 ++ )) #使用&quot;++&quot;时注意不要加&quot;$&quot;符号echo $val2fl</code></pre><h4 id="example-05-case命令"><a href="#example-05-case命令" class="headerlink" title="example 05 : case命令"></a>example 05 : case命令</h4><pre><code class="hljs shell">case variable inpattern1|pattern2)commands;;pattern3)commands2;;*)default commands;;esac</code></pre><pre><code class="hljs shell">example 05:当命令行参数是 1 时，输出 &quot;周一&quot;, 是2 时，就输出&quot;周二&quot;， 其它情况输出 &quot;other&quot;<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>var=$1case $var in        1)                echo &quot;星期一&quot;                ;;        2)                echo &quot;星期二&quot;                ;;        *)default                echo &quot;other&quot;                ;;esac</code></pre><pre><code class="hljs shell">结果：pi@raspbian:~/bash$ . test.sh 2星期二pi@raspbian:~/bash$ . test.sh 1星期一pi@raspbian:~/bash$ . test.sh 7bash: default: command not foundother</code></pre><pre><code class="hljs shell">example 06:请编写一个shell程序，如果输入的参数，大于等于60，则输出 &quot;及格了&quot;，如果小于60,则输出 &quot;不及格<span class="hljs-meta">#</span><span class="bash">!bin/bash</span>grade=$1if [ $grade -ge 60 ]thenecho &quot;及格了&quot;elseecho &quot;不及格&quot;fi</code></pre><pre><code class="hljs shell">结果：pi@raspbian:~/bash$ . test.sh 60及格了pi@raspbian:~/bash$ . test.sh 80及格了pi@raspbian:~/bash$ . test.sh 59不及格</code></pre><h2 id="十二、循环语句"><a href="#十二、循环语句" class="headerlink" title="十二、循环语句"></a>十二、循环语句</h2><h4 id="1、for命令"><a href="#1、for命令" class="headerlink" title="1、for命令"></a>1、for命令</h4><pre><code class="hljs shell">for var in listdo   commandsdone</code></pre><p><em>注：var若不修改，则在for循环执行后会保留列表中最后一个字符。</em></p><pre><code class="hljs shell">example 01:句子中包含&#x27;，可通过转意和&quot;&quot;处理操作for var in I don\&#x27;t know if &quot;this&#x27;ll&quot; workdo echo $vardone</code></pre><pre><code class="hljs shell">example 02:默认以空格划分，可以通过&quot;&quot;进行处理操作for var in &quot;a apple&quot; &quot;a orang&quot;do echo $vardone</code></pre><pre><code class="hljs shell">example 03:读取变量list=&quot;a apple ia on the desk&quot;for var in $listdo echo $vardone</code></pre><pre><code class="hljs shell">example 04:读取文档for var in $(cat test01.txt)do echo $vardone</code></pre><pre><code class="hljs shell">example 05:IFS问题（内部字段分隔符：空格，制表符，换行符）IFS=$&#x27;\n&#x27;   #修改指定分隔符for var in $(cat test01.txt)do echo $vardone</code></pre><pre><code class="hljs shel">example 06:遍历查看某个路径下文件for var in &#x2F;home&#x2F;pi&#x2F;*doif [ -d $var ]thenecho &quot;$var是一个目录&quot;elfi [ -f $var ]thenecho &quot;$var是一个文件&quot;fidone</code></pre><pre><code class="hljs shell">example 07:C语言的for命令-单变量for ((i=1;i&lt;=10;i++))doecho $idone</code></pre><pre><code class="hljs shell">example 08:C语言的for命令-多变量(条件只能是一个！！）for((a=1,b=2;a&lt;=10;a++,b++))doecho [$a+$b]done</code></pre><pre><code class="hljs shell">example 09:$@ 与 $*区别for i in &quot;$*&quot;doecho &quot;第一种*显示的：$i&quot;donefor j in &quot;$@&quot;doecho &quot;第二种显示的：$j&quot;done</code></pre><pre><code class="hljs shel">结果：pi@raspbian:~&#x2F;bash$ . test.sh 1 2 3第一种*显示的：1 2 3第二种显示的：1第二种显示的：2第二种显示的：3</code></pre><h2 id="十三、while循环"><a href="#十三、while循环" class="headerlink" title="十三、while循环"></a>十三、while循环</h2><pre><code class="hljs shell"></code></pre><pre><code class="hljs shell">example 01:简单例子var=10while [ $var -gt 0 ]doecho $varvar=$[ $var - 1 ]done</code></pre><pre><code class="hljs shell">example 02:while的嵌套var=10while [ $var -gt 0 ]dofor(( var2=1;$var&lt;5;var2++ ))doecho &quot;内层循环的值：$var2&quot;doneecho &quot;外层循环的值：$var&quot;var=$[ $var - 1 ]done</code></pre><pre><code class="hljs shell">example 03:until(条件判断与while相反)var=100until &#123; $var -eq 0 &#125;doecho $varvar=$[ $var - 10 ]done</code></pre><pre><code class="hljs shell">example 04:控制循环：break;continue</code></pre><pre><code class="hljs shell">example 05:用while循环实现从命令行输入一个数n，统计从 1+..+ n 的值是多少<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>n=$1sum=0i=1while [ $i -le $n ]do        sum=$[ $i + $sum ]        i=$[ $i + 1 ]doneecho $iecho $sum结果：pi@raspbian:~/bash$ . test.sh 1001015050</code></pre><pre><code class="hljs shell">example 06:用for 实现从1加到100的结果，输出显示<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>sum=0for ((i=1;i&lt;=100;i++))do        sum=$[ $i + $sum]doneecho $sum结果：pi@raspbian:~/bash$ . test1.sh5050</code></pre><h2 id="十四、read读取控制台输入"><a href="#十四、read读取控制台输入" class="headerlink" title="十四、read读取控制台输入"></a>十四、read读取控制台输入</h2><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre><code class="hljs shell">sample 01 简单例子<span class="hljs-meta">#</span><span class="bash">! /bin/bash</span>echo -n &quot;Enter your nane:&quot;read nameecho $name</code></pre><h6 id="p-指定读取值时的提示符"><a href="#p-指定读取值时的提示符" class="headerlink" title="p:指定读取值时的提示符;"></a>p:指定读取值时的提示符;</h6><pre><code class="hljs shell">sample 02 -p 参数的应用<span class="hljs-meta">#</span><span class="bash">!/bin/bash </span>read -p &quot;请输入你的姓名：&quot;nameecho $name</code></pre><pre><code class="hljs shell">sample 03 多参数输入<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>read -p &quot;请输入你的姓名年龄（空格分隔）：&quot;name ageecho &quot;用户的姓名是$name,用户的年龄是$age&quot;<span class="hljs-meta">#</span><span class="bash">若用户输入变量数目大于原有变量数目，则剩余输入值全部赋给最后一个个预定变量</span></code></pre><pre><code class="hljs shell">sample 04 若不指定变量，则会存储在默认环境变量$REPLY中<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>read -p &quot;请输入你的姓名年龄（空格分隔）：&quot;echo $REPLY</code></pre><h6 id="t-指定读取值时等待的时间-秒-，如果没有在指定的时间内输入，就不再等"><a href="#t-指定读取值时等待的时间-秒-，如果没有在指定的时间内输入，就不再等" class="headerlink" title="t:指定读取值时等待的时间(秒)，如果没有在指定的时间内输入，就不再等"></a>t:指定读取值时等待的时间(秒)，如果没有在指定的时间内输入，就不再等</h6><pre><code class="hljs shell">sample 05 -t计时器应用<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>read -t 5 -p &quot;请输入你的姓名年龄（空格分隔）：&quot;name ageecho &quot;用户的姓名是$name,用户的年龄是$age&quot;</code></pre><pre><code class="hljs shell">sample 06 -t与if函数的结合应用<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>if read -t 5-p &quot;请输入你的姓名,年龄(空格分割) :&quot; name agethenecho  &quot;欢迎你: $name&quot;elseecho  &quot;对不起,您登陆超时&quot;fi</code></pre><pre><code class="hljs shell">sample 07 常见的case应用<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>read -p &quot;Do you want to continue?[Y/N]&quot; answercase $answer iny | Y)echoecho &quot;continue&quot;;;n | N)echoecho &quot;ok byebye&quot;exit;;esacecho &quot;end……&quot;</code></pre><h5 id="s选项可以避免在read命令中输入的数据出现在显示器上"><a href="#s选项可以避免在read命令中输入的数据出现在显示器上" class="headerlink" title="-s选项可以避免在read命令中输入的数据出现在显示器上"></a>-s选项可以避免在read命令中输入的数据出现在显示器上</h5><pre><code class="hljs shell">sample 08 -s选项可以避免在read命令中输入的数据出现在显示器上<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>read -s -p &quot;请输入你的密码：&quot;passwdechoecho &quot;你的密码是：&quot;$passwd</code></pre><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><pre><code class="hljs shell">sample 09 读取文件<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>count=1cat 1og.200527 | while read linedoecho &quot;line $count :$line&quot;count=$[ $count + 1]doneecho &quot;end.....&quot;</code></pre><h2 id="十五、函数"><a href="#十五、函数" class="headerlink" title="十五、函数"></a>十五、函数</h2><h5 id="1-系统函数：driname-basename"><a href="#1-系统函数：driname-basename" class="headerlink" title="1.系统函数：driname basename"></a>1.系统函数：driname basename</h5><ul><li>dirname基本语法<br>功能:返回完整路径最后的前面的部分，常用于返回路径部分</li><li>dirname文件绝对路径(功能描述: 从给定的包含绝对路径的文件名中去除文件名(非然后返回剩下的路径(目录的部分) )<pre><code class="hljs shell">sample ： 终端pi@raspbian:~$ dirname bash/test1.shbashpi@raspbian:~$ basename bash/test1.shtest1.sh</code></pre></li></ul><h5 id="2-函数自定义函数"><a href="#2-函数自定义函数" class="headerlink" title="2.函数自定义函数"></a>2.函数自定义函数</h5><pre><code class="hljs shell">●基本语法[ function ]funname&#123;Action;[return int;]&#125;或name()&#123;commands&#125;</code></pre><pre><code class="hljs shell">sample 01 函数基本调用简单例子<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>function func1&#123;echo &quot;这是函数1&quot;&#125;count=1while [ $count -le 5 ]dofunc1count=$[ $count +1 ]doneecho &quot;结束循环&quot;func1echo &quot;结束循环&quot;</code></pre><pre><code class="hljs shell">sample 02 error<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>function func1 &#123;echo“这是函数1”&#125;count=lwhtle [ $count -le 5 ]dofunc1count=$[ Scount + 1 ]doneecho &quot;结束循环&quot;func2function func2 &#123;echo &quot;这是函数2&quot;&#125;echo &quot;结束脚本</code></pre><pre><code class="hljs shell">sample 03 函数覆盖<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>function func1 &#123;echo“这是函数1”&#125;count=lwhtle [ $count -le 5 ]dofunc1count=$[ Scount + 1 ]doneecho“结束循环&quot;function func1 &#123;echo &quot;这是函数2&quot;&#125;func1echo &quot;结束脚本</code></pre><h2 id="十六、函数"><a href="#十六、函数" class="headerlink" title="十六、函数"></a>十六、函数</h2><h4 id="1-返回值"><a href="#1-返回值" class="headerlink" title="1.返回值"></a>1.返回值</h4><p><strong>bash shell会把函数当作一个小型脚本，运行结束时会返回一个退出状态码。bash shell使用return命令来退出函数并返回特定的退出状态码。</strong></p><p><strong>⚠函数结束后需要立刻取回返回值⚠</strong></p><pre><code class="hljs shell">sample 01<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;echo &quot;尝试显示不存在的文件&quot;1s -1 badfile&#125;echo &quot;调用函数&quot;func1echo &quot;函数的状态码$?&quot;</code></pre><p><strong>⚠状态码的范围0-255⚠</strong></p><pre><code class="hljs shell">sample 02 加十器（大于255就会报错）<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;read -p &quot;请输入一个数字:&quot; valueecho &quot;正在进行加十运算：&quot;return $[ $value + 10 ]&#125;echo &quot;调用函数&quot;func1echo &quot;运算之后的值：$?&quot;</code></pre><p><strong>使用函数输出</strong></p><pre><code class="hljs shell">sample 03 函数输出<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;read -p &quot;请输入一个数字:&quot; valueecho &quot;正在进行加十运算：&quot;&#125;echo &quot;调用函数&quot;result=$(func1)echo &quot;今天天气很好&quot;echo &quot;运算之后的结果：$result&quot;</code></pre><h4 id="2-函数中的变量"><a href="#2-函数中的变量" class="headerlink" title="2.函数中的变量"></a>2.函数中的变量</h4><p><strong>在函数中使用变量，向函数传递参数</strong></p><pre><code class="hljs shell">sample 04 通过位置传参<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;echo $[ $1 + $2 ]&#125;result=$(func1 100 200)echo $result</code></pre><p><strong>在函数中处理变量</strong></p><ul><li>全局变量</li></ul><p><strong>脚本任何地方定义的变量都是全局变量</strong></p><pre><code class="hljs shell">sample 05<span class="hljs-meta">#</span><span class="bash">！/bin/bash</span>func1()&#123;value=$[ $val + 2 ]&#125;read -p &quot;输入一个数字：&quot; valfunc1echo $value</code></pre><pre><div class="caption"><span>06</span></div><code class="hljs sample">sample 06 全局变量的弊端：比大小#!&#x2F;bin&#x2F;bashfunc1()&#123;temp&#x3D;$[ $value + 5]result&#x3D;$[ $temp * 2 ]&#125;temp&#x3D;4value&#x3D;6func1echo &quot;函数结果$result&quot;if [  $temp -gt $value ]thenecho &quot;temp larger&quot;elseecho &quot;value larger&quot;fi</code></pre><ul><li>局部变量</li></ul><p><strong>局部变量 local关键字声明的变量</strong></p><pre><code class="hljs shell">sample 07 局部变量<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;local temp=$[ $value + 5]result=$[ $temp * 2 ]&#125;temp=4value=6func1echo &quot;函数结果$result&quot;if [  $temp -gt $value ]thenecho &quot;temp larger&quot;elseecho &quot;value larger&quot;fi</code></pre><h4 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a>3、数组</h4><pre><code class="hljs shell">sample 08 简单数组输出<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>array=(1 2 3 4)echo $&#123;array[*]&#125;</code></pre><pre><code class="hljs shell">sample 09  数组的读入<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;temparray=$@echo &quot;数组的值为：$temparray&quot;&#125;array=(1 2 3 4)func1 $&#123;array[*]&#125;</code></pre><pre><code class="hljs shell">sample 10 数组的输出<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;array=(1 2 3 4 5 6)echo $&#123;array[*]&#125;&#125;result=$(func1)echo $result</code></pre><h4 id="4-函数的递归"><a href="#4-函数的递归" class="headerlink" title="4.函数的递归"></a>4.函数的递归</h4><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;if [  $1 -eq 1 ]thenecho 1elselocal temp=$[ $1 - 1 ]local result=$(func1 $temp)echo $[$result * $1]&#125;read -p &quot;请输入一个数字：&quot; valueresult=$(func1 $value)echo $result</code></pre><h3 id="十七、创建一个菜单"><a href="#十七、创建一个菜单" class="headerlink" title="十七、创建一个菜单"></a>十七、创建一个菜单</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>func1()&#123;df -hl&#125;func2()&#123;lastlog -b 60&#125;func3()&#123;pstree&#125;clearecho -e &quot;\t1. Display disk space&quot; echo -e &quot;\t2. Display logged information&quot; echo -e &quot;\t3. Display pstree&quot; echo -e &quot;\t0. exit program&quot;read -n 1 -p &quot;请输入您的选项：&quot; optioncase $option in0)break;;1)func1;;2)func2;;3)func3;;esac</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[NULL]<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python词云剔除非有效词</title>
    <link href="/2020/07/20/python/python%E8%AF%8D%E4%BA%91%E5%89%94%E9%99%A4%E9%9D%9E%E6%9C%89%E6%95%88%E8%AF%8D/"/>
    <url>/2020/07/20/python/python%E8%AF%8D%E4%BA%91%E5%89%94%E9%99%A4%E9%9D%9E%E6%9C%89%E6%95%88%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Why"><a href="#一、Why" class="headerlink" title="一、Why!"></a>一、Why!</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205628.png" alt=""></p><p>  之前做了基于python的青少年沉迷网络调查报告，最后用的是jieba分词和wordcloud进行可视化分析，但是结果图由于爬取的内容不精确，有一些不相关词也被放入可视化中，所以此次想把那个内容再重新可视化词云分析，剔除参杂其中的无用词！</p><h2 id="二、What"><a href="#二、What" class="headerlink" title="二、What!"></a>二、What!</h2><p>原源码如下：<br><pre><code class="hljs python"><span class="hljs-comment"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> wordcloud<span class="hljs-comment"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span><span class="hljs-keyword">import</span> imageiomk = imageio.imread(<span class="hljs-string">&quot;未标题-1.png&quot;</span>)<span class="hljs-comment"># 构建并配置词云对象w，注意要加scale参数，提高清晰度</span>w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>,                        height=<span class="hljs-number">700</span>,                        background_color=<span class="hljs-string">&#x27;white&#x27;</span>,                        font_path=<span class="hljs-string">&#x27;msyh.ttc&#x27;</span>,                        mask=mk,                        scale=<span class="hljs-number">15</span>)<span class="hljs-comment"># 对来自外部文件的文本进行中文分词，得到string</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;提取到的第五列数据.txt&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)txt = f.read()txtlist = jieba.lcut(txt)string = <span class="hljs-string">&quot; &quot;</span>.join(txtlist)<span class="hljs-comment"># 将string变量传入w的generate()方法，给词云输入文字</span>w.generate(string)<span class="hljs-comment"># 将词云图片导出到当前文件夹</span>w.to_file(<span class="hljs-string">&#x27;青少年沉迷网络01.png&#x27;</span>)</code></pre><br><span class="label label-primary"><br>对上方源码分析得17-21行为数据读取分词操作<br>具体步骤如下：<br>18行：以utf-8读取文件<br>19行：将读取的内容赋值给txt<br>20行：利用jieba库进行分词，以列表形式存储<br>21行：以空格连接列表内的每一个元素<br>所以可以在第20-21行之间添加一个方法进行剔除</span></p><h2 id="三、How"><a href="#三、How" class="headerlink" title="三、How!"></a>三、How!</h2><p><span class="label label-primary">test.py</span><br><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<span class="hljs-built_in">list</span>=[]txt=<span class="hljs-string">&quot;我们总是在意别人的言论，不敢做自己喜欢的事情，害怕淹没在飞短流长之中。其实没有人真的在乎你在想什么，不要过高估量自己在他人心目中的地位。被别人议论甚至误解都没啥，谁人不被别人说，谁人背后不说人，你生活在别人的眼神里，就迷失在自己的心路上。人和人之间就是一份情，一份缘，你珍惜我，我会加倍奉还，你不在意我，就让一切归零！&quot;</span>txtlist = jieba.lcut(txt)print(txtlist)words=[<span class="hljs-string">&quot;你&quot;</span>,<span class="hljs-string">&quot;人&quot;</span>,<span class="hljs-string">&quot;我&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;。&quot;</span>,<span class="hljs-string">&quot;的&quot;</span>,<span class="hljs-string">&quot;，&quot;</span>]<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> txtlist:   <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-keyword">continue</span>   <span class="hljs-keyword">else</span>:      <span class="hljs-built_in">list</span>.append(word)print(<span class="hljs-built_in">list</span>)string = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">list</span>)print(string)</code></pre><br><span class="label label-primary">结果如下：</span><br><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>========= RESTART: D:\桌面\Python\拓展\weiboSpider-master\关键词爬取\剔除词test.py =========Building prefix <span class="hljs-built_in">dict</span> <span class="hljs-keyword">from</span> the default dictionary ...Loading model <span class="hljs-keyword">from</span> cache C:\Users\Bai\AppData\Local\Temp\jieba.cacheLoading model cost <span class="hljs-number">0.594</span> seconds.Prefix <span class="hljs-built_in">dict</span> has been built successfully.[<span class="hljs-string">&#x27;我们&#x27;</span>, <span class="hljs-string">&#x27;总是&#x27;</span>, <span class="hljs-string">&#x27;在意&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;言论&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;不敢&#x27;</span>, <span class="hljs-string">&#x27;做&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;事情&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;害怕&#x27;</span>, <span class="hljs-string">&#x27;淹没&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;飞短流长&#x27;</span>, <span class="hljs-string">&#x27;之中&#x27;</span>, <span class="hljs-string">&#x27;。&#x27;</span>, <span class="hljs-string">&#x27;其实&#x27;</span>, <span class="hljs-string">&#x27;没有&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;真的&#x27;</span>, <span class="hljs-string">&#x27;在乎&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;想&#x27;</span>, <span class="hljs-string">&#x27;什么&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;不要&#x27;</span>, <span class="hljs-string">&#x27;过高&#x27;</span>, <span class="hljs-string">&#x27;估量&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;他人&#x27;</span>, <span class="hljs-string">&#x27;心目&#x27;</span>, <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;地位&#x27;</span>, <span class="hljs-string">&#x27;。&#x27;</span>, <span class="hljs-string">&#x27;被&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;议论&#x27;</span>, <span class="hljs-string">&#x27;甚至&#x27;</span>, <span class="hljs-string">&#x27;误解&#x27;</span>, <span class="hljs-string">&#x27;都&#x27;</span>, <span class="hljs-string">&#x27;没&#x27;</span>, <span class="hljs-string">&#x27;啥&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;谁&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;被&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;谁&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;背后&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;生活&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;眼神&#x27;</span>, <span class="hljs-string">&#x27;里&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;就&#x27;</span>, <span class="hljs-string">&#x27;迷失&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;心&#x27;</span>, <span class="hljs-string">&#x27;路上&#x27;</span>, <span class="hljs-string">&#x27;。&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;和&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;之间&#x27;</span>, <span class="hljs-string">&#x27;就是&#x27;</span>, <span class="hljs-string">&#x27;一份&#x27;</span>, <span class="hljs-string">&#x27;情&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;一份&#x27;</span>, <span class="hljs-string">&#x27;缘&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;珍惜&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;我会&#x27;</span>, <span class="hljs-string">&#x27;加倍&#x27;</span>, <span class="hljs-string">&#x27;奉还&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;不在意&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;就让&#x27;</span>, <span class="hljs-string">&#x27;一切&#x27;</span>, <span class="hljs-string">&#x27;归零&#x27;</span>, <span class="hljs-string">&#x27;！&#x27;</span>][<span class="hljs-string">&#x27;我们&#x27;</span>, <span class="hljs-string">&#x27;总是&#x27;</span>, <span class="hljs-string">&#x27;在意&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;言论&#x27;</span>, <span class="hljs-string">&#x27;不敢&#x27;</span>, <span class="hljs-string">&#x27;做&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>, <span class="hljs-string">&#x27;事情&#x27;</span>, <span class="hljs-string">&#x27;害怕&#x27;</span>, <span class="hljs-string">&#x27;淹没&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;飞短流长&#x27;</span>, <span class="hljs-string">&#x27;之中&#x27;</span>, <span class="hljs-string">&#x27;其实&#x27;</span>, <span class="hljs-string">&#x27;没有&#x27;</span>, <span class="hljs-string">&#x27;真的&#x27;</span>, <span class="hljs-string">&#x27;在乎&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;想&#x27;</span>, <span class="hljs-string">&#x27;什么&#x27;</span>, <span class="hljs-string">&#x27;不要&#x27;</span>, <span class="hljs-string">&#x27;过高&#x27;</span>, <span class="hljs-string">&#x27;估量&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;他人&#x27;</span>, <span class="hljs-string">&#x27;心目&#x27;</span>, <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;地位&#x27;</span>, <span class="hljs-string">&#x27;被&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;议论&#x27;</span>, <span class="hljs-string">&#x27;甚至&#x27;</span>, <span class="hljs-string">&#x27;误解&#x27;</span>, <span class="hljs-string">&#x27;都&#x27;</span>, <span class="hljs-string">&#x27;没&#x27;</span>, <span class="hljs-string">&#x27;啥&#x27;</span>, <span class="hljs-string">&#x27;谁&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;被&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>, <span class="hljs-string">&#x27;谁&#x27;</span>, <span class="hljs-string">&#x27;背后&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>, <span class="hljs-string">&#x27;生活&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;别人&#x27;</span>, <span class="hljs-string">&#x27;眼神&#x27;</span>, <span class="hljs-string">&#x27;里&#x27;</span>, <span class="hljs-string">&#x27;就&#x27;</span>, <span class="hljs-string">&#x27;迷失&#x27;</span>, <span class="hljs-string">&#x27;在&#x27;</span>, <span class="hljs-string">&#x27;自己&#x27;</span>, <span class="hljs-string">&#x27;心&#x27;</span>, <span class="hljs-string">&#x27;路上&#x27;</span>, <span class="hljs-string">&#x27;和&#x27;</span>, <span class="hljs-string">&#x27;之间&#x27;</span>, <span class="hljs-string">&#x27;就是&#x27;</span>, <span class="hljs-string">&#x27;一份&#x27;</span>, <span class="hljs-string">&#x27;情&#x27;</span>, <span class="hljs-string">&#x27;一份&#x27;</span>, <span class="hljs-string">&#x27;缘&#x27;</span>, <span class="hljs-string">&#x27;珍惜&#x27;</span>, <span class="hljs-string">&#x27;我会&#x27;</span>, <span class="hljs-string">&#x27;加倍&#x27;</span>, <span class="hljs-string">&#x27;奉还&#x27;</span>, <span class="hljs-string">&#x27;不在意&#x27;</span>, <span class="hljs-string">&#x27;就让&#x27;</span>, <span class="hljs-string">&#x27;一切&#x27;</span>, <span class="hljs-string">&#x27;归零&#x27;</span>, <span class="hljs-string">&#x27;！&#x27;</span>]我们 总是 在意 别人 言论 不敢 做 自己 喜欢 事情 害怕 淹没 在 飞短流长 之中 其实 没有 真的 在乎 在 想 什么 不要 过高 估量 自己 在 他人 心目 中 地位 被 别人 议论 甚至 误解 都 没 啥 谁 不 被 别人 说 谁 背后 不 说 生活 在 别人 眼神 里 就 迷失 在 自己 心 路上 和 之间 就是 一份 情 一份 缘 珍惜 我会 加倍 奉还 不在意 就让 一切 归零 ！</code></pre></p><h2 id="四、result"><a href="#四、result" class="headerlink" title="四、result!"></a>四、result!</h2><p><span class="label label-primary">源码如下：</span><br><pre><code class="hljs python"><span class="hljs-comment"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> wordcloud<span class="hljs-comment"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span><span class="hljs-keyword">import</span> imageiomk = imageio.imread(<span class="hljs-string">&quot;未标题-1.png&quot;</span>)<span class="hljs-built_in">list</span>=[]<span class="hljs-comment"># 构建并配置词云对象w，注意要加stopwords集合参数，将不想展示在词云中的词放在stopwords集合里，这里去掉“曹操”和“孔明”两个词</span>w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>,                        height=<span class="hljs-number">700</span>,                        background_color=<span class="hljs-string">&#x27;white&#x27;</span>,                        font_path=<span class="hljs-string">&#x27;msyh.ttc&#x27;</span>,                        mask=mk,                        scale=<span class="hljs-number">5</span>,                        <span class="hljs-comment">#contour_width=1,</span>                        <span class="hljs-comment">#contour_color=&quot;black&quot;</span>                        )<span class="hljs-comment"># 对来自外部文件的文本进行中文分词，得到string</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;提取到的第五列数据.txt&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)txt = f.read()txtlist = jieba.lcut(txt)words=[<span class="hljs-string">&quot;收起&quot;</span>,<span class="hljs-string">&quot;全文&quot;</span>,<span class="hljs-string">&quot;所以&quot;</span>,<span class="hljs-string">&quot;多少&quot;</span>,<span class="hljs-string">&quot;路过&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;，&quot;</span>,<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;。&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;【&quot;</span>,<span class="hljs-string">&quot;】&quot;</span>]<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> txtlist:   <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-keyword">continue</span>   <span class="hljs-keyword">else</span>:      <span class="hljs-built_in">list</span>.append(word)print(<span class="hljs-built_in">list</span>)string = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">list</span>)<span class="hljs-comment"># 将string变量传入w的generate()方法，给词云输入文字</span>w.generate(string)<span class="hljs-comment"># 将词云图片导出到当前文件夹</span>w.to_file(<span class="hljs-string">&#x27;不信你不出来.png&#x27;</span>)print(<span class="hljs-string">&quot;finish&quot;</span>)</code></pre><br><span class="label label-primary">结果对比：<br>很容易看出：收起全文没了</span><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205628.png" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123212010.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[NULL]<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>词云</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Python的防网络沉迷相关信息获取</title>
    <link href="/2020/07/19/python/%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E9%98%B2%E7%BD%91%E7%BB%9C%E6%B2%89%E8%BF%B7%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
    <url>/2020/07/19/python/%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E9%98%B2%E7%BD%91%E7%BB%9C%E6%B2%89%E8%BF%B7%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1-程序描述"><a href="#1-程序描述" class="headerlink" title="1.程序描述"></a>1.程序描述</h2><p class="note note-primary">基于Python网络爬虫技术，在一些门户网站或社交网站爬取一些关于网络沉迷的案例、图片，以此为例撰写一篇关于防止网络沉迷的论文，可以论述怎样借助于Python爬虫技术实现相关内容的获取，也可以基于所编写Python爬虫程序获取的图片、案例或者文字信息，撰写网络沉迷的危害，以及怎样防止网络沉迷。</p><h2 id="2-程序设计"><a href="#2-程序设计" class="headerlink" title="2.程序设计"></a>2.程序设计</h2><h3 id="2-1-设计思路"><a href="#2-1-设计思路" class="headerlink" title="2.1 设计思路"></a>2.1 设计思路</h3><p><span class="label label-primary">1.借助 selenium 爬虫爬取网上课堂以来的微博有关“青少年沉迷网络”的话题的相关动态。</span></p><p><span class="label label-primary">2.借助 xlrd 模块提取爬取的内容。</span></p><p><span class="label label-primary">3.借助词云wordcloud 和 jieba 模块进行关键词分析。</span></p><h3 id="2-2-程序代码"><a href="#2-2-程序代码" class="headerlink" title="2.2 程序代码"></a>2.2 程序代码</h3><p><span class="label label-primary">代码一借助 selenium 自动化提取 “青少年沉迷网络” 的动态</span>    [3]</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Created on 2018/11/27 下午 1:03</span><span class="hljs-string"></span><span class="hljs-string">@author: FeiTao</span><span class="hljs-string">@Email: feitao_sydx@163.com</span><span class="hljs-string">@Software: PyCharm</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<span class="hljs-keyword">import</span> xlwt<span class="hljs-comment"># 先调用无界面浏览器PhantomJS或Firefox</span><span class="hljs-comment"># driver = webdriver.PhantomJS()</span><span class="hljs-comment"># driver = webdriver.Firefox()</span>driver = webdriver.Chrome()<span class="hljs-comment"># ********************************************************************************</span><span class="hljs-comment">#                            第一步: 登陆login.sina.com</span><span class="hljs-comment">#                     这是一种很好的登陆方式，有可能有输入验证码</span><span class="hljs-comment">#                          登陆之后即可以登陆方式打开网页</span><span class="hljs-comment"># ********************************************************************************</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LoginWeibo</span>(<span class="hljs-params">username, password</span>):</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-comment"># 输入用户名/密码登录</span>        print(<span class="hljs-string">&#x27;准备登陆Weibo.cn网站...&#x27;</span>)        driver.get(<span class="hljs-string">&quot;http://login.sina.com.cn/&quot;</span>)        elem_user = driver.find_element_by_name(<span class="hljs-string">&quot;username&quot;</span>)        elem_user.send_keys(username)  <span class="hljs-comment"># 用户名</span>        elem_pwd = driver.find_element_by_name(<span class="hljs-string">&quot;password&quot;</span>)        elem_pwd.send_keys(password)  <span class="hljs-comment"># 密码</span>        elem_sub = driver.find_element_by_xpath(<span class="hljs-string">&quot;//input[@class=&#x27;W_btn_a btn_34px&#x27;]&quot;</span>)        elem_sub.click()  <span class="hljs-comment"># 点击登陆 因无name属性</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># 输入验证码</span>            time.sleep(<span class="hljs-number">10</span>)            elem_sub.click()        <span class="hljs-keyword">except</span>:            <span class="hljs-comment"># 不用输入验证码</span>            <span class="hljs-keyword">pass</span>        <span class="hljs-comment"># 获取Coockie 推荐资料：http://www.cnblogs.com/fnng/p/3269450.html</span>        print(<span class="hljs-string">&#x27;Crawl in &#x27;</span>, driver.current_url)        print(<span class="hljs-string">&#x27;输出Cookie键值对信息:&#x27;</span>)        <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> driver.get_cookies():            print(cookie)            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> cookie:                print(key, cookie[key])        print(<span class="hljs-string">&#x27;登陆成功...&#x27;</span>)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        print(<span class="hljs-string">&quot;Error: &quot;</span>, e)    <span class="hljs-keyword">finally</span>:        print(<span class="hljs-string">&#x27;End LoginWeibo!\n&#x27;</span>)<span class="hljs-comment"># ********************************************************************************</span><span class="hljs-comment">#                  第二步: 访问http://s.weibo.com/页面搜索结果</span><span class="hljs-comment">#               输入关键词、时间范围，得到所有微博信息、博主信息等</span><span class="hljs-comment">#                     考虑没有搜索结果、翻页效果的情况</span><span class="hljs-comment"># ********************************************************************************</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetSearchContent</span>(<span class="hljs-params">key</span>):</span>    driver.get(<span class="hljs-string">&quot;http://s.weibo.com/&quot;</span>)    print(<span class="hljs-string">&#x27;搜索热点主题：&#x27;</span>)    <span class="hljs-comment"># 输入关键词并点击搜索</span>    item_inp = driver.find_element_by_xpath(<span class="hljs-string">&quot;//input[@type=&#x27;text&#x27;]&quot;</span>)    <span class="hljs-comment">#item_inp = driver.find_element_by_xpath(&quot;//*[@id=&#x27;pl_homepage_search&#x27;]/div/div[2]/div/input&quot;)</span>    item_inp.send_keys(key)    item_inp.send_keys(Keys.RETURN)  <span class="hljs-comment"># 采用点击回车直接搜索</span>    time.sleep(<span class="hljs-number">5</span>)    <span class="hljs-comment"># 获取搜索词的URL，用于后期按时间查询的URL拼接</span>    current_url = driver.current_url    current_url = current_url.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># http://s.weibo.com/weibo/%25E7%258E%2589%25E6%25A0%2591%25E5%259C%25B0%25E9%259C%2587</span>    <span class="hljs-keyword">global</span> start_stamp    <span class="hljs-keyword">global</span> page    <span class="hljs-comment"># 需要抓取的开始和结束日期</span>    start_date = datetime.datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">2</span>, <span class="hljs-number">25</span>)    end_date = datetime.datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">5</span>, <span class="hljs-number">24</span>)    delta_date = datetime.timedelta(days=<span class="hljs-number">1</span>)    <span class="hljs-comment"># 需要抓取的地区   37:2代表山东青岛</span>    <span class="hljs-comment">#region = &#x27;custom:37:2&#x27;</span>    <span class="hljs-comment"># 每次抓取一天的数据</span>    start_stamp = start_date    end_stamp = start_date + delta_date    <span class="hljs-keyword">global</span> outfile    <span class="hljs-keyword">global</span> sheet    outfile = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)    <span class="hljs-keyword">while</span> end_stamp &lt;= end_date:        page = <span class="hljs-number">1</span>        <span class="hljs-comment"># 每一天使用一个sheet存储数据</span>        sheet = outfile.add_sheet(start_stamp.strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H&quot;</span>))        initXLS()        <span class="hljs-comment"># 通过构建URL实现每一天的查询</span>        <span class="hljs-comment">#url = current_url + &#x27;&amp;typeall=1&amp;suball=1×cope=custom:&#x27; + start_stamp.strftime(</span>        <span class="hljs-comment">#    &quot;%Y-%m-%d-%H&quot;) + &#x27;:&#x27; + end_stamp.strftime(&quot;%Y-%m-%d-%H&quot;) + &#x27;®ion=&#x27;+ region + &#x27;&amp;Refer=g&#x27;</span>        <span class="hljs-comment">#url = &#x27;https://s.weibo.com/weibo?q=%E9%9B%BE%E9%9C%BE®ion=custom:37:2&amp;typeall=1&amp;suball=1×cope=custom:2018-01-01-17:2018-01-01-19&amp;Refer=g&#x27;</span>        url = current_url + <span class="hljs-string">&#x27;&amp;typeall=1&amp;suball=1×cope=custom:&#x27;</span> + start_stamp.strftime(        <span class="hljs-string">&quot;%Y-%m-%d-%H&quot;</span>) + <span class="hljs-string">&#x27;:&#x27;</span> + end_stamp.strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H&quot;</span>) +  <span class="hljs-string">&#x27;&amp;Refer=g&#x27;</span>        driver.get(url)        handlePage()  <span class="hljs-comment"># 处理当前页面内容</span>        start_stamp = end_stamp        end_stamp = end_stamp + delta_date<span class="hljs-comment"># time.sleep(1)</span><span class="hljs-comment"># ********************************************************************************</span><span class="hljs-comment">#                  辅助函数，考虑页面加载完成后得到页面所需要的内容</span><span class="hljs-comment"># ********************************************************************************</span><span class="hljs-comment"># 页面加载完成后，对页面内容进行处理</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handlePage</span>():</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-comment"># 之前认为可能需要sleep等待页面加载，后来发现程序执行会等待页面加载完毕</span>        <span class="hljs-comment"># sleep的原因是对付微博的反爬虫机制，抓取太快可能会判定为机器人，需要输入验证码</span>        time.sleep(<span class="hljs-number">1</span>)        <span class="hljs-comment"># 先行判定是否有内容</span>        <span class="hljs-keyword">if</span> checkContent():            print(<span class="hljs-string">&quot;getContent&quot;</span>)            getContent()            <span class="hljs-comment"># 先行判定是否有下一页按钮</span>            <span class="hljs-keyword">if</span> checkNext():                <span class="hljs-comment"># 拿到下一页按钮</span>                next_page_btn = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#pl_feedlist_index &gt; div.m-page &gt; div &gt; a.next&quot;</span>)                next_page_btn.click()            <span class="hljs-keyword">else</span>:                print(<span class="hljs-string">&quot;no Next&quot;</span>)                <span class="hljs-keyword">break</span>        <span class="hljs-keyword">else</span>:            print(<span class="hljs-string">&quot;no Content&quot;</span>)            <span class="hljs-keyword">break</span><span class="hljs-comment"># 判断页面加载完成后是否有内容</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkContent</span>():</span>    <span class="hljs-comment"># 有内容的前提是有“导航条”？错！只有一页内容的也没有导航条</span>    <span class="hljs-comment"># 但没有内容的前提是有“pl_noresult”</span>    <span class="hljs-keyword">try</span>:        driver.find_element_by_xpath(<span class="hljs-string">&quot;//div[@class=&#x27;card card-no-result s-pt20b40&#x27;]&quot;</span>)        flag = <span class="hljs-literal">False</span>    <span class="hljs-keyword">except</span>:        flag = <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> flag<span class="hljs-comment"># 判断是否有下一页按钮</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkNext</span>():</span>    <span class="hljs-keyword">try</span>:        driver.find_element_by_css_selector(<span class="hljs-string">&quot;#pl_feedlist_index &gt; div.m-page &gt; div &gt; a.next&quot;</span>)        flag = <span class="hljs-literal">True</span>    <span class="hljs-keyword">except</span>:        flag = <span class="hljs-literal">False</span>    <span class="hljs-keyword">return</span> flag<span class="hljs-comment"># 判断是否有展开全文按钮</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkqw</span>():</span>    <span class="hljs-keyword">try</span>:        driver.find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a&quot;</span>)        flag = <span class="hljs-literal">True</span>    <span class="hljs-keyword">except</span>:        flag = <span class="hljs-literal">False</span>    <span class="hljs-keyword">return</span> flag<span class="hljs-comment"># 在添加每一个sheet之后，初始化字段</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initXLS</span>():</span>    name = [<span class="hljs-string">&#x27;博主昵称&#x27;</span>, <span class="hljs-string">&#x27;博主主页&#x27;</span>, <span class="hljs-string">&#x27;微博认证&#x27;</span>, <span class="hljs-string">&#x27;微博达人&#x27;</span>, <span class="hljs-string">&#x27;微博内容&#x27;</span>, <span class="hljs-string">&#x27;发布位置&#x27;</span>, <span class="hljs-string">&#x27;发布时间&#x27;</span>, <span class="hljs-string">&#x27;微博地址&#x27;</span>, <span class="hljs-string">&#x27;微博来源&#x27;</span>, <span class="hljs-string">&#x27;转发&#x27;</span>, <span class="hljs-string">&#x27;评论&#x27;</span>, <span class="hljs-string">&#x27;赞&#x27;</span>]    <span class="hljs-keyword">global</span> row    <span class="hljs-keyword">global</span> outfile    <span class="hljs-keyword">global</span> sheet    row = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(name)):        sheet.write(row, i, name[i])    row = row + <span class="hljs-number">1</span>    outfile.save(<span class="hljs-string">&quot;./crawl_output_YS.xls&quot;</span>)<span class="hljs-comment"># 将dic中的内容写入excel</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writeXLS</span>(<span class="hljs-params">dic</span>):</span>    <span class="hljs-keyword">global</span> row    <span class="hljs-keyword">global</span> outfile    <span class="hljs-keyword">global</span> sheet    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dic[k])):            sheet.write(row, i, dic[k][i])        row = row + <span class="hljs-number">1</span>    outfile.save(<span class="hljs-string">&quot;./crawl_output_YS.xls&quot;</span>)<span class="hljs-comment"># 在页面有内容的前提下，获取内容</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getContent</span>():</span>    <span class="hljs-comment"># 寻找到每一条微博的class</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-comment"># nodes = driver.find_elements_by_xpath(&quot;//div[@class=&#x27;WB_cardwrap S_bg2 clearfix&#x27;]&quot;)</span>        <span class="hljs-comment"># nodes = driver.find_elements_by_xpath(&quot;//div[@class=&#x27;card-wrap&#x27;]&quot;)</span>        nodes = driver.find_elements_by_xpath(<span class="hljs-string">&quot;//div[@class=&#x27;card-wrap&#x27;]/div[@class=&#x27;card&#x27;]&quot;</span>)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        print(e)    <span class="hljs-comment"># 在运行过程中微博数==0的情况，可能是微博反爬机制，需要输入验证码</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nodes) == <span class="hljs-number">0</span>:        <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请在微博页面输入验证码！&quot;</span>)        url = driver.current_url        driver.get(url)        getContent()        <span class="hljs-keyword">return</span>    dic = &#123;&#125;    <span class="hljs-keyword">global</span> page    print(start_stamp.strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H&quot;</span>))    print(<span class="hljs-string">&#x27;页数:&#x27;</span>, page)    page = page + <span class="hljs-number">1</span>    print(<span class="hljs-string">&#x27;微博数量&#x27;</span>, <span class="hljs-built_in">len</span>(nodes))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nodes)):        dic[i] = []        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># BZNC = nodes[i].find_element_by_xpath(&quot;.//div[@class=&#x27;feed_content wbcon&#x27;]/a[@class=&#x27;W_texta W_fb&#x27;]&quot;).text</span>            BZNC = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]&quot;</span>).get_attribute(<span class="hljs-string">&quot;nick-name&quot;</span>)            <span class="hljs-comment"># print(nodes[2].find_element_by_xpath(&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]&quot;).get_attribute(&quot;nick-name&quot;))</span>        <span class="hljs-keyword">except</span>:            BZNC = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;博主昵称:&#x27;</span>, BZNC)        dic[i].append(BZNC)        <span class="hljs-keyword">try</span>:            BZZY = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/div[@class=&#x27;info&#x27;]/div[2]/a&quot;</span>).get_attribute(<span class="hljs-string">&quot;href&quot;</span>)            <span class="hljs-comment"># print(nodes[1].find_element_by_xpath(&quot;//*[@id=&quot;pl_feedlist_index&quot;]/div[2]/div[1]/div/div[1]/div[1]/a&quot;).get_attribute(&quot;href&quot;))</span>            <span class="hljs-comment"># print(nodes[1].find_element_by_css_selector(&quot;#pl_feedlist_index &gt; div:nth-child(2) &gt; div:nth-child(1) &gt; div &gt; div.card-feed &gt; div.avator &gt; a&quot;).get_attribute(&quot;href&quot;))</span>        <span class="hljs-keyword">except</span>:            BZZY = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;博主主页:&#x27;</span>, BZZY)        dic[i].append(BZZY)        <span class="hljs-comment"># 微博官方认证，没有爬取</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># WBRZ = nodes[i].find_element_by_xpath(&quot;.//div[@class=&#x27;feed_content wbcon&#x27;]/a[@class=&#x27;approve_co&#x27;]&quot;).get_attribute(&#x27;title&#x27;)#若没有认证则不存在节点</span>            WBRZ = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;info&#x27;]/div/a[contains(@title,&#x27;微博&#x27;)]&quot;</span>).get_attribute(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment"># 若没有认证则不存在节点</span>        <span class="hljs-keyword">except</span>:            WBRZ = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;微博认证:&#x27;</span>, WBRZ)        dic[i].append(WBRZ)        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># WBDR = nodes[i].find_element_by_xpath(&quot;.//div[@class=&#x27;feed_content wbcon&#x27;]/a[@class=&#x27;ico_club&#x27;]&quot;).get_attribute(&#x27;title&#x27;)#若非达人则不存在节点</span>            WBDR = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;feed_content wbcon&#x27;]/a[@class=&#x27;ico_club&#x27;]&quot;</span>).get_attribute(<span class="hljs-string">&#x27;title&#x27;</span>)  <span class="hljs-comment"># 若非达人则不存在节点</span>        <span class="hljs-keyword">except</span>:            WBDR = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;微博达人:&#x27;</span>, WBDR)        dic[i].append(WBDR)        <span class="hljs-comment"># 判断展开全文和网页链接是否存在</span>        <span class="hljs-keyword">try</span>:            nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a[@action-type=&#x27;fl_unfold&#x27;]&quot;</span>).is_displayed()            flag = <span class="hljs-literal">True</span>        <span class="hljs-keyword">except</span>:            flag = <span class="hljs-literal">False</span>        <span class="hljs-comment"># 获取微博内容</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> flag:                nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a[@action-type=&#x27;fl_unfold&#x27;]&quot;</span>).click()                time.sleep(<span class="hljs-number">1</span>)                WBNR = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[2]&quot;</span>).text.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)                <span class="hljs-comment"># 判断发布位置是否存在</span>                <span class="hljs-keyword">try</span>:                    nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a/i[@class=&#x27;wbicon&#x27;]&quot;</span>).is_displayed()                    flag = <span class="hljs-literal">True</span>                <span class="hljs-keyword">except</span>:                    flag = <span class="hljs-literal">False</span>                <span class="hljs-comment"># 获取微博发布位置</span>                <span class="hljs-keyword">try</span>:                    <span class="hljs-keyword">if</span> flag:                        pattern = nodes[i].find_elements_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[2]/a[i[@class=&#x27;wbicon&#x27;]]&quot;</span>)                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(pattern,<span class="hljs-built_in">list</span>):                            text = [p.text <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> pattern]                            FBWZ = [loc <span class="hljs-keyword">for</span> loc <span class="hljs-keyword">in</span> [re.findall(<span class="hljs-string">&#x27;^2(.*$)&#x27;</span>, t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> text] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(loc) &gt; <span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]                        <span class="hljs-keyword">else</span>:                            text = pattern.text                            FBWZ = re.findall(<span class="hljs-string">&#x27;^2(.*$)&#x27;</span>,text)[<span class="hljs-number">0</span>]                    <span class="hljs-keyword">else</span>:                        FBWZ = <span class="hljs-string">&#x27;&#x27;</span>                <span class="hljs-keyword">except</span>:                    FBWZ = <span class="hljs-string">&#x27;&#x27;</span>            <span class="hljs-keyword">else</span>:                WBNR = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]&quot;</span>).text.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)                <span class="hljs-comment"># 判断发布位置是否存在</span>                <span class="hljs-keyword">try</span>:                    nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a/i[@class=&#x27;wbicon&#x27;]&quot;</span>).is_displayed()                    flag = <span class="hljs-literal">True</span>                <span class="hljs-keyword">except</span>:                    flag = <span class="hljs-literal">False</span>                <span class="hljs-comment"># 获取微博发布位置</span>                <span class="hljs-keyword">try</span>:                    <span class="hljs-keyword">if</span> flag:                        pattern = nodes[i].find_elements_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;txt&#x27;]/a[i[@class=&#x27;wbicon&#x27;]]&quot;</span>)                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(pattern,<span class="hljs-built_in">list</span>):                            text = [p.text <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> pattern]                            FBWZ = [loc <span class="hljs-keyword">for</span> loc <span class="hljs-keyword">in</span> [re.findall(<span class="hljs-string">&#x27;^2(.*$)&#x27;</span>, t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> text] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(loc) &gt; <span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]                        <span class="hljs-keyword">else</span>:                            text = pattern.text                            FBWZ = re.findall(<span class="hljs-string">&#x27;^2(.*$)&#x27;</span>,text)[<span class="hljs-number">0</span>]                    <span class="hljs-keyword">else</span>:                        FBWZ = <span class="hljs-string">&#x27;&#x27;</span>                <span class="hljs-keyword">except</span>:                    FBWZ = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">except</span>:            WBNR = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;微博内容:&#x27;</span>, WBNR)        dic[i].append(WBNR)        print(<span class="hljs-string">&#x27;发布位置:&#x27;</span>, FBWZ)        dic[i].append(FBWZ)        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># FBSJ = nodes[i].find_element_by_xpath(&quot;.//div[@class=&#x27;feed_from W_textb&#x27;]/a[@class=&#x27;W_textb&#x27;]&quot;).text</span>            FBSJ = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;from&#x27;]/a[1]&quot;</span>).text        <span class="hljs-keyword">except</span>:            FBSJ = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;发布时间:&#x27;</span>, FBSJ)        dic[i].append(FBSJ)        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># WBDZ = nodes[i].find_element_by_xpath(&quot;.//div[@class=&#x27;feed_from W_textb&#x27;]/a[@class=&#x27;W_textb&#x27;]&quot;).get_attribute(&quot;href&quot;)</span>            WBDZ = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;from&#x27;]/a[1]&quot;</span>).get_attribute(<span class="hljs-string">&quot;href&quot;</span>)        <span class="hljs-keyword">except</span>:            WBDZ = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;微博地址:&#x27;</span>, WBDZ)        dic[i].append(WBDZ)        <span class="hljs-keyword">try</span>:            WBLY = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;content&#x27;]/p[@class=&#x27;from&#x27;]/a[2]&quot;</span>).text        <span class="hljs-keyword">except</span>:            WBLY = <span class="hljs-string">&#x27;&#x27;</span>        print(<span class="hljs-string">&#x27;微博来源:&#x27;</span>, WBLY)        dic[i].append(WBLY)        <span class="hljs-keyword">try</span>:            ZF_TEXT = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//a[@action-type=&#x27;feed_list_forward&#x27;]&quot;</span>).text            <span class="hljs-comment">#            ZF_TEXT = nodes[10].find_element_by_xpath(&quot;.//a[@action-type=&#x27;feed_list_forward&#x27;]&quot;).text</span>            <span class="hljs-comment">#            ZF_TEXT.split(&#x27; &#x27;)[1]</span>            <span class="hljs-keyword">if</span> ZF_TEXT == <span class="hljs-string">&#x27;转发&#x27;</span>:                ZF = <span class="hljs-number">0</span>            <span class="hljs-keyword">else</span>:                ZF = <span class="hljs-built_in">int</span>(ZF_TEXT.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">1</span>])        <span class="hljs-keyword">except</span>:            ZF = <span class="hljs-number">0</span>        print(<span class="hljs-string">&#x27;转发:&#x27;</span>, ZF)        dic[i].append(ZF)        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># PL_TEXT = nodes[i].find_element_by_xpath(&quot;.//a[@action-type=&#x27;feed_list_comment&#x27;]//em&quot;).text#可能没有em元素</span>            PL_TEXT = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//a[@action-type=&#x27;feed_list_comment&#x27;]&quot;</span>).text  <span class="hljs-comment"># 可能没有em元素</span>            <span class="hljs-comment"># nodes[10].find_element_by_xpath(&quot;.//a[@action-type=&#x27;feed_list_comment&#x27;]&quot;).text</span>            <span class="hljs-keyword">if</span> PL_TEXT == <span class="hljs-string">&#x27;评论&#x27;</span>:                PL = <span class="hljs-number">0</span>            <span class="hljs-keyword">else</span>:                PL = <span class="hljs-built_in">int</span>(PL_TEXT.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">1</span>])        <span class="hljs-keyword">except</span>:            PL = <span class="hljs-number">0</span>        print(<span class="hljs-string">&#x27;评论:&#x27;</span>, PL)        dic[i].append(PL)        <span class="hljs-keyword">try</span>:            ZAN_TEXT = nodes[i].find_element_by_xpath(<span class="hljs-string">&quot;.//a[@action-type=&#x27;feed_list_like&#x27;]//em&quot;</span>).text  <span class="hljs-comment"># 可为空</span>            <span class="hljs-comment"># ZAN_TEXT = nodes[10].find_element_by_xpath(&quot;.//a[@action-type=&#x27;feed_list_like&#x27;]&quot;).text #可为空</span>            <span class="hljs-keyword">if</span> ZAN_TEXT == <span class="hljs-string">&#x27;&#x27;</span>:                ZAN = <span class="hljs-number">0</span>            <span class="hljs-keyword">else</span>:                ZAN = <span class="hljs-built_in">int</span>(ZAN_TEXT)        <span class="hljs-keyword">except</span>:            ZAN = <span class="hljs-number">0</span>        print(<span class="hljs-string">&#x27;赞:&#x27;</span>, ZAN)        dic[i].append(ZAN)        print(<span class="hljs-string">&#x27;\n&#x27;</span>)    <span class="hljs-comment"># 写入Excel</span>    writeXLS(dic)<span class="hljs-comment"># *******************************************************************************</span><span class="hljs-comment">#                                程序入口</span><span class="hljs-comment"># *******************************************************************************</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-comment"># 定义变量</span>    username = <span class="hljs-string">&#x27;*************&#x27;</span>  <span class="hljs-comment"># 输入你的用户名</span>    password = <span class="hljs-string">&#x27;*************&#x27;</span>  <span class="hljs-comment"># 输入你的密码</span>    <span class="hljs-comment"># 操作函数</span>    LoginWeibo(username, password)  <span class="hljs-comment"># 登陆微博</span>    <span class="hljs-comment"># 搜索热点微博 爬取评论</span>    key = <span class="hljs-string">&#x27;青少年沉迷网络&#x27;</span>    GetSearchContent(key)</code></pre><p><span class="label label-primary">代码二借助 xlrd 模块提取 xls 的动态栏数据至 txt</span></p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-keyword">import</span> xlrd<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract</span>(<span class="hljs-params">inpath,f</span>):</span>    date = xlrd.open_workbook(inpath, encoding_override=<span class="hljs-string">&#x27;utf-8&#x27;</span>)    sheets = date.nsheets    print(sheets)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,sheets):        table = date.sheets()[i]<span class="hljs-comment">#选定表</span>        nrows = table.nrows<span class="hljs-comment">#获取行号</span>        ncols = table.ncols<span class="hljs-comment">#获取列号</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nrows):            alldate = table.row_values(i)<span class="hljs-comment">#循环输出excel表中每一行，即所有数据</span>            result = alldate[<span class="hljs-number">4</span>]<span class="hljs-comment">#取出表中第4列数据</span>            print(result)            f.write(result+<span class="hljs-string">&quot;\n&quot;</span>)inpath = <span class="hljs-string">&#x27;D:\桌面\Python\拓展\weiboSpider-master\关键词爬取\crawl_output_YS.xls&#x27;</span><span class="hljs-comment">#excel文件所在路径</span>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;提取到的第二列数据.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)extract(inpath,f)f.close()</code></pre><p><span class="label label-primary">代码三借助  jieba 和  wordcloud  模块将提取的动态数据进行分词、可视化操作</span>  [5]</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> wordcloud<span class="hljs-comment"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span><span class="hljs-keyword">import</span> imageiomk = imageio.imread(<span class="hljs-string">&quot;未标题-1.png&quot;</span>)<span class="hljs-comment"># 构建并配置词云对象w，注意要加stopwords集合参数，将不想展示在词云中的词放在stopwords集合里，这里去掉“曹操”和“孔明”两个词</span>w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>,                        height=<span class="hljs-number">700</span>,                        background_color=<span class="hljs-string">&#x27;white&#x27;</span>,                        font_path=<span class="hljs-string">&#x27;msyh.ttc&#x27;</span>,                        mask=mk,                        scale=<span class="hljs-number">5</span>                        )<span class="hljs-comment"># 对来自外部文件的文本进行中文分词，得到string</span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;提取到的第五列数据.txt&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)txt = f.read()txtlist = jieba.lcut(txt)string = <span class="hljs-string">&quot; &quot;</span>.join(txtlist)<span class="hljs-comment"># 将string变量传入w的generate()方法，给词云输入文字</span>w.generate(string)<span class="hljs-comment"># 将词云图片导出到当前文件夹</span>w.to_file(<span class="hljs-string">&#x27;青少年沉迷网络01.png&#x27;</span>)</code></pre><h3 id="2-3-运行结果示例"><a href="#2-3-运行结果示例" class="headerlink" title="2.3 运行结果示例"></a>2.3 运行结果示例</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205744.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205628.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205835.png" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123205838.png" alt=""></p><h2 id="3-论文主体"><a href="#3-论文主体" class="headerlink" title="3.论文主体"></a>3.论文主体</h2><p>通过爬取以及可视化之后我们发现爬取数据中出现频率较高的一些词汇包含以下内容： <strong>青少年沉迷网络<br>收起全文（忽略） 网络 网路 游戏机  光盘 净空法师 阿弥陀佛 毒药 害人 网络游戏 侵蚀 荒废 杀人 荒废学业 色情 害人 祸害 法身 山东 临沂 杨氏模 机构 CCTV 今日说法 焦点访谈 救治 担心 孩子 挽回 千家万户 家长 民族 儿女 中国 文明 健康 强大  必须 严厉 监管 有关部门  腾讯 网吧 政府 支持 推广 公立  时间 观察 请问 央视 新闻 爱</strong></p><p>接下来我将从家庭社会对青少年沉迷网络的态度做法来分析当前未成年人沉迷网络现状，由当前现状来分析为什么青少年会沉迷于网络，最后根据一些自己以及网络上的看法来分析如何做到防止青少年沉迷网络。</p><h3 id="3-1-当前未成年人沉迷网络现状"><a href="#3-1-当前未成年人沉迷网络现状" class="headerlink" title="3.1 当前未成年人沉迷网络现状"></a>3.1 当前未成年人沉迷网络现状</h3><p>当看到上面提取的关键词的时候，我的内心是极其欢喜的，因为在这些关键词里面我感觉到互联网的奇妙，互联网涵盖了几乎这个问问题的所有社会观点，于是我将这些关键词进行分类处理得到以下几类：</p><p><span class="label label-primary"><br>青少年沉迷网络<br>收起全文（忽略）<br>网络 网路 游戏机 光盘 腾讯 网络游戏 色情<br>净空法师 阿弥陀佛<br>毒药  侵蚀 杀人 荒废学业 害人 祸害<br>法身 山东 临沂 杨氏模 机构 CCTV 今日说法 焦点访谈 救治<br>担心 孩子 挽回 千家万户 家长<br>民族 儿女 中国 文明 健康 强大<br>必须 严厉 监管 有关部门  腾讯 网吧 政府 支持 推广 公立<br>时间 观察 请问 央视 新闻 爱</span></p><p><span class="label label-primary">对以上词汇分析可得到一下几点内容：<br>当前青少年沉迷于网络多半是因为网络游戏，随着互联网的普及，各种互联网衍生品也层出不穷，例如色情、网络游戏等，互联网游戏公司也如雨后春笋般的蓬勃发展，也正是因为游戏的不断创作导致很多自制力还不健全的青少年沉浸其中。</span><br><span class="label label-primary">随着青少年沉迷网络的数目不断变大，社会中讨伐互联网的舆论也不断上升，主要表现为：<br>互联网荒废青少年的学业<br>互联网就是毒药，祸害人。<br>互联很多是竞技比赛，打打杀杀导致社会犯罪率增加。</span></p><p><span class="label label-primary">针对青少年沉迷网络，引发社会各种舆论对策：</span></p><p><span class="label label-primary">家长对子女的担心、忧虑。</span><br><span class="label label-primary">以山东临沂戒网中心为代表的所谓”杨氏模救治“机构的建立。</span><br><span class="label label-primary">CCTV、焦点访谈针对未成年人沉迷网络的相关报道。</span><br><span class="label label-primary">政府考虑社会热点以及民族未来开展“健康中国”“文明中国”活动。</span><br><span class="label label-primary">政府推进对网吧、腾讯等平台的监管力度。</span><br><span class="label label-primary">还有一部分人不反对青少年合理利用网络，认为互联网更像是七八十年代的摇滚乐，只是还没有被人们认可，暂时地认为是腐朽青年一代的产品。在他们看来，青少年沉迷网络的根本原因是由于家庭中缺少爱。</span></p><h3 id="3-2-为什么青少年会沉迷网络"><a href="#3-2-为什么青少年会沉迷网络" class="headerlink" title="3.2 为什么青少年会沉迷网络"></a>3.2 为什么青少年会沉迷网络</h3><p><span class="label label-primary"><br>  知乎问题：青少年为何会对网络成瘾？[6]</p><p>  孩子没有获得足够的陪伴。<br>  孩子没有获得尊重。<br>  青少年的发展特点 根据马斯洛需求层次理论，人底层的需求被满足后，便会产生高层次的需。如果心理需求不能得到满足的话，会产生焦虑，孤独等心理问题。青少面时期是个体由不成熟过渡的重要时期，心理状态不稳定，情绪起伏大，自制力相对较差，心理需要比成年人强烈而明显。<br>&lt;/span&gt;</p><p>从社会角度考虑，当今社会是互联网社会，随着笔记本电脑、平板、智能手机等互联网产品种类以及支付宝、淘宝、QQ、微信等软件的开发利用，涵盖人们生活的各个领域，娱乐作为人们日常生活重要的一部分，游戏行业蓬勃发展，也逐渐赢得了青少年的喜爱。再加上当今社会重功利化，家庭赋予太大的学习压力，游戏也顺势站在了学习的对立面；从青少年人群分析我们知道青少年自制力稍欠，并且获取信息的欲望很强，很难在网络中辨别是非，误入歧途；站在游戏的角度考虑，为什么会受到那么多人的喜爱。我想他们正是抓住了很多人在生活中没有存在感，缺少父母的陪伴，于是在网络中提供了一个可以有存在感的空间；但是最重要的一点还是家庭原因，青少年在家轻重缺少陪伴与关爱，再加上对现实生活的不满，他们不得不选择去互联网去释放压力寻求慰藉。</p><h3 id="3-3-怎样才能做到防青少年沉迷网络"><a href="#3-3-怎样才能做到防青少年沉迷网络" class="headerlink" title="3.3 怎样才能做到防青少年沉迷网络"></a>3.3 怎样才能做到防青少年沉迷网络</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123210526.jpg" alt=""><br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123210527.jpg" alt=""></p><p class="note note-primary">  朱永新建议，从网络游戏类别、认证、时长、充值方面建立网络游戏强制分级制度，并由相关政府部门审核监管。根据目前社会发展客观实际和网络游戏内容，比如是否包含暴力内容、不良语言、性内容等，可从早教类、管控类、限制类、禁止类等方面划分，对不同年龄段的未成年人建立网络游戏产品分级制度，其中包括实行用户注册登录实名认证分级，通过未成年人及其监护人身份证信息、手机号或人脸识别等方式实行未成年人登录网游时段、时长监管分级，实行游戏充值限额分级等。  朱永新还建议，建立网络游戏分级监管与评价机制，并修订完善网络游戏法律法规，对《未成年保护法》《网络安全法》《出版管理条例》《网络游戏管理暂行办法》进行修订，增加“基于未成年人保护的网络游戏分级”相关内容。[6]</p><p>在今年两会上，也有关于青少年沉迷网络的声音，因为目前我国尚没有全国性的行业协会，相关法律法规及管理条例内容宏观，缺少具体的细则和分级方案，执行效果不明显。全国政协委员、民进中央副主席朱永新呼吁建立网络游戏分级制度，通过人脸识别等技术实行未成年人登入网游时段、时长监管分级，防止青少年沉迷网络游戏。因此，政府还应该完善相关法律制度，建立健全相关法律规章制度，企业也应做好对未成年人的监督，在技术层面上做到硬核防沉迷。</p><p class="note note-primary">从家庭教育关注未成年人权益保护，是一个很重要的角度。家庭是青少年成长的第一环境，是预防青少年走向犯罪歧路的第一道防线。孩子出了问题，多数情况下说明家庭教育出了问题。现在正大修的未成年人保护法和预防未成年人犯罪法，都把家庭教育作为了发力点之一。但相对来说，这都是一些原则性规定，效力十分有限。制定专门的“家庭教育法”，是在更高维度上唤起社会重视：家庭教育是不是一门专门的学问？家长需不需要接受专门的教育？答案是肯定的。</p><p class="note note-primary">这次疫情期间，让近2亿中小学生迎来史无前例的在线教育，同时也凸显了青少年沉迷网络的问题。许多家长惊奇地发现，以前总是把问题归咎为“没时间照顾孩子”，但现在陪孩子的时间多了，却发现不了解他们，甚至无法沟通交流。这种尴尬指向的是，大多数人结婚生子后就无师自通，不需要学习就当上了家长。这实际是不够的，正如蒙台梭利所说，“儿童是成人之父”。和孩子相处是个学习和成长过程，家长们不应把教育看得太简单。</p>  <p class="note note-primary">以“沉迷游戏”为例。调查显示，有4种青少年特别容易出现游戏成瘾现象，分别是家庭条件较差的；隔代教育下的；家庭关系差、亲子互动少的；家长对子女游戏行为没有限制的。它的心理机制是：亲子互动不足，只好到游戏里找补偿。家长需要反思的是，如果只生不养、只养不教，一下班自己也玩游戏，将孩子丢给别人看护，甚至拿手机当“电子保姆”，孩子很可能产生心理偏差。可见，家长需要接受教育，思考怎样正确爱孩子，让孩子健康成长。</p>  <p class="note note-primary">进一步，“家庭教育法”有助于厘清家庭教育和学校教育的责任边界。学校、社会、家庭教育三者为一体，学校教育负责传道授业，社会教育重在历事练心，家庭教育关心爱和成长，三者互为犄角，谁也取代不了谁。但在现实中，人们常常把孩子的希望寄托在学校，过分夸大学校教育的作用，轻视自己的责任，这是一种失职渎职。进一步明确家庭教育的定位和功能，有利于家长看到自身责任，从而合力探讨家庭教育怎么做，它的着力点、抓手在哪里。</span>  <p class="note note-primary">“天下之本在国，国之本在家。”习近平总书记多次强调要“注重家庭、注重家教、注重家风”，强调家长要给孩子讲好“人生第一课”，帮助扣好人生第一粒扣子，并强调要认真研究家庭领域出现的新情况新问题，把推进家庭工作作为一项长期任务抓实抓好。长期以来，家庭教育被认为是私领域的事，没有引起足够重视。人大代表的立法建议，有利于提升家庭教育地位、规范家庭教育行为。就目前来讲，如果能引起家庭的反思，也是件十分有益的事。</p>[7]<p class="note note-primary">当然最重要的还是家庭层面，有时候孩子需要的不是锦衣玉食、而是陪伴。现代生活中，人们的生活逐渐碎片化，家长们越来越忙，家里买台电脑、买个平板可以让孩子在网上学习，但是对于孩子来说，他们尚未形成良好的自制能力，对网络繁杂的信息，没有辨别好坏的能力，他会忍不住玩游戏或者浏览色情网站，从而潜移默化的影响着他们的生活习惯甚至一生。因此，家长应该正视互联网或者游戏，不是上网就是有“网瘾”，应该重视与孩子的沟通，寓教于乐，多关注孩子的动态以及上网习惯、及时对孩子进行正面指导[8]。学校社会媒体也应该正视网络，不要妖魔化网络，积极宣传正能量，引导青少年健康文明上网。</p><p class="note note-primary">正如上文所说，此次疫情“网上课堂”凸显了这个问题，我们就应该全民正视这个问题，不要推脱责任给任何不良机构或者控诉某些企业，多从自己方面找原因，这一点，我认为家长、学校、社会三方都应该做好反思。</p><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h2><p>网络上对互联网的夸赞不胜其属，其中就有人认为互联网解放了青少年的思想，固然他拓宽了人们获取知识的渠道，当然随着生活水平的提高，互联网的确给生活带来了极大的便利，但是这仍然无法掩盖互联网是把双刃剑的事实。在这里，最主要的还是家长需要接受教育，思考怎样正确爱孩子，让孩子健康成长。请不要绑架互联网，互联网只是工具，说白了，没有上瘾与不上瘾，只有失败和不失败。这不应该是家长掩盖教育失败这个事实而冠冕堂皇的理由。当然，政府企业也应该重视青少年的发展。建立健全相关法律法规，完善监管制度，让祖国的下一代能够健康成长。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/xifengmo/p/10989565.html">解决python中’chromedriver’ executable needs to be in PATH报错</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/qq_41429288/article/details/80472064">关于Chromedriver如何配置环境变量问题解决</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/princewen/python3_crawl/blob/master/爬虫实战/使用selenium爬取按关键词搜索的微博.py">使用selenium爬取按关键词搜索的微博.py](https://github.com/princewen/python3_crawl/blob/master/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/%E4%BD%BF%E7%94%A8selenium%E7%88%AC%E5%8F%96%E6%8C%89%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%E7%9A%84%E5%BE%AE%E5%8D%9A.py</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="http://www.chenxm.cc/article/882.html">python xlrd读取excel(表格)详解</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/qq_41822781/article/details/90671050">词云可视化：四行Python代码轻松上手到精通</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://ie.bjd.com.cn/5b165687a010550e5ddc0e6a/contentApp/5b16573ae4b02a9fe2d558f9/AP5ecb00b6e4b0be621cbdc2d0.html">朱永新委员：建立网络游戏分级制 人脸识别防未成年人沉迷</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://static.nfapp.southcn.com/content/202005/21/c3560548.html?from=timeline&amp;date=ZjNhZWVlMTEtZGU0MS00MmM1LWFmOWItM2EyODIwYjMzYjk2&amp;layer=4">叮咚看两会|制定“家庭教育法”很有必要</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/35749013">如何减少互联网带给孩子的危害</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
      <tag>网络沉迷</tag>
      
      <tag>青少年</tag>
      
      <tag>调查报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[11:面向初学者的20个树莓派命令]</title>
    <link href="/2020/07/18/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B11%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%8420%E4%B8%AA%E6%A0%91%E8%8E%93%E6%B4%BE%E5%91%BD%E4%BB%A4%5D/"/>
    <url>/2020/07/18/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B11%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%8420%E4%B8%AA%E6%A0%91%E8%8E%93%E6%B4%BE%E5%91%BD%E4%BB%A4%5D/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">  您可能从快乐的Windows GUI用户变为没有按钮或双击任何东西的怀旧黑屏和绿屏。自从您的第一台PC开始使用GUI以来，这可能是令人恐惧的事情。  但是，有许多小技巧和命令可以帮助用户获得使用该系统的信心。  这里没有高级或突破性的内容，只有日常的基本命令可以帮助您从终端窗口浏览和执行Raspberry Pi的简单任务。随着时间的推移，您会发现更多的东西，但这是一个很好的起点。</p><h2 id="01-sudo-apt-get更新-更新程序包列表"><a href="#01-sudo-apt-get更新-更新程序包列表" class="headerlink" title="01.[sudo apt-get更新]-更新程序包列表"></a>01.[sudo apt-get更新]-更新程序包列表</h2><p><span class="label label-primary">终端中的更新命令<br><pre><code class="hljs shell">sudo apt-get update</code></pre><br><span class="label label-primary">这是更新Raspberry Pi的第一阶段（有关其他步骤，请参阅此列表中的下两个项目）。</span></p><p>“ sudo apt-get update”命令 从存储库下载软件包列表，并获取有关这些软件包的最新版本以及任何相关软件包的信息。</p><p>因此，它实际上并没有进行传统意义上的任何实际更新。在整个过程中，它更是一个必需的步骤。</p><h2 id="02-sudo-apt-get-upgrade-下载并安装更新的软件包"><a href="#02-sudo-apt-get-upgrade-下载并安装更新的软件包" class="headerlink" title="02.[sudo apt-get upgrade]-下载并安装更新的软件包"></a>02.[sudo apt-get upgrade]-下载并安装更新的软件包</h2><p><span class="label label-primary">终端中的升级命令</span><br><pre><code class="hljs shell">sudo apt-get upgrade</code></pre><br><span class="label label-primary">此命令从我们更新软件包列表的上一个项目开始。</span></p><p>有了我们更新的软件包列表后，“ sudo apt-get upgrade”命令将查看当前安装的软件包，然后查看最新的软件包列表（我们刚刚升级的软件包），然后最后安装所有尚未安装的新软件包。</p><h2 id="03-sudo-apt-get-clean-清理旧程序包文件"><a href="#03-sudo-apt-get-clean-清理旧程序包文件" class="headerlink" title="03.[sudo apt-get clean]-清理旧程序包文件"></a>03.[sudo apt-get clean]-清理旧程序包文件</h2><p><span class="label label-primary">终端中的清理命令</span><br><pre><code class="hljs shell">sudo apt-get clean</code></pre><br><span class="label label-primary">更新和升级过程的最后阶段，如果您有足够的磁盘空间，那么这并非总是必不可少的。</span></p><p>“ sudo apt-get clean”命令删除在更新过程中下载的冗余软件包文件（.deb文件）。</p><p>如果您空间有限或只想进行良好的清理，这是一个方便的命令。</p><h2 id="04-sudo-raspi-config-Raspberry-Pi配置工具"><a href="#04-sudo-raspi-config-Raspberry-Pi配置工具" class="headerlink" title="04.[sudo raspi-config]-Raspberry Pi配置工具"></a>04.[sudo raspi-config]-Raspberry Pi配置工具</h2><p><span class="label label-primary">Raspberry Pi配置工具</span></p><p><span class="label label-primary">这应该是您首次开始使用Raspberry Pi时要采取的第一步，以确保已针对您的语言，硬件和项目进行了设置。</span></p><p>配置工具就像一个“设置”窗口，可让您设置语言，时间/日期，启用摄像头模块，对处理器进行超频，启用设备，更改密码以及许多其他选项。</p><p>您可以通过键入“ sudo raspi-config”然后按回车来访问它。根据您所做的更改，之后可能会提示您重新启动Pi。</p><h2 id="05-ls-列出目录内容"><a href="#05-ls-列出目录内容" class="headerlink" title="05.[ls]-列出目录内容"></a>05.[ls]-列出目录内容</h2><p><span class="label label-primary">终端中的ls命令</span></p><pre><code class="hljs shell">ls 目录</code></pre><p><span class="label label-primary">Linux的“目录”与Windows中的“文件夹”相同。这可能是您（Windows用户）必须习惯的。</span></p><p>当然，终端中没有浏览器，因此要查看您在任何给定时间所在目录的内容，只需键入“ ls”并按回车即可。</p><p>您将看到列出该目录中的每个文件和目录，并且通常为不同项目使用颜色编码。</p><h2 id="06-cd-更改目录"><a href="#06-cd-更改目录" class="headerlink" title="06.[cd]-更改目录"></a>06.[cd]-更改目录</h2><p><span class="label label-primary">终端中的cd命令</span><br><pre><code class="hljs shell">cd 目录</code></pre><br><span class="label label-primary">如果要跳转到某个目录，可以使用“ cd”命令。</span></p><p>如果您已经在其中的目录中有目录，则可以简单地使用“ cd directoryname”（用目录名替换“ directoryname”）。</p><p>如果它在文件系统中的其他位置，只需在命令后输入路径，例如“ cd / home / pi / directoryname”。</p><p>此命令的另一个方便用法是“ cd ..”，它使您返回一个文件夹级别，类似于“返回”按钮。</p><h2 id="07-mkdir-创建目录"><a href="#07-mkdir-创建目录" class="headerlink" title="07.[mkdir]-创建目录"></a>07.[mkdir]-创建目录</h2><p><span class="label label-primary">终端中的mkdir命令</span></p><p><span class="label label-primary">mkdir 目录名</span></p><p><span class="label label-primary">如果需要在已经存在的目录中创建一个新目录，则可以使用“ mkdir”命令。这是 相当于终端世界的新&gt; 文件夹。</span></p><p>要创建新目录，只需在命令后添加目录名称，例如’mkdir new_directory’。</p><h2 id="08-rmdir-删除目录"><a href="#08-rmdir-删除目录" class="headerlink" title="08.[rmdir]-删除目录"></a>08.[rmdir]-删除目录</h2><p><span class="label label-primary">您已经了解了如何创建新目录，但是如果要删除一个目录该怎么办？</span></p><pre><code class="hljs shell">rmdir 目录名</code></pre><p><span class="label label-primary">这是删除目录的非常相似的命令，只需使用“ rmdir”然后输入目录名称即可。</span></p><p>例如，“ rmdir directory_name”将删除目录“ directory_name”。值得注意的是，该目录必须为空才能执行此命令。</p><h2 id="09-mv-移动文件"><a href="#09-mv-移动文件" class="headerlink" title="09.[mv]-移动文件"></a>09.[mv]-移动文件</h2><p><span class="label label-primary">使用“ mv”命令移动文件</span><br><pre><code class="hljs shell">mv 文件名 移动位置</code></pre><br><span class="label label-primary">通过使用“ mv”命令可在目录之间移动文件。</span></p><p>要移动文件，请使用“ mv”，然后是文件名，然后是目标目录。</p><p>例如“ mv my_file.txt / home / pi / destination_directory”，它将“ my_file.txt”文件移动到“ / home / pi / destination_directory”。</p><h2 id="10-tree-d-显示目录树"><a href="#10-tree-d-显示目录树" class="headerlink" title="10.[tree -d]-显示目录树"></a>10.[tree -d]-显示目录树</h2><pre><code class="hljs shell">tree -d</code></pre><p><span class="label label-primary">Tree命令是查看目录结构的便捷方法</span><br>创建少量新目录后，您可能会缺少Windows文件资源管理器的可视文件夹结构视图。如果无法看到目录的直观布局，事情可能会很快变得混乱。</p><p>可以帮助您更清楚地了解目录的命令之一是“ tree -d”。它在终端内以树状布局显示所有目录。</p><h2 id="11-pwd-显示当前目录"><a href="#11-pwd-显示当前目录" class="headerlink" title="11.[pwd]-显示当前目录"></a>11.[pwd]-显示当前目录</h2><pre><code class="hljs shell">pwd</code></pre><p><span class="label label-primary">当您开始感到有点迷茫时，使用“ pwd”可以为您提供帮助！</span></p><p>当您迷路时，另一个帮助您的便捷命令是’pwd’命令。如果您只想知道自己在任何给定时间的位置，这将非常方便。</p><p>只需随时输入“ pwd”以显示您所在的当前目录路径。</p><h2 id="12-clear-清除终端窗口"><a href="#12-clear-清除终端窗口" class="headerlink" title="12.[clear]-清除终端窗口"></a>12.[clear]-清除终端窗口</h2><pre><code class="hljs shell">clear</code></pre><p><span class="label label-primary">在终端中清除命令</span></p><p>当您开始使用终端机时，您会发现它会变得很混乱。在执行一些命令之后，您会在屏幕上留下一小段文字，对于我们中的某些人来说可能有点烦人。</p><p>如果要擦拭屏幕干净，只需使用“ clear”命令。屏幕将被清除，为下一个命令做好准备。</p><h2 id="13-sudo-half-关闭您的Raspberry-Pi"><a href="#13-sudo-half-关闭您的Raspberry-Pi" class="headerlink" title="13.[sudo half]-关闭您的Raspberry Pi"></a>13.[sudo half]-关闭您的Raspberry Pi</h2><p><span class="label label-primary">使用“ half”命令安全关闭Raspberry Pi</span></p><p>安全地关闭Raspberry Pi可以避免SD卡损坏等问题。您有时可以通过快速拉动电源线来逃脱，但是最终，您将杀死您的卡。</p><p>要正确关闭树莓派，请使用“ sudo halt”。在Pi的LED上最后闪烁一次之后，您可以拔下电源线。</p><h2 id="14-sudo-reboot-重新启动Raspberry-Pi"><a href="#14-sudo-reboot-重新启动Raspberry-Pi" class="headerlink" title="14.[sudo reboot]-重新启动Raspberry Pi"></a>14.[sudo reboot]-重新启动Raspberry Pi</h2><p><span class="label label-primary">在终端中使用重新启动来重新启动Pi</span></p><pre><code class="hljs shell">sudo reboot</code></pre><p>与shutdown命令类似，如果您想以安全的方式重启Raspberry Pi，则可以使用“ reboot”命令。</p><p>只需键入“ sudo reboot”，Pi就会自行重启。</p><h2 id="15-startx-启动桌面环境（LXDE）"><a href="#15-startx-启动桌面环境（LXDE）" class="headerlink" title="15.[startx]-启动桌面环境（LXDE）"></a>15.[startx]-启动桌面环境（LXDE）</h2><p><span class="label label-primary">终端中的startx命令</span></p><pre><code class="hljs shell">startx</code></pre><p><span class="label label-primary">如果您将Pi设置为始终在终端中启动，则您可能想知道如何启动桌面（如果需要使用它）。</span></p><p>使用“ startx”启动LXDE（轻便X11桌面环境）。应该注意的是，这将无法通过SSH会话进行。</p><h2 id="16-ifconfig-查找您的Raspberry-Pi的IP地址"><a href="#16-ifconfig-查找您的Raspberry-Pi的IP地址" class="headerlink" title="16.[ifconfig]-查找您的Raspberry Pi的IP地址"></a>16.[ifconfig]-查找您的Raspberry Pi的IP地址</h2><pre><code class="hljs shell">ifconfig</code></pre><p><span class="label label-primary">ifconfig可以为您提供有用的网络信息</span><br>在很多情况下，可能需要您知道Raspberry Pi 的IP地址。许多人在配置SSH会话以远程访问其Pi时使用它。</p><p>要查找您的IP地址，请在终端中键入“ ifconfig”，然后按Enter。您也可以使用“主机名-I”自行查找IP地址。</p><h2 id="17-nano-编辑文件"><a href="#17-nano-编辑文件" class="headerlink" title="17.[nano]-编辑文件"></a>17.[nano]-编辑文件</h2><p><span class="label label-primary">终端中的Nano，是Raspberry Pi的首选文本编辑器</span><br>Linux有许多不同的文本编辑器，由于各种原因，您会发现有些人喜欢使用另一种。</p><p>要编辑文件，只需键入“ nano”，然后键入文件名，例如“ nano myfile.txt”。编辑完成后，按Ctrl + X保存文件。</p><h2 id="18-cat-显示文件的内容"><a href="#18-cat-显示文件的内容" class="headerlink" title="18.[cat]-显示文件的内容"></a>18.[cat]-显示文件的内容</h2><pre><code class="hljs shell">cat</code></pre><p><span class="label label-primary">终端中的cat</span></p><p>虽然可以使用“ nano”（上方）打开文件进行编辑，但是可以使用单独的命令在终端中简单列出文件的内容。</p><p>使用“ cat”后跟文件名来执行此操作，例如，“ cat myfile.txt”。</p><h2 id="19-rm-删除文件"><a href="#19-rm-删除文件" class="headerlink" title="19.[rm]-删除文件"></a>19.[rm]-删除文件</h2><p><span class="label label-primary">终端中的rm命令有助于轻松删除文件</span><br><pre><code class="hljs shell">rm 文件名</code></pre><br>在Raspberry Pi上，删除文件很容易，并且在编写代码麻烦的同时制作许多版本的Python文件时，您会做很多事情。</p><p>要删除文件，我们使用“ rm”命令，后跟文件名。例如“ rm myfile.txt”。</p><h2 id="20-cp-复制文件或目录"><a href="#20-cp-复制文件或目录" class="headerlink" title="20.[cp]-复制文件或目录"></a>20.[cp]-复制文件或目录</h2><pre><code class="hljs shell">cp 文件名或目录名</code></pre><p><span class="label label-primary">终端中的cp命令可帮助复制文件</span><br><span class="label label-primary">当需要复制文件或目录时，请使用“ cp”命令。</span></p><p>要在同一目录中复制文件，请输入命令“ cp original_file new_file”</p><p>要在另一个具有相同名称的目录中进行复制，请输入命令“ cp original_file home / pi / subdirectory”</p><p>要复制整个目录（及其内容），请输入命令“ cp -R home / pi / folder_one home / pi / folder_two”。这会将“ folder_one”复制到“ folder_two”。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.lxx1.com/3985">面向初学者的20个树莓派命令</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.lifewire.com/raspberry-pi-terminal-commands-4054108">20 Handy Raspberry Pi Terminal Commands for Beginners</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[10:基地2.0开启9090端口和VNC内网穿透]</title>
    <link href="/2020/07/17/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B10%E5%9F%BA%E5%9C%B02.0%E5%BC%80%E5%90%AF9090%E7%AB%AF%E5%8F%A3%E5%92%8CVNC%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%5D/"/>
    <url>/2020/07/17/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B10%E5%9F%BA%E5%9C%B02.0%E5%BC%80%E5%90%AF9090%E7%AB%AF%E5%8F%A3%E5%92%8CVNC%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%5D/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">  之前做过本地搭的网站的内网穿透，但是想利用内网穿透把基地2.0的管理界面和vnc界面集成进去。之前也做过尝试，但是可能都由于安装的系统不完整等等原因导致无法穿透，今天尝试了一下vnc发现可以，但是9090管理端口可能由于安全连接导致无法实现……</p><h2 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122222722.png" alt=""></p><p><span class="label label-primary">这个端口没有安全设置，只需要按照sunny-ngrok官方文档设置就可以。</span></p><p><a href="http://www.baixf.xyz/index.php/2020/06/12/%e6%a0%91%e8%8e%93%e6%b4%be%e4%bd%bf%e7%94%a8ngrok%e8%bf%9b%e8%a1%8c%e5%86%85%e7%bd%91%e7%a9%bf%e9%80%8f%ef%bc%8c%e5%9c%a8%e5%85%ac%e7%bd%91%e4%b8%8a%e6%90%ad%e5%bb%ba%e4%b8%aa%e4%ba%ba%e5%8d%9a/">设置参考链接</a></p><h2 id="9090"><a href="#9090" class="headerlink" title="9090"></a>9090</h2><p><span class="label label-primary"><br>  错误显示如下：<br>  此网站无法提供安全连接，localhost 发送的响应无效</span></p><p><span class="label label-primary">在设置9090管理端口内网穿透时发现由于安全性无法进行连接，因此寻找方法，发现如下文章：</span></p><p><a href="https://blog.csdn.net/wang_xiaoniao/article/details/107280638">csdn原文链接</a></p><p><span class="label label-primary"></p><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>使用了https作为网络协议，应用http代替https。<br>  HTTPS和HTTP的区别<br>  1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。<br>  2、http是超文本传输1653协议，信息是明文传输，https则是具有安全性的ssl加密传输协议<br>  3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443<br>  4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>  其实网站的报错就已经提示了错误原因，此网站无法提供安全连接。因为我本地搭建的服务器并没有申请ssl数字证书，只是简单的作为项目运行时的临时服务器，所以无法用https进行访问。<br>  ————————————————<br>  版权声明：本文为CSDN博主「wang_xiaoniao」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>&lt;/span&gt;</p><p><span class="label label-primary">⚠即解决办法就是将内网穿透的http换成https协议</span></p><p><span class="label label-primary">修改后的效果如下</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122223141.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://www.ngrok.cc/_book/">Sunny-Ngrok使用教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.ngrok.cc/">Sunny-Ngrok官网</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>内网穿透</tag>
      
      <tag>9090端口</tag>
      
      <tag>vnc</tag>
      
      <tag>http协议</tag>
      
      <tag>sunny-ngrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[09:使用Ngrok进行内网穿透，在公网上搭建个人博客]</title>
    <link href="/2020/07/16/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B09%E4%BD%BF%E7%94%A8Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%9C%A8%E5%85%AC%E7%BD%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5D/"/>
    <url>/2020/07/16/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B09%E4%BD%BF%E7%94%A8Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%9C%A8%E5%85%AC%E7%BD%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5D/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">  树莓派性能虽然比不上家用电脑或者服务器，但是搭建个人博客网站足够了。我使用树莓派4B，在树莓派上安装了宝塔面板，利用wordpress在本地搭建了一个个人博客。博客搭建好了，树莓派网站只能在局域网内访问，存在外网无法访问的问题。为解决这个问题，经过一番搜索，终于发现树莓派可以使用Ngrok进行内网穿透，从而在公网上也可以访问树莓派上的博客网站。以下是教程。</p><h2 id="一、Ngrok-介绍和选择服务商"><a href="#一、Ngrok-介绍和选择服务商" class="headerlink" title="一、Ngrok 介绍和选择服务商"></a>一、Ngrok 介绍和选择服务商</h2><p><span class="label label-primary"><br>  首先，什么是Ngrok?</span></p><p><span class="label label-primary">ngrok 通过安全隧道将位于NAT和防火墙后面的本地服务器公开到公共Internet，即将没有公网IP地址的服务器公开到公网，从而可以在任何地方访问局域网内的服务器。</span></p><p><span class="label label-primary"><br>  其次，Ngrok是怎么运行的？</span></p><p><span class="label label-primary">您可以在计算机上下载并运行客户端程序，并为客户端提供网络服务（通常是Web服务器）的端口。</span></p><p><span class="label label-primary">客户端连接到ngrok云服务，该服务在公网上接受流量，并将该流量转发到计算机上运行的ngrok进程，然后再转发到您指定的本地地址，从而实现内网穿透。</span></p><p><span class="label label-primary">最后如何选择Ngrok云服务，如果你有云服务器，那么你可以自己搭建Ngrok云服务，也可以选择Ngrok服务商，因为方便就没有自建服务。对比了Ngrok官方和 Sunny Ngrok之后，最终选择了Sunny Ngrok，因为从两个服务商提供的服务来说，官方的不能自定义域名，虽然提供4个通道，但是每分钟有40次连接的限制。</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122224244.png" alt=""></p><h3 id="Ngrok-提供的服务价格"><a href="#Ngrok-提供的服务价格" class="headerlink" title="Ngrok 提供的服务价格"></a>Ngrok 提供的服务价格</h3><p><span class="label label-primary">而我只需要一个通道就够了，并且我有个人的域名，所以选择了可以自定义域名的Sunny Ngrok。</span></p><h2 id="二、注册Sunny-Ngrok，并开通隧道"><a href="#二、注册Sunny-Ngrok，并开通隧道" class="headerlink" title="二、注册Sunny-Ngrok，并开通隧道"></a>二、注册Sunny-Ngrok，并开通隧道</h2><p><span class="label label-primary">在Sunny-Ngrok上注册一个账号，然后进入后台，开通一个隧道。</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122224918.png" alt=""></p><p>开通Sunny-Ngrok 隧道</p><h2 id="三、在宝塔面板中绑定新的域名"><a href="#三、在宝塔面板中绑定新的域名" class="headerlink" title="三、在宝塔面板中绑定新的域名"></a>三、在宝塔面板中绑定新的域名</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122224956.png" alt=""></p><h2 id="四、下载客户端，并启动隧道"><a href="#四、下载客户端，并启动隧道" class="headerlink" title="四、下载客户端，并启动隧道"></a>四、下载客户端，并启动隧道</h2><h3 id="1-在树莓派上下载Ngrok客户端"><a href="#1-在树莓派上下载Ngrok客户端" class="headerlink" title="1.在树莓派上下载Ngrok客户端"></a>1.在树莓派上下载Ngrok客户端</h3><p><a href="http://hls.ctopus.com/sunny/linux_arm.zip?v=2">下载地址</a></p><p>下载完成之后将客户端执行文件移动到 /use/local/bin 目录下并给予可执行权限。</p><pre><code class="hljs shell">sudo mv sunny /usr/local/bin/sunnysudo chmod +x /usr/local/bin/sunny</code></pre><h3 id="2、编写启动脚本"><a href="#2、编写启动脚本" class="headerlink" title="2、编写启动脚本"></a>2、编写启动脚本</h3><pre><code class="hljs shell">sudo nano /etc/init.d/sunny/etc/init.d/sunny 启动脚本代码</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh -e</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><span class="hljs-meta">#</span><span class="bash"> Provides:          ngrok.cc</span><span class="hljs-meta">#</span><span class="bash"> Required-Start:    <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><span class="hljs-meta">#</span><span class="bash"> Required-Stop:     <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><span class="hljs-meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span><span class="hljs-meta">#</span><span class="bash"> Default-Stop:      0 1 6</span><span class="hljs-meta">#</span><span class="bash"> Short-Description: autostartup of ngrok <span class="hljs-keyword">for</span> Linux</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span>NAME=sunnyDAEMON=/usr/local/bin/$NAMEPIDFILE=/var/run/$NAME.pid[ -x &quot;$DAEMON&quot; ] || exit 0case &quot;$1&quot; in  start)      if [ -f $PIDFILE ]; then        echo &quot;$NAME already running...&quot;        echo -e &quot;\033[1;35mStart Fail\033[0m&quot;      else        echo &quot;Starting $NAME...&quot;        start-stop-daemon -S -p $PIDFILE -m -b -o -q -x $DAEMON -- clientid 隧道id || return 2        echo -e &quot;\033[1;32mStart Success\033[0m&quot;    fi    ;;  stop)        echo &quot;Stoping $NAME...&quot;        start-stop-daemon -K -p $PIDFILE -s TERM -o -q || return 2        rm -rf $PIDFILE        echo -e &quot;\033[1;32mStop Success\033[0m&quot;    ;;  restart)    $0 stop &amp;&amp; sleep 2 &amp;&amp; $0 start    ;;  *)    echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;    exit 1    ;;esacexit 0</code></pre><p><span class="label label-primary">⚠️注意：</span></p><p><span class="label label-primary">把代码里面的【隧道id】替换成自己的隧道id</span></p><h3 id="3、测试可执行代码"><a href="#3、测试可执行代码" class="headerlink" title="3、测试可执行代码"></a>3、测试可执行代码</h3><pre><code class="hljs shell">sudo chmod 755 /etc/init.d/sunnysudo /etc/init.d/sunny startsudo /etc/init.d/sunny start    #启动sudo /etc/init.d/sunny stop     #停止sudo /etc/init.d/sunny restart  #重启</code></pre><h3 id="4、设置开机启动"><a href="#4、设置开机启动" class="headerlink" title="4、设置开机启动"></a>4、设置开机启动</h3><pre><code class="hljs shell">cd /etc/init.dsudo update-rc.d sunny defaults 90    #加入开机启动sudo update-rc.d -f sunny remove  #取消开机启动</code></pre><h3 id="5、隧道启动官方文档说明"><a href="#5、隧道启动官方文档说明" class="headerlink" title="5、隧道启动官方文档说明"></a>5、隧道启动官方文档说明</h3><h5 id="启动隧道"><a href="#启动隧道" class="headerlink" title="启动隧道"></a>启动隧道</h5><p><span class="label label-primary"><br>  Mac、Linux、树莓派的使用方式是一样的。Windows才会不一样。但是它们的启动方式都是通过隧道id启动，隧道id可以在隧道管理的列表里面获得。这里以映射http服务为例。</span></p><p><span class="label label-primary">注意 下方代码仅供参考，sunny执行文件位置还得对应自己安装位置</span></p><p><span class="label label-primary">Mac、Linux、树莓派</span></p><pre><code class="hljs shell">./sunny clientid 隧道id</code></pre><p><span class="label label-primary">启动多个隧道</span></p><pre><code class="hljs shell">./sunny clientid 隧道id,隧道id</code></pre><p><span class="label label-primary">要想后台运行可以使用 setsid 命令</span></p><pre><code class="hljs shell">setsid ./sunny clientid 隧道id &amp;</code></pre><h2 id="五、完成"><a href="#五、完成" class="headerlink" title="五、完成"></a>五、完成</h2><p><span class="label label-primary">启动Ngrok 隧道，可以看到服务器已经上线了。</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122225032.png" alt=""></p><h2 id="六、树莓派内网穿透"><a href="#六、树莓派内网穿透" class="headerlink" title="六、树莓派内网穿透"></a>六、树莓派内网穿透</h2><p><span class="label label-primary">再打开赠送的域名<a href="http://bxf.free.idcfengye.com/">http://bxf.free.idcfengye.com/</a> ，就可以看到运行在树莓派上的博客网站啦，树莓派内网穿透成功！</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201123204628.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.lxx1.com/3709">科技爱好者博客-树莓派使用Ngrok进行内网穿透，在公网上搭建个人博客</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>内网穿透</tag>
      
      <tag>公网</tag>
      
      <tag>个人博客</tag>
      
      <tag>suny-ngrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[08:安装x11vnc并设置开机自动启动]</title>
    <link href="/2020/07/15/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B08%E5%AE%89%E8%A3%85x11vnc%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%5D/"/>
    <url>/2020/07/15/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B08%E5%AE%89%E8%A3%85x11vnc%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%5D/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">  最近基地新更新了'raspberry-uos-happy版',本着好奇就开始了。但是这个版本没有预设的9090和vnc等配置，所以手动装一个x11vnc实现远程操作。</p><h2 id="1-安装x11vnc"><a href="#1-安装x11vnc" class="headerlink" title="1.安装x11vnc"></a>1.安装x11vnc</h2><p>打开终端，使用如下命令安装x11vnc</p><pre><code class="hljs shell">sudo apt-get install x11vnc</code></pre><h2 id="2-设置密码"><a href="#2-设置密码" class="headerlink" title="2.设置密码"></a>2.设置密码</h2><p><span class="label label-primary"><br>  默认保存在 /home/“user”/.vnc/passwd</span></p><pre><code class="hljs shell">sudo x11vnc -storepasswd</code></pre><h2 id="3-设置密码保存位置"><a href="#3-设置密码保存位置" class="headerlink" title="3.设置密码保存位置"></a>3.设置密码保存位置</h2><pre><code class="hljs shell">sudo x11vnc -storepasswd in /etc/x11vnc.pass</code></pre><h2 id="4-拷贝密码文件"><a href="#4-拷贝密码文件" class="headerlink" title="4.拷贝密码文件"></a>4.拷贝密码文件</h2><p><span class="label label-primary"><br>  将用户目录下的passwd文件内容copy到 /etc/x11vnc.pass下</span></p><pre><code class="hljs shell">sudo cp /home/&quot;user&quot;/.vnc/passwd /etc/x11vnc.pass</code></pre><h2 id="5-手动连接"><a href="#5-手动连接" class="headerlink" title="5.手动连接"></a>5.手动连接</h2><p><span class="label label-primary"><br>  需每次开机手动启动连接</span></p><pre><code class="hljs shell">sudo /usr/bin/x11vnc -display :0 -auth /var/run/lightdm/root/:0 -forever -bg -o /var/log/x11vnc.log -rfbauth /etc/x11vnc.pass -rfbport 5900</code></pre><h2 id="6-关闭x11vnc"><a href="#6-关闭x11vnc" class="headerlink" title="6.关闭x11vnc"></a>6.关闭x11vnc</h2><pre><code class="hljs shell">pi@raspbian:~$ ps -ef|grep -i vncroot     18008     1  0 11:27 ?        00:00:11 /usr/bin/x11vnc -display :0 -auth /var/run/lightdm/root/:0 -forever -bg -o /var/log/x11vnc.log -rfbauth /etc/x11vnc.pass -rfbport 5900pi       27883  1482  0 11:49 pts/0    00:00:00 grep -i vncpi@raspbian:~$ sudo kill -9 18008pi@raspbian:~$ ps -ef|grep -i vncpi       28431  1482  0 11:51 pts/0    00:00:00 grep -i vnc</code></pre><h2 id="7-设置开机启动"><a href="#7-设置开机启动" class="headerlink" title="7.设置开机启动"></a>7.设置开机启动</h2><h3 id="配置x11vnc为跟随系统自动启动"><a href="#配置x11vnc为跟随系统自动启动" class="headerlink" title="配置x11vnc为跟随系统自动启动"></a>配置x11vnc为跟随系统自动启动</h3><p><span class="label label-primary">需要新建一个文件/etc/init/x11vnc.conf</span></p><pre><code class="hljs shell">sudo touch /etc/init/x11vnc.conf</code></pre><p><span class="label label-primary"><br>对文件修改需要权限才能修改</span></p><pre><code class="hljs shell">sudo chmod a+w /etc/init/x11vnc.conf</code></pre><p><span class="label label-primary"><br>在x11vnc.conf文件里加入：</span></p><pre><code class="hljs shell">start on login-session-startscriptx11vnc -display :0 -auth /var/run/lightdm/root/:0 -forever -bg -o /var/log/x11vnc.log -rfbauth /etc/x11vnc.pass -rfbport 5900end script</code></pre><p><span class="label label-primary"><br>保存</span></p><p><span class="label label-primary"><br>  到此 开机自动启动就设置好了</span></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/han609768249/article/details/78759590">ubuntu安装vnc server-x11vnc并设置开机自动启动</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/techsupporter/article/details/52887199">Linux上VNC 启动和关闭 已经常见问题</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>系统</tag>
      
      <tag>uos</tag>
      
      <tag>x11vnc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[07:开机后将 IP 地址信息自动推送到微信]</title>
    <link href="/2020/07/14/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B07%E5%BC%80%E6%9C%BA%E5%90%8E%E5%B0%86%20IP%20%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1%5D/"/>
    <url>/2020/07/14/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B07%E5%BC%80%E6%9C%BA%E5%90%8E%E5%B0%86%20IP%20%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1%5D/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">树莓派经常会用到查看本机的IP，知道了 IP 地址才能进行 ssh 远程连接。以前用过使用Python 获取树莓派地址+Email 发送到自己的邮箱，方法是可行的。但是这里使用了更加简便的方法，使用 Python 加上 Server酱服务， Server酱 服务实现了通过请求 URL + 推送信息，的方式来把消息推送到微信。省去了去配置邮箱参数的麻烦，而且通过微信可以更加快捷的查看到推送到微信的IP信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs shell">import timeimport socketimport requestsdef getLocalIP():    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    s.connect((&#x27;1.1.1.1&#x27;, 80))    ipaddr = s.getsockname()[0]    s.close()    return ipaddrdef post(ip):    url = &quot;https://sc.ftqq.com/your~sckey.send&quot;    data = &quot;text=%s&quot; % ip    results = requests.get(url, data)    print(results)if __name__ == &#x27;__main__&#x27;:    time.sleep(20)    while True:        ip = getLocalIP()        if ip == False:            post(&#x27;finding ip ~&#x27;)        else:            print(ip)            post(ip)            time.sleep(5)        break</code></pre><h2 id="配置开机自启动"><a href="#配置开机自启动" class="headerlink" title="配置开机自启动"></a>配置开机自启动</h2><pre><code class="hljs shell">pi@raspbian:/$ cat /boot/rc-local<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><span class="hljs-meta">#</span><span class="bash"> Print the IP address</span>_IP=$(hostname -I) || trueif [ &quot;$_IP&quot; ]; then  printf &quot;IP address is %s\n&quot; &quot;$_IP&quot;fiecho &quot;rc-local bash echo test.&quot;sleep 1mpython /home/pi/ip_send.pyexit 0</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/kekeoutlook/p/12723833.html">树莓派python获取自身IP</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.z10.xin/archives/771">树莓派开机后把 IP 地址信息，自动推送到微信的方法 | 中心线</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://sc.ftqq.com/3.version">Server酱</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>微信</tag>
      
      <tag>server酱</tag>
      
      <tag>ip发送</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[06:USB摄像头和motion实现监控]</title>
    <link href="/2020/07/13/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B06USB%E6%91%84%E5%83%8F%E5%A4%B4%E5%92%8Cmotion%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7%5D/"/>
    <url>/2020/07/13/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B06USB%E6%91%84%E5%83%8F%E5%A4%B4%E5%92%8Cmotion%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7%5D/</url>
    
    <content type="html"><![CDATA[<p><span class="label label-primary"><br>  这篇文章主要为大家详细介绍了树莓派使用USB摄像头和motion实现监控，具有一定的参考价值，感兴趣的小伙伴们可以参考一下。</span></p><p>本文实例为大家分享了树莓派使用USB摄像头和motion实现监控的具体代码，供大家参考，具体内容如下</p><h2 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h2><p>1、树莓派<br>2、USB摄像头</p><h2 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h2><h3 id="0、连接并测试USB摄像头"><a href="#0、连接并测试USB摄像头" class="headerlink" title="0、连接并测试USB摄像头"></a>0、连接并测试USB摄像头</h3><p>树莓派接USB摄像头十分简单，毕竟树莓派是Linux系统的卡片电脑，将买来的USB摄像头直接连在树莓派的USB口上，然后我们看看摄像头是否被识别，有两种方法：</p><pre><code class="hljs shell">1. 使用lsusb命令pi@raspbian:~$ lsusbBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 001 Device 003: ID 1871:0101 Aveo Technology Corp. UVC camera (Bresser microscope)Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. HubBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><p>SSH终端会显示树莓派当前接入的USB设备列表，我们可以先不插摄像头，lsusb，然后插上摄像头lsusb，就可以看到USB摄像头对应的是哪个设备了。</p><pre><code class="hljs shell">2. 查看设备文件也可以查看设备文件，输入命令：pi@raspbian:~$ ls /dev/video*/dev/video0  /dev/video1  /dev/video10  /dev/video11  /dev/video12  /dev/video13  /dev/video14  /dev/video15  /dev/video16</code></pre><pre><code class="hljs shell">3、本人实测摄像画面。安装mplayer，终端运行：sudo apt-get install mplayersudo mplayer tv://</code></pre><p><span class="label label-primary">注意事项：须在安装vnc桌面情况下查看⚠</span></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214638.png" alt=""></p><h3 id="1、安装motion"><a href="#1、安装motion" class="headerlink" title="1、安装motion"></a>1、安装motion</h3><pre><code class="hljs shell">sudo apt-get install motion</code></pre><h3 id="2、配置motion"><a href="#2、配置motion" class="headerlink" title="2、配置motion"></a>2、配置motion</h3><p>(1)让motion可以一直在后台运行</p><pre><code class="hljs shell">sudo nano /etc/default/motion</code></pre><p>将里面的no修改成yes，让motion可以一直在后台运行：start_motion_daemon=yes</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214717.jpg" alt=""></p><p>(2)修改其他配置</p><pre><code class="hljs shell">一些常见参数：daemon on                        #开启守护进程（选配）target_dir /home/pi/motion-images    #图片保存的路径<span class="hljs-meta">#</span><span class="bash">videodevice /dev/video0            <span class="hljs-comment">#摄像头设备（默认）可修改            </span></span>stream_localhost off                 #允许通过网页查看摄像头stream_auth_method 2               #开启密码认证stream_authentication 用户名:密码    #网页查看摄像头的用户名和密码</code></pre><p>具体修改如下：</p><pre><code class="hljs shell">sudo nano /etc/motion/motion.conf</code></pre><p>修改配置文件，这个文件比较长，请确保一下参数的配置。在nano编辑器下，可以使用^w快速查找到如下配置内容。也可以使用^v向下翻页。</p><h4 id="开启终端启动和后台模式"><a href="#开启终端启动和后台模式" class="headerlink" title="开启终端启动和后台模式"></a>开启终端启动和后台模式</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214900.jpg" alt=""></p><h4 id="网页端口"><a href="#网页端口" class="headerlink" title="网页端口"></a>网页端口</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214917.jpg" alt=""></p><h4 id="监控宽度高度"><a href="#监控宽度高度" class="headerlink" title="监控宽度高度"></a>监控宽度高度</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214933.jpg" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122214948.jpg" alt=""></p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122215002.jpg" alt=""></p><h3 id="3、启动motion"><a href="#3、启动motion" class="headerlink" title="3、启动motion"></a>3、启动motion</h3><pre><code class="hljs shell">sudo motion</code></pre><h3 id="4、查看视频数据"><a href="#4、查看视频数据" class="headerlink" title="4、查看视频数据"></a>4、查看视频数据</h3><p>在局域网内的设备，不管是手机还是电脑，均可打开浏览器访问树莓派IP:8081</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122215035.png" alt=""></p><h3 id="5、退出motion"><a href="#5、退出motion" class="headerlink" title="5、退出motion"></a>5、退出motion</h3><pre><code class="hljs shell">killall -TERM motion</code></pre><p>或者</p><pre><code class="hljs shell">service motion stop</code></pre><h3 id="6、-设置为开机运行（选配）"><a href="#6、-设置为开机运行（选配）" class="headerlink" title="6、 设置为开机运行（选配）"></a>6、 设置为开机运行（选配）</h3><pre><code class="hljs shell">sudo vim /etc/rc.local</code></pre><p>在exit 0前添加 motion , 保存，就会开机自动运行了。</p><h3 id="附件一-motion-conf"><a href="#附件一-motion-conf" class="headerlink" title="附件一 motion.conf"></a>附件一 motion.conf</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Rename this distribution example file to motion.conf</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> This config file was generated by motion 4.1.1</span><span class="hljs-meta">#</span><span class="bash"> Documentation:  /usr/share/doc/motion/motion_guide.html</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Daemon</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Start <span class="hljs-keyword">in</span> daemon (background) mode and release terminal (default: off)</span>daemon on<span class="hljs-meta">#</span><span class="bash"> File to store the process ID, also called pid file. (default: not defined)</span>process_id_file /var/run/motion/motion.pid<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Basic Setup Mode</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Start <span class="hljs-keyword">in</span> Setup-Mode, daemon disabled. (default: off)</span>setup_mode off<span class="hljs-meta">#</span><span class="bash"> Use a file to save logs messages, <span class="hljs-keyword">if</span> not defined stderr and syslog is used. (default: not defined)</span>logfile /var/log/motion/motion.log<span class="hljs-meta">#</span><span class="bash"> Level of <span class="hljs-built_in">log</span> messages [1..9] (EMG, ALR, CRT, ERR, WRN, NTC, INF, DBG, ALL). (default: 6 / NTC)</span>log_level 6<span class="hljs-meta">#</span><span class="bash"> Filter to <span class="hljs-built_in">log</span> messages by <span class="hljs-built_in">type</span> (COR, STR, ENC, NET, DBL, EVT, TRK, VID, ALL). (default: ALL)</span>log_type all<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">##########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Capture device options</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Videodevice to be used <span class="hljs-keyword">for</span> capturing  (default /dev/video0)</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> FreeBSD default is /dev/bktr0</span>videodevice /dev/video0<span class="hljs-meta">#</span><span class="bash"> v4l2_palette allows one to choose preferable palette to be use by motion</span><span class="hljs-meta">#</span><span class="bash"> See motion_guide.html <span class="hljs-keyword">for</span> the valid options and values.  (default: 17)</span>v4l2_palette 17<span class="hljs-meta">#</span><span class="bash"> Tuner device to be used <span class="hljs-keyword">for</span> capturing using tuner as <span class="hljs-built_in">source</span> (default /dev/tuner0)</span><span class="hljs-meta">#</span><span class="bash"> This is ONLY used <span class="hljs-keyword">for</span> FreeBSD. Leave it commented out <span class="hljs-keyword">for</span> Linux</span>; tunerdevice /dev/tuner0<span class="hljs-meta">#</span><span class="bash"> The video input to be used (default: -1)</span><span class="hljs-meta">#</span><span class="bash"> Should normally be <span class="hljs-built_in">set</span> to 0 or 1 <span class="hljs-keyword">for</span> video/TV cards, and -1 <span class="hljs-keyword">for</span> USB cameras</span><span class="hljs-meta">#</span><span class="bash"> Set to 0 <span class="hljs-keyword">for</span> uvideo(4) on OpenBSD</span>input -1<span class="hljs-meta">#</span><span class="bash"> The video norm to use (only <span class="hljs-keyword">for</span> video capture and TV tuner cards)</span><span class="hljs-meta">#</span><span class="bash"> Values: 0 (PAL), 1 (NTSC), 2 (SECAM), 3 (PAL NC no colour). Default: 0 (PAL)</span>norm 0<span class="hljs-meta">#</span><span class="bash"> The frequency to <span class="hljs-built_in">set</span> the tuner to (kHz) (only <span class="hljs-keyword">for</span> TV tuner cards) (default: 0)</span>frequency 0<span class="hljs-meta">#</span><span class="bash"> Override the power line frequency <span class="hljs-keyword">for</span> the webcam. (normally not necessary)</span><span class="hljs-meta">#</span><span class="bash"> Values:</span><span class="hljs-meta">#</span><span class="bash"> -1 : Do not modify device setting</span><span class="hljs-meta">#</span><span class="bash"> 0  : Power line frequency Disabled</span><span class="hljs-meta">#</span><span class="bash"> 1  : 50hz</span><span class="hljs-meta">#</span><span class="bash"> 2  : 60hz</span><span class="hljs-meta">#</span><span class="bash"> 3  : Auto</span>power_line_frequency -1<span class="hljs-meta">#</span><span class="bash"> Rotate image this number of degrees. The rotation affects all saved images as</span><span class="hljs-meta">#</span><span class="bash"> well as movies. Valid values: 0 (default = no rotation), 90, 180 and 270.</span>rotate 0<span class="hljs-meta">#</span><span class="bash"> Flip image over a given axis (vertical or horizontal), vertical means from left to right</span><span class="hljs-meta">#</span><span class="bash"> horizontal means top to bottom. Valid values: none, v and h.</span>flip_axis none<span class="hljs-meta">#</span><span class="bash"> Image width (pixels). Valid range: Camera dependent, default: 320</span>width 800<span class="hljs-meta">#</span><span class="bash"> Image height (pixels). Valid range: Camera dependent, default: 240</span>height 600<span class="hljs-meta">#</span><span class="bash"> Maximum number of frames to be captured per second.</span><span class="hljs-meta">#</span><span class="bash"> Valid range: 2-100. Default: 100 (almost no <span class="hljs-built_in">limit</span>).</span>framerate 2<span class="hljs-meta">#</span><span class="bash"> Minimum time <span class="hljs-keyword">in</span> seconds between capturing picture frames from the camera.</span><span class="hljs-meta">#</span><span class="bash"> Default: 0 = disabled - the capture rate is given by the camera framerate.</span><span class="hljs-meta">#</span><span class="bash"> This option is used when you want to capture images at a rate lower than 2 per second.</span>minimum_frame_time 0<span class="hljs-meta">#</span><span class="bash"> Full Network Camera URL.  Valid Services: http:// ftp:// mjpg:// rtsp:// mjpeg:// file:// rtmp://</span>; netcam_url value<span class="hljs-meta">#</span><span class="bash"> Username and password <span class="hljs-keyword">for</span> network camera <span class="hljs-keyword">if</span> required. Syntax is user:password</span>; netcam_userpass value<span class="hljs-meta">#</span><span class="bash"> The setting <span class="hljs-keyword">for</span> keep-alive of network socket, should improve performance on compatible net cameras.</span><span class="hljs-meta">#</span><span class="bash"> off:   The historical implementation using HTTP/1.0, closing the socket after each http request.</span><span class="hljs-meta">#</span><span class="bash"> force: Use HTTP/1.0 requests with keep alive header to reuse the same connection.</span><span class="hljs-meta">#</span><span class="bash"> on:    Use HTTP/1.1 requests that support keep alive as default.</span><span class="hljs-meta">#</span><span class="bash"> Default: off</span>netcam_keepalive off<span class="hljs-meta">#</span><span class="bash"> URL to use <span class="hljs-keyword">for</span> a netcam proxy server, <span class="hljs-keyword">if</span> required, e.g. <span class="hljs-string">&quot;http://myproxy&quot;</span>.</span><span class="hljs-meta">#</span><span class="bash"> If a port number other than 80 is needed, use <span class="hljs-string">&quot;http://myproxy:1234&quot;</span>.</span><span class="hljs-meta">#</span><span class="bash"> Default: not defined</span>; netcam_proxy value<span class="hljs-meta">#</span><span class="bash"> Set less strict jpeg checks <span class="hljs-keyword">for</span> network cameras with a poor/buggy firmware.</span><span class="hljs-meta">#</span><span class="bash"> Default: off</span>netcam_tolerant_check off<span class="hljs-meta">#</span><span class="bash"> RTSP connection uses TCP to communicate to the camera. Can prevent image corruption.</span><span class="hljs-meta">#</span><span class="bash"> Default: on</span>rtsp_uses_tcp on<span class="hljs-meta">#</span><span class="bash"> Name of camera to use <span class="hljs-keyword">if</span> you are using a camera accessed through OpenMax/MMAL</span><span class="hljs-meta">#</span><span class="bash"> Default: Not defined</span>; mmalcam_name vc.ril.camera<span class="hljs-meta">#</span><span class="bash"> Camera control parameters (see raspivid/raspistill tool documentation)</span><span class="hljs-meta">#</span><span class="bash"> Default: Not defined</span>; mmalcam_control_params -hf<span class="hljs-meta">#</span><span class="bash"> Let motion regulate the brightness of a video device (default: off).</span><span class="hljs-meta">#</span><span class="bash"> The auto_brightness feature uses the brightness option as its target value.</span><span class="hljs-meta">#</span><span class="bash"> If brightness is zero auto_brightness will adjust to average brightness value 128.</span><span class="hljs-meta">#</span><span class="bash"> Only recommended <span class="hljs-keyword">for</span> cameras without auto brightness</span>auto_brightness off<span class="hljs-meta">#</span><span class="bash"> Set the initial brightness of a video device.</span><span class="hljs-meta">#</span><span class="bash"> If auto_brightness is enabled, this value defines the average brightness level</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">which</span> Motion will try and adjust to.</span><span class="hljs-meta">#</span><span class="bash"> Valid range 0-255, default 0 = disabled</span>brightness 0<span class="hljs-meta">#</span><span class="bash"> Set the contrast of a video device.</span><span class="hljs-meta">#</span><span class="bash"> Valid range 0-255, default 0 = disabled</span>contrast 0<span class="hljs-meta">#</span><span class="bash"> Set the saturation of a video device.</span><span class="hljs-meta">#</span><span class="bash"> Valid range 0-255, default 0 = disabled</span>saturation 0<span class="hljs-meta">#</span><span class="bash"> Set the hue of a video device (NTSC feature).</span><span class="hljs-meta">#</span><span class="bash"> Valid range 0-255, default 0 = disabled</span>hue 0<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Round Robin (multiple inputs on same video device name)</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Number of frames to capture <span class="hljs-keyword">in</span> each roundrobin step (default: 1)</span>roundrobin_frames 1<span class="hljs-meta">#</span><span class="bash"> Number of frames to skip before each roundrobin step (default: 1)</span>roundrobin_skip 1<span class="hljs-meta">#</span><span class="bash"> Try to filter out noise generated by roundrobin (default: off)</span>switchfilter off<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Motion Detection Settings:</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Threshold <span class="hljs-keyword">for</span> number of changed pixels <span class="hljs-keyword">in</span> an image that</span><span class="hljs-meta">#</span><span class="bash"> triggers motion detection (default: 1500)</span>threshold 1500<span class="hljs-meta">#</span><span class="bash"> Automatically tune the threshold down <span class="hljs-keyword">if</span> possible (default: off)</span>threshold_tune off<span class="hljs-meta">#</span><span class="bash"> Noise threshold <span class="hljs-keyword">for</span> the motion detection (default: 32)</span>noise_level 32<span class="hljs-meta">#</span><span class="bash"> Automatically tune the noise threshold (default: on)</span>noise_tune on<span class="hljs-meta">#</span><span class="bash"> Despeckle motion image using (e)rode or (d)ilate or (l)abel (Default: not defined)</span><span class="hljs-meta">#</span><span class="bash"> Recommended value is EedDl. Any combination (and number of) of E, e, d, and D is valid.</span><span class="hljs-meta">#</span><span class="bash"> (l)abeling must only be used once and the <span class="hljs-string">&#x27;l&#x27;</span> must be the last letter.</span><span class="hljs-meta">#</span><span class="bash"> Comment out to <span class="hljs-built_in">disable</span></span>despeckle_filter EedDl<span class="hljs-meta">#</span><span class="bash"> Detect motion <span class="hljs-keyword">in</span> predefined areas (1 - 9). Areas are numbered like that:  1 2 3</span><span class="hljs-meta">#</span><span class="bash"> A script (on_area_detected) is started immediately when motion is         4 5 6</span><span class="hljs-meta">#</span><span class="bash"> detected <span class="hljs-keyword">in</span> one of the given areas, but only once during an event.        7 8 9</span><span class="hljs-meta">#</span><span class="bash"> One or more areas can be specified with this option. Take care: This option</span><span class="hljs-meta">#</span><span class="bash"> does NOT restrict detection to these areas! (Default: not defined)</span>; area_detect value<span class="hljs-meta">#</span><span class="bash"> PGM file to use as a sensitivity mask.</span><span class="hljs-meta">#</span><span class="bash"> Full path name to. (Default: not defined)</span>; mask_file value<span class="hljs-meta">#</span><span class="bash"> PGM file to completely mask out a area of image.</span><span class="hljs-meta">#</span><span class="bash"> Full path name to. (Default: not defined)</span><span class="hljs-meta">#</span><span class="bash"> mask_privacy value</span><span class="hljs-meta">#</span><span class="bash"> Dynamically create a mask file during operation (default: 0)</span><span class="hljs-meta">#</span><span class="bash"> Adjust speed of mask changes from 0 (off) to 10 (fast)</span>smart_mask_speed 0<span class="hljs-meta">#</span><span class="bash"> Ignore sudden massive light intensity changes given as a percentage of the picture</span><span class="hljs-meta">#</span><span class="bash"> area that changed intensity. Valid range: 0 - 100 , default: 0 = disabled</span>lightswitch 0<span class="hljs-meta">#</span><span class="bash"> Picture frames must contain motion at least the specified number of frames</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> a row before they are detected as <span class="hljs-literal">true</span> motion. At the default of 1, all</span><span class="hljs-meta">#</span><span class="bash"> motion is detected. Valid range: 1 to thousands, recommended 1-5</span>minimum_motion_frames 1<span class="hljs-meta">#</span><span class="bash"> Specifies the number of pre-captured (buffered) pictures from before motion</span><span class="hljs-meta">#</span><span class="bash"> was detected that will be output at motion detection.</span><span class="hljs-meta">#</span><span class="bash"> Recommended range: 0 to 5 (default: 0)</span><span class="hljs-meta">#</span><span class="bash"> Do not use large values! Large values will cause Motion to skip video frames and</span><span class="hljs-meta">#</span><span class="bash"> cause unsmooth movies. To smooth movies use larger values of post_capture instead.</span>pre_capture 0<span class="hljs-meta">#</span><span class="bash"> Number of frames to capture after motion is no longer detected (default: 0)</span>post_capture 0<span class="hljs-meta">#</span><span class="bash"> Event Gap is the seconds of no motion detection that triggers the end of an event.</span><span class="hljs-meta">#</span><span class="bash"> An event is defined as a series of motion images taken within a short timeframe.</span><span class="hljs-meta">#</span><span class="bash"> Recommended value is 60 seconds (Default). The value -1 is allowed and disables</span><span class="hljs-meta">#</span><span class="bash"> events causing all Motion to be written to one single movie file and no pre_capture.</span><span class="hljs-meta">#</span><span class="bash"> If <span class="hljs-built_in">set</span> to 0, motion is running <span class="hljs-keyword">in</span> gapless mode. Movies don<span class="hljs-string">&#x27;t have gaps anymore. An</span></span><span class="hljs-meta">#</span><span class="bash"> event ends right after no more motion is detected and post_capture is over.</span>event_gap 60<span class="hljs-meta">#</span><span class="bash"> Maximum length <span class="hljs-keyword">in</span> seconds of a movie</span><span class="hljs-meta">#</span><span class="bash"> When value is exceeded a new movie file is created. (Default: 0 = infinite)</span>max_movie_time 0<span class="hljs-meta">#</span><span class="bash"> Always save images even <span class="hljs-keyword">if</span> there was no motion (default: off)</span>emulate_motion off<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Image File Output</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Output <span class="hljs-string">&#x27;normal&#x27;</span> pictures when motion is detected (default: off)</span><span class="hljs-meta">#</span><span class="bash"> Valid values: on, off, first, best, center</span><span class="hljs-meta">#</span><span class="bash"> When <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;first&#x27;</span>, only the first picture of an event is saved.</span><span class="hljs-meta">#</span><span class="bash"> Picture with most motion of an event is saved when <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;best&#x27;</span>.</span><span class="hljs-meta">#</span><span class="bash"> Picture with motion nearest center of picture is saved when <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;center&#x27;</span>.</span><span class="hljs-meta">#</span><span class="bash"> Can be used as preview shot <span class="hljs-keyword">for</span> the corresponding movie.</span>output_pictures off<span class="hljs-meta">#</span><span class="bash"> Output pictures with only the pixels moving object (ghost images) (default: off)</span>output_debug_pictures off<span class="hljs-meta">#</span><span class="bash"> The quality (<span class="hljs-keyword">in</span> percent) to be used by the jpeg and webp compression (default: 75)</span>quality 75<span class="hljs-meta">#</span><span class="bash"> Type of output images</span><span class="hljs-meta">#</span><span class="bash"> Valid values: jpeg, ppm or webp (default: jpeg)</span>picture_type jpeg<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Use ffmpeg to encode videos of motion (default: off)</span>ffmpeg_output_movies on<span class="hljs-meta">#</span><span class="bash"> Use ffmpeg to make videos showing the moving pixels (ghost images) (default: off)</span>ffmpeg_output_debug_movies off<span class="hljs-meta">#</span><span class="bash"> Bitrate to be used by the ffmpeg encoder (default: 400000)</span><span class="hljs-meta">#</span><span class="bash"> This option is ignored <span class="hljs-keyword">if</span> ffmpeg_variable_bitrate is not 0 (disabled)</span>ffmpeg_bps 400000<span class="hljs-meta">#</span><span class="bash"> Enables and defines variable bitrate <span class="hljs-keyword">for</span> the ffmpeg encoder.</span><span class="hljs-meta">#</span><span class="bash"> ffmpeg_bps is ignored <span class="hljs-keyword">if</span> variable bitrate is enabled.</span><span class="hljs-meta">#</span><span class="bash"> Valid values: 0 (default) = fixed bitrate defined by ffmpeg_bps,</span><span class="hljs-meta">#</span><span class="bash"> or the range 1 - 100 <span class="hljs-built_in">where</span> 1 means worst quality and 100 is best.</span>ffmpeg_variable_bitrate 0<span class="hljs-meta">#</span><span class="bash"> Container/Codec output videos</span><span class="hljs-meta">#</span><span class="bash"> Valid values: mpeg4, msmpeg4, swf,flv, ffv1, mov, mp4, mkv, hevc</span>ffmpeg_video_codec mkv<span class="hljs-meta">#</span><span class="bash"> When creating videos, should frames be duplicated <span class="hljs-keyword">in</span> order</span><span class="hljs-meta">#</span><span class="bash"> to keep up with the requested frames per second</span><span class="hljs-meta">#</span><span class="bash"> (default: <span class="hljs-literal">true</span>)</span>ffmpeg_duplicate_frames true<span class="hljs-meta">#</span><span class="bash"> Interval <span class="hljs-keyword">in</span> seconds between timelapse captures.  Default: 0 = off</span>timelapse_interval 0<span class="hljs-meta">#</span><span class="bash"> Timelapse file rollover mode. See motion_guide.html <span class="hljs-keyword">for</span> options and uses.</span>timelapse_mode daily<span class="hljs-meta">#</span><span class="bash"> Frame rate <span class="hljs-keyword">for</span> timelapse playback</span>timelapse_fps 30<span class="hljs-meta">#</span><span class="bash"> Container/Codec <span class="hljs-keyword">for</span> timelapse video. Valid values: mpg or mpeg4</span>timelapse_codec mpg<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> External pipe to video encoder</span><span class="hljs-meta">#</span><span class="bash"> Replacement <span class="hljs-keyword">for</span> FFMPEG <span class="hljs-built_in">builtin</span> encoder <span class="hljs-keyword">for</span> ffmpeg_output_movies only.</span><span class="hljs-meta">#</span><span class="bash"> The options movie_filename and timelapse_filename are also used</span><span class="hljs-meta">#</span><span class="bash"> by the ffmpeg feature</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Bool to <span class="hljs-built_in">enable</span> or <span class="hljs-built_in">disable</span> extpipe (default: off)</span>use_extpipe off<span class="hljs-meta">#</span><span class="bash"> External program (full path and opts) to pipe raw video to</span><span class="hljs-meta">#</span><span class="bash"> Generally, use <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">for</span> STDIN...</span>;extpipe mencoder -demuxer rawvideo -rawvideo w=%w:h=%h:i420 -ovc x264 -x264encopts bframes=4:frameref=1:subq=1:scenecut=-1:nob_adapt:threads=1:keyint=1000:8x8dct:vbv_bufsize=4000:crf=24:partitions=i8x8,i4x4:vbv_maxrate=800:no-chroma-me -vf denoise3d=16:12:48:4,pp=lb -of   avi -o %f.avi - -fps %fps;extpipe x264 - --input-res %wx%h --fps %fps --bitrate 2000 --preset ultrafast --quiet -o %f.mp4;extpipe mencoder -demuxer rawvideo -rawvideo w=%w:h=%h:fps=%fps -ovc x264 -x264encopts preset=ultrafast -of lavf -o %f.mp4 - -fps %fps;extpipe ffmpeg -y -f rawvideo -pix_fmt yuv420p -video_size %wx%h -framerate %fps -i pipe:0 -vcodec libx264 -preset ultrafast -f mp4 %f.mp4<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Snapshots (Traditional Periodic Webcam File Output)</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Make automated snapshot every N seconds (default: 0 = disabled)</span>snapshot_interval 0<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Text Display</span><span class="hljs-meta">#</span><span class="bash"> %Y = year, %m = month, %d = date,</span><span class="hljs-meta">#</span><span class="bash"> %H = hour, %M = minute, %S = second, %T = HH:MM:SS,</span><span class="hljs-meta">#</span><span class="bash"> %v = event, %q = frame number, %t = camera id number,</span><span class="hljs-meta">#</span><span class="bash"> %D = changed pixels, %N = noise level, \n = new line,</span><span class="hljs-meta">#</span><span class="bash"> %i and %J = width and height of motion area,</span><span class="hljs-meta">#</span><span class="bash"> %K and %L = X and Y coordinates of motion center</span><span class="hljs-meta">#</span><span class="bash"> %C = value defined by text_event - <span class="hljs-keyword">do</span> not use with text_event!</span><span class="hljs-meta">#</span><span class="bash"> You can put quotation marks around the text to allow</span><span class="hljs-meta">#</span><span class="bash"> leading spaces</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Locate and draw a box around the moving object.</span><span class="hljs-meta">#</span><span class="bash"> Valid values: on, off, preview (default: off)</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;preview&#x27;</span> will only draw a box <span class="hljs-keyword">in</span> preview_shot pictures.</span>locate_motion_mode off<span class="hljs-meta">#</span><span class="bash"> Set the look and style of the locate box <span class="hljs-keyword">if</span> enabled.</span><span class="hljs-meta">#</span><span class="bash"> Valid values: box, redbox, cross, redcross (default: box)</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;box&#x27;</span> will draw the traditional box.</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;redbox&#x27;</span> will draw a red box.</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;cross&#x27;</span> will draw a little cross to mark center.</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;redcross&#x27;</span> will draw a little red cross to mark center.</span>locate_motion_style box<span class="hljs-meta">#</span><span class="bash"> Draws the timestamp using same options as C <span class="hljs-keyword">function</span> strftime(3)</span><span class="hljs-meta">#</span><span class="bash"> Default: %Y-%m-%d\n%T = date <span class="hljs-keyword">in</span> ISO format and time <span class="hljs-keyword">in</span> 24 hour clock</span><span class="hljs-meta">#</span><span class="bash"> Text is placed <span class="hljs-keyword">in</span> lower right corner</span>text_right %Y-%m-%d\n%T-%q<span class="hljs-meta">#</span><span class="bash"> Draw a user defined text on the images using same options as C <span class="hljs-keyword">function</span> strftime(3)</span><span class="hljs-meta">#</span><span class="bash"> Default: Not defined = no text</span><span class="hljs-meta">#</span><span class="bash"> Text is placed <span class="hljs-keyword">in</span> lower left corner</span>; text_left CAMERA %t<span class="hljs-meta">#</span><span class="bash"> Draw the number of changed pixed on the images (default: off)</span><span class="hljs-meta">#</span><span class="bash"> Will normally be <span class="hljs-built_in">set</span> to off except when you setup and adjust the motion settings</span><span class="hljs-meta">#</span><span class="bash"> Text is placed <span class="hljs-keyword">in</span> upper right corner</span>text_changes off<span class="hljs-meta">#</span><span class="bash"> This option defines the value of the special event conversion specifier %C</span><span class="hljs-meta">#</span><span class="bash"> You can use any conversion specifier <span class="hljs-keyword">in</span> this option except %C. Date and time</span><span class="hljs-meta">#</span><span class="bash"> values are from the timestamp of the first image <span class="hljs-keyword">in</span> the current event.</span><span class="hljs-meta">#</span><span class="bash"> Default: %Y%m%d%H%M%S</span><span class="hljs-meta">#</span><span class="bash"> The idea is that %C can be used filenames and text_left/right <span class="hljs-keyword">for</span> creating</span><span class="hljs-meta">#</span><span class="bash"> a unique identifier <span class="hljs-keyword">for</span> each event.</span>text_event %Y%m%d%H%M%S<span class="hljs-meta">#</span><span class="bash"> Draw characters at twice normal size on images. (default: off)</span>text_double off<span class="hljs-meta">#</span><span class="bash"> Text to include <span class="hljs-keyword">in</span> a JPEG EXIF comment</span><span class="hljs-meta">#</span><span class="bash"> May be any text, including conversion specifiers.</span><span class="hljs-meta">#</span><span class="bash"> The EXIF timestamp is included independent of this text.</span>;exif_text %i%J/%K%L<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Target Directories and filenames For Images And Films</span><span class="hljs-meta">#</span><span class="bash"> For the options snapshot_, picture_, movie_ and timelapse_filename</span><span class="hljs-meta">#</span><span class="bash"> you can use conversion specifiers</span><span class="hljs-meta">#</span><span class="bash"> %Y = year, %m = month, %d = date,</span><span class="hljs-meta">#</span><span class="bash"> %H = hour, %M = minute, %S = second,</span><span class="hljs-meta">#</span><span class="bash"> %v = event, %q = frame number, %t = camera id number,</span><span class="hljs-meta">#</span><span class="bash"> %D = changed pixels, %N = noise level,</span><span class="hljs-meta">#</span><span class="bash"> %i and %J = width and height of motion area,</span><span class="hljs-meta">#</span><span class="bash"> %K and %L = X and Y coordinates of motion center</span><span class="hljs-meta">#</span><span class="bash"> %C = value defined by text_event</span><span class="hljs-meta">#</span><span class="bash"> Quotation marks round string are allowed.</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Target base directory <span class="hljs-keyword">for</span> pictures and films</span><span class="hljs-meta">#</span><span class="bash"> Recommended to use absolute path. (Default: current working directory)</span>target_dir /var/lib/motion<span class="hljs-meta">#</span><span class="bash"> File path <span class="hljs-keyword">for</span> snapshots (jpeg, ppm or webp) relative to target_dir</span><span class="hljs-meta">#</span><span class="bash"> Default: %v-%Y%m%d%H%M%S-snapshot</span><span class="hljs-meta">#</span><span class="bash"> Default value is equivalent to legacy oldlayout option</span><span class="hljs-meta">#</span><span class="bash"> For Motion 3.0 compatible mode choose: %Y/%m/%d/%H/%M/%S-snapshot</span><span class="hljs-meta">#</span><span class="bash"> File extension .jpg, .ppm or .webp is automatically added so <span class="hljs-keyword">do</span> not include this.</span><span class="hljs-meta">#</span><span class="bash"> Note: A symbolic link called lastsnap.jpg created <span class="hljs-keyword">in</span> the target_dir will always</span><span class="hljs-meta">#</span><span class="bash"> point to the latest snapshot, unless snapshot_filename is exactly <span class="hljs-string">&#x27;lastsnap&#x27;</span></span>snapshot_filename %v-%Y%m%d%H%M%S-snapshot<span class="hljs-meta">#</span><span class="bash"> File path <span class="hljs-keyword">for</span> motion triggered images (jpeg, ppm or .webp) relative to target_dir</span><span class="hljs-meta">#</span><span class="bash"> Default: %v-%Y%m%d%H%M%S-%q</span><span class="hljs-meta">#</span><span class="bash"> Default value is equivalent to legacy oldlayout option</span><span class="hljs-meta">#</span><span class="bash"> For Motion 3.0 compatible mode choose: %Y/%m/%d/%H/%M/%S-%q</span><span class="hljs-meta">#</span><span class="bash"> File extension .jpg, .ppm or .webp is automatically added so <span class="hljs-keyword">do</span> not include this</span><span class="hljs-meta">#</span><span class="bash"> Set to <span class="hljs-string">&#x27;preview&#x27;</span> together with best-preview feature enables special naming</span><span class="hljs-meta">#</span><span class="bash"> convention <span class="hljs-keyword">for</span> preview shots. See motion guide <span class="hljs-keyword">for</span> details</span>picture_filename %v-%Y%m%d%H%M%S-%q<span class="hljs-meta">#</span><span class="bash"> File path <span class="hljs-keyword">for</span> motion triggered ffmpeg films (movies) relative to target_dir</span><span class="hljs-meta">#</span><span class="bash"> Default: %v-%Y%m%d%H%M%S</span><span class="hljs-meta">#</span><span class="bash"> File extensions(.mpg .avi) are automatically added so <span class="hljs-keyword">do</span> not include them</span>movie_filename %v-%Y%m%d%H%M%S<span class="hljs-meta">#</span><span class="bash"> File path <span class="hljs-keyword">for</span> timelapse movies relative to target_dir</span><span class="hljs-meta">#</span><span class="bash"> Default: %Y%m%d-timelapse</span><span class="hljs-meta">#</span><span class="bash"> File extensions(.mpg .avi) are automatically added so <span class="hljs-keyword">do</span> not include them</span>timelapse_filename %Y%m%d-timelapse<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Global Network Options</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Enable IPv6 (default: off)</span>ipv6_enabled off<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Live Stream Server</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> The mini-http server listens to this port <span class="hljs-keyword">for</span> requests (default: 0 = disabled)</span>stream_port 8081<span class="hljs-meta">#</span><span class="bash"> 50% scaled down substream (default: 0 = disabled)</span><span class="hljs-meta">#</span><span class="bash"> substream_port 8082</span><span class="hljs-meta">#</span><span class="bash"> Quality of the jpeg (<span class="hljs-keyword">in</span> percent) images produced (default: 50)</span>stream_quality 50<span class="hljs-meta">#</span><span class="bash"> Output frames at 1 fps when no motion is detected and increase to the</span><span class="hljs-meta">#</span><span class="bash"> rate given by stream_maxrate when motion is detected (default: off)</span>stream_motion off<span class="hljs-meta">#</span><span class="bash"> Maximum framerate <span class="hljs-keyword">for</span> stream streams (default: 1)</span>stream_maxrate 1<span class="hljs-meta">#</span><span class="bash"> Restrict stream connections to localhost only (default: on)</span>stream_localhost off<span class="hljs-meta">#</span><span class="bash"> Limits the number of images per connection (default: 0 = unlimited)</span><span class="hljs-meta">#</span><span class="bash"> Number can be defined by multiplying actual stream rate by desired number of seconds</span><span class="hljs-meta">#</span><span class="bash"> Actual stream rate is the smallest of the numbers framerate and stream_maxrate</span>stream_limit 0<span class="hljs-meta">#</span><span class="bash"> Set the authentication method (default: 0)</span><span class="hljs-meta">#</span><span class="bash"> 0 = disabled</span><span class="hljs-meta">#</span><span class="bash"> 1 = Basic authentication</span><span class="hljs-meta">#</span><span class="bash"> 2 = MD5 digest (the safer authentication)</span>stream_auth_method 0<span class="hljs-meta">#</span><span class="bash"> Authentication <span class="hljs-keyword">for</span> the stream. Syntax username:password</span><span class="hljs-meta">#</span><span class="bash"> Default: not defined (Disabled)</span>; stream_authentication username:password<span class="hljs-meta">#</span><span class="bash"> Percentage to scale the stream image <span class="hljs-keyword">for</span> preview</span><span class="hljs-meta">#</span><span class="bash"> This is scaled on the browser side, motion will keep sending full frames</span><span class="hljs-meta">#</span><span class="bash"> Default: 25</span>; stream_preview_scale 25<span class="hljs-meta">#</span><span class="bash"> Have stream preview image start on a new line</span><span class="hljs-meta">#</span><span class="bash"> Default: no</span>; stream_preview_newline no<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> HTTP Based Control</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> TCP/IP port <span class="hljs-keyword">for</span> the http server to listen on (default: 0 = disabled)</span>webcontrol_port 8080<span class="hljs-meta">#</span><span class="bash"> Restrict control connections to localhost only (default: on)</span>webcontrol_localhost off<span class="hljs-meta">#</span><span class="bash"> Output <span class="hljs-keyword">for</span> http server, select off to choose raw text plain (default: on)</span>webcontrol_html_output on<span class="hljs-meta">#</span><span class="bash"> Authentication <span class="hljs-keyword">for</span> the http based control. Syntax username:password</span><span class="hljs-meta">#</span><span class="bash"> Default: not defined (Disabled)</span>; webcontrol_authentication username:password<span class="hljs-meta">#</span><span class="bash"> Parameters to include on webcontrol.  0=none, 1=limited, 2=advanced, 3=restricted</span><span class="hljs-meta">#</span><span class="bash"> Default: 0 (none)</span>webcontrol_parms 0<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Tracking (Pan/Tilt)</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Type of tracker (0=none (default), 1=stepper, 2=iomojo, 3=pwc, 4=generic, 5=uvcvideo, 6=servo)</span><span class="hljs-meta">#</span><span class="bash"> The generic <span class="hljs-built_in">type</span> enables the definition of motion center and motion size to</span><span class="hljs-meta">#</span><span class="bash"> be used with the conversion specifiers <span class="hljs-keyword">for</span> options like on_motion_detected</span>track_type 0<span class="hljs-meta">#</span><span class="bash"> Enable auto tracking (default: off)</span>track_auto off<span class="hljs-meta">#</span><span class="bash"> Serial port of motor (default: none)</span>;track_port /dev/ttyS0<span class="hljs-meta">#</span><span class="bash"> Motor number <span class="hljs-keyword">for</span> x-axis (default: 0)</span>;track_motorx 0<span class="hljs-meta">#</span><span class="bash"> Set motorx reverse (default: 0)</span>;track_motorx_reverse 0<span class="hljs-meta">#</span><span class="bash"> Motor number <span class="hljs-keyword">for</span> y-axis (default: 0)</span>;track_motory 1<span class="hljs-meta">#</span><span class="bash"> Set motory reverse (default: 0)</span>;track_motory_reverse 0<span class="hljs-meta">#</span><span class="bash"> Maximum value on x-axis (default: 0)</span>;track_maxx 200<span class="hljs-meta">#</span><span class="bash"> Minimum value on x-axis (default: 0)</span>;track_minx 50<span class="hljs-meta">#</span><span class="bash"> Maximum value on y-axis (default: 0)</span>;track_maxy 200<span class="hljs-meta">#</span><span class="bash"> Minimum value on y-axis (default: 0)</span>;track_miny 50<span class="hljs-meta">#</span><span class="bash"> Center value on x-axis (default: 0)</span>;track_homex 128<span class="hljs-meta">#</span><span class="bash"> Center value on y-axis (default: 0)</span>;track_homey 128<span class="hljs-meta">#</span><span class="bash"> ID of an iomojo camera <span class="hljs-keyword">if</span> used (default: 0)</span>track_iomojo_id 0<span class="hljs-meta">#</span><span class="bash"> Angle <span class="hljs-keyword">in</span> degrees the camera moves per step on the X-axis</span><span class="hljs-meta">#</span><span class="bash"> with auto-track (default: 10)</span><span class="hljs-meta">#</span><span class="bash"> Currently only used with pwc <span class="hljs-built_in">type</span> cameras</span>track_step_angle_x 10<span class="hljs-meta">#</span><span class="bash"> Angle <span class="hljs-keyword">in</span> degrees the camera moves per step on the Y-axis</span><span class="hljs-meta">#</span><span class="bash"> with auto-track (default: 10)</span><span class="hljs-meta">#</span><span class="bash"> Currently only used with pwc <span class="hljs-built_in">type</span> cameras</span>track_step_angle_y 10<span class="hljs-meta">#</span><span class="bash"> Delay to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span> after tracking movement as number</span><span class="hljs-meta">#</span><span class="bash"> of picture frames (default: 10)</span>track_move_wait 10<span class="hljs-meta">#</span><span class="bash"> Speed to <span class="hljs-built_in">set</span> the motor to (stepper motor option) (default: 255)</span>track_speed 255<span class="hljs-meta">#</span><span class="bash"> Number of steps to make (stepper motor option) (default: 40)</span>track_stepsize 40<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> External Commands, Warnings and Logging:</span><span class="hljs-meta">#</span><span class="bash"> You can use conversion specifiers <span class="hljs-keyword">for</span> the on_xxxx commands</span><span class="hljs-meta">#</span><span class="bash"> %Y = year, %m = month, %d = date,</span><span class="hljs-meta">#</span><span class="bash"> %H = hour, %M = minute, %S = second,</span><span class="hljs-meta">#</span><span class="bash"> %v = event, %q = frame number, %t = camera id number,</span><span class="hljs-meta">#</span><span class="bash"> %D = changed pixels, %N = noise level,</span><span class="hljs-meta">#</span><span class="bash"> %i and %J = width and height of motion area,</span><span class="hljs-meta">#</span><span class="bash"> %K and %L = X and Y coordinates of motion center</span><span class="hljs-meta">#</span><span class="bash"> %C = value defined by text_event</span><span class="hljs-meta">#</span><span class="bash"> %f = filename with full path</span><span class="hljs-meta">#</span><span class="bash"> %n = number indicating filetype</span><span class="hljs-meta">#</span><span class="bash"> Both %f and %n are only defined <span class="hljs-keyword">for</span> on_picture_save,</span><span class="hljs-meta">#</span><span class="bash"> on_movie_start and on_movie_end</span><span class="hljs-meta">#</span><span class="bash"> Quotation marks round string are allowed.</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Do not sound beeps when detecting motion (default: on)</span><span class="hljs-meta">#</span><span class="bash"> Note: Motion never beeps when running <span class="hljs-keyword">in</span> daemon mode.</span>quiet on<span class="hljs-meta">#</span><span class="bash"> Command to be executed when an event starts. (default: none)</span><span class="hljs-meta">#</span><span class="bash"> An event starts at first motion detected after a period of no motion defined by event_gap</span>; on_event_start value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when an event ends after a period of no motion</span><span class="hljs-meta">#</span><span class="bash"> (default: none). The period of no motion is defined by option event_gap.</span>; on_event_end value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a picture (.ppm|.jpg) is saved (default: none)</span><span class="hljs-meta">#</span><span class="bash"> To give the filename as an argument to a <span class="hljs-built_in">command</span> append it with %f</span>; on_picture_save value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a motion frame is detected (default: none)</span>; on_motion_detected value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when motion <span class="hljs-keyword">in</span> a predefined area is detected</span><span class="hljs-meta">#</span><span class="bash"> Check option <span class="hljs-string">&#x27;area_detect&#x27;</span>.   (default: none)</span>; on_area_detected value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a movie file (.mpg|.avi) is created. (default: none)</span><span class="hljs-meta">#</span><span class="bash"> To give the filename as an argument to a <span class="hljs-built_in">command</span> append it with %f</span>; on_movie_start value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a movie file (.mpg|.avi) is closed. (default: none)</span><span class="hljs-meta">#</span><span class="bash"> To give the filename as an argument to a <span class="hljs-built_in">command</span> append it with %f</span>; on_movie_end value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a camera can<span class="hljs-string">&#x27;t be opened or if it is lost</span></span><span class="hljs-meta">#</span><span class="bash"> NOTE: There is situations when motion don<span class="hljs-string">&#x27;t detect a lost camera!</span></span><span class="hljs-meta">#</span><span class="bash"> It depends on the driver, some drivers dosn<span class="hljs-string">&#x27;t detect a lost camera at all</span></span><span class="hljs-meta">#</span><span class="bash"> Some hangs the motion thread. Some even hangs the PC! (default: none)</span>; on_camera_lost value<span class="hljs-meta">#</span><span class="bash"> Command to be executed when a camera that was lost has been found (default: none)</span><span class="hljs-meta">#</span><span class="bash"> NOTE: If motion doesn<span class="hljs-string">&#x27;t properly detect a lost camera, it also won&#x27;</span>t know it found one.</span>; on_camera_found value<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Common Options <span class="hljs-keyword">for</span> database features.</span><span class="hljs-meta">#</span><span class="bash"> Options require database options to be active also.</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Log to the database when creating motion triggered picture file  (default: on)</span>; sql_log_picture on<span class="hljs-meta">#</span><span class="bash"> Log to the database when creating a snapshot image file (default: on)</span>; sql_log_snapshot on<span class="hljs-meta">#</span><span class="bash"> Log to the database when creating motion triggered movie file (default: off)</span>; sql_log_movie off<span class="hljs-meta">#</span><span class="bash"> Log to the database when creating timelapse movies file (default: off)</span>; sql_log_timelapse off<span class="hljs-meta">#</span><span class="bash"> SQL query string that is sent to the database</span><span class="hljs-meta">#</span><span class="bash"> Use same conversion specifiers has <span class="hljs-keyword">for</span> text features</span><span class="hljs-meta">#</span><span class="bash"> Additional special conversion specifiers are</span><span class="hljs-meta">#</span><span class="bash"> %n = the number representing the file_type</span><span class="hljs-meta">#</span><span class="bash"> %f = filename with full path</span><span class="hljs-meta">#</span><span class="bash"> Default value:</span><span class="hljs-meta">#</span><span class="bash"> Create tables :</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#</span></span><span class="hljs-meta">#</span><span class="bash"> Mysql</span><span class="hljs-meta">#</span><span class="bash"> CREATE TABLE security (camera int, filename char(80) not null, frame int, file_type int, time_stamp timestamp(14), event_time_stamp timestamp(14));</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> Postgresql</span><span class="hljs-meta">#</span><span class="bash"> CREATE TABLE security (camera int, filename char(80) not null, frame int, file_type int, time_stamp timestamp without time zone, event_time_stamp timestamp without time zone);</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> insert into security(camera, filename, frame, file_type, time_stamp, text_event) values(<span class="hljs-string">&#x27;%t&#x27;</span>, <span class="hljs-string">&#x27;%f&#x27;</span>, <span class="hljs-string">&#x27;%q&#x27;</span>, <span class="hljs-string">&#x27;%n&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %T&#x27;</span>, <span class="hljs-string">&#x27;%C&#x27;</span>)</span>; sql_query insert into security(camera, filename, frame, file_type, time_stamp, event_time_stamp) values(&#x27;%t&#x27;, &#x27;%f&#x27;, &#x27;%q&#x27;, &#x27;%n&#x27;, &#x27;%Y-%m-%d %T&#x27;, &#x27;%C&#x27;)<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Database Options</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> database <span class="hljs-built_in">type</span> : mysql, postgresql, sqlite3 (default : not defined)</span>; database_type value<span class="hljs-meta">#</span><span class="bash"> database to <span class="hljs-built_in">log</span> to (default: not defined)</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> sqlite3, the full path and name <span class="hljs-keyword">for</span> the database.</span>; database_dbname value<span class="hljs-meta">#</span><span class="bash"> The host on <span class="hljs-built_in">which</span> the database is located (default: localhost)</span>; database_host value<span class="hljs-meta">#</span><span class="bash"> User account name <span class="hljs-keyword">for</span> database (default: not defined)</span>; database_user value<span class="hljs-meta">#</span><span class="bash"> User password <span class="hljs-keyword">for</span> database (default: not defined)</span>; database_password value<span class="hljs-meta">#</span><span class="bash"> Port on <span class="hljs-built_in">which</span> the database is located</span><span class="hljs-meta">#</span><span class="bash">  mysql 3306 , postgresql 5432 (default: not defined)</span>; database_port value<span class="hljs-meta">#</span><span class="bash"> Database <span class="hljs-built_in">wait</span> time <span class="hljs-keyword">in</span> milliseconds <span class="hljs-keyword">for</span> locked database to</span><span class="hljs-meta">#</span><span class="bash"> be unlocked before returning database locked error (default 0)</span>; database_busy_timeout 0<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Video Loopback Device (vloopback project)</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Output images to a video4linux loopback device</span><span class="hljs-meta">#</span><span class="bash"> Specify the device associated with the loopback device</span><span class="hljs-meta">#</span><span class="bash"> For example /dev/video1 (default: not defined)</span>; video_pipe value<span class="hljs-meta">#</span><span class="bash"> Output motion images to a video4linux loopback device</span><span class="hljs-meta">#</span><span class="bash"> Specify the device associated with the loopback device</span><span class="hljs-meta">#</span><span class="bash"> For example /dev/video1 (default: not defined)</span>; motion_video_pipe value<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#############################################################</span></span><span class="hljs-meta">#</span><span class="bash"> camera config files - One <span class="hljs-keyword">for</span> each camera.</span><span class="hljs-meta">#</span><span class="bash"> Except <span class="hljs-keyword">if</span> only one camera - You only need this config file.</span><span class="hljs-meta">#</span><span class="bash"> If you have more than one camera you MUST define one camera</span><span class="hljs-meta">#</span><span class="bash"> config file <span class="hljs-keyword">for</span> each camera <span class="hljs-keyword">in</span> addition to this config file.</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#############################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Remember: If you have more than one camera you must have one</span><span class="hljs-meta">#</span><span class="bash"> camera file <span class="hljs-keyword">for</span> each camera. E.g. 2 cameras requires 3 files:</span><span class="hljs-meta">#</span><span class="bash"> This motion.conf file AND camera1.conf and camera2.conf.</span><span class="hljs-meta">#</span><span class="bash"> Only put the options that are unique to each camera <span class="hljs-keyword">in</span> the</span><span class="hljs-meta">#</span><span class="bash"> camera config files.</span>; camera /etc/motion/camera1.conf; camera /etc/motion/camera2.conf; camera /etc/motion/camera3.conf; camera /etc/motion/camera4.conf<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#############################################################</span></span><span class="hljs-meta">#</span><span class="bash"> Camera config directory</span><span class="hljs-meta">#</span><span class="bash"> Any files ending <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;.conf&#x27;</span> <span class="hljs-keyword">in</span> this directory will be <span class="hljs-built_in">read</span></span><span class="hljs-meta">#</span><span class="bash"> as a camera config file.</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#############################################################</span></span>; camera_dir /etc/motion/conf.d</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jb51.net/article/163690.htm">树莓派使用USB摄像头和motion实现监控</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_30509393/article/details/99396622?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase">linux下的开源移动图像监测程序—motion编译与配置</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://lavrsen.dk/foswiki/bin/view/Motion/ConfigFileOptions">（看不懂qwqの）Motion官方配置文件</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/u013162035/article/details/78580486">第6章 树莓派摄像头操作</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>实时</tag>
      
      <tag>监控</tag>
      
      <tag>网页</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[05:私有云搭建]</title>
    <link href="/2020/07/12/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B05%E7%A7%81%E6%9C%89%E4%BA%91%E6%90%AD%E5%BB%BA%5D/"/>
    <url>/2020/07/12/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B05%E7%A7%81%E6%9C%89%E4%BA%91%E6%90%AD%E5%BB%BA%5D/</url>
    
    <content type="html"><![CDATA[<p><span class="label label-primary"><br>  之前已经做过关于树莓派的私有云搭建，只不过都是在宝塔直接完成的，在宝塔搭建固然容易，但是宝塔作为虚拟机，储存的东西只是虚拟内存，无法实现本机的访问，现在在本地搭建的Nginx上搭建一下私有云。</span></p><h2 id="一-owncloud"><a href="#一-owncloud" class="headerlink" title="一.owncloud"></a>一.owncloud</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122210506.jpg" alt=""></p><h3 id="1-下载ownCloud"><a href="#1-下载ownCloud" class="headerlink" title="1. 下载ownCloud"></a>1. 下载ownCloud</h3><p>按照下面的指令依次执行</p><pre><code class="hljs shell">sudo wget https://download.owncloud.org/community/owncloud-10.2.0.zipsudo unzip owncloud-10.2.0.zip -d /var/www/html/cd /var/www/html/owncloudsudo mkdir data</code></pre><h3 id="2-修改目录权限"><a href="#2-修改目录权限" class="headerlink" title="2. 修改目录权限"></a>2. 修改目录权限</h3><p><span class="label label-primary"><br>  OwnCloud在安装的过程中需要对一些目录有写的权限,为此，web服务器用户（www-data对于基于Debian的系统）必须要拥有apps、data、config目录的权限。</span></p><pre><code class="hljs shell">依次执行下面的指令sudo chown -R www-data:www-data datasudo chown -R www-data:www-data configsudo chown -R www-data:www-data apps</code></pre><h3 id="3-设置mysql账户密码"><a href="#3-设置mysql账户密码" class="headerlink" title="3. 设置mysql账户密码"></a>3. 设置mysql账户密码</h3><p>输入下面指令</p><pre><code class="hljs shell">sudo mysql -u root -p</code></pre><p>然后随便输密码点击回车就能登录进去</p><p>输入下面指令点击回车</p><pre><code class="hljs shell">update mysql.user set plugin=&#x27;mysql_native_password&#x27;;</code></pre><p>输入下面指令在newpassword处输入你想设置的密码</p><pre><code class="hljs shell">update mysql.user set password=PASSWORD(&quot;newpassword&quot;) where User=&#x27;root&#x27;;</code></pre><p>用下面指令刷新信息</p><pre><code class="hljs shell">flush privileges;</code></pre><p>刷新以后点击ctrl-c退出</p><h3 id="4-配置owncloud"><a href="#4-配置owncloud" class="headerlink" title="4. 配置owncloud"></a>4. 配置owncloud</h3><p>打开浏览器，输入 树莓派IP/owncloud ,进入设置安装界面</p><h3 id="5-问题"><a href="#5-问题" class="headerlink" title="5. 问题"></a>5. 问题</h3><pre><code class="hljs shell">error:This version of ownCloud is not compatible with PHP 7.3You are currently running PHP 7.3.19-1~deb10u1.</code></pre><p>解决方案：（呃，解决不了）<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122210801.png" alt=""></p><h2 id="二-nextcloud"><a href="#二-nextcloud" class="headerlink" title="二.nextcloud"></a>二.nextcloud</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122210845.jpg" alt=""></p><h3 id="1-下载nextcloud"><a href="#1-下载nextcloud" class="headerlink" title="1. 下载nextcloud"></a>1. 下载nextcloud</h3><p>按照下面的指令依次执行</p><pre><code class="hljs shell">sudo wget https://download.nextcloud.com/server/releases/nextcloud-19.0.0.zipsudo unzip nextcloud-19.0.0.zip -d /var/www/html/cd /var/www/html/nextcloudsudo mkdir data</code></pre><h3 id="2-修改目录权限-1"><a href="#2-修改目录权限-1" class="headerlink" title="2. 修改目录权限"></a>2. 修改目录权限</h3><p><span class="label label-primary"><br>  nextcloud在安装的过程中需要对一些目录有写的权限,为此，web服务器用户（www-data对于基于Debian的系统）必须要拥有apps、data、config目录的权限。</span></p><pre><code class="hljs shell">依次执行下面的指令sudo chown -R www-data:www-data datasudo chown -R www-data:www-data configsudo chown -R www-data:www-data apps</code></pre><h3 id="3-为nextcloud创建数据库"><a href="#3-为nextcloud创建数据库" class="headerlink" title="3. 为nextcloud创建数据库"></a>3. 为nextcloud创建数据库</h3><p>进入phpmyadmin页面</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122211024.png" alt=""></p><h3 id="4-配置nextcloud"><a href="#4-配置nextcloud" class="headerlink" title="4. 配置nextcloud"></a>4. 配置nextcloud</h3><p>打开浏览器，输入 树莓派IP/nextcloud ,进入设置安装界面</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122211108.png" alt=""></p><h3 id="5-问题-1"><a href="#5-问题-1" class="headerlink" title="5. 问题"></a>5. 问题</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122211153.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mp.weixin.qq.com/s/IKMIYHsRsvVzoaBF89byBw">树莓派爱好者基地：树莓派搭建私有云盘教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://central.owncloud.org/t/this-version-of-owncloud-is-not-compatible-with-php-7-3/17531">This version of ownCloud is not compatible with PHP 7.3</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.orgleaf.com/2891.html?replytocom=2711">解决CentOS中安装Nextcloud出现“内部服务器错误</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>私有云</tag>
      
      <tag>nextcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[04:pi-dashboard实时监控]</title>
    <link href="/2020/07/11/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B04pi-dashboard%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%5D/"/>
    <url>/2020/07/11/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B04pi-dashboard%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%5D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><span class="label label-primary"><br>  树莓派作为一台Linux主机，要是有一个可视化界面能实时显示树莓派的状态信息那该有多棒啊。<br>  最近找到一个有趣的项目，我们只需要给树莓派配置好lnmp环境后，就可以装上一个类似于仪表盘的状态监控的工具。<br>  通过炫酷的WebUI的界面显示当前树莓派的各种数据：<br>  CPU的基本信息，状态和使用率树莓派当前IP地址、使用的时间、操作系统内存、缓存、SWAP分区的实时数据TF卡磁盘的占用情况网络接口实时数据</span></p><p>以下是在树莓派上安装pi-dashboard的详细过程：</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1. 安装Nginx"></a>1. 安装Nginx</h3><p>ssh登录树莓派，输入：</p><pre><code class="hljs shell">sudo apt-get updatesudo apt-get install nginx</code></pre><h3 id="2-安装php"><a href="#2-安装php" class="headerlink" title="2. 安装php"></a>2. 安装php</h3><pre><code class="hljs shell">sudo apt-get install php7.3-fpm</code></pre><h3 id="3-配置Nginx"><a href="#3-配置Nginx" class="headerlink" title="3. 配置Nginx"></a>3. 配置Nginx</h3><p>安装好Nginx后，为了让Nginx能够处理PHP网页，需要修改/etc/nginx/sites-available/default文件</p><pre><code class="hljs shell">sudo vim /etc/nginx/sites-available/default</code></pre><p>将default文件修改为以下内容：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Default server configuration</span><span class="hljs-meta">#</span>server &#123;        listen 80 default_server;        listen [::]:80 default_server;        root /var/www/html;        # Add index.php to the list if you are using PHP        index index.html index.htm index.nginx-debian.html index.php;        server_name _;        location / &#123;                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ =404;        &#125;        # pass PHP scripts to FastCGI server        #        location ~ \.php$ &#123;        #       include snippets/fastcgi-php.conf;        #        #       # With php-fpm (or other unix sockets):                fastcgi_pass unix:/run/php/php7.3-fpm.sock;        #       # With php-cgi (or other tcp sockets):        #       fastcgi_pass 127.0.0.1:9000;        # 设置脚本文件请求的路径                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        # 引入fastcgi的配置文件                include fastcgi_params;        &#125;&#125;</code></pre><h3 id="4-重启Nginx"><a href="#4-重启Nginx" class="headerlink" title="4. 重启Nginx"></a>4. 重启Nginx</h3><pre><code class="hljs shell">sudo nginx -s reload</code></pre><p>这时我们可以查看Nginx与PHP是否配置成功，我们可以在网站根目录下 /var/www/html创建一个index.php文件，内容如下：</p><pre><code class="hljs shell">&lt;?php phpinfo(); ?&gt;</code></pre><p>保存后退出，在局域网下浏览器地址栏输入：<a href="http://你的树莓派ip/index.php，查看PHPinfo信息，如果显示说明PHP与Nginx配置成功。">http://你的树莓派ip/index.php，查看PHPinfo信息，如果显示说明PHP与Nginx配置成功。</a></p><h3 id="5-树莓派安装MariaDB和phpMyAdmin"><a href="#5-树莓派安装MariaDB和phpMyAdmin" class="headerlink" title="5. 树莓派安装MariaDB和phpMyAdmin"></a>5. 树莓派安装MariaDB和phpMyAdmin</h3><pre><code class="hljs shell">sudo apt-get install mariadb-server-10.3 phpmyadmin</code></pre><pre><code class="hljs shell">error:pi@raspbian:~$ sudo apt-get install mariadb-server-10.3 phpmyadminReading package lists... DoneBuilding dependency tree       Reading state information... DoneSome packages could not be installed. This may mean that you haverequested an impossible situation or if you are using the unstabledistribution that some required packages have not yet been createdor been moved out of Incoming.The following information may help to resolve the situation:The following packages have unmet dependencies: phpmyadmin : Depends: php-twig (&gt;= 2.9) but 2.6.2-2 is to be installed              Recommends: php-curl              Recommends: php-gd              Recommends: php-bz2              Recommends: php-zip              Recommends: php-tcpdf but it is not going to be installedE: Unable to correct problems, you have held broken packages.</code></pre><p>解决办法：</p><pre><code class="hljs shell">sudo apt-get install aptitudesudo aptitude install xxxxx第一选项no第二个选项yes</code></pre><p>控制台安装phpMyAdmin过程中会出现配置phpMyAdmin的选项<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122205629.png" alt=""><br>它让我们自动重新配置网络服务器Apache或者lighttpd，因为我们用的是Nginx所以按 esc键取消选择，安装结束时会出现一个配置选项，点击 yes进行配置，之后要求输入一个密码，注册到MySQL服务器上<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122205634.png" alt=""></p><h3 id="6-建立软链接："><a href="#6-建立软链接：" class="headerlink" title="6. 建立软链接："></a>6. 建立软链接：</h3><pre><code class="hljs shell">sudo ln -s /usr/share/phpmyadmin /var/www/html</code></pre><h3 id="7-pi-dashboard项目部署"><a href="#7-pi-dashboard项目部署" class="headerlink" title="7.pi-dashboard项目部署"></a>7.pi-dashboard项目部署</h3><p>我们先在本地下载pi-dashboard项目，下载地址：<a href="https://github.com/spoonysonny/pi">https://github.com/spoonysonny/pi</a><br>解压后用xftp软件传送到树莓派上，然后运行命令</p><pre><code class="hljs shell">sudo mv pi-dashboard /var/www/html</code></pre><h3 id="8-重启后浏览器输入http-你的树莓派ip-pi-dashboard"><a href="#8-重启后浏览器输入http-你的树莓派ip-pi-dashboard" class="headerlink" title="8.重启后浏览器输入http://你的树莓派ip/pi-dashboard/"></a>8.重启后浏览器输入<a href="http://你的树莓派ip/pi-dashboard/">http://你的树莓派ip/pi-dashboard/</a></h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201122205117.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/">Debian-Pi-Aarch64 ★ 全新树莓派64位系统2.0正式版 - 说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://raspberrypi.club/">树莓派俱乐部</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://shumeipai.nxez.com/">树莓派实验</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://mp.weixin.qq.com/s/h--AL0TiA-2J551Vn0A3Ow">小雨编程</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/qiqzhang/article/details/87862556">ubuntu安装软件时出现The following packages have unmet dependencies，有依赖关系</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>系统</tag>
      
      <tag>mariadb</tag>
      
      <tag>myadmin</tag>
      
      <tag>mysql mysql</tag>
      
      <tag>nginx nginx</tag>
      
      <tag>php</tag>
      
      <tag>pi-dashboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[03:安装宝塔]</title>
    <link href="/2020/07/10/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B03%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%5D/"/>
    <url>/2020/07/10/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B03%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%5D/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载宝塔虚拟机镜像，通过xftp上传到树莓派"><a href="#1-下载宝塔虚拟机镜像，通过xftp上传到树莓派" class="headerlink" title="1.下载宝塔虚拟机镜像，通过xftp上传到树莓派"></a>1.下载宝塔虚拟机镜像，通过xftp上传到树莓派</h2><h2 id="2-下载解压支持"><a href="#2-下载解压支持" class="headerlink" title="2.下载解压支持"></a>2.下载解压支持</h2><pre><code class="hljs shell">sudo apt updatesudo apt install tar gzip zip unzip bzip2 xz-utils -y</code></pre><h2 id="3-解压压缩包"><a href="#3-解压压缩包" class="headerlink" title="3. 解压压缩包"></a>3. 解压压缩包</h2><pre><code class="hljs shell">tar xvf bt-panel_vm_5.9.1_pro_v2.tar</code></pre><h2 id="4-进入文件目录"><a href="#4-进入文件目录" class="headerlink" title="4. 进入文件目录"></a>4. 进入文件目录</h2><pre><code class="hljs shell">cd ./bt-panel_vm_5.9.1_pro_v2</code></pre><h2 id="5-安装宝塔虚拟机"><a href="#5-安装宝塔虚拟机" class="headerlink" title="5.安装宝塔虚拟机"></a>5.安装宝塔虚拟机</h2><pre><code class="hljs shell">sudo ./install</code></pre><h2 id="6-启动宝塔虚拟机"><a href="#6-启动宝塔虚拟机" class="headerlink" title="6. 启动宝塔虚拟机"></a>6. 启动宝塔虚拟机</h2><pre><code class="hljs shell">sudo ./bt_run</code></pre><h2 id="7-关闭宝塔虚拟机："><a href="#7-关闭宝塔虚拟机：" class="headerlink" title="7.关闭宝塔虚拟机："></a>7.关闭宝塔虚拟机：</h2><p><span class="label label-primary"><br>为了保证虚拟机的数据同步安全，请按照以下步骤操作：<br>请ssh登录到虚拟机再执行命令 “ init 0 “ 关闭虚拟机<br>关闭后，需要在宝塔虚拟机目录下执行 “ ./bt_prog “ 命令，检查虚拟机是否已关闭<br>如果没有任何输出结果，代表虚拟机已正常关闭<br>如果无法正常关闭虚拟机，请在宝塔虚拟机目录下执行 “ ./bt_prog kill “ 命令<br>同样记得再次执行 “ ./bt_prog “ 命令，检查虚拟机是否已关闭<br>自动启动</span></p><h2 id="8-开机自动启动"><a href="#8-开机自动启动" class="headerlink" title="8.开机自动启动"></a>8.开机自动启动</h2><pre><code class="hljs shell">启用开机自动启动./install int</code></pre><pre><code class="hljs shell">取消开机自动启动./install uint</code></pre><h2 id="9-默认参数值"><a href="#9-默认参数值" class="headerlink" title="9.默认参数值:"></a>9.默认参数值:</h2><pre><code class="hljs shell">默认管理端口  28888默认管理地址  http://你树莓派的IP地址:28888/默认Web管理用户及密码    openfans/openfans宝塔虚拟机ssh端口  2222宝塔虚拟机root默认密码   raspberry</code></pre><h2 id="10-如何ssh连接到宝塔虚拟机"><a href="#10-如何ssh连接到宝塔虚拟机" class="headerlink" title="10.如何ssh连接到宝塔虚拟机?"></a>10.如何ssh连接到宝塔虚拟机?</h2><pre><code class="hljs shell">本机连接： ssh -p 2222 root@localhost外部连接： ssh -p 2222 root@你树莓派的IP地址</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/">Debian-Pi-Aarch64 ★ 全新树莓派64位系统2.0正式版 - 说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://raspberrypi.club/">树莓派俱乐部</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://shumeipai.nxez.com/">树莓派实验</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[02:树莓派+u盘搭建家庭共享]</title>
    <link href="/2020/07/09/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B02%E6%A0%91%E8%8E%93%E6%B4%BE+u%E7%9B%98%E6%90%AD%E5%BB%BA%E5%AE%B6%E5%BA%AD%E5%85%B1%E4%BA%AB%5D/"/>
    <url>/2020/07/09/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B02%E6%A0%91%E8%8E%93%E6%B4%BE+u%E7%9B%98%E6%90%AD%E5%BB%BA%E5%AE%B6%E5%BA%AD%E5%85%B1%E4%BA%AB%5D/</url>
    
    <content type="html"><![CDATA[<h2 id="1-硬盘挂载"><a href="#1-硬盘挂载" class="headerlink" title="1.硬盘挂载"></a>1.硬盘挂载</h2><h3 id="1-1-使用fdisk-l-查看硬盘的详细信息"><a href="#1-1-使用fdisk-l-查看硬盘的详细信息" class="headerlink" title="1.1 使用fdisk -l 查看硬盘的详细信息"></a>1.1 使用fdisk -l 查看硬盘的详细信息</h3><pre><code class="hljs shell">pi@raspbian:~$ sudo fdisk -lDisk /dev/ram0: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram1: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram2: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram3: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram4: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram5: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram6: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram7: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram8: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram9: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram10: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram11: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram12: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram13: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram14: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/ram15: 4 MiB, 4194304 bytes, 8192 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk /dev/mmcblk0: 29.9 GiB, 32105299968 bytes, 62705664 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x68339ddaDevice         Boot  Start      End  Sectors  Size Id Type/dev/mmcblk0p1 *      8192   524287   516096  252M  c W95 FAT32 (LBA)/dev/mmcblk0p2      524288 62705663 62181376 29.7G 83 LinuxDisk /dev/sda: 30 GiB, 32212254720 bytes, 62914560 sectorsDisk model: U310Units: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0xb64d29a8Device     Boot Start      End  Sectors Size Id Type/dev/sda1        8192 62914559 62906368  30G  7 HPFS/NTFS/exFAT</code></pre><h3 id="1-2-挂载到指定位置"><a href="#1-2-挂载到指定位置" class="headerlink" title="1.2 挂载到指定位置"></a>1.2 挂载到指定位置</h3><pre><code class="hljs shell">pi@raspbian:~$ mkdir sharepi@raspbian:~$ lssharepi@raspbian:~$ sudo mount /dev/sda1 share</code></pre><h3 id="1-3-查看挂载情况"><a href="#1-3-查看挂载情况" class="headerlink" title="1.3 查看挂载情况"></a>1.3 查看挂载情况</h3><pre><code class="hljs shell">df -h</code></pre><pre><code class="hljs shell">pi@raspbian:~$ df -hFilesystem      Size  Used Avail Use% Mounted on/dev/root        30G  4.2G   24G  15% /devtmpfs        918M     0  918M   0% /devtmpfs           950M     0  950M   0% /dev/shmtmpfs           950M  8.9M  941M   1% /runtmpfs           5.0M     0  5.0M   0% /run/locktmpfs           950M     0  950M   0% /sys/fs/cgroup/dev/mmcblk0p1  252M   71M  181M  29% /boottmpfs           190M     0  190M   0% /run/user/1000/dev/sda1        30G   19G  9.9G  65% /home/pi/share</code></pre><p class="note note-primary">  取消挂载 : sudo umount /dev/sda1</p><h3 id="1-4-解决硬盘的自动挂载"><a href="#1-4-解决硬盘的自动挂载" class="headerlink" title="1.4 解决硬盘的自动挂载"></a>1.4 解决硬盘的自动挂载</h3><p>每次树莓派重启或者硬盘插拔都需要对硬盘进行重新挂载，比较麻烦，因此需要自动挂载。这里要修改/etc/fstab文件。</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201121203001.png" alt=""></p><p>可以看到，fstab文件其实就是一个表格，表格各列的含意如下：<br>第一列：磁盘分区名/卷标，一般是/dev/sdaN（N表示正整数）<br>第二列：挂载点，我们在这里把/dev/sda1挂到/samba上。<br>第三列：缺省设置，一般用defautls。<br>第四列：是否备份：0——表示不做 dump 备份；1——表示要将整个 fie sysytem 里的内容备份；2 也表示要做 dump 备份，但该分区的重要性比 1 小。<br>第五列：检测顺序：0——不进行检测；根分区（/），必须填写 1，其它的都不能填写 1。如果有分区填写大于 1 的话，则在检查完根分区后，从小到大依次检查下去。<br>具体填写方法在图中已注明。</p><h2 id="2-df-h查看盘符挂载情况"><a href="#2-df-h查看盘符挂载情况" class="headerlink" title="2.df -h查看盘符挂载情况"></a>2.df -h查看盘符挂载情况</h2><pre><code class="hljs shell">pi@raspbian:~$ df -hFilesystem      Size  Used Avail Use% Mounted onudev            788M     0  788M   0% /devtmpfs           185M   12M  173M   7% /run/dev/mmcblk0p2   30G  8.8G   20G  32% /tmpfs           925M     0  925M   0% /dev/shmtmpfs           5.0M  4.0K  5.0M   1% /run/locktmpfs           925M     0  925M   0% /sys/fs/cgroup/dev/mmcblk0p1  252M   89M  163M  36% /boottmpfs           185M   16K  185M   1% /run/user/1000/dev/sda        500G   28G  473G   6% /media/pi/AE57-581F</code></pre><h2 id="3-已知盘符已自动挂载在-home-pi-share文件夹下"><a href="#3-已知盘符已自动挂载在-home-pi-share文件夹下" class="headerlink" title="3.已知盘符已自动挂载在/home/pi/share文件夹下"></a>3.已知盘符已自动挂载在/home/pi/share文件夹下</h2><h2 id="4-安装samba"><a href="#4-安装samba" class="headerlink" title="4.安装samba"></a>4.安装samba</h2><p><span class="label label-primary">更新一下源 ：sudo apt-get update</span></p><p><span class="label label-primary">安装samba : sudo apt-get install samba samba-common-bin</span></p><h2 id="5-安装完成后，配置-etc-samba-smb-conf文件"><a href="#5-安装完成后，配置-etc-samba-smb-conf文件" class="headerlink" title="5.安装完成后，配置/etc/samba/smb.conf文件"></a>5.安装完成后，配置/etc/samba/smb.conf文件</h2><pre><code class="hljs shell">sudo vim /etc/samba/smb.conf</code></pre><p>&lt;span class=label label-primary”&gt;在其最后添加以下命令：&lt;/span&gt;</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">共享文件的名称，将在网络上以此名称显示</span>path = /home/pi/share #共享文件的路径valid users = root pi #允许访问的用户，这里我用的是root 和 pi 两个用户browseable = yes  #允许浏览public = yes  #共享开放writable = yes  #可写</code></pre><h2 id="6-保存后，重启samba服务"><a href="#6-保存后，重启samba服务" class="headerlink" title="6.保存后，重启samba服务"></a>6.保存后，重启samba服务</h2><pre><code class="hljs shell">sudo /usr/sbin/samba restart</code></pre><p>(可通过 whereis samba 寻找 samba 所在位置)</p><h2 id="7-最后使用root用户添加共享用户："><a href="#7-最后使用root用户添加共享用户：" class="headerlink" title="7.最后使用root用户添加共享用户："></a>7.最后使用root用户添加共享用户：</h2><p>smbpasswd –a pi #这里我用的pi。</p><pre><code class="hljs shell">pi@raspbian:~$ sudo suroot@raspbian:/home/pi# smbpasswd -a piNew SMB password:Retype new SMB password:Added user pi</code></pre><h2 id="8-ok-完成"><a href="#8-ok-完成" class="headerlink" title="8.ok 完成"></a>8.ok 完成</h2><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201121203707.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/">Debian-Pi-Aarch64 ★ 全新树莓派64位系统2.0正式版 - 说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://raspberrypi.club/">树莓派俱乐部</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://shumeipai.nxez.com/">树莓派实验</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>samba</tag>
      
      <tag>家庭共享，U盘，挂载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派[01:装系统]</title>
    <link href="/2020/07/08/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B01%E8%A3%85%E7%B3%BB%E7%BB%9F%5D/"/>
    <url>/2020/07/08/raspberry/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5B01%E8%A3%85%E7%B3%BB%E7%BB%9F%5D/</url>
    
    <content type="html"><![CDATA[<h2 id="一-格式化以及烤录系统"><a href="#一-格式化以及烤录系统" class="headerlink" title="一.格式化以及烤录系统"></a>一.格式化以及烤录系统</h2><p class="note note-primary">  镜像选择：树莓派爱好者基地  2020-06-17-OPENFANS-Debian-Buster-Desktop-Aarch64-ext4-v2019-2.0-U3-Release.img.xz</p><h4 id="1-1格式化储存卡"><a href="#1-1格式化储存卡" class="headerlink" title="1.1格式化储存卡"></a>1.1格式化储存卡</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201121201303.png"  border="0" /></p><h4 id="1-2烤录镜像"><a href="#1-2烤录镜像" class="headerlink" title="1.2烤录镜像"></a>1.2烤录镜像</h4><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/20201121201352.png"  border="0" /></p><h2 id="二-查看官方文档"><a href="#二-查看官方文档" class="headerlink" title="二.查看官方文档"></a>二.查看官方文档</h2><p><a class="wp-editor-md-post-content-link" href="https://gitee.com/openfans-community/Debian-Pi-Aarch64">https://gitee.com/openfans-community/Debian-Pi-Aarch64/</a></p><h3 id="2-1服务开关："><a href="#2-1服务开关：" class="headerlink" title="2.1服务开关："></a>2.1服务开关：</h3><h4 id="2-1-1-Docker容器"><a href="#2-1-1-Docker容器" class="headerlink" title="2.1.1 Docker容器"></a>2.1.1 Docker容器</h4><p><span class="label label-primary"><br>  手动开启：systemctl start docker.service<br>  手动停止：systemctl stop docker.service<br>  启用开机启动：systemctl enable docker.service<br>  禁用开机启动：systemctl disable docker.service</span></p><h4 id="2-1-2-CecOS-CaaS容器云（服务端口：8443）"><a href="#2-1-2-CecOS-CaaS容器云（服务端口：8443）" class="headerlink" title="2.1.2 CecOS CaaS容器云（服务端口：8443）"></a>2.1.2 CecOS CaaS容器云（服务端口：8443）</h4><p><span class="label label-primary"><br>  手动开启：systemctl start cecos-caas.service<br>  手动停止：systemctl stop cecos-caas.service<br>  启用开机启动：systemctl enable cecos-caas.service<br>  禁用开机启动：systemctl disable cecos-caas.service</span></p><h4 id="2-1-3-WebGUI管理平台（服务端口：9090"><a href="#2-1-3-WebGUI管理平台（服务端口：9090" class="headerlink" title="2.1.3 WebGUI管理平台（服务端口：9090)"></a>2.1.3 WebGUI管理平台（服务端口：9090)</h4><p><span class="label label-primary"><br>  手动开启：systemctl start cockpit.socket<br>  手动停止：systemctl stop cockpit.socket<br>  启用开机启动：systemctl enable cockpit.socket<br>  禁用开机启动：systemctl disable cockpit.socket</span></p><h4 id="2-1-4-Web-SSH客户端（服务端口：4200）"><a href="#2-1-4-Web-SSH客户端（服务端口：4200）" class="headerlink" title="2.1.4 Web SSH客户端（服务端口：4200）"></a>2.1.4 Web SSH客户端（服务端口：4200）</h4><p><span class="label label-primary"><br>  手动开启：systemctl start shellinabox.service<br>  手动停止：systemctl stop shellinabox.service<br>  启用开机启动：systemctl enable shellinabox.service<br>  禁用开机启动：systemctl disable shellinabox.service</span></p><h4 id="2-1-5-默认的VNC访问密码为-raspberry"><a href="#2-1-5-默认的VNC访问密码为-raspberry" class="headerlink" title="2.1.5 默认的VNC访问密码为: raspberry"></a>2.1.5 默认的VNC访问密码为: raspberry</h4><p><span class="label label-primary"><br>默认的WEB VNC访问地址为: <a href="http://你树莓派的IP地址:5901">http://你树莓派的IP地址:5901</a><br>默认的客户端访问地址为: 你树莓派的IP地址:5900</span></p><h3 id="2-2账户及密码"><a href="#2-2账户及密码" class="headerlink" title="2.2账户及密码"></a>2.2账户及密码</h3><p><span class="label label-primary"><br>  系统默认账户：pi ，默认密码：raspberry<br>  默认账户pi账户支持ssh登录，root账户密码请登陆后使用命令 “sudo passwd root” 执行设置，<br>  或使用命令 “sudo -i” 来切换到root用户。</span></p><h3 id="2-3Web登录接口说明"><a href="#2-3Web登录接口说明" class="headerlink" title="2.3Web登录接口说明"></a>2.3Web登录接口说明</h3><h4 id="2-3-1-Web可视化管理界面"><a href="#2-3-1-Web可视化管理界面" class="headerlink" title="2.3.1 Web可视化管理界面"></a>2.3.1 Web可视化管理界面</h4><p><span class="label label-primary"><br>登录地址 <a href="https://你树莓派的IP地址:9090">https://你树莓派的IP地址:9090</a><br>说明：请使用系统默认账户pi登录</span></p><h4 id="2-3-2-WEB-SSH-客户端-入口界面"><a href="#2-3-2-WEB-SSH-客户端-入口界面" class="headerlink" title="2.3.2 WEB SSH 客户端 入口界面"></a>2.3.2 WEB SSH 客户端 入口界面</h4><p><span class="label label-primary"><br>登录地址 <a href="https://你树莓派的IP地址:4200">https://你树莓派的IP地址:4200</a><br>说明：使用具有控制台登录权限的帐户登录，例如：pi</span></p><h4 id="2-3-3-CecOS-CaaS-容器云管理平台-登录界面"><a href="#2-3-3-CecOS-CaaS-容器云管理平台-登录界面" class="headerlink" title="2.3.3 CecOS CaaS 容器云管理平台 登录界面"></a>2.3.3 CecOS CaaS 容器云管理平台 登录界面</h4><p><span class="label label-primary"><br>登录地址 <a href="https://你树莓派的IP地址:8443">https://你树莓派的IP地址:8443</a><br>说明：默认管理账户 admin , 默认密码：password 。请登录后立即修改默认密码！！</span></p><h3 id="2-4启用和运行Docker服务"><a href="#2-4启用和运行Docker服务" class="headerlink" title="2.4启用和运行Docker服务"></a>2.4启用和运行Docker服务</h3><p><span class="label label-primary"><br>  启用 Docker服务，需要手动启动。<br>  开机自动启动Docker服务<br>  systemctl enable docker.service<br>  启动Docker服务<br>  systemctl start docker.service<br>  停止Docker服务<br>  systemctl stop docker.service<br>  禁止Docker服务开机启动<br>  systemctl disable docker.service</span></p><h3 id="2-5启用CecOS-CaaS容器云"><a href="#2-5启用CecOS-CaaS容器云" class="headerlink" title="2.5启用CecOS-CaaS容器云"></a>2.5启用CecOS-CaaS容器云</h3><p><span class="label label-primary"><br>  默认没有启用 CecOS CaaS容器云 服务，需要手动启动。<br>  注意：要启用CecOS CaaS容器云服务，必须要先启用和启动docker服务！！<br>  开机自动启动 CecOS CaaS容器云 服务<br>  systemctl enable cecos-caas.service<br>  启动 CecOS CaaS容器云 服务<br>  systemctl start cecos-caas.service<br>  停止 CecOS CaaS容器云 服务<br>  systemctl stop cecos-caas.service<br>  禁止 CecOS CaaS容器云 服务开机启动<br>  systemctl disable cecos-caas.service</span></p><h3 id="2-6启用和退出Docker集群"><a href="#2-6启用和退出Docker集群" class="headerlink" title="2.6启用和退出Docker集群"></a>2.6启用和退出Docker集群</h3><p><span class="label label-primary"><br>  初始化并加入一个 Docker Swarm集群<br>  docker swarm init</p><h1 id="查看集群节点状态"><a href="#查看集群节点状态" class="headerlink" title="查看集群节点状态"></a>查看集群节点状态</h1><p>  docker node ls</p><h1 id="退出Docker-Swarm集群"><a href="#退出Docker-Swarm集群" class="headerlink" title="退出Docker Swarm集群"></a>退出Docker Swarm集群</h1><p>  docker swarm leave —force<br>&lt;/span&gt;</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/">Debian-Pi-Aarch64 ★ 全新树莓派64位系统2.0正式版 - 说明文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://raspberrypi.club/">树莓派俱乐部</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://shumeipai.nxez.com/">树莓派实验</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>raspberry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raspberry</tag>
      
      <tag>基地2.0</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>衣领标签的亲人化设计</title>
    <link href="/2020/06/17/%E6%9D%82%E8%B0%88/%E3%80%90%E5%88%9B%E6%96%B0%E6%96%B9%E6%B3%95%E4%BD%9C%E4%B8%9A%E3%80%91%E8%A1%A3%E9%A2%86%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BA%B2%E4%BA%BA%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/06/17/%E6%9D%82%E8%B0%88/%E3%80%90%E5%88%9B%E6%96%B0%E6%96%B9%E6%B3%95%E4%BD%9C%E4%B8%9A%E3%80%91%E8%A1%A3%E9%A2%86%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BA%B2%E4%BA%BA%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创意由来（主要介绍如何发现问题？当前存在的问题是什么？）"><a href="#1-创意由来（主要介绍如何发现问题？当前存在的问题是什么？）" class="headerlink" title="1. 创意由来（主要介绍如何发现问题？当前存在的问题是什么？）"></a>1. 创意由来（主要介绍如何发现问题？当前存在的问题是什么？）</h2><p><strong>衣服内的“领标”总会摩擦脖子，甚至对脖子造成伤害。最近在换季，收拾自己冬天的衣服时发现一些衣服里面的领子处总是有我大大小小的裁剪疤痕，尤其是一些贴身衣服，衣服面料很好，可是它的“领标”总是把人脖子磨得难受。所以每次买了新衣服第一件事就是不得不去拆领标。有些人可能皮肤比较敏感，有人会因此而过敏，更有甚者“领标”会对造成磨伤。</strong></p><h2 id="2-创新设计介绍"><a href="#2-创新设计介绍" class="headerlink" title="2. 创新设计介绍"></a>2. 创新设计介绍</h2><h3 id="2-1-产品设计图"><a href="#2-1-产品设计图" class="headerlink" title="2.1    产品设计图"></a>2.1    产品设计图</h3><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/aGaJqU.png" alt=""></p><p>特点：</p><ol><li>采用舒适不扎人的纯棉材质的标签。</li><li>更换标签放置位置。</li><li>固定简单，易于拆掉。</li><li>将“领标”信息个性化处理。<br><em>（注：图中“领标”颜色只是为了易于识别。）</em></li></ol><h3 id="2-2-产品在创新改进前后的技术指标参数对比（参考39个功能参数，结合产品特点选取重点参数进行介绍）"><a href="#2-2-产品在创新改进前后的技术指标参数对比（参考39个功能参数，结合产品特点选取重点参数进行介绍）" class="headerlink" title="2.2 产品在创新改进前后的技术指标参数对比（参考39个功能参数，结合产品特点选取重点参数进行介绍）"></a>2.2 产品在创新改进前后的技术指标参数对比（参考39个功能参数，结合产品特点选取重点参数进行介绍）</h3><table><thead><tr>  <th>功能参数</th>  <th>创新改进前</th>  <th>创新改进后</th></tr></thead><tbody><tr>  <td>盈利</td>  <td>-</td>  <td>+</td></tr><tr>  <td>物体产生的有害因素</td>  <td>+</td>  <td>-</td></tr><tr>  <td>时间损失</td>  <td>+</td>  <td>-</td></tr><tr>  <td>稳定性</td>  <td>+</td>  <td>-</td></tr><tr>  <td>操作流程的方便性</td>  <td>-</td>  <td>+</td></tr><tr>  <td>可维修性</td>  <td>-</td>  <td>+</td></tr><tr>  <td>生产率</td>  <td>+</td>  <td>-</td></tr></tbody></table><ul><li>盈利情况：改进前厂家为了节约成本，使用了低廉材质的标签，但是改进后采用柔软纯棉标签，厂家会因此提高进货价，按照“盈利=原价-进货价”来算，商家盈利是减少了。</li><li>物体产生的有害因素：化纤或者丝毛一类低廉材料的“领标”可能会对过敏性皮肤产生过敏的现象，采用纯棉优质标签相对来说不会产生此类过敏。</li><li>时间损失：由于“领标固定在衣服外面，所以每次固定前都不需要进行内翻，再加上只是简单固定，所以制造过程中延续的时间就断了，时间损失也就少了。</li><li>稳定性：当然由于“领标”的简单固定，不可避免的降低了“领标”与衣服之间的稳定性。</li><li>操作流程的方便性：由于“领标”直接放置在衣服外面，再加上之前提到的简单固定，所以相较于改进前来说是提高了操作流程的方便性。</li><li>可维修性：由于改造前“领标”均是与衣领一起固定，若在裁剪“领标”时，极易容易弄坏衣服主体，不易维修，而在创新改造后，由于“领标”只是简单固定在衣服外面，极易拆卸安装，可维修性强。</li><li>生产率：改进前由于“领标”需要全面固定在衣服上，而改进后只需要简单固定，所以相对来说时间成本减少了，于时间成本降低，所以生产率也相应得到提高。</li></ul><h3 id="2-3-从以下TRIZ分析工具中至少选取3种进行问题分析，得出解决方案。（要体现出完整的分析步骤）"><a href="#2-3-从以下TRIZ分析工具中至少选取3种进行问题分析，得出解决方案。（要体现出完整的分析步骤）" class="headerlink" title="2.3 从以下TRIZ分析工具中至少选取3种进行问题分析，得出解决方案。（要体现出完整的分析步骤）"></a>2.3 从以下TRIZ分析工具中至少选取3种进行问题分析，得出解决方案。（要体现出完整的分析步骤）</h3><h4 id="（1）功能分析"><a href="#（1）功能分析" class="headerlink" title="（1）功能分析"></a>（1）功能分析</h4><h4 id="（2）因果链分析"><a href="#（2）因果链分析" class="headerlink" title="（2）因果链分析"></a>（2）因果链分析</h4><p>法律规定：按照我国《商标法》规定：”商标的使用人应对其使用的商标质量负责。”如果消费者购买了质量低劣的服装，可以根据商标所标识内容，向消费者协会投诉，这就是法律的监督作用。服装商标信誉的高低是和服装质量紧密地联系在一起的。名牌商标的产生是服装生产企业长年坚持自身质量监督的结果。但是法律中并未对领标的形式进行规定，设计者可以采用外部商标化，从而减少“领标”与身体的不必要接触，从而减少对人体不必要的伤害。<br>材质选择：制造商为赢得最大利益化，为降低成本采用了低廉材质，但是制造商可以从长远考虑，做好细节，从而获得大批信赖忠实用户来占有市场。<br>美观、固定方式：设计者可以立足长远，将商标设计的个性化，可以直接外穿，或者做成外部装饰挂件，方便拆卸，既能充分体现领标的作用，又能做到宣传作用。<br>指导消费与品牌宣传：产品可以立足未来，从细节出发，令用户满意，不断扩大忠实用户，提高产品市场好评，从而达到市场占有最大化，实现市场的全面覆盖。</p><h4 id="（3）冲突解决理论（技术冲突或物理冲突）"><a href="#（3）冲突解决理论（技术冲突或物理冲突）" class="headerlink" title="（3）冲突解决理论（技术冲突或物理冲突）"></a>（3）冲突解决理论（技术冲突或物理冲突）</h4><p>改进前后由于改进前厂家为了节约成本，使用了低廉材质的标签，但是改进后采用柔软纯棉标签，厂家会因此提高进货价，按照“盈利=原价-进货价”来算，商家盈利是减少了。但从长远考虑，可以凭此获得市场与人们的信赖，从而获得更大的利益。由于“领标”直接放置在衣服外面，再加上之前提到的简单固定，所以相较于改进前来说是提高了操作流程的方便性。改进后只需要简单固定，所以相对来说时间成本减少了，于时间成本降低，所以生产率也相应得到提高。同时由于“领标固定在衣服外面，所以每次固定前都不需要进行内翻，再加上只是简单固定，所以制造过程中延续的时间就断了，时间损失也就少了。由于改造前“领标”均是与衣领一起固定，若在裁剪“领标”时，极易容易弄坏衣服主体，不易维修，而在创新改造后，由于“领标”只是简单固定在衣服外面，极易拆卸安装，可维修性强。但是同样由于“领标”的简单固定，不可避免的降低了“领标”与衣服之间的稳定性。</p><h4 id="（4）裁剪法"><a href="#（4）裁剪法" class="headerlink" title="（4）裁剪法"></a>（4）裁剪法</h4><p>可以将领标做成衣服的装饰，从而减少装饰部分不必要的消耗。一般来说，消费者乐于购买质量好、商标知名度高的服装。在市场上享有信誉的服装商标，可以扩大商标的影响力，促进消费者购买，从而起到引导消费的作用，广告是企业用以宣传产品质量的有效方法，而广告宣传又是与服装商标有机地联系在一起的。通过各种媒体的宣传，让消费者认识该商标，以达到扩大销售本企业服装的目的。这就要求设计者可以立足长远，将商标设计的个性化，可以直接外穿，或者做成外部装饰挂件，方便拆卸，既能充分体现领标的作用，又能做到宣传作用。</p><h4 id="（5）物质-场分析"><a href="#（5）物质-场分析" class="headerlink" title="（5）物质-场分析"></a>（5）物质-场分析</h4><h2 id="3-创新设计总结展望（当前设计已完成哪些方面的改进？目前仍存在什么不足之处，有何解决建议？）"><a href="#3-创新设计总结展望（当前设计已完成哪些方面的改进？目前仍存在什么不足之处，有何解决建议？）" class="headerlink" title="3. 创新设计总结展望（当前设计已完成哪些方面的改进？目前仍存在什么不足之处，有何解决建议？）"></a>3. 创新设计总结展望（当前设计已完成哪些方面的改进？目前仍存在什么不足之处，有何解决建议？）</h2><p>已完成改进：采用柔软材质，从根源上解决衣领处“领标”过敏的发生；将“领标”外置，从而减少与人体不必要的接触，从路径上断绝过敏的发生；将“领标”简单固定，方便买家拆卸，满足大部分人的需求；领标固定的折中方案，做成外置装饰或者图标，不仅可以解决过敏现象，反而会因为细节处理，获得大批信赖者，在市场上享有信誉的服装商标，可以扩大商标的影响力，促进消费者购买，从而起到引导消费的作用。<br>不足之处：如果将其做成外置装饰，“领标”就不再只是衣服的一个附属品可有可无，成为衣服主题的一部分，如何确保衣服的稳固性，保证衣服不易损坏，仍需要设计者解决。<br>建议：直接将“领标”内容以个性化形式印刷或者缝制在衣服本体上，从而解决“领标”与衣服本体的易脱离性。也可以分别从有“领标”和无“领标”角度分别设计衣服，使衣服既能在原本状态下符合审美，又能在脱离“领标”装饰的情况下得到大家的认可。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创新方法</tag>
      
      <tag>期末</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于校内超市运营情况的调查报告</title>
    <link href="/2020/06/16/%E6%9D%82%E8%B0%88/%E3%80%90%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%88%86%E6%9E%90%E3%80%91%E5%85%B3%E4%BA%8E%E6%A0%A1%E5%86%85%E8%B6%85%E5%B8%82%E8%BF%90%E8%90%A5%E6%83%85%E5%86%B5%E7%9A%84%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A/"/>
    <url>/2020/06/16/%E6%9D%82%E8%B0%88/%E3%80%90%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%88%86%E6%9E%90%E3%80%91%E5%85%B3%E4%BA%8E%E6%A0%A1%E5%86%85%E8%B6%85%E5%B8%82%E8%BF%90%E8%90%A5%E6%83%85%E5%86%B5%E7%9A%84%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h4 id="调查目的："><a href="#调查目的：" class="headerlink" title="调查目的："></a>调查目的：</h4><p>结合校区实际情况，分析校内超市经营现状,为超市的营销策略提供依据。</p><h4 id="调查内容："><a href="#调查内容：" class="headerlink" title="调查内容："></a>调查内容：</h4><ol><li>了解学生消费水平;</li><li>消费者对商品价格的看法;</li><li>超市内部环境对超市经营的影响;</li><li>超市的服务水平如何;</li><li>商品陈列对人们购物的影响;</li><li>超市的内部管理机制是否合理完善。</li></ol><h4 id="抽样方法："><a href="#抽样方法：" class="headerlink" title="抽样方法："></a>抽样方法：</h4><p>随机抽样</p><h4 id="调查方法："><a href="#调查方法：" class="headerlink" title="调查方法："></a>调查方法：</h4><p>问卷调查 实地调查</p><h4 id="一-基本情况"><a href="#一-基本情况" class="headerlink" title="一  基本情况"></a>一  基本情况</h4><p>校园超市面向广大高校师生，是位于高校内部的中小型卖场。高校内积聚了广大的消费群体对于食品、日常百货以及学习用品他们具有较强的购买力。咱们校区内共有4个超市，南北苑各有2个。北苑2个超市一个主要卖食品，另一个主要卖生活用品，两家基本不存在竞争，分工明细。南苑2个超市存在共同售卖商品，竞争相对激烈。</p><h4 id="二-调查内容分析"><a href="#二-调查内容分析" class="headerlink" title="二   调查内容分析"></a>二   调查内容分析</h4><h5 id="1-学生消费水平"><a href="#1-学生消费水平" class="headerlink" title="1.学生消费水平"></a>1.学生消费水平</h5><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/951.jpg" alt=""></p><p>△大学生超前消费支出用途比例图（中国青年网）</p><p><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/969.jpg" alt=""></p><p>△大学生每月超前消费平均额度比例图（中国青年网）<br>《大学生蓝皮书：中国大学生生活形态研究报告（2013）》数据显示：2013年中国大学生人均月消费支出945.6元，人均全年消费总额达到11347元，年消费总额超过3400亿，超过全国城镇居民人均可支配收入水平的50%。况且现在是2020年，什么也无法阻挡大学生“买买买”。H3中国新富市场与媒体研究数据报告显示：负债消费的大学生比例超过10.5%。双十一更是不能缺少大学生。一如既往，高校一直是双十一购买生力军。<br>由此我们可以看到虽然大学生消费受制于经济的独立性，对父母的依赖度高，但是随着居民可支配收入的大幅提高以及大学生越来越多的其它收入来源途径，如兼职、创业等，大学生的消费能力将会越来越高，大学生消费市场将会越来越大。</p><h5 id="2-消费者对商品价格的看法"><a href="#2-消费者对商品价格的看法" class="headerlink" title="2.消费者对商品价格的看法"></a>2.消费者对商品价格的看法</h5><p>通过问卷调查“大学生喜欢的促销方式”发现，相较于打折、赠品，80.22%的同学选择了直接降价，由此可见大学生最喜欢的促销方式是直接降价，用降价的方式增加产品销售往往会立竿见影。<br><img src="https://gitee.com/bai_xiao_fei/picture/raw/master/PicGo/906.jpg" alt=""><br>通过中国青年网校园通讯社针对大学生“双十一”网购消费理念调查来研究大学生对商品价格的看法。结果显示：1.80%的同学选择分期付款，32.82%的同学选择该买就买，但还有大多数剩下的同学选择量力而行。由此可见，针对以上对当代年轻人的消费水平分析，大学生没有经济来源，所以在购买商品的时候大部分的大学生还是比较考虑价格这个指标。</p><h5 id="3-超市内部环境对超市经营的影响"><a href="#3-超市内部环境对超市经营的影响" class="headerlink" title="3.超市内部环境对超市经营的影响"></a>3.超市内部环境对超市经营的影响</h5><p>虽然说超市提供着学生们平时的众多需求产品，属高流量地段，垄断着校内的消费；但是目前超市内部还存在一些问题，例如超市体较小，可供商品较为有限，限制商品多元化发展;尽管时货渠道较，但商品进货价普遍较高，为挽回成本及获得利润，超市不得不把商品价格提高，致使师生们形成一种意识:实习超市价格龚断。因而超市或多或少地留给人们“不好”的形象。</p><h5 id="4-超市内服务水平"><a href="#4-超市内服务水平" class="headerlink" title="4.超市内服务水平"></a>4.超市内服务水平</h5><p>在下课期间或者饭点，因客流量过大，而服务窗口较少，导致客人等待时间过长，流失大量消费者，并引起消费对超市服务水平的质疑。超市现在在众师生心目中的形象有缺损，对本超市服务水平、 商品价格和质量有所质疑。</p><h5 id="5-商品陈列对人们购物的影响"><a href="#5-商品陈列对人们购物的影响" class="headerlink" title="5.商品陈列对人们购物的影响"></a>5.商品陈列对人们购物的影响</h5><p>虽然学校超市存在简单的商品分区，但是由于正如前面提到的超市体较小，可供商品较为有限，限制商品多元化发展，在商品摆列一般很不注重，只能尽最大程度塞满，充分利用可用空间。</p><h5 id="6-超市的内部管理机制是否合理完善。"><a href="#6-超市的内部管理机制是否合理完善。" class="headerlink" title="6.超市的内部管理机制是否合理完善。"></a>6.超市的内部管理机制是否合理完善。</h5><p>目前学校内超市都是家族企业，即工作管理人员都是非校内学生，因此很难融入到同学们，不能更好地接受意见和建议，很难发现自身的缺点。</p><h4 id="三-建议"><a href="#三-建议" class="headerlink" title="三 建议"></a>三 建议</h4><ol><li>消费者是超市的命脉，超市的主要消费群体——大学生是追求流行的一代人，超市也要跟得上时代的潮流，现在流行什么商品，超市就该迅速的进货，以满足大学生的要求。</li><li>对超市内商品进行规范化分区，也可根据商品之间的相关性进行放置，以提高用户的满意度。</li><li>每年新生的到来，对超市而言是一个大市场，每年九月的上旬的销售额与平时一个月的销售额相比增长甚多。同时这段时间也是实习超市塑造良好形象的机会，在服务及商品价格价优惠方面多下点工夫。</li><li>雇佣一些校内在校学生。超市里的工作人员大部分为在校学生，他们思维敏捷、创新能力强，且大多是刚接触这项工作，工作和服务热情高涨，是超市里一股新鲜的血液。</li><li>学校超市可以与学校社团组织进行合作，积极在校内推广产品，从而拉近与学生之间的关系。</li></ol><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h3><p>高校市场是企业一个重要的、具有战略意义的市场，要想将超市做大做好，应该深入调查、详细分析高校大学生的消费心理和行为，以大学生的品位、价值取向为依据，结合超市自身条件，塑造良好形象，不断创新服务，制定灵活、务实、多样的”市场营销策略，开拓“高校市场”这块热土，满足大学生消费需求，从而实现持续稳定地发展。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期末</tag>
      
      <tag>市场营销分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文档</title>
    <link href="/2019/11/11/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <url>/2019/11/11/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>正文</p><p class="note note-primary">标签</p><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span></span>标签<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></code></pre><p><span class="label label-primary">Label</span></p><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span></span>Label<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></code></pre>            <input type="checkbox" disabled checked="checked">text          <pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;</code></pre><p><a class="btn" href="url" title="title">text</a></p><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span>text<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></code></pre><p>$\lim_{x \to \infty} \frac{1}{n(n+1)}$</p><p>$\Gamma$</p><pre><code class="hljs markdown">\lim<span class="hljs-emphasis">_&#123;x \to \infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><pre><code class="hljs markdown">[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span></code></pre><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
      <category>Docker</category>
      
      <category>git</category>
      
      <category>python</category>
      
      <category>raspberry</category>
      
      <category>life</category>
      
      <category>数学建模</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
